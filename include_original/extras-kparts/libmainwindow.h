#pragma once
#ifndef SRC_EXTRAS_KPARTSC_LIBMAINWINDOW_H
#define SRC_EXTRAS_KPARTSC_LIBMAINWINDOW_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
typedef KParts::MainWindow KParts__MainWindow;
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KParts__Part)
typedef KParts::Part KParts__Part;
#endif
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KParts__PartBase)
typedef KParts::PartBase KParts__PartBase;
#endif
#else
typedef struct KActionCollection KActionCollection;
typedef struct KConfig KConfig;
typedef struct KConfigGroup KConfigGroup;
typedef struct KMainWindow KMainWindow;
typedef struct KParts__MainWindow KParts__MainWindow;
typedef struct KParts__Part KParts__Part;
typedef struct KParts__PartBase KParts__PartBase;
typedef struct KXMLGUIBuilder KXMLGUIBuilder;
typedef struct KXMLGUIClient KXMLGUIClient;
typedef struct KXMLGUIFactory KXMLGUIFactory;
typedef struct KXmlGuiWindow KXmlGuiWindow;
typedef struct QAction QAction;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDomDocument QDomDocument;
typedef struct QDomElement QDomElement;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMainWindow QMainWindow;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KParts__MainWindow* KParts__MainWindow_new(QWidget* parent);
KParts__MainWindow* KParts__MainWindow_new2();
KParts__MainWindow* KParts__MainWindow_new3(QWidget* parent, int f);
QMetaObject* KParts__MainWindow_MetaObject(const KParts__MainWindow* self);
void* KParts__MainWindow_Metacast(KParts__MainWindow* self, const char* param1);
int KParts__MainWindow_Metacall(KParts__MainWindow* self, int param1, int param2, void** param3);
libqt_string KParts__MainWindow_Tr(const char* s);
void KParts__MainWindow_ConfigureToolbars(KParts__MainWindow* self);
void KParts__MainWindow_SlotSetStatusBarText(KParts__MainWindow* self, const libqt_string param1);
void KParts__MainWindow_SaveNewToolbarConfig(KParts__MainWindow* self);
void KParts__MainWindow_CreateShellGUI(KParts__MainWindow* self, bool create);
libqt_string KParts__MainWindow_Tr2(const char* s, const char* c);
libqt_string KParts__MainWindow_Tr3(const char* s, const char* c, int n);
void KParts__MainWindow_OnMetacall(KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseMetacall(KParts__MainWindow* self, int param1, int param2, void** param3);
void KParts__MainWindow_OnConfigureToolbars(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseConfigureToolbars(KParts__MainWindow* self);
void KParts__MainWindow_OnSlotSetStatusBarText(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSlotSetStatusBarText(KParts__MainWindow* self, const libqt_string param1);
void KParts__MainWindow_OnSaveNewToolbarConfig(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSaveNewToolbarConfig(KParts__MainWindow* self);
void KParts__MainWindow_OnCreateShellGUI(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCreateShellGUI(KParts__MainWindow* self, bool create);
KXMLGUIFactory* KParts__MainWindow_GuiFactory(KParts__MainWindow* self);
void KParts__MainWindow_OnGuiFactory(KParts__MainWindow* self, intptr_t slot);
KXMLGUIFactory* KParts__MainWindow_QBaseGuiFactory(KParts__MainWindow* self);
void KParts__MainWindow_ApplyMainWindowSettings(KParts__MainWindow* self, const KConfigGroup* config);
void KParts__MainWindow_OnApplyMainWindowSettings(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseApplyMainWindowSettings(KParts__MainWindow* self, const KConfigGroup* config);
void KParts__MainWindow_SlotStateChanged(KParts__MainWindow* self, const libqt_string newstate);
void KParts__MainWindow_OnSlotStateChanged(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSlotStateChanged(KParts__MainWindow* self, const libqt_string newstate);
bool KParts__MainWindow_Event(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_OnEvent(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseEvent(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_SetCaption(KParts__MainWindow* self, const libqt_string caption);
void KParts__MainWindow_OnSetCaption(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetCaption(KParts__MainWindow* self, const libqt_string caption);
void KParts__MainWindow_SetPlainCaption(KParts__MainWindow* self, const libqt_string caption);
void KParts__MainWindow_OnSetPlainCaption(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetPlainCaption(KParts__MainWindow* self, const libqt_string caption);
void KParts__MainWindow_KeyPressEvent(KParts__MainWindow* self, QKeyEvent* keyEvent);
void KParts__MainWindow_OnKeyPressEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseKeyPressEvent(KParts__MainWindow* self, QKeyEvent* keyEvent);
void KParts__MainWindow_CloseEvent(KParts__MainWindow* self, QCloseEvent* param1);
void KParts__MainWindow_OnCloseEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCloseEvent(KParts__MainWindow* self, QCloseEvent* param1);
bool KParts__MainWindow_QueryClose(KParts__MainWindow* self);
void KParts__MainWindow_OnQueryClose(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseQueryClose(KParts__MainWindow* self);
void KParts__MainWindow_SaveProperties(KParts__MainWindow* self, KConfigGroup* param1);
void KParts__MainWindow_OnSaveProperties(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSaveProperties(KParts__MainWindow* self, KConfigGroup* param1);
void KParts__MainWindow_ReadProperties(KParts__MainWindow* self, const KConfigGroup* param1);
void KParts__MainWindow_OnReadProperties(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseReadProperties(KParts__MainWindow* self, const KConfigGroup* param1);
void KParts__MainWindow_SaveGlobalProperties(KParts__MainWindow* self, KConfig* sessionConfig);
void KParts__MainWindow_OnSaveGlobalProperties(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSaveGlobalProperties(KParts__MainWindow* self, KConfig* sessionConfig);
void KParts__MainWindow_ReadGlobalProperties(KParts__MainWindow* self, KConfig* sessionConfig);
void KParts__MainWindow_OnReadGlobalProperties(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseReadGlobalProperties(KParts__MainWindow* self, KConfig* sessionConfig);
QMenu* KParts__MainWindow_CreatePopupMenu(KParts__MainWindow* self);
void KParts__MainWindow_OnCreatePopupMenu(KParts__MainWindow* self, intptr_t slot);
QMenu* KParts__MainWindow_QBaseCreatePopupMenu(KParts__MainWindow* self);
void KParts__MainWindow_ContextMenuEvent(KParts__MainWindow* self, QContextMenuEvent* event);
void KParts__MainWindow_OnContextMenuEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseContextMenuEvent(KParts__MainWindow* self, QContextMenuEvent* event);
int KParts__MainWindow_DevType(const KParts__MainWindow* self);
void KParts__MainWindow_OnDevType(const KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseDevType(const KParts__MainWindow* self);
void KParts__MainWindow_SetVisible(KParts__MainWindow* self, bool visible);
void KParts__MainWindow_OnSetVisible(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetVisible(KParts__MainWindow* self, bool visible);
QSize* KParts__MainWindow_SizeHint(const KParts__MainWindow* self);
void KParts__MainWindow_OnSizeHint(const KParts__MainWindow* self, intptr_t slot);
QSize* KParts__MainWindow_QBaseSizeHint(const KParts__MainWindow* self);
QSize* KParts__MainWindow_MinimumSizeHint(const KParts__MainWindow* self);
void KParts__MainWindow_OnMinimumSizeHint(const KParts__MainWindow* self, intptr_t slot);
QSize* KParts__MainWindow_QBaseMinimumSizeHint(const KParts__MainWindow* self);
int KParts__MainWindow_HeightForWidth(const KParts__MainWindow* self, int param1);
void KParts__MainWindow_OnHeightForWidth(const KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseHeightForWidth(const KParts__MainWindow* self, int param1);
bool KParts__MainWindow_HasHeightForWidth(const KParts__MainWindow* self);
void KParts__MainWindow_OnHasHeightForWidth(const KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseHasHeightForWidth(const KParts__MainWindow* self);
QPaintEngine* KParts__MainWindow_PaintEngine(const KParts__MainWindow* self);
void KParts__MainWindow_OnPaintEngine(const KParts__MainWindow* self, intptr_t slot);
QPaintEngine* KParts__MainWindow_QBasePaintEngine(const KParts__MainWindow* self);
void KParts__MainWindow_MousePressEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_OnMousePressEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseMousePressEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_MouseReleaseEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_OnMouseReleaseEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseMouseReleaseEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_MouseDoubleClickEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_OnMouseDoubleClickEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseMouseDoubleClickEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_MouseMoveEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_OnMouseMoveEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseMouseMoveEvent(KParts__MainWindow* self, QMouseEvent* event);
void KParts__MainWindow_WheelEvent(KParts__MainWindow* self, QWheelEvent* event);
void KParts__MainWindow_OnWheelEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseWheelEvent(KParts__MainWindow* self, QWheelEvent* event);
void KParts__MainWindow_KeyReleaseEvent(KParts__MainWindow* self, QKeyEvent* event);
void KParts__MainWindow_OnKeyReleaseEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseKeyReleaseEvent(KParts__MainWindow* self, QKeyEvent* event);
void KParts__MainWindow_FocusInEvent(KParts__MainWindow* self, QFocusEvent* event);
void KParts__MainWindow_OnFocusInEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseFocusInEvent(KParts__MainWindow* self, QFocusEvent* event);
void KParts__MainWindow_FocusOutEvent(KParts__MainWindow* self, QFocusEvent* event);
void KParts__MainWindow_OnFocusOutEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseFocusOutEvent(KParts__MainWindow* self, QFocusEvent* event);
void KParts__MainWindow_EnterEvent(KParts__MainWindow* self, QEnterEvent* event);
void KParts__MainWindow_OnEnterEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseEnterEvent(KParts__MainWindow* self, QEnterEvent* event);
void KParts__MainWindow_LeaveEvent(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_OnLeaveEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseLeaveEvent(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_PaintEvent(KParts__MainWindow* self, QPaintEvent* event);
void KParts__MainWindow_OnPaintEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBasePaintEvent(KParts__MainWindow* self, QPaintEvent* event);
void KParts__MainWindow_MoveEvent(KParts__MainWindow* self, QMoveEvent* event);
void KParts__MainWindow_OnMoveEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseMoveEvent(KParts__MainWindow* self, QMoveEvent* event);
void KParts__MainWindow_ResizeEvent(KParts__MainWindow* self, QResizeEvent* event);
void KParts__MainWindow_OnResizeEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseResizeEvent(KParts__MainWindow* self, QResizeEvent* event);
void KParts__MainWindow_TabletEvent(KParts__MainWindow* self, QTabletEvent* event);
void KParts__MainWindow_OnTabletEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseTabletEvent(KParts__MainWindow* self, QTabletEvent* event);
void KParts__MainWindow_ActionEvent(KParts__MainWindow* self, QActionEvent* event);
void KParts__MainWindow_OnActionEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseActionEvent(KParts__MainWindow* self, QActionEvent* event);
void KParts__MainWindow_DragEnterEvent(KParts__MainWindow* self, QDragEnterEvent* event);
void KParts__MainWindow_OnDragEnterEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDragEnterEvent(KParts__MainWindow* self, QDragEnterEvent* event);
void KParts__MainWindow_DragMoveEvent(KParts__MainWindow* self, QDragMoveEvent* event);
void KParts__MainWindow_OnDragMoveEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDragMoveEvent(KParts__MainWindow* self, QDragMoveEvent* event);
void KParts__MainWindow_DragLeaveEvent(KParts__MainWindow* self, QDragLeaveEvent* event);
void KParts__MainWindow_OnDragLeaveEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDragLeaveEvent(KParts__MainWindow* self, QDragLeaveEvent* event);
void KParts__MainWindow_DropEvent(KParts__MainWindow* self, QDropEvent* event);
void KParts__MainWindow_OnDropEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDropEvent(KParts__MainWindow* self, QDropEvent* event);
void KParts__MainWindow_ShowEvent(KParts__MainWindow* self, QShowEvent* event);
void KParts__MainWindow_OnShowEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseShowEvent(KParts__MainWindow* self, QShowEvent* event);
void KParts__MainWindow_HideEvent(KParts__MainWindow* self, QHideEvent* event);
void KParts__MainWindow_OnHideEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseHideEvent(KParts__MainWindow* self, QHideEvent* event);
bool KParts__MainWindow_NativeEvent(KParts__MainWindow* self, const libqt_string eventType, void* message, intptr_t* result);
void KParts__MainWindow_OnNativeEvent(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseNativeEvent(KParts__MainWindow* self, const libqt_string eventType, void* message, intptr_t* result);
void KParts__MainWindow_ChangeEvent(KParts__MainWindow* self, QEvent* param1);
void KParts__MainWindow_OnChangeEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseChangeEvent(KParts__MainWindow* self, QEvent* param1);
int KParts__MainWindow_Metric(const KParts__MainWindow* self, int param1);
void KParts__MainWindow_OnMetric(const KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseMetric(const KParts__MainWindow* self, int param1);
void KParts__MainWindow_InitPainter(const KParts__MainWindow* self, QPainter* painter);
void KParts__MainWindow_OnInitPainter(const KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseInitPainter(const KParts__MainWindow* self, QPainter* painter);
QPaintDevice* KParts__MainWindow_Redirected(const KParts__MainWindow* self, QPoint* offset);
void KParts__MainWindow_OnRedirected(const KParts__MainWindow* self, intptr_t slot);
QPaintDevice* KParts__MainWindow_QBaseRedirected(const KParts__MainWindow* self, QPoint* offset);
QPainter* KParts__MainWindow_SharedPainter(const KParts__MainWindow* self);
void KParts__MainWindow_OnSharedPainter(const KParts__MainWindow* self, intptr_t slot);
QPainter* KParts__MainWindow_QBaseSharedPainter(const KParts__MainWindow* self);
void KParts__MainWindow_InputMethodEvent(KParts__MainWindow* self, QInputMethodEvent* param1);
void KParts__MainWindow_OnInputMethodEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseInputMethodEvent(KParts__MainWindow* self, QInputMethodEvent* param1);
QVariant* KParts__MainWindow_InputMethodQuery(const KParts__MainWindow* self, int param1);
void KParts__MainWindow_OnInputMethodQuery(const KParts__MainWindow* self, intptr_t slot);
QVariant* KParts__MainWindow_QBaseInputMethodQuery(const KParts__MainWindow* self, int param1);
bool KParts__MainWindow_FocusNextPrevChild(KParts__MainWindow* self, bool next);
void KParts__MainWindow_OnFocusNextPrevChild(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseFocusNextPrevChild(KParts__MainWindow* self, bool next);
bool KParts__MainWindow_EventFilter(KParts__MainWindow* self, QObject* watched, QEvent* event);
void KParts__MainWindow_OnEventFilter(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseEventFilter(KParts__MainWindow* self, QObject* watched, QEvent* event);
void KParts__MainWindow_TimerEvent(KParts__MainWindow* self, QTimerEvent* event);
void KParts__MainWindow_OnTimerEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseTimerEvent(KParts__MainWindow* self, QTimerEvent* event);
void KParts__MainWindow_ChildEvent(KParts__MainWindow* self, QChildEvent* event);
void KParts__MainWindow_OnChildEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseChildEvent(KParts__MainWindow* self, QChildEvent* event);
void KParts__MainWindow_CustomEvent(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_OnCustomEvent(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCustomEvent(KParts__MainWindow* self, QEvent* event);
void KParts__MainWindow_ConnectNotify(KParts__MainWindow* self, const QMetaMethod* signal);
void KParts__MainWindow_OnConnectNotify(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseConnectNotify(KParts__MainWindow* self, const QMetaMethod* signal);
void KParts__MainWindow_DisconnectNotify(KParts__MainWindow* self, const QMetaMethod* signal);
void KParts__MainWindow_OnDisconnectNotify(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDisconnectNotify(KParts__MainWindow* self, const QMetaMethod* signal);
libqt_list /* of libqt_string */ KParts__MainWindow_ContainerTags(const KParts__MainWindow* self);
void KParts__MainWindow_OnContainerTags(const KParts__MainWindow* self, intptr_t slot);
libqt_list /* of libqt_string */ KParts__MainWindow_QBaseContainerTags(const KParts__MainWindow* self);
QWidget* KParts__MainWindow_CreateContainer(KParts__MainWindow* self, QWidget* parent, int index, const QDomElement* element, QAction** containerAction);
void KParts__MainWindow_OnCreateContainer(KParts__MainWindow* self, intptr_t slot);
QWidget* KParts__MainWindow_QBaseCreateContainer(KParts__MainWindow* self, QWidget* parent, int index, const QDomElement* element, QAction** containerAction);
void KParts__MainWindow_RemoveContainer(KParts__MainWindow* self, QWidget* container, QWidget* parent, QDomElement* element, QAction* containerAction);
void KParts__MainWindow_OnRemoveContainer(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseRemoveContainer(KParts__MainWindow* self, QWidget* container, QWidget* parent, QDomElement* element, QAction* containerAction);
libqt_list /* of libqt_string */ KParts__MainWindow_CustomTags(const KParts__MainWindow* self);
void KParts__MainWindow_OnCustomTags(const KParts__MainWindow* self, intptr_t slot);
libqt_list /* of libqt_string */ KParts__MainWindow_QBaseCustomTags(const KParts__MainWindow* self);
QAction* KParts__MainWindow_CreateCustomElement(KParts__MainWindow* self, QWidget* parent, int index, const QDomElement* element);
void KParts__MainWindow_OnCreateCustomElement(KParts__MainWindow* self, intptr_t slot);
QAction* KParts__MainWindow_QBaseCreateCustomElement(KParts__MainWindow* self, QWidget* parent, int index, const QDomElement* element);
void KParts__MainWindow_FinalizeGUI(KParts__MainWindow* self, KXMLGUIClient* client);
void KParts__MainWindow_OnFinalizeGUI(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseFinalizeGUI(KParts__MainWindow* self, KXMLGUIClient* client);
QAction* KParts__MainWindow_Action2(const KParts__MainWindow* self, const QDomElement* element);
void KParts__MainWindow_OnAction2(const KParts__MainWindow* self, intptr_t slot);
QAction* KParts__MainWindow_QBaseAction2(const KParts__MainWindow* self, const QDomElement* element);
KActionCollection* KParts__MainWindow_ActionCollection(const KParts__MainWindow* self);
void KParts__MainWindow_OnActionCollection(const KParts__MainWindow* self, intptr_t slot);
KActionCollection* KParts__MainWindow_QBaseActionCollection(const KParts__MainWindow* self);
libqt_string KParts__MainWindow_ComponentName(const KParts__MainWindow* self);
void KParts__MainWindow_OnComponentName(const KParts__MainWindow* self, intptr_t slot);
libqt_string KParts__MainWindow_QBaseComponentName(const KParts__MainWindow* self);
QDomDocument* KParts__MainWindow_DomDocument(const KParts__MainWindow* self);
void KParts__MainWindow_OnDomDocument(const KParts__MainWindow* self, intptr_t slot);
QDomDocument* KParts__MainWindow_QBaseDomDocument(const KParts__MainWindow* self);
libqt_string KParts__MainWindow_XmlFile(const KParts__MainWindow* self);
void KParts__MainWindow_OnXmlFile(const KParts__MainWindow* self, intptr_t slot);
libqt_string KParts__MainWindow_QBaseXmlFile(const KParts__MainWindow* self);
libqt_string KParts__MainWindow_LocalXMLFile(const KParts__MainWindow* self);
void KParts__MainWindow_OnLocalXMLFile(const KParts__MainWindow* self, intptr_t slot);
libqt_string KParts__MainWindow_QBaseLocalXMLFile(const KParts__MainWindow* self);
void KParts__MainWindow_SetComponentName(KParts__MainWindow* self, const libqt_string componentName, const libqt_string componentDisplayName);
void KParts__MainWindow_OnSetComponentName(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetComponentName(KParts__MainWindow* self, const libqt_string componentName, const libqt_string componentDisplayName);
void KParts__MainWindow_SetXMLFile(KParts__MainWindow* self, const libqt_string file, bool merge, bool setXMLDoc);
void KParts__MainWindow_OnSetXMLFile(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetXMLFile(KParts__MainWindow* self, const libqt_string file, bool merge, bool setXMLDoc);
void KParts__MainWindow_SetLocalXMLFile(KParts__MainWindow* self, const libqt_string file);
void KParts__MainWindow_OnSetLocalXMLFile(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetLocalXMLFile(KParts__MainWindow* self, const libqt_string file);
void KParts__MainWindow_SetXML(KParts__MainWindow* self, const libqt_string document, bool merge);
void KParts__MainWindow_OnSetXML(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetXML(KParts__MainWindow* self, const libqt_string document, bool merge);
void KParts__MainWindow_SetDOMDocument(KParts__MainWindow* self, const QDomDocument* document, bool merge);
void KParts__MainWindow_OnSetDOMDocument(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetDOMDocument(KParts__MainWindow* self, const QDomDocument* document, bool merge);
void KParts__MainWindow_StateChanged(KParts__MainWindow* self, const libqt_string newstate, int reverse);
void KParts__MainWindow_OnStateChanged(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseStateChanged(KParts__MainWindow* self, const libqt_string newstate, int reverse);
void KParts__MainWindow_CreateGUI(KParts__MainWindow* self, KParts__Part* part);
void KParts__MainWindow_OnCreateGUI(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCreateGUI(KParts__MainWindow* self, KParts__Part* part);
void KParts__MainWindow_SetWindowTitleHandling(KParts__MainWindow* self, bool enabled);
void KParts__MainWindow_OnSetWindowTitleHandling(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSetWindowTitleHandling(KParts__MainWindow* self, bool enabled);
void KParts__MainWindow_CheckAmbiguousShortcuts(KParts__MainWindow* self);
void KParts__MainWindow_OnCheckAmbiguousShortcuts(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCheckAmbiguousShortcuts(KParts__MainWindow* self);
void KParts__MainWindow_SavePropertiesInternal(KParts__MainWindow* self, KConfig* param1, int param2);
void KParts__MainWindow_OnSavePropertiesInternal(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSavePropertiesInternal(KParts__MainWindow* self, KConfig* param1, int param2);
bool KParts__MainWindow_ReadPropertiesInternal(KParts__MainWindow* self, KConfig* param1, int param2);
void KParts__MainWindow_OnReadPropertiesInternal(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseReadPropertiesInternal(KParts__MainWindow* self, KConfig* param1, int param2);
bool KParts__MainWindow_SettingsDirty(const KParts__MainWindow* self);
void KParts__MainWindow_OnSettingsDirty(const KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseSettingsDirty(const KParts__MainWindow* self);
void KParts__MainWindow_SaveAutoSaveSettings(KParts__MainWindow* self);
void KParts__MainWindow_OnSaveAutoSaveSettings(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseSaveAutoSaveSettings(KParts__MainWindow* self);
void KParts__MainWindow_UpdateMicroFocus(KParts__MainWindow* self);
void KParts__MainWindow_OnUpdateMicroFocus(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseUpdateMicroFocus(KParts__MainWindow* self);
void KParts__MainWindow_Create(KParts__MainWindow* self);
void KParts__MainWindow_OnCreate(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseCreate(KParts__MainWindow* self);
void KParts__MainWindow_Destroy(KParts__MainWindow* self);
void KParts__MainWindow_OnDestroy(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseDestroy(KParts__MainWindow* self);
bool KParts__MainWindow_FocusNextChild(KParts__MainWindow* self);
void KParts__MainWindow_OnFocusNextChild(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseFocusNextChild(KParts__MainWindow* self);
bool KParts__MainWindow_FocusPreviousChild(KParts__MainWindow* self);
void KParts__MainWindow_OnFocusPreviousChild(KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseFocusPreviousChild(KParts__MainWindow* self);
QObject* KParts__MainWindow_Sender(const KParts__MainWindow* self);
void KParts__MainWindow_OnSender(const KParts__MainWindow* self, intptr_t slot);
QObject* KParts__MainWindow_QBaseSender(const KParts__MainWindow* self);
int KParts__MainWindow_SenderSignalIndex(const KParts__MainWindow* self);
void KParts__MainWindow_OnSenderSignalIndex(const KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseSenderSignalIndex(const KParts__MainWindow* self);
int KParts__MainWindow_Receivers(const KParts__MainWindow* self, const char* signal);
void KParts__MainWindow_OnReceivers(const KParts__MainWindow* self, intptr_t slot);
int KParts__MainWindow_QBaseReceivers(const KParts__MainWindow* self, const char* signal);
bool KParts__MainWindow_IsSignalConnected(const KParts__MainWindow* self, const QMetaMethod* signal);
void KParts__MainWindow_OnIsSignalConnected(const KParts__MainWindow* self, intptr_t slot);
bool KParts__MainWindow_QBaseIsSignalConnected(const KParts__MainWindow* self, const QMetaMethod* signal);
double KParts__MainWindow_GetDecodedMetricF(const KParts__MainWindow* self, int metricA, int metricB);
void KParts__MainWindow_OnGetDecodedMetricF(const KParts__MainWindow* self, intptr_t slot);
double KParts__MainWindow_QBaseGetDecodedMetricF(const KParts__MainWindow* self, int metricA, int metricB);
libqt_string KParts__MainWindow_StandardsXmlFileLocation(KParts__MainWindow* self);
void KParts__MainWindow_OnStandardsXmlFileLocation(KParts__MainWindow* self, intptr_t slot);
libqt_string KParts__MainWindow_QBaseStandardsXmlFileLocation(KParts__MainWindow* self);
void KParts__MainWindow_LoadStandardsXmlFile(KParts__MainWindow* self);
void KParts__MainWindow_OnLoadStandardsXmlFile(KParts__MainWindow* self, intptr_t slot);
void KParts__MainWindow_QBaseLoadStandardsXmlFile(KParts__MainWindow* self);
void KParts__MainWindow_Delete(KParts__MainWindow* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
