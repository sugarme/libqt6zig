#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKASSISTANTDIALOG_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKASSISTANTDIALOG_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KAssistantDialog KAssistantDialog;
typedef struct KPageDialog KPageDialog;
typedef struct KPageWidget KPageWidget;
typedef struct KPageWidgetItem KPageWidgetItem;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDialog QDialog;
typedef struct QDialogButtonBox QDialogButtonBox;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QPushButton QPushButton;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KAssistantDialog* KAssistantDialog_new(QWidget* parent);
KAssistantDialog* KAssistantDialog_new2();
KAssistantDialog* KAssistantDialog_new3(QWidget* parent, int flags);
QMetaObject* KAssistantDialog_MetaObject(const KAssistantDialog* self);
void* KAssistantDialog_Metacast(KAssistantDialog* self, const char* param1);
int KAssistantDialog_Metacall(KAssistantDialog* self, int param1, int param2, void** param3);
libqt_string KAssistantDialog_Tr(const char* s);
void KAssistantDialog_SetValid(KAssistantDialog* self, KPageWidgetItem* page, bool enable);
bool KAssistantDialog_IsValid(const KAssistantDialog* self, KPageWidgetItem* page);
void KAssistantDialog_SetAppropriate(KAssistantDialog* self, KPageWidgetItem* page, bool appropriate);
bool KAssistantDialog_IsAppropriate(const KAssistantDialog* self, KPageWidgetItem* page);
QPushButton* KAssistantDialog_NextButton(const KAssistantDialog* self);
QPushButton* KAssistantDialog_BackButton(const KAssistantDialog* self);
QPushButton* KAssistantDialog_FinishButton(const KAssistantDialog* self);
void KAssistantDialog_Back(KAssistantDialog* self);
void KAssistantDialog_Next(KAssistantDialog* self);
void KAssistantDialog_ShowEvent(KAssistantDialog* self, QShowEvent* event);
libqt_string KAssistantDialog_Tr2(const char* s, const char* c);
libqt_string KAssistantDialog_Tr3(const char* s, const char* c, int n);
void KAssistantDialog_OnMetacall(KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseMetacall(KAssistantDialog* self, int param1, int param2, void** param3);
void KAssistantDialog_OnBack(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseBack(KAssistantDialog* self);
void KAssistantDialog_OnNext(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseNext(KAssistantDialog* self);
void KAssistantDialog_OnShowEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseShowEvent(KAssistantDialog* self, QShowEvent* event);
void KAssistantDialog_SetVisible(KAssistantDialog* self, bool visible);
void KAssistantDialog_OnSetVisible(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseSetVisible(KAssistantDialog* self, bool visible);
QSize* KAssistantDialog_SizeHint(const KAssistantDialog* self);
void KAssistantDialog_OnSizeHint(const KAssistantDialog* self, intptr_t slot);
QSize* KAssistantDialog_QBaseSizeHint(const KAssistantDialog* self);
QSize* KAssistantDialog_MinimumSizeHint(const KAssistantDialog* self);
void KAssistantDialog_OnMinimumSizeHint(const KAssistantDialog* self, intptr_t slot);
QSize* KAssistantDialog_QBaseMinimumSizeHint(const KAssistantDialog* self);
void KAssistantDialog_Open(KAssistantDialog* self);
void KAssistantDialog_OnOpen(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseOpen(KAssistantDialog* self);
int KAssistantDialog_Exec(KAssistantDialog* self);
void KAssistantDialog_OnExec(KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseExec(KAssistantDialog* self);
void KAssistantDialog_Done(KAssistantDialog* self, int param1);
void KAssistantDialog_OnDone(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDone(KAssistantDialog* self, int param1);
void KAssistantDialog_Accept(KAssistantDialog* self);
void KAssistantDialog_OnAccept(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseAccept(KAssistantDialog* self);
void KAssistantDialog_Reject(KAssistantDialog* self);
void KAssistantDialog_OnReject(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseReject(KAssistantDialog* self);
void KAssistantDialog_KeyPressEvent(KAssistantDialog* self, QKeyEvent* param1);
void KAssistantDialog_OnKeyPressEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseKeyPressEvent(KAssistantDialog* self, QKeyEvent* param1);
void KAssistantDialog_CloseEvent(KAssistantDialog* self, QCloseEvent* param1);
void KAssistantDialog_OnCloseEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseCloseEvent(KAssistantDialog* self, QCloseEvent* param1);
void KAssistantDialog_ResizeEvent(KAssistantDialog* self, QResizeEvent* param1);
void KAssistantDialog_OnResizeEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseResizeEvent(KAssistantDialog* self, QResizeEvent* param1);
void KAssistantDialog_ContextMenuEvent(KAssistantDialog* self, QContextMenuEvent* param1);
void KAssistantDialog_OnContextMenuEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseContextMenuEvent(KAssistantDialog* self, QContextMenuEvent* param1);
bool KAssistantDialog_EventFilter(KAssistantDialog* self, QObject* param1, QEvent* param2);
void KAssistantDialog_OnEventFilter(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseEventFilter(KAssistantDialog* self, QObject* param1, QEvent* param2);
int KAssistantDialog_DevType(const KAssistantDialog* self);
void KAssistantDialog_OnDevType(const KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseDevType(const KAssistantDialog* self);
int KAssistantDialog_HeightForWidth(const KAssistantDialog* self, int param1);
void KAssistantDialog_OnHeightForWidth(const KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseHeightForWidth(const KAssistantDialog* self, int param1);
bool KAssistantDialog_HasHeightForWidth(const KAssistantDialog* self);
void KAssistantDialog_OnHasHeightForWidth(const KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseHasHeightForWidth(const KAssistantDialog* self);
QPaintEngine* KAssistantDialog_PaintEngine(const KAssistantDialog* self);
void KAssistantDialog_OnPaintEngine(const KAssistantDialog* self, intptr_t slot);
QPaintEngine* KAssistantDialog_QBasePaintEngine(const KAssistantDialog* self);
bool KAssistantDialog_Event(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_OnEvent(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseEvent(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_MousePressEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_OnMousePressEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseMousePressEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_MouseReleaseEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_OnMouseReleaseEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseMouseReleaseEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_MouseDoubleClickEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_OnMouseDoubleClickEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseMouseDoubleClickEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_MouseMoveEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_OnMouseMoveEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseMouseMoveEvent(KAssistantDialog* self, QMouseEvent* event);
void KAssistantDialog_WheelEvent(KAssistantDialog* self, QWheelEvent* event);
void KAssistantDialog_OnWheelEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseWheelEvent(KAssistantDialog* self, QWheelEvent* event);
void KAssistantDialog_KeyReleaseEvent(KAssistantDialog* self, QKeyEvent* event);
void KAssistantDialog_OnKeyReleaseEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseKeyReleaseEvent(KAssistantDialog* self, QKeyEvent* event);
void KAssistantDialog_FocusInEvent(KAssistantDialog* self, QFocusEvent* event);
void KAssistantDialog_OnFocusInEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseFocusInEvent(KAssistantDialog* self, QFocusEvent* event);
void KAssistantDialog_FocusOutEvent(KAssistantDialog* self, QFocusEvent* event);
void KAssistantDialog_OnFocusOutEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseFocusOutEvent(KAssistantDialog* self, QFocusEvent* event);
void KAssistantDialog_EnterEvent(KAssistantDialog* self, QEnterEvent* event);
void KAssistantDialog_OnEnterEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseEnterEvent(KAssistantDialog* self, QEnterEvent* event);
void KAssistantDialog_LeaveEvent(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_OnLeaveEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseLeaveEvent(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_PaintEvent(KAssistantDialog* self, QPaintEvent* event);
void KAssistantDialog_OnPaintEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBasePaintEvent(KAssistantDialog* self, QPaintEvent* event);
void KAssistantDialog_MoveEvent(KAssistantDialog* self, QMoveEvent* event);
void KAssistantDialog_OnMoveEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseMoveEvent(KAssistantDialog* self, QMoveEvent* event);
void KAssistantDialog_TabletEvent(KAssistantDialog* self, QTabletEvent* event);
void KAssistantDialog_OnTabletEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseTabletEvent(KAssistantDialog* self, QTabletEvent* event);
void KAssistantDialog_ActionEvent(KAssistantDialog* self, QActionEvent* event);
void KAssistantDialog_OnActionEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseActionEvent(KAssistantDialog* self, QActionEvent* event);
void KAssistantDialog_DragEnterEvent(KAssistantDialog* self, QDragEnterEvent* event);
void KAssistantDialog_OnDragEnterEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDragEnterEvent(KAssistantDialog* self, QDragEnterEvent* event);
void KAssistantDialog_DragMoveEvent(KAssistantDialog* self, QDragMoveEvent* event);
void KAssistantDialog_OnDragMoveEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDragMoveEvent(KAssistantDialog* self, QDragMoveEvent* event);
void KAssistantDialog_DragLeaveEvent(KAssistantDialog* self, QDragLeaveEvent* event);
void KAssistantDialog_OnDragLeaveEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDragLeaveEvent(KAssistantDialog* self, QDragLeaveEvent* event);
void KAssistantDialog_DropEvent(KAssistantDialog* self, QDropEvent* event);
void KAssistantDialog_OnDropEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDropEvent(KAssistantDialog* self, QDropEvent* event);
void KAssistantDialog_HideEvent(KAssistantDialog* self, QHideEvent* event);
void KAssistantDialog_OnHideEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseHideEvent(KAssistantDialog* self, QHideEvent* event);
bool KAssistantDialog_NativeEvent(KAssistantDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KAssistantDialog_OnNativeEvent(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseNativeEvent(KAssistantDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KAssistantDialog_ChangeEvent(KAssistantDialog* self, QEvent* param1);
void KAssistantDialog_OnChangeEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseChangeEvent(KAssistantDialog* self, QEvent* param1);
int KAssistantDialog_Metric(const KAssistantDialog* self, int param1);
void KAssistantDialog_OnMetric(const KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseMetric(const KAssistantDialog* self, int param1);
void KAssistantDialog_InitPainter(const KAssistantDialog* self, QPainter* painter);
void KAssistantDialog_OnInitPainter(const KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseInitPainter(const KAssistantDialog* self, QPainter* painter);
QPaintDevice* KAssistantDialog_Redirected(const KAssistantDialog* self, QPoint* offset);
void KAssistantDialog_OnRedirected(const KAssistantDialog* self, intptr_t slot);
QPaintDevice* KAssistantDialog_QBaseRedirected(const KAssistantDialog* self, QPoint* offset);
QPainter* KAssistantDialog_SharedPainter(const KAssistantDialog* self);
void KAssistantDialog_OnSharedPainter(const KAssistantDialog* self, intptr_t slot);
QPainter* KAssistantDialog_QBaseSharedPainter(const KAssistantDialog* self);
void KAssistantDialog_InputMethodEvent(KAssistantDialog* self, QInputMethodEvent* param1);
void KAssistantDialog_OnInputMethodEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseInputMethodEvent(KAssistantDialog* self, QInputMethodEvent* param1);
QVariant* KAssistantDialog_InputMethodQuery(const KAssistantDialog* self, int param1);
void KAssistantDialog_OnInputMethodQuery(const KAssistantDialog* self, intptr_t slot);
QVariant* KAssistantDialog_QBaseInputMethodQuery(const KAssistantDialog* self, int param1);
bool KAssistantDialog_FocusNextPrevChild(KAssistantDialog* self, bool next);
void KAssistantDialog_OnFocusNextPrevChild(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseFocusNextPrevChild(KAssistantDialog* self, bool next);
void KAssistantDialog_TimerEvent(KAssistantDialog* self, QTimerEvent* event);
void KAssistantDialog_OnTimerEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseTimerEvent(KAssistantDialog* self, QTimerEvent* event);
void KAssistantDialog_ChildEvent(KAssistantDialog* self, QChildEvent* event);
void KAssistantDialog_OnChildEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseChildEvent(KAssistantDialog* self, QChildEvent* event);
void KAssistantDialog_CustomEvent(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_OnCustomEvent(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseCustomEvent(KAssistantDialog* self, QEvent* event);
void KAssistantDialog_ConnectNotify(KAssistantDialog* self, const QMetaMethod* signal);
void KAssistantDialog_OnConnectNotify(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseConnectNotify(KAssistantDialog* self, const QMetaMethod* signal);
void KAssistantDialog_DisconnectNotify(KAssistantDialog* self, const QMetaMethod* signal);
void KAssistantDialog_OnDisconnectNotify(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDisconnectNotify(KAssistantDialog* self, const QMetaMethod* signal);
KPageWidget* KAssistantDialog_PageWidget(KAssistantDialog* self);
void KAssistantDialog_OnPageWidget(KAssistantDialog* self, intptr_t slot);
KPageWidget* KAssistantDialog_QBasePageWidget(KAssistantDialog* self);
void KAssistantDialog_SetPageWidget(KAssistantDialog* self, KPageWidget* widget);
void KAssistantDialog_OnSetPageWidget(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseSetPageWidget(KAssistantDialog* self, KPageWidget* widget);
QDialogButtonBox* KAssistantDialog_ButtonBox(KAssistantDialog* self);
void KAssistantDialog_OnButtonBox(KAssistantDialog* self, intptr_t slot);
QDialogButtonBox* KAssistantDialog_QBaseButtonBox(KAssistantDialog* self);
void KAssistantDialog_SetButtonBox(KAssistantDialog* self, QDialogButtonBox* box);
void KAssistantDialog_OnSetButtonBox(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseSetButtonBox(KAssistantDialog* self, QDialogButtonBox* box);
void KAssistantDialog_AdjustPosition(KAssistantDialog* self, QWidget* param1);
void KAssistantDialog_OnAdjustPosition(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseAdjustPosition(KAssistantDialog* self, QWidget* param1);
void KAssistantDialog_UpdateMicroFocus(KAssistantDialog* self);
void KAssistantDialog_OnUpdateMicroFocus(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseUpdateMicroFocus(KAssistantDialog* self);
void KAssistantDialog_Create(KAssistantDialog* self);
void KAssistantDialog_OnCreate(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseCreate(KAssistantDialog* self);
void KAssistantDialog_Destroy(KAssistantDialog* self);
void KAssistantDialog_OnDestroy(KAssistantDialog* self, intptr_t slot);
void KAssistantDialog_QBaseDestroy(KAssistantDialog* self);
bool KAssistantDialog_FocusNextChild(KAssistantDialog* self);
void KAssistantDialog_OnFocusNextChild(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseFocusNextChild(KAssistantDialog* self);
bool KAssistantDialog_FocusPreviousChild(KAssistantDialog* self);
void KAssistantDialog_OnFocusPreviousChild(KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseFocusPreviousChild(KAssistantDialog* self);
QObject* KAssistantDialog_Sender(const KAssistantDialog* self);
void KAssistantDialog_OnSender(const KAssistantDialog* self, intptr_t slot);
QObject* KAssistantDialog_QBaseSender(const KAssistantDialog* self);
int KAssistantDialog_SenderSignalIndex(const KAssistantDialog* self);
void KAssistantDialog_OnSenderSignalIndex(const KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseSenderSignalIndex(const KAssistantDialog* self);
int KAssistantDialog_Receivers(const KAssistantDialog* self, const char* signal);
void KAssistantDialog_OnReceivers(const KAssistantDialog* self, intptr_t slot);
int KAssistantDialog_QBaseReceivers(const KAssistantDialog* self, const char* signal);
bool KAssistantDialog_IsSignalConnected(const KAssistantDialog* self, const QMetaMethod* signal);
void KAssistantDialog_OnIsSignalConnected(const KAssistantDialog* self, intptr_t slot);
bool KAssistantDialog_QBaseIsSignalConnected(const KAssistantDialog* self, const QMetaMethod* signal);
double KAssistantDialog_GetDecodedMetricF(const KAssistantDialog* self, int metricA, int metricB);
void KAssistantDialog_OnGetDecodedMetricF(const KAssistantDialog* self, intptr_t slot);
double KAssistantDialog_QBaseGetDecodedMetricF(const KAssistantDialog* self, int metricA, int metricB);
void KAssistantDialog_Delete(KAssistantDialog* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
