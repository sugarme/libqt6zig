#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKMIMETYPECHOOSER_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKMIMETYPECHOOSER_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KMimeTypeChooser KMimeTypeChooser;
typedef struct KMimeTypeChooserDialog KMimeTypeChooserDialog;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDialog QDialog;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KMimeTypeChooser* KMimeTypeChooser_new();
KMimeTypeChooser* KMimeTypeChooser_new2(const libqt_string text);
KMimeTypeChooser* KMimeTypeChooser_new3(const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes);
KMimeTypeChooser* KMimeTypeChooser_new4(const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup);
KMimeTypeChooser* KMimeTypeChooser_new5(const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow);
KMimeTypeChooser* KMimeTypeChooser_new6(const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow, int visuals);
KMimeTypeChooser* KMimeTypeChooser_new7(const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow, int visuals, QWidget* parent);
QMetaObject* KMimeTypeChooser_MetaObject(const KMimeTypeChooser* self);
void* KMimeTypeChooser_Metacast(KMimeTypeChooser* self, const char* param1);
int KMimeTypeChooser_Metacall(KMimeTypeChooser* self, int param1, int param2, void** param3);
libqt_string KMimeTypeChooser_Tr(const char* s);
libqt_list /* of libqt_string */ KMimeTypeChooser_MimeTypes(const KMimeTypeChooser* self);
libqt_list /* of libqt_string */ KMimeTypeChooser_Patterns(const KMimeTypeChooser* self);
libqt_string KMimeTypeChooser_Tr2(const char* s, const char* c);
libqt_string KMimeTypeChooser_Tr3(const char* s, const char* c, int n);
void KMimeTypeChooser_OnMetacall(KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseMetacall(KMimeTypeChooser* self, int param1, int param2, void** param3);
int KMimeTypeChooser_DevType(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnDevType(const KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseDevType(const KMimeTypeChooser* self);
void KMimeTypeChooser_SetVisible(KMimeTypeChooser* self, bool visible);
void KMimeTypeChooser_OnSetVisible(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseSetVisible(KMimeTypeChooser* self, bool visible);
QSize* KMimeTypeChooser_SizeHint(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnSizeHint(const KMimeTypeChooser* self, intptr_t slot);
QSize* KMimeTypeChooser_QBaseSizeHint(const KMimeTypeChooser* self);
QSize* KMimeTypeChooser_MinimumSizeHint(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnMinimumSizeHint(const KMimeTypeChooser* self, intptr_t slot);
QSize* KMimeTypeChooser_QBaseMinimumSizeHint(const KMimeTypeChooser* self);
int KMimeTypeChooser_HeightForWidth(const KMimeTypeChooser* self, int param1);
void KMimeTypeChooser_OnHeightForWidth(const KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseHeightForWidth(const KMimeTypeChooser* self, int param1);
bool KMimeTypeChooser_HasHeightForWidth(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnHasHeightForWidth(const KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseHasHeightForWidth(const KMimeTypeChooser* self);
QPaintEngine* KMimeTypeChooser_PaintEngine(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnPaintEngine(const KMimeTypeChooser* self, intptr_t slot);
QPaintEngine* KMimeTypeChooser_QBasePaintEngine(const KMimeTypeChooser* self);
bool KMimeTypeChooser_Event(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_OnEvent(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseEvent(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_MousePressEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_OnMousePressEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseMousePressEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_MouseReleaseEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_OnMouseReleaseEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseMouseReleaseEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_MouseDoubleClickEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_OnMouseDoubleClickEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseMouseDoubleClickEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_MouseMoveEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_OnMouseMoveEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseMouseMoveEvent(KMimeTypeChooser* self, QMouseEvent* event);
void KMimeTypeChooser_WheelEvent(KMimeTypeChooser* self, QWheelEvent* event);
void KMimeTypeChooser_OnWheelEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseWheelEvent(KMimeTypeChooser* self, QWheelEvent* event);
void KMimeTypeChooser_KeyPressEvent(KMimeTypeChooser* self, QKeyEvent* event);
void KMimeTypeChooser_OnKeyPressEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseKeyPressEvent(KMimeTypeChooser* self, QKeyEvent* event);
void KMimeTypeChooser_KeyReleaseEvent(KMimeTypeChooser* self, QKeyEvent* event);
void KMimeTypeChooser_OnKeyReleaseEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseKeyReleaseEvent(KMimeTypeChooser* self, QKeyEvent* event);
void KMimeTypeChooser_FocusInEvent(KMimeTypeChooser* self, QFocusEvent* event);
void KMimeTypeChooser_OnFocusInEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseFocusInEvent(KMimeTypeChooser* self, QFocusEvent* event);
void KMimeTypeChooser_FocusOutEvent(KMimeTypeChooser* self, QFocusEvent* event);
void KMimeTypeChooser_OnFocusOutEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseFocusOutEvent(KMimeTypeChooser* self, QFocusEvent* event);
void KMimeTypeChooser_EnterEvent(KMimeTypeChooser* self, QEnterEvent* event);
void KMimeTypeChooser_OnEnterEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseEnterEvent(KMimeTypeChooser* self, QEnterEvent* event);
void KMimeTypeChooser_LeaveEvent(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_OnLeaveEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseLeaveEvent(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_PaintEvent(KMimeTypeChooser* self, QPaintEvent* event);
void KMimeTypeChooser_OnPaintEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBasePaintEvent(KMimeTypeChooser* self, QPaintEvent* event);
void KMimeTypeChooser_MoveEvent(KMimeTypeChooser* self, QMoveEvent* event);
void KMimeTypeChooser_OnMoveEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseMoveEvent(KMimeTypeChooser* self, QMoveEvent* event);
void KMimeTypeChooser_ResizeEvent(KMimeTypeChooser* self, QResizeEvent* event);
void KMimeTypeChooser_OnResizeEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseResizeEvent(KMimeTypeChooser* self, QResizeEvent* event);
void KMimeTypeChooser_CloseEvent(KMimeTypeChooser* self, QCloseEvent* event);
void KMimeTypeChooser_OnCloseEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseCloseEvent(KMimeTypeChooser* self, QCloseEvent* event);
void KMimeTypeChooser_ContextMenuEvent(KMimeTypeChooser* self, QContextMenuEvent* event);
void KMimeTypeChooser_OnContextMenuEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseContextMenuEvent(KMimeTypeChooser* self, QContextMenuEvent* event);
void KMimeTypeChooser_TabletEvent(KMimeTypeChooser* self, QTabletEvent* event);
void KMimeTypeChooser_OnTabletEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseTabletEvent(KMimeTypeChooser* self, QTabletEvent* event);
void KMimeTypeChooser_ActionEvent(KMimeTypeChooser* self, QActionEvent* event);
void KMimeTypeChooser_OnActionEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseActionEvent(KMimeTypeChooser* self, QActionEvent* event);
void KMimeTypeChooser_DragEnterEvent(KMimeTypeChooser* self, QDragEnterEvent* event);
void KMimeTypeChooser_OnDragEnterEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDragEnterEvent(KMimeTypeChooser* self, QDragEnterEvent* event);
void KMimeTypeChooser_DragMoveEvent(KMimeTypeChooser* self, QDragMoveEvent* event);
void KMimeTypeChooser_OnDragMoveEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDragMoveEvent(KMimeTypeChooser* self, QDragMoveEvent* event);
void KMimeTypeChooser_DragLeaveEvent(KMimeTypeChooser* self, QDragLeaveEvent* event);
void KMimeTypeChooser_OnDragLeaveEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDragLeaveEvent(KMimeTypeChooser* self, QDragLeaveEvent* event);
void KMimeTypeChooser_DropEvent(KMimeTypeChooser* self, QDropEvent* event);
void KMimeTypeChooser_OnDropEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDropEvent(KMimeTypeChooser* self, QDropEvent* event);
void KMimeTypeChooser_ShowEvent(KMimeTypeChooser* self, QShowEvent* event);
void KMimeTypeChooser_OnShowEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseShowEvent(KMimeTypeChooser* self, QShowEvent* event);
void KMimeTypeChooser_HideEvent(KMimeTypeChooser* self, QHideEvent* event);
void KMimeTypeChooser_OnHideEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseHideEvent(KMimeTypeChooser* self, QHideEvent* event);
bool KMimeTypeChooser_NativeEvent(KMimeTypeChooser* self, const libqt_string eventType, void* message, intptr_t* result);
void KMimeTypeChooser_OnNativeEvent(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseNativeEvent(KMimeTypeChooser* self, const libqt_string eventType, void* message, intptr_t* result);
void KMimeTypeChooser_ChangeEvent(KMimeTypeChooser* self, QEvent* param1);
void KMimeTypeChooser_OnChangeEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseChangeEvent(KMimeTypeChooser* self, QEvent* param1);
int KMimeTypeChooser_Metric(const KMimeTypeChooser* self, int param1);
void KMimeTypeChooser_OnMetric(const KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseMetric(const KMimeTypeChooser* self, int param1);
void KMimeTypeChooser_InitPainter(const KMimeTypeChooser* self, QPainter* painter);
void KMimeTypeChooser_OnInitPainter(const KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseInitPainter(const KMimeTypeChooser* self, QPainter* painter);
QPaintDevice* KMimeTypeChooser_Redirected(const KMimeTypeChooser* self, QPoint* offset);
void KMimeTypeChooser_OnRedirected(const KMimeTypeChooser* self, intptr_t slot);
QPaintDevice* KMimeTypeChooser_QBaseRedirected(const KMimeTypeChooser* self, QPoint* offset);
QPainter* KMimeTypeChooser_SharedPainter(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnSharedPainter(const KMimeTypeChooser* self, intptr_t slot);
QPainter* KMimeTypeChooser_QBaseSharedPainter(const KMimeTypeChooser* self);
void KMimeTypeChooser_InputMethodEvent(KMimeTypeChooser* self, QInputMethodEvent* param1);
void KMimeTypeChooser_OnInputMethodEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseInputMethodEvent(KMimeTypeChooser* self, QInputMethodEvent* param1);
QVariant* KMimeTypeChooser_InputMethodQuery(const KMimeTypeChooser* self, int param1);
void KMimeTypeChooser_OnInputMethodQuery(const KMimeTypeChooser* self, intptr_t slot);
QVariant* KMimeTypeChooser_QBaseInputMethodQuery(const KMimeTypeChooser* self, int param1);
bool KMimeTypeChooser_FocusNextPrevChild(KMimeTypeChooser* self, bool next);
void KMimeTypeChooser_OnFocusNextPrevChild(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseFocusNextPrevChild(KMimeTypeChooser* self, bool next);
bool KMimeTypeChooser_EventFilter(KMimeTypeChooser* self, QObject* watched, QEvent* event);
void KMimeTypeChooser_OnEventFilter(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseEventFilter(KMimeTypeChooser* self, QObject* watched, QEvent* event);
void KMimeTypeChooser_TimerEvent(KMimeTypeChooser* self, QTimerEvent* event);
void KMimeTypeChooser_OnTimerEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseTimerEvent(KMimeTypeChooser* self, QTimerEvent* event);
void KMimeTypeChooser_ChildEvent(KMimeTypeChooser* self, QChildEvent* event);
void KMimeTypeChooser_OnChildEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseChildEvent(KMimeTypeChooser* self, QChildEvent* event);
void KMimeTypeChooser_CustomEvent(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_OnCustomEvent(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseCustomEvent(KMimeTypeChooser* self, QEvent* event);
void KMimeTypeChooser_ConnectNotify(KMimeTypeChooser* self, const QMetaMethod* signal);
void KMimeTypeChooser_OnConnectNotify(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseConnectNotify(KMimeTypeChooser* self, const QMetaMethod* signal);
void KMimeTypeChooser_DisconnectNotify(KMimeTypeChooser* self, const QMetaMethod* signal);
void KMimeTypeChooser_OnDisconnectNotify(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDisconnectNotify(KMimeTypeChooser* self, const QMetaMethod* signal);
void KMimeTypeChooser_UpdateMicroFocus(KMimeTypeChooser* self);
void KMimeTypeChooser_OnUpdateMicroFocus(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseUpdateMicroFocus(KMimeTypeChooser* self);
void KMimeTypeChooser_Create(KMimeTypeChooser* self);
void KMimeTypeChooser_OnCreate(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseCreate(KMimeTypeChooser* self);
void KMimeTypeChooser_Destroy(KMimeTypeChooser* self);
void KMimeTypeChooser_OnDestroy(KMimeTypeChooser* self, intptr_t slot);
void KMimeTypeChooser_QBaseDestroy(KMimeTypeChooser* self);
bool KMimeTypeChooser_FocusNextChild(KMimeTypeChooser* self);
void KMimeTypeChooser_OnFocusNextChild(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseFocusNextChild(KMimeTypeChooser* self);
bool KMimeTypeChooser_FocusPreviousChild(KMimeTypeChooser* self);
void KMimeTypeChooser_OnFocusPreviousChild(KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseFocusPreviousChild(KMimeTypeChooser* self);
QObject* KMimeTypeChooser_Sender(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnSender(const KMimeTypeChooser* self, intptr_t slot);
QObject* KMimeTypeChooser_QBaseSender(const KMimeTypeChooser* self);
int KMimeTypeChooser_SenderSignalIndex(const KMimeTypeChooser* self);
void KMimeTypeChooser_OnSenderSignalIndex(const KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseSenderSignalIndex(const KMimeTypeChooser* self);
int KMimeTypeChooser_Receivers(const KMimeTypeChooser* self, const char* signal);
void KMimeTypeChooser_OnReceivers(const KMimeTypeChooser* self, intptr_t slot);
int KMimeTypeChooser_QBaseReceivers(const KMimeTypeChooser* self, const char* signal);
bool KMimeTypeChooser_IsSignalConnected(const KMimeTypeChooser* self, const QMetaMethod* signal);
void KMimeTypeChooser_OnIsSignalConnected(const KMimeTypeChooser* self, intptr_t slot);
bool KMimeTypeChooser_QBaseIsSignalConnected(const KMimeTypeChooser* self, const QMetaMethod* signal);
double KMimeTypeChooser_GetDecodedMetricF(const KMimeTypeChooser* self, int metricA, int metricB);
void KMimeTypeChooser_OnGetDecodedMetricF(const KMimeTypeChooser* self, intptr_t slot);
double KMimeTypeChooser_QBaseGetDecodedMetricF(const KMimeTypeChooser* self, int metricA, int metricB);
void KMimeTypeChooser_Delete(KMimeTypeChooser* self);

KMimeTypeChooserDialog* KMimeTypeChooserDialog_new();
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new2(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new3(const libqt_string title);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new4(const libqt_string title, const libqt_string text);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new5(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new6(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new7(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new8(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow, int visuals);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new9(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, const libqt_list /* of libqt_string */ groupsToShow, int visuals, QWidget* parent);
KMimeTypeChooserDialog* KMimeTypeChooserDialog_new10(const libqt_string title, const libqt_string text, const libqt_list /* of libqt_string */ selectedMimeTypes, const libqt_string defaultGroup, QWidget* parent);
QMetaObject* KMimeTypeChooserDialog_MetaObject(const KMimeTypeChooserDialog* self);
void* KMimeTypeChooserDialog_Metacast(KMimeTypeChooserDialog* self, const char* param1);
int KMimeTypeChooserDialog_Metacall(KMimeTypeChooserDialog* self, int param1, int param2, void** param3);
libqt_string KMimeTypeChooserDialog_Tr(const char* s);
KMimeTypeChooser* KMimeTypeChooserDialog_Chooser(KMimeTypeChooserDialog* self);
QSize* KMimeTypeChooserDialog_SizeHint(const KMimeTypeChooserDialog* self);
libqt_string KMimeTypeChooserDialog_Tr2(const char* s, const char* c);
libqt_string KMimeTypeChooserDialog_Tr3(const char* s, const char* c, int n);
void KMimeTypeChooserDialog_OnMetacall(KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseMetacall(KMimeTypeChooserDialog* self, int param1, int param2, void** param3);
void KMimeTypeChooserDialog_OnSizeHint(const KMimeTypeChooserDialog* self, intptr_t slot);
QSize* KMimeTypeChooserDialog_QBaseSizeHint(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_SetVisible(KMimeTypeChooserDialog* self, bool visible);
void KMimeTypeChooserDialog_OnSetVisible(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseSetVisible(KMimeTypeChooserDialog* self, bool visible);
QSize* KMimeTypeChooserDialog_MinimumSizeHint(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnMinimumSizeHint(const KMimeTypeChooserDialog* self, intptr_t slot);
QSize* KMimeTypeChooserDialog_QBaseMinimumSizeHint(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_Open(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnOpen(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseOpen(KMimeTypeChooserDialog* self);
int KMimeTypeChooserDialog_Exec(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnExec(KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseExec(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_Done(KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_OnDone(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDone(KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_Accept(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnAccept(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseAccept(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_Reject(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnReject(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseReject(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_KeyPressEvent(KMimeTypeChooserDialog* self, QKeyEvent* param1);
void KMimeTypeChooserDialog_OnKeyPressEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseKeyPressEvent(KMimeTypeChooserDialog* self, QKeyEvent* param1);
void KMimeTypeChooserDialog_CloseEvent(KMimeTypeChooserDialog* self, QCloseEvent* param1);
void KMimeTypeChooserDialog_OnCloseEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseCloseEvent(KMimeTypeChooserDialog* self, QCloseEvent* param1);
void KMimeTypeChooserDialog_ShowEvent(KMimeTypeChooserDialog* self, QShowEvent* param1);
void KMimeTypeChooserDialog_OnShowEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseShowEvent(KMimeTypeChooserDialog* self, QShowEvent* param1);
void KMimeTypeChooserDialog_ResizeEvent(KMimeTypeChooserDialog* self, QResizeEvent* param1);
void KMimeTypeChooserDialog_OnResizeEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseResizeEvent(KMimeTypeChooserDialog* self, QResizeEvent* param1);
void KMimeTypeChooserDialog_ContextMenuEvent(KMimeTypeChooserDialog* self, QContextMenuEvent* param1);
void KMimeTypeChooserDialog_OnContextMenuEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseContextMenuEvent(KMimeTypeChooserDialog* self, QContextMenuEvent* param1);
bool KMimeTypeChooserDialog_EventFilter(KMimeTypeChooserDialog* self, QObject* param1, QEvent* param2);
void KMimeTypeChooserDialog_OnEventFilter(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseEventFilter(KMimeTypeChooserDialog* self, QObject* param1, QEvent* param2);
int KMimeTypeChooserDialog_DevType(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnDevType(const KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseDevType(const KMimeTypeChooserDialog* self);
int KMimeTypeChooserDialog_HeightForWidth(const KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_OnHeightForWidth(const KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseHeightForWidth(const KMimeTypeChooserDialog* self, int param1);
bool KMimeTypeChooserDialog_HasHeightForWidth(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnHasHeightForWidth(const KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseHasHeightForWidth(const KMimeTypeChooserDialog* self);
QPaintEngine* KMimeTypeChooserDialog_PaintEngine(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnPaintEngine(const KMimeTypeChooserDialog* self, intptr_t slot);
QPaintEngine* KMimeTypeChooserDialog_QBasePaintEngine(const KMimeTypeChooserDialog* self);
bool KMimeTypeChooserDialog_Event(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_OnEvent(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseEvent(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_MousePressEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_OnMousePressEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseMousePressEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_MouseReleaseEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_OnMouseReleaseEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseMouseReleaseEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_MouseDoubleClickEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_OnMouseDoubleClickEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseMouseDoubleClickEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_MouseMoveEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_OnMouseMoveEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseMouseMoveEvent(KMimeTypeChooserDialog* self, QMouseEvent* event);
void KMimeTypeChooserDialog_WheelEvent(KMimeTypeChooserDialog* self, QWheelEvent* event);
void KMimeTypeChooserDialog_OnWheelEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseWheelEvent(KMimeTypeChooserDialog* self, QWheelEvent* event);
void KMimeTypeChooserDialog_KeyReleaseEvent(KMimeTypeChooserDialog* self, QKeyEvent* event);
void KMimeTypeChooserDialog_OnKeyReleaseEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseKeyReleaseEvent(KMimeTypeChooserDialog* self, QKeyEvent* event);
void KMimeTypeChooserDialog_FocusInEvent(KMimeTypeChooserDialog* self, QFocusEvent* event);
void KMimeTypeChooserDialog_OnFocusInEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseFocusInEvent(KMimeTypeChooserDialog* self, QFocusEvent* event);
void KMimeTypeChooserDialog_FocusOutEvent(KMimeTypeChooserDialog* self, QFocusEvent* event);
void KMimeTypeChooserDialog_OnFocusOutEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseFocusOutEvent(KMimeTypeChooserDialog* self, QFocusEvent* event);
void KMimeTypeChooserDialog_EnterEvent(KMimeTypeChooserDialog* self, QEnterEvent* event);
void KMimeTypeChooserDialog_OnEnterEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseEnterEvent(KMimeTypeChooserDialog* self, QEnterEvent* event);
void KMimeTypeChooserDialog_LeaveEvent(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_OnLeaveEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseLeaveEvent(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_PaintEvent(KMimeTypeChooserDialog* self, QPaintEvent* event);
void KMimeTypeChooserDialog_OnPaintEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBasePaintEvent(KMimeTypeChooserDialog* self, QPaintEvent* event);
void KMimeTypeChooserDialog_MoveEvent(KMimeTypeChooserDialog* self, QMoveEvent* event);
void KMimeTypeChooserDialog_OnMoveEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseMoveEvent(KMimeTypeChooserDialog* self, QMoveEvent* event);
void KMimeTypeChooserDialog_TabletEvent(KMimeTypeChooserDialog* self, QTabletEvent* event);
void KMimeTypeChooserDialog_OnTabletEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseTabletEvent(KMimeTypeChooserDialog* self, QTabletEvent* event);
void KMimeTypeChooserDialog_ActionEvent(KMimeTypeChooserDialog* self, QActionEvent* event);
void KMimeTypeChooserDialog_OnActionEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseActionEvent(KMimeTypeChooserDialog* self, QActionEvent* event);
void KMimeTypeChooserDialog_DragEnterEvent(KMimeTypeChooserDialog* self, QDragEnterEvent* event);
void KMimeTypeChooserDialog_OnDragEnterEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDragEnterEvent(KMimeTypeChooserDialog* self, QDragEnterEvent* event);
void KMimeTypeChooserDialog_DragMoveEvent(KMimeTypeChooserDialog* self, QDragMoveEvent* event);
void KMimeTypeChooserDialog_OnDragMoveEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDragMoveEvent(KMimeTypeChooserDialog* self, QDragMoveEvent* event);
void KMimeTypeChooserDialog_DragLeaveEvent(KMimeTypeChooserDialog* self, QDragLeaveEvent* event);
void KMimeTypeChooserDialog_OnDragLeaveEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDragLeaveEvent(KMimeTypeChooserDialog* self, QDragLeaveEvent* event);
void KMimeTypeChooserDialog_DropEvent(KMimeTypeChooserDialog* self, QDropEvent* event);
void KMimeTypeChooserDialog_OnDropEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDropEvent(KMimeTypeChooserDialog* self, QDropEvent* event);
void KMimeTypeChooserDialog_HideEvent(KMimeTypeChooserDialog* self, QHideEvent* event);
void KMimeTypeChooserDialog_OnHideEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseHideEvent(KMimeTypeChooserDialog* self, QHideEvent* event);
bool KMimeTypeChooserDialog_NativeEvent(KMimeTypeChooserDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KMimeTypeChooserDialog_OnNativeEvent(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseNativeEvent(KMimeTypeChooserDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KMimeTypeChooserDialog_ChangeEvent(KMimeTypeChooserDialog* self, QEvent* param1);
void KMimeTypeChooserDialog_OnChangeEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseChangeEvent(KMimeTypeChooserDialog* self, QEvent* param1);
int KMimeTypeChooserDialog_Metric(const KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_OnMetric(const KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseMetric(const KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_InitPainter(const KMimeTypeChooserDialog* self, QPainter* painter);
void KMimeTypeChooserDialog_OnInitPainter(const KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseInitPainter(const KMimeTypeChooserDialog* self, QPainter* painter);
QPaintDevice* KMimeTypeChooserDialog_Redirected(const KMimeTypeChooserDialog* self, QPoint* offset);
void KMimeTypeChooserDialog_OnRedirected(const KMimeTypeChooserDialog* self, intptr_t slot);
QPaintDevice* KMimeTypeChooserDialog_QBaseRedirected(const KMimeTypeChooserDialog* self, QPoint* offset);
QPainter* KMimeTypeChooserDialog_SharedPainter(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnSharedPainter(const KMimeTypeChooserDialog* self, intptr_t slot);
QPainter* KMimeTypeChooserDialog_QBaseSharedPainter(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_InputMethodEvent(KMimeTypeChooserDialog* self, QInputMethodEvent* param1);
void KMimeTypeChooserDialog_OnInputMethodEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseInputMethodEvent(KMimeTypeChooserDialog* self, QInputMethodEvent* param1);
QVariant* KMimeTypeChooserDialog_InputMethodQuery(const KMimeTypeChooserDialog* self, int param1);
void KMimeTypeChooserDialog_OnInputMethodQuery(const KMimeTypeChooserDialog* self, intptr_t slot);
QVariant* KMimeTypeChooserDialog_QBaseInputMethodQuery(const KMimeTypeChooserDialog* self, int param1);
bool KMimeTypeChooserDialog_FocusNextPrevChild(KMimeTypeChooserDialog* self, bool next);
void KMimeTypeChooserDialog_OnFocusNextPrevChild(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseFocusNextPrevChild(KMimeTypeChooserDialog* self, bool next);
void KMimeTypeChooserDialog_TimerEvent(KMimeTypeChooserDialog* self, QTimerEvent* event);
void KMimeTypeChooserDialog_OnTimerEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseTimerEvent(KMimeTypeChooserDialog* self, QTimerEvent* event);
void KMimeTypeChooserDialog_ChildEvent(KMimeTypeChooserDialog* self, QChildEvent* event);
void KMimeTypeChooserDialog_OnChildEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseChildEvent(KMimeTypeChooserDialog* self, QChildEvent* event);
void KMimeTypeChooserDialog_CustomEvent(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_OnCustomEvent(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseCustomEvent(KMimeTypeChooserDialog* self, QEvent* event);
void KMimeTypeChooserDialog_ConnectNotify(KMimeTypeChooserDialog* self, const QMetaMethod* signal);
void KMimeTypeChooserDialog_OnConnectNotify(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseConnectNotify(KMimeTypeChooserDialog* self, const QMetaMethod* signal);
void KMimeTypeChooserDialog_DisconnectNotify(KMimeTypeChooserDialog* self, const QMetaMethod* signal);
void KMimeTypeChooserDialog_OnDisconnectNotify(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDisconnectNotify(KMimeTypeChooserDialog* self, const QMetaMethod* signal);
void KMimeTypeChooserDialog_AdjustPosition(KMimeTypeChooserDialog* self, QWidget* param1);
void KMimeTypeChooserDialog_OnAdjustPosition(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseAdjustPosition(KMimeTypeChooserDialog* self, QWidget* param1);
void KMimeTypeChooserDialog_UpdateMicroFocus(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnUpdateMicroFocus(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseUpdateMicroFocus(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_Create(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnCreate(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseCreate(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_Destroy(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnDestroy(KMimeTypeChooserDialog* self, intptr_t slot);
void KMimeTypeChooserDialog_QBaseDestroy(KMimeTypeChooserDialog* self);
bool KMimeTypeChooserDialog_FocusNextChild(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnFocusNextChild(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseFocusNextChild(KMimeTypeChooserDialog* self);
bool KMimeTypeChooserDialog_FocusPreviousChild(KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnFocusPreviousChild(KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseFocusPreviousChild(KMimeTypeChooserDialog* self);
QObject* KMimeTypeChooserDialog_Sender(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnSender(const KMimeTypeChooserDialog* self, intptr_t slot);
QObject* KMimeTypeChooserDialog_QBaseSender(const KMimeTypeChooserDialog* self);
int KMimeTypeChooserDialog_SenderSignalIndex(const KMimeTypeChooserDialog* self);
void KMimeTypeChooserDialog_OnSenderSignalIndex(const KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseSenderSignalIndex(const KMimeTypeChooserDialog* self);
int KMimeTypeChooserDialog_Receivers(const KMimeTypeChooserDialog* self, const char* signal);
void KMimeTypeChooserDialog_OnReceivers(const KMimeTypeChooserDialog* self, intptr_t slot);
int KMimeTypeChooserDialog_QBaseReceivers(const KMimeTypeChooserDialog* self, const char* signal);
bool KMimeTypeChooserDialog_IsSignalConnected(const KMimeTypeChooserDialog* self, const QMetaMethod* signal);
void KMimeTypeChooserDialog_OnIsSignalConnected(const KMimeTypeChooserDialog* self, intptr_t slot);
bool KMimeTypeChooserDialog_QBaseIsSignalConnected(const KMimeTypeChooserDialog* self, const QMetaMethod* signal);
double KMimeTypeChooserDialog_GetDecodedMetricF(const KMimeTypeChooserDialog* self, int metricA, int metricB);
void KMimeTypeChooserDialog_OnGetDecodedMetricF(const KMimeTypeChooserDialog* self, intptr_t slot);
double KMimeTypeChooserDialog_QBaseGetDecodedMetricF(const KMimeTypeChooserDialog* self, int metricA, int metricB);
void KMimeTypeChooserDialog_Delete(KMimeTypeChooserDialog* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
