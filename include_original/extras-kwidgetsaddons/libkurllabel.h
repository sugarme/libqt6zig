#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKURLLABEL_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKURLLABEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KUrlLabel KUrlLabel;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QCursor QCursor;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFont QFont;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QLabel QLabel;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPixmap QPixmap;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KUrlLabel* KUrlLabel_new(QWidget* parent);
KUrlLabel* KUrlLabel_new2();
KUrlLabel* KUrlLabel_new3(const libqt_string url);
KUrlLabel* KUrlLabel_new4(const libqt_string url, const libqt_string text);
KUrlLabel* KUrlLabel_new5(const libqt_string url, const libqt_string text, QWidget* parent);
QMetaObject* KUrlLabel_MetaObject(const KUrlLabel* self);
void* KUrlLabel_Metacast(KUrlLabel* self, const char* param1);
int KUrlLabel_Metacall(KUrlLabel* self, int param1, int param2, void** param3);
libqt_string KUrlLabel_Tr(const char* s);
libqt_string KUrlLabel_Url(const KUrlLabel* self);
libqt_string KUrlLabel_TipText(const KUrlLabel* self);
bool KUrlLabel_UseTips(const KUrlLabel* self);
bool KUrlLabel_UseCursor(const KUrlLabel* self);
bool KUrlLabel_IsGlowEnabled(const KUrlLabel* self);
bool KUrlLabel_IsFloatEnabled(const KUrlLabel* self);
QPixmap* KUrlLabel_AlternatePixmap(const KUrlLabel* self);
void KUrlLabel_SetUnderline(KUrlLabel* self);
void KUrlLabel_SetUrl(KUrlLabel* self, const libqt_string url);
void KUrlLabel_SetFont(KUrlLabel* self, const QFont* font);
void KUrlLabel_SetUseTips(KUrlLabel* self);
void KUrlLabel_SetTipText(KUrlLabel* self, const libqt_string tip);
void KUrlLabel_SetHighlightedColor(KUrlLabel* self, const QColor* highcolor);
void KUrlLabel_SetHighlightedColor2(KUrlLabel* self, const libqt_string highcolor);
void KUrlLabel_SetSelectedColor(KUrlLabel* self, const QColor* color);
void KUrlLabel_SetSelectedColor2(KUrlLabel* self, const libqt_string color);
void KUrlLabel_SetUseCursor(KUrlLabel* self, bool on);
void KUrlLabel_SetGlowEnabled(KUrlLabel* self);
void KUrlLabel_SetFloatEnabled(KUrlLabel* self);
void KUrlLabel_SetAlternatePixmap(KUrlLabel* self, const QPixmap* pixmap);
void KUrlLabel_EnteredUrl(KUrlLabel* self);
void KUrlLabel_Connect_EnteredUrl(KUrlLabel* self, intptr_t slot);
void KUrlLabel_LeftUrl(KUrlLabel* self);
void KUrlLabel_Connect_LeftUrl(KUrlLabel* self, intptr_t slot);
void KUrlLabel_LeftClickedUrl(KUrlLabel* self);
void KUrlLabel_Connect_LeftClickedUrl(KUrlLabel* self, intptr_t slot);
void KUrlLabel_RightClickedUrl(KUrlLabel* self);
void KUrlLabel_Connect_RightClickedUrl(KUrlLabel* self, intptr_t slot);
void KUrlLabel_MiddleClickedUrl(KUrlLabel* self);
void KUrlLabel_Connect_MiddleClickedUrl(KUrlLabel* self, intptr_t slot);
void KUrlLabel_MouseReleaseEvent(KUrlLabel* self, QMouseEvent* param1);
void KUrlLabel_EnterEvent(KUrlLabel* self, QEnterEvent* event);
void KUrlLabel_LeaveEvent(KUrlLabel* self, QEvent* param1);
bool KUrlLabel_Event(KUrlLabel* self, QEvent* param1);
libqt_string KUrlLabel_Tr2(const char* s, const char* c);
libqt_string KUrlLabel_Tr3(const char* s, const char* c, int n);
void KUrlLabel_SetUnderline1(KUrlLabel* self, bool on);
void KUrlLabel_SetUseTips1(KUrlLabel* self, bool on);
void KUrlLabel_SetUseCursor2(KUrlLabel* self, bool on, QCursor* cursor);
void KUrlLabel_SetGlowEnabled1(KUrlLabel* self, bool glow);
void KUrlLabel_SetFloatEnabled1(KUrlLabel* self, bool do_float);
void KUrlLabel_OnMetacall(KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseMetacall(KUrlLabel* self, int param1, int param2, void** param3);
void KUrlLabel_OnSetFont(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseSetFont(KUrlLabel* self, const QFont* font);
void KUrlLabel_OnMouseReleaseEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseMouseReleaseEvent(KUrlLabel* self, QMouseEvent* param1);
void KUrlLabel_OnEnterEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseEnterEvent(KUrlLabel* self, QEnterEvent* event);
void KUrlLabel_OnLeaveEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseLeaveEvent(KUrlLabel* self, QEvent* param1);
void KUrlLabel_OnEvent(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseEvent(KUrlLabel* self, QEvent* param1);
QSize* KUrlLabel_SizeHint(const KUrlLabel* self);
void KUrlLabel_OnSizeHint(const KUrlLabel* self, intptr_t slot);
QSize* KUrlLabel_QBaseSizeHint(const KUrlLabel* self);
QSize* KUrlLabel_MinimumSizeHint(const KUrlLabel* self);
void KUrlLabel_OnMinimumSizeHint(const KUrlLabel* self, intptr_t slot);
QSize* KUrlLabel_QBaseMinimumSizeHint(const KUrlLabel* self);
int KUrlLabel_HeightForWidth(const KUrlLabel* self, int param1);
void KUrlLabel_OnHeightForWidth(const KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseHeightForWidth(const KUrlLabel* self, int param1);
void KUrlLabel_KeyPressEvent(KUrlLabel* self, QKeyEvent* ev);
void KUrlLabel_OnKeyPressEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseKeyPressEvent(KUrlLabel* self, QKeyEvent* ev);
void KUrlLabel_PaintEvent(KUrlLabel* self, QPaintEvent* param1);
void KUrlLabel_OnPaintEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBasePaintEvent(KUrlLabel* self, QPaintEvent* param1);
void KUrlLabel_ChangeEvent(KUrlLabel* self, QEvent* param1);
void KUrlLabel_OnChangeEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseChangeEvent(KUrlLabel* self, QEvent* param1);
void KUrlLabel_MousePressEvent(KUrlLabel* self, QMouseEvent* ev);
void KUrlLabel_OnMousePressEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseMousePressEvent(KUrlLabel* self, QMouseEvent* ev);
void KUrlLabel_MouseMoveEvent(KUrlLabel* self, QMouseEvent* ev);
void KUrlLabel_OnMouseMoveEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseMouseMoveEvent(KUrlLabel* self, QMouseEvent* ev);
void KUrlLabel_ContextMenuEvent(KUrlLabel* self, QContextMenuEvent* ev);
void KUrlLabel_OnContextMenuEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseContextMenuEvent(KUrlLabel* self, QContextMenuEvent* ev);
void KUrlLabel_FocusInEvent(KUrlLabel* self, QFocusEvent* ev);
void KUrlLabel_OnFocusInEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseFocusInEvent(KUrlLabel* self, QFocusEvent* ev);
void KUrlLabel_FocusOutEvent(KUrlLabel* self, QFocusEvent* ev);
void KUrlLabel_OnFocusOutEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseFocusOutEvent(KUrlLabel* self, QFocusEvent* ev);
bool KUrlLabel_FocusNextPrevChild(KUrlLabel* self, bool next);
void KUrlLabel_OnFocusNextPrevChild(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseFocusNextPrevChild(KUrlLabel* self, bool next);
void KUrlLabel_InitStyleOption(const KUrlLabel* self, QStyleOptionFrame* option);
void KUrlLabel_OnInitStyleOption(const KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseInitStyleOption(const KUrlLabel* self, QStyleOptionFrame* option);
int KUrlLabel_DevType(const KUrlLabel* self);
void KUrlLabel_OnDevType(const KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseDevType(const KUrlLabel* self);
void KUrlLabel_SetVisible(KUrlLabel* self, bool visible);
void KUrlLabel_OnSetVisible(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseSetVisible(KUrlLabel* self, bool visible);
bool KUrlLabel_HasHeightForWidth(const KUrlLabel* self);
void KUrlLabel_OnHasHeightForWidth(const KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseHasHeightForWidth(const KUrlLabel* self);
QPaintEngine* KUrlLabel_PaintEngine(const KUrlLabel* self);
void KUrlLabel_OnPaintEngine(const KUrlLabel* self, intptr_t slot);
QPaintEngine* KUrlLabel_QBasePaintEngine(const KUrlLabel* self);
void KUrlLabel_MouseDoubleClickEvent(KUrlLabel* self, QMouseEvent* event);
void KUrlLabel_OnMouseDoubleClickEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseMouseDoubleClickEvent(KUrlLabel* self, QMouseEvent* event);
void KUrlLabel_WheelEvent(KUrlLabel* self, QWheelEvent* event);
void KUrlLabel_OnWheelEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseWheelEvent(KUrlLabel* self, QWheelEvent* event);
void KUrlLabel_KeyReleaseEvent(KUrlLabel* self, QKeyEvent* event);
void KUrlLabel_OnKeyReleaseEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseKeyReleaseEvent(KUrlLabel* self, QKeyEvent* event);
void KUrlLabel_MoveEvent(KUrlLabel* self, QMoveEvent* event);
void KUrlLabel_OnMoveEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseMoveEvent(KUrlLabel* self, QMoveEvent* event);
void KUrlLabel_ResizeEvent(KUrlLabel* self, QResizeEvent* event);
void KUrlLabel_OnResizeEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseResizeEvent(KUrlLabel* self, QResizeEvent* event);
void KUrlLabel_CloseEvent(KUrlLabel* self, QCloseEvent* event);
void KUrlLabel_OnCloseEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseCloseEvent(KUrlLabel* self, QCloseEvent* event);
void KUrlLabel_TabletEvent(KUrlLabel* self, QTabletEvent* event);
void KUrlLabel_OnTabletEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseTabletEvent(KUrlLabel* self, QTabletEvent* event);
void KUrlLabel_ActionEvent(KUrlLabel* self, QActionEvent* event);
void KUrlLabel_OnActionEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseActionEvent(KUrlLabel* self, QActionEvent* event);
void KUrlLabel_DragEnterEvent(KUrlLabel* self, QDragEnterEvent* event);
void KUrlLabel_OnDragEnterEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDragEnterEvent(KUrlLabel* self, QDragEnterEvent* event);
void KUrlLabel_DragMoveEvent(KUrlLabel* self, QDragMoveEvent* event);
void KUrlLabel_OnDragMoveEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDragMoveEvent(KUrlLabel* self, QDragMoveEvent* event);
void KUrlLabel_DragLeaveEvent(KUrlLabel* self, QDragLeaveEvent* event);
void KUrlLabel_OnDragLeaveEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDragLeaveEvent(KUrlLabel* self, QDragLeaveEvent* event);
void KUrlLabel_DropEvent(KUrlLabel* self, QDropEvent* event);
void KUrlLabel_OnDropEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDropEvent(KUrlLabel* self, QDropEvent* event);
void KUrlLabel_ShowEvent(KUrlLabel* self, QShowEvent* event);
void KUrlLabel_OnShowEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseShowEvent(KUrlLabel* self, QShowEvent* event);
void KUrlLabel_HideEvent(KUrlLabel* self, QHideEvent* event);
void KUrlLabel_OnHideEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseHideEvent(KUrlLabel* self, QHideEvent* event);
bool KUrlLabel_NativeEvent(KUrlLabel* self, const libqt_string eventType, void* message, intptr_t* result);
void KUrlLabel_OnNativeEvent(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseNativeEvent(KUrlLabel* self, const libqt_string eventType, void* message, intptr_t* result);
int KUrlLabel_Metric(const KUrlLabel* self, int param1);
void KUrlLabel_OnMetric(const KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseMetric(const KUrlLabel* self, int param1);
void KUrlLabel_InitPainter(const KUrlLabel* self, QPainter* painter);
void KUrlLabel_OnInitPainter(const KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseInitPainter(const KUrlLabel* self, QPainter* painter);
QPaintDevice* KUrlLabel_Redirected(const KUrlLabel* self, QPoint* offset);
void KUrlLabel_OnRedirected(const KUrlLabel* self, intptr_t slot);
QPaintDevice* KUrlLabel_QBaseRedirected(const KUrlLabel* self, QPoint* offset);
QPainter* KUrlLabel_SharedPainter(const KUrlLabel* self);
void KUrlLabel_OnSharedPainter(const KUrlLabel* self, intptr_t slot);
QPainter* KUrlLabel_QBaseSharedPainter(const KUrlLabel* self);
void KUrlLabel_InputMethodEvent(KUrlLabel* self, QInputMethodEvent* param1);
void KUrlLabel_OnInputMethodEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseInputMethodEvent(KUrlLabel* self, QInputMethodEvent* param1);
QVariant* KUrlLabel_InputMethodQuery(const KUrlLabel* self, int param1);
void KUrlLabel_OnInputMethodQuery(const KUrlLabel* self, intptr_t slot);
QVariant* KUrlLabel_QBaseInputMethodQuery(const KUrlLabel* self, int param1);
bool KUrlLabel_EventFilter(KUrlLabel* self, QObject* watched, QEvent* event);
void KUrlLabel_OnEventFilter(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseEventFilter(KUrlLabel* self, QObject* watched, QEvent* event);
void KUrlLabel_TimerEvent(KUrlLabel* self, QTimerEvent* event);
void KUrlLabel_OnTimerEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseTimerEvent(KUrlLabel* self, QTimerEvent* event);
void KUrlLabel_ChildEvent(KUrlLabel* self, QChildEvent* event);
void KUrlLabel_OnChildEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseChildEvent(KUrlLabel* self, QChildEvent* event);
void KUrlLabel_CustomEvent(KUrlLabel* self, QEvent* event);
void KUrlLabel_OnCustomEvent(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseCustomEvent(KUrlLabel* self, QEvent* event);
void KUrlLabel_ConnectNotify(KUrlLabel* self, const QMetaMethod* signal);
void KUrlLabel_OnConnectNotify(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseConnectNotify(KUrlLabel* self, const QMetaMethod* signal);
void KUrlLabel_DisconnectNotify(KUrlLabel* self, const QMetaMethod* signal);
void KUrlLabel_OnDisconnectNotify(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDisconnectNotify(KUrlLabel* self, const QMetaMethod* signal);
void KUrlLabel_DrawFrame(KUrlLabel* self, QPainter* param1);
void KUrlLabel_OnDrawFrame(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDrawFrame(KUrlLabel* self, QPainter* param1);
void KUrlLabel_UpdateMicroFocus(KUrlLabel* self);
void KUrlLabel_OnUpdateMicroFocus(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseUpdateMicroFocus(KUrlLabel* self);
void KUrlLabel_Create(KUrlLabel* self);
void KUrlLabel_OnCreate(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseCreate(KUrlLabel* self);
void KUrlLabel_Destroy(KUrlLabel* self);
void KUrlLabel_OnDestroy(KUrlLabel* self, intptr_t slot);
void KUrlLabel_QBaseDestroy(KUrlLabel* self);
bool KUrlLabel_FocusNextChild(KUrlLabel* self);
void KUrlLabel_OnFocusNextChild(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseFocusNextChild(KUrlLabel* self);
bool KUrlLabel_FocusPreviousChild(KUrlLabel* self);
void KUrlLabel_OnFocusPreviousChild(KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseFocusPreviousChild(KUrlLabel* self);
QObject* KUrlLabel_Sender(const KUrlLabel* self);
void KUrlLabel_OnSender(const KUrlLabel* self, intptr_t slot);
QObject* KUrlLabel_QBaseSender(const KUrlLabel* self);
int KUrlLabel_SenderSignalIndex(const KUrlLabel* self);
void KUrlLabel_OnSenderSignalIndex(const KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseSenderSignalIndex(const KUrlLabel* self);
int KUrlLabel_Receivers(const KUrlLabel* self, const char* signal);
void KUrlLabel_OnReceivers(const KUrlLabel* self, intptr_t slot);
int KUrlLabel_QBaseReceivers(const KUrlLabel* self, const char* signal);
bool KUrlLabel_IsSignalConnected(const KUrlLabel* self, const QMetaMethod* signal);
void KUrlLabel_OnIsSignalConnected(const KUrlLabel* self, intptr_t slot);
bool KUrlLabel_QBaseIsSignalConnected(const KUrlLabel* self, const QMetaMethod* signal);
double KUrlLabel_GetDecodedMetricF(const KUrlLabel* self, int metricA, int metricB);
void KUrlLabel_OnGetDecodedMetricF(const KUrlLabel* self, intptr_t slot);
double KUrlLabel_QBaseGetDecodedMetricF(const KUrlLabel* self, int metricA, int metricB);
void KUrlLabel_Delete(KUrlLabel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
