#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKSELECTOR_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKSELECTOR_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KGradientSelector KGradientSelector;
typedef struct KSelector KSelector;
typedef struct QAbstractSlider QAbstractSlider;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KSelector* KSelector_new(QWidget* parent);
KSelector* KSelector_new2();
KSelector* KSelector_new3(int o);
KSelector* KSelector_new4(int o, QWidget* parent);
QMetaObject* KSelector_MetaObject(const KSelector* self);
void* KSelector_Metacast(KSelector* self, const char* param1);
int KSelector_Metacall(KSelector* self, int param1, int param2, void** param3);
libqt_string KSelector_Tr(const char* s);
QRect* KSelector_ContentsRect(const KSelector* self);
void KSelector_SetIndent(KSelector* self, bool i);
bool KSelector_Indent(const KSelector* self);
void KSelector_SetArrowDirection(KSelector* self, int direction);
int KSelector_ArrowDirection(const KSelector* self);
void KSelector_DrawContents(KSelector* self, QPainter* param1);
void KSelector_DrawArrow(KSelector* self, QPainter* painter, const QPoint* pos);
void KSelector_PaintEvent(KSelector* self, QPaintEvent* param1);
void KSelector_MousePressEvent(KSelector* self, QMouseEvent* e);
void KSelector_MouseMoveEvent(KSelector* self, QMouseEvent* e);
void KSelector_MouseReleaseEvent(KSelector* self, QMouseEvent* e);
void KSelector_WheelEvent(KSelector* self, QWheelEvent* param1);
libqt_string KSelector_Tr2(const char* s, const char* c);
libqt_string KSelector_Tr3(const char* s, const char* c, int n);
void KSelector_OnMetacall(KSelector* self, intptr_t slot);
int KSelector_QBaseMetacall(KSelector* self, int param1, int param2, void** param3);
void KSelector_OnDrawContents(KSelector* self, intptr_t slot);
void KSelector_QBaseDrawContents(KSelector* self, QPainter* param1);
void KSelector_OnDrawArrow(KSelector* self, intptr_t slot);
void KSelector_QBaseDrawArrow(KSelector* self, QPainter* painter, const QPoint* pos);
void KSelector_OnPaintEvent(KSelector* self, intptr_t slot);
void KSelector_QBasePaintEvent(KSelector* self, QPaintEvent* param1);
void KSelector_OnMousePressEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseMousePressEvent(KSelector* self, QMouseEvent* e);
void KSelector_OnMouseMoveEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseMouseMoveEvent(KSelector* self, QMouseEvent* e);
void KSelector_OnMouseReleaseEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseMouseReleaseEvent(KSelector* self, QMouseEvent* e);
void KSelector_OnWheelEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseWheelEvent(KSelector* self, QWheelEvent* param1);
bool KSelector_Event(KSelector* self, QEvent* e);
void KSelector_OnEvent(KSelector* self, intptr_t slot);
bool KSelector_QBaseEvent(KSelector* self, QEvent* e);
void KSelector_SliderChange(KSelector* self, int change);
void KSelector_OnSliderChange(KSelector* self, intptr_t slot);
void KSelector_QBaseSliderChange(KSelector* self, int change);
void KSelector_KeyPressEvent(KSelector* self, QKeyEvent* ev);
void KSelector_OnKeyPressEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseKeyPressEvent(KSelector* self, QKeyEvent* ev);
void KSelector_TimerEvent(KSelector* self, QTimerEvent* param1);
void KSelector_OnTimerEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseTimerEvent(KSelector* self, QTimerEvent* param1);
void KSelector_ChangeEvent(KSelector* self, QEvent* e);
void KSelector_OnChangeEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseChangeEvent(KSelector* self, QEvent* e);
int KSelector_DevType(const KSelector* self);
void KSelector_OnDevType(const KSelector* self, intptr_t slot);
int KSelector_QBaseDevType(const KSelector* self);
void KSelector_SetVisible(KSelector* self, bool visible);
void KSelector_OnSetVisible(KSelector* self, intptr_t slot);
void KSelector_QBaseSetVisible(KSelector* self, bool visible);
QSize* KSelector_SizeHint(const KSelector* self);
void KSelector_OnSizeHint(const KSelector* self, intptr_t slot);
QSize* KSelector_QBaseSizeHint(const KSelector* self);
QSize* KSelector_MinimumSizeHint(const KSelector* self);
void KSelector_OnMinimumSizeHint(const KSelector* self, intptr_t slot);
QSize* KSelector_QBaseMinimumSizeHint(const KSelector* self);
int KSelector_HeightForWidth(const KSelector* self, int param1);
void KSelector_OnHeightForWidth(const KSelector* self, intptr_t slot);
int KSelector_QBaseHeightForWidth(const KSelector* self, int param1);
bool KSelector_HasHeightForWidth(const KSelector* self);
void KSelector_OnHasHeightForWidth(const KSelector* self, intptr_t slot);
bool KSelector_QBaseHasHeightForWidth(const KSelector* self);
QPaintEngine* KSelector_PaintEngine(const KSelector* self);
void KSelector_OnPaintEngine(const KSelector* self, intptr_t slot);
QPaintEngine* KSelector_QBasePaintEngine(const KSelector* self);
void KSelector_MouseDoubleClickEvent(KSelector* self, QMouseEvent* event);
void KSelector_OnMouseDoubleClickEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseMouseDoubleClickEvent(KSelector* self, QMouseEvent* event);
void KSelector_KeyReleaseEvent(KSelector* self, QKeyEvent* event);
void KSelector_OnKeyReleaseEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseKeyReleaseEvent(KSelector* self, QKeyEvent* event);
void KSelector_FocusInEvent(KSelector* self, QFocusEvent* event);
void KSelector_OnFocusInEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseFocusInEvent(KSelector* self, QFocusEvent* event);
void KSelector_FocusOutEvent(KSelector* self, QFocusEvent* event);
void KSelector_OnFocusOutEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseFocusOutEvent(KSelector* self, QFocusEvent* event);
void KSelector_EnterEvent(KSelector* self, QEnterEvent* event);
void KSelector_OnEnterEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseEnterEvent(KSelector* self, QEnterEvent* event);
void KSelector_LeaveEvent(KSelector* self, QEvent* event);
void KSelector_OnLeaveEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseLeaveEvent(KSelector* self, QEvent* event);
void KSelector_MoveEvent(KSelector* self, QMoveEvent* event);
void KSelector_OnMoveEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseMoveEvent(KSelector* self, QMoveEvent* event);
void KSelector_ResizeEvent(KSelector* self, QResizeEvent* event);
void KSelector_OnResizeEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseResizeEvent(KSelector* self, QResizeEvent* event);
void KSelector_CloseEvent(KSelector* self, QCloseEvent* event);
void KSelector_OnCloseEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseCloseEvent(KSelector* self, QCloseEvent* event);
void KSelector_ContextMenuEvent(KSelector* self, QContextMenuEvent* event);
void KSelector_OnContextMenuEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseContextMenuEvent(KSelector* self, QContextMenuEvent* event);
void KSelector_TabletEvent(KSelector* self, QTabletEvent* event);
void KSelector_OnTabletEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseTabletEvent(KSelector* self, QTabletEvent* event);
void KSelector_ActionEvent(KSelector* self, QActionEvent* event);
void KSelector_OnActionEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseActionEvent(KSelector* self, QActionEvent* event);
void KSelector_DragEnterEvent(KSelector* self, QDragEnterEvent* event);
void KSelector_OnDragEnterEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseDragEnterEvent(KSelector* self, QDragEnterEvent* event);
void KSelector_DragMoveEvent(KSelector* self, QDragMoveEvent* event);
void KSelector_OnDragMoveEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseDragMoveEvent(KSelector* self, QDragMoveEvent* event);
void KSelector_DragLeaveEvent(KSelector* self, QDragLeaveEvent* event);
void KSelector_OnDragLeaveEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseDragLeaveEvent(KSelector* self, QDragLeaveEvent* event);
void KSelector_DropEvent(KSelector* self, QDropEvent* event);
void KSelector_OnDropEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseDropEvent(KSelector* self, QDropEvent* event);
void KSelector_ShowEvent(KSelector* self, QShowEvent* event);
void KSelector_OnShowEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseShowEvent(KSelector* self, QShowEvent* event);
void KSelector_HideEvent(KSelector* self, QHideEvent* event);
void KSelector_OnHideEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseHideEvent(KSelector* self, QHideEvent* event);
bool KSelector_NativeEvent(KSelector* self, const libqt_string eventType, void* message, intptr_t* result);
void KSelector_OnNativeEvent(KSelector* self, intptr_t slot);
bool KSelector_QBaseNativeEvent(KSelector* self, const libqt_string eventType, void* message, intptr_t* result);
int KSelector_Metric(const KSelector* self, int param1);
void KSelector_OnMetric(const KSelector* self, intptr_t slot);
int KSelector_QBaseMetric(const KSelector* self, int param1);
void KSelector_InitPainter(const KSelector* self, QPainter* painter);
void KSelector_OnInitPainter(const KSelector* self, intptr_t slot);
void KSelector_QBaseInitPainter(const KSelector* self, QPainter* painter);
QPaintDevice* KSelector_Redirected(const KSelector* self, QPoint* offset);
void KSelector_OnRedirected(const KSelector* self, intptr_t slot);
QPaintDevice* KSelector_QBaseRedirected(const KSelector* self, QPoint* offset);
QPainter* KSelector_SharedPainter(const KSelector* self);
void KSelector_OnSharedPainter(const KSelector* self, intptr_t slot);
QPainter* KSelector_QBaseSharedPainter(const KSelector* self);
void KSelector_InputMethodEvent(KSelector* self, QInputMethodEvent* param1);
void KSelector_OnInputMethodEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseInputMethodEvent(KSelector* self, QInputMethodEvent* param1);
QVariant* KSelector_InputMethodQuery(const KSelector* self, int param1);
void KSelector_OnInputMethodQuery(const KSelector* self, intptr_t slot);
QVariant* KSelector_QBaseInputMethodQuery(const KSelector* self, int param1);
bool KSelector_FocusNextPrevChild(KSelector* self, bool next);
void KSelector_OnFocusNextPrevChild(KSelector* self, intptr_t slot);
bool KSelector_QBaseFocusNextPrevChild(KSelector* self, bool next);
bool KSelector_EventFilter(KSelector* self, QObject* watched, QEvent* event);
void KSelector_OnEventFilter(KSelector* self, intptr_t slot);
bool KSelector_QBaseEventFilter(KSelector* self, QObject* watched, QEvent* event);
void KSelector_ChildEvent(KSelector* self, QChildEvent* event);
void KSelector_OnChildEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseChildEvent(KSelector* self, QChildEvent* event);
void KSelector_CustomEvent(KSelector* self, QEvent* event);
void KSelector_OnCustomEvent(KSelector* self, intptr_t slot);
void KSelector_QBaseCustomEvent(KSelector* self, QEvent* event);
void KSelector_ConnectNotify(KSelector* self, const QMetaMethod* signal);
void KSelector_OnConnectNotify(KSelector* self, intptr_t slot);
void KSelector_QBaseConnectNotify(KSelector* self, const QMetaMethod* signal);
void KSelector_DisconnectNotify(KSelector* self, const QMetaMethod* signal);
void KSelector_OnDisconnectNotify(KSelector* self, intptr_t slot);
void KSelector_QBaseDisconnectNotify(KSelector* self, const QMetaMethod* signal);
void KSelector_SetRepeatAction(KSelector* self, int action);
void KSelector_OnSetRepeatAction(KSelector* self, intptr_t slot);
void KSelector_QBaseSetRepeatAction(KSelector* self, int action);
int KSelector_RepeatAction(const KSelector* self);
void KSelector_OnRepeatAction(const KSelector* self, intptr_t slot);
int KSelector_QBaseRepeatAction(const KSelector* self);
void KSelector_UpdateMicroFocus(KSelector* self);
void KSelector_OnUpdateMicroFocus(KSelector* self, intptr_t slot);
void KSelector_QBaseUpdateMicroFocus(KSelector* self);
void KSelector_Create(KSelector* self);
void KSelector_OnCreate(KSelector* self, intptr_t slot);
void KSelector_QBaseCreate(KSelector* self);
void KSelector_Destroy(KSelector* self);
void KSelector_OnDestroy(KSelector* self, intptr_t slot);
void KSelector_QBaseDestroy(KSelector* self);
bool KSelector_FocusNextChild(KSelector* self);
void KSelector_OnFocusNextChild(KSelector* self, intptr_t slot);
bool KSelector_QBaseFocusNextChild(KSelector* self);
bool KSelector_FocusPreviousChild(KSelector* self);
void KSelector_OnFocusPreviousChild(KSelector* self, intptr_t slot);
bool KSelector_QBaseFocusPreviousChild(KSelector* self);
QObject* KSelector_Sender(const KSelector* self);
void KSelector_OnSender(const KSelector* self, intptr_t slot);
QObject* KSelector_QBaseSender(const KSelector* self);
int KSelector_SenderSignalIndex(const KSelector* self);
void KSelector_OnSenderSignalIndex(const KSelector* self, intptr_t slot);
int KSelector_QBaseSenderSignalIndex(const KSelector* self);
int KSelector_Receivers(const KSelector* self, const char* signal);
void KSelector_OnReceivers(const KSelector* self, intptr_t slot);
int KSelector_QBaseReceivers(const KSelector* self, const char* signal);
bool KSelector_IsSignalConnected(const KSelector* self, const QMetaMethod* signal);
void KSelector_OnIsSignalConnected(const KSelector* self, intptr_t slot);
bool KSelector_QBaseIsSignalConnected(const KSelector* self, const QMetaMethod* signal);
double KSelector_GetDecodedMetricF(const KSelector* self, int metricA, int metricB);
void KSelector_OnGetDecodedMetricF(const KSelector* self, intptr_t slot);
double KSelector_QBaseGetDecodedMetricF(const KSelector* self, int metricA, int metricB);
void KSelector_Delete(KSelector* self);

KGradientSelector* KGradientSelector_new(QWidget* parent);
KGradientSelector* KGradientSelector_new2();
KGradientSelector* KGradientSelector_new3(int o);
KGradientSelector* KGradientSelector_new4(int o, QWidget* parent);
QMetaObject* KGradientSelector_MetaObject(const KGradientSelector* self);
void* KGradientSelector_Metacast(KGradientSelector* self, const char* param1);
int KGradientSelector_Metacall(KGradientSelector* self, int param1, int param2, void** param3);
libqt_string KGradientSelector_Tr(const char* s);
libqt_list /* of libqt_pair  tuple of double and QColor*  */ KGradientSelector_Stops(const KGradientSelector* self);
void KGradientSelector_SetColors(KGradientSelector* self, const QColor* col1, const QColor* col2);
void KGradientSelector_SetText(KGradientSelector* self, const libqt_string t1, const libqt_string t2);
void KGradientSelector_SetFirstColor(KGradientSelector* self, const QColor* col);
void KGradientSelector_SetSecondColor(KGradientSelector* self, const QColor* col);
void KGradientSelector_SetFirstText(KGradientSelector* self, const libqt_string t);
void KGradientSelector_SetSecondText(KGradientSelector* self, const libqt_string t);
QColor* KGradientSelector_FirstColor(const KGradientSelector* self);
QColor* KGradientSelector_SecondColor(const KGradientSelector* self);
libqt_string KGradientSelector_FirstText(const KGradientSelector* self);
libqt_string KGradientSelector_SecondText(const KGradientSelector* self);
void KGradientSelector_DrawContents(KGradientSelector* self, QPainter* param1);
QSize* KGradientSelector_MinimumSize(const KGradientSelector* self);
libqt_string KGradientSelector_Tr2(const char* s, const char* c);
libqt_string KGradientSelector_Tr3(const char* s, const char* c, int n);
void KGradientSelector_OnMetacall(KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseMetacall(KGradientSelector* self, int param1, int param2, void** param3);
void KGradientSelector_OnDrawContents(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDrawContents(KGradientSelector* self, QPainter* param1);
void KGradientSelector_OnMinimumSize(const KGradientSelector* self, intptr_t slot);
QSize* KGradientSelector_QBaseMinimumSize(const KGradientSelector* self);
void KGradientSelector_DrawArrow(KGradientSelector* self, QPainter* painter, const QPoint* pos);
void KGradientSelector_OnDrawArrow(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDrawArrow(KGradientSelector* self, QPainter* painter, const QPoint* pos);
void KGradientSelector_PaintEvent(KGradientSelector* self, QPaintEvent* param1);
void KGradientSelector_OnPaintEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBasePaintEvent(KGradientSelector* self, QPaintEvent* param1);
void KGradientSelector_MousePressEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_OnMousePressEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseMousePressEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_MouseMoveEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_OnMouseMoveEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseMouseMoveEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_MouseReleaseEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_OnMouseReleaseEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseMouseReleaseEvent(KGradientSelector* self, QMouseEvent* e);
void KGradientSelector_WheelEvent(KGradientSelector* self, QWheelEvent* param1);
void KGradientSelector_OnWheelEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseWheelEvent(KGradientSelector* self, QWheelEvent* param1);
bool KGradientSelector_Event(KGradientSelector* self, QEvent* e);
void KGradientSelector_OnEvent(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseEvent(KGradientSelector* self, QEvent* e);
void KGradientSelector_SliderChange(KGradientSelector* self, int change);
void KGradientSelector_OnSliderChange(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseSliderChange(KGradientSelector* self, int change);
void KGradientSelector_KeyPressEvent(KGradientSelector* self, QKeyEvent* ev);
void KGradientSelector_OnKeyPressEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseKeyPressEvent(KGradientSelector* self, QKeyEvent* ev);
void KGradientSelector_TimerEvent(KGradientSelector* self, QTimerEvent* param1);
void KGradientSelector_OnTimerEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseTimerEvent(KGradientSelector* self, QTimerEvent* param1);
void KGradientSelector_ChangeEvent(KGradientSelector* self, QEvent* e);
void KGradientSelector_OnChangeEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseChangeEvent(KGradientSelector* self, QEvent* e);
int KGradientSelector_DevType(const KGradientSelector* self);
void KGradientSelector_OnDevType(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseDevType(const KGradientSelector* self);
void KGradientSelector_SetVisible(KGradientSelector* self, bool visible);
void KGradientSelector_OnSetVisible(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseSetVisible(KGradientSelector* self, bool visible);
QSize* KGradientSelector_SizeHint(const KGradientSelector* self);
void KGradientSelector_OnSizeHint(const KGradientSelector* self, intptr_t slot);
QSize* KGradientSelector_QBaseSizeHint(const KGradientSelector* self);
QSize* KGradientSelector_MinimumSizeHint(const KGradientSelector* self);
void KGradientSelector_OnMinimumSizeHint(const KGradientSelector* self, intptr_t slot);
QSize* KGradientSelector_QBaseMinimumSizeHint(const KGradientSelector* self);
int KGradientSelector_HeightForWidth(const KGradientSelector* self, int param1);
void KGradientSelector_OnHeightForWidth(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseHeightForWidth(const KGradientSelector* self, int param1);
bool KGradientSelector_HasHeightForWidth(const KGradientSelector* self);
void KGradientSelector_OnHasHeightForWidth(const KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseHasHeightForWidth(const KGradientSelector* self);
QPaintEngine* KGradientSelector_PaintEngine(const KGradientSelector* self);
void KGradientSelector_OnPaintEngine(const KGradientSelector* self, intptr_t slot);
QPaintEngine* KGradientSelector_QBasePaintEngine(const KGradientSelector* self);
void KGradientSelector_MouseDoubleClickEvent(KGradientSelector* self, QMouseEvent* event);
void KGradientSelector_OnMouseDoubleClickEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseMouseDoubleClickEvent(KGradientSelector* self, QMouseEvent* event);
void KGradientSelector_KeyReleaseEvent(KGradientSelector* self, QKeyEvent* event);
void KGradientSelector_OnKeyReleaseEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseKeyReleaseEvent(KGradientSelector* self, QKeyEvent* event);
void KGradientSelector_FocusInEvent(KGradientSelector* self, QFocusEvent* event);
void KGradientSelector_OnFocusInEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseFocusInEvent(KGradientSelector* self, QFocusEvent* event);
void KGradientSelector_FocusOutEvent(KGradientSelector* self, QFocusEvent* event);
void KGradientSelector_OnFocusOutEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseFocusOutEvent(KGradientSelector* self, QFocusEvent* event);
void KGradientSelector_EnterEvent(KGradientSelector* self, QEnterEvent* event);
void KGradientSelector_OnEnterEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseEnterEvent(KGradientSelector* self, QEnterEvent* event);
void KGradientSelector_LeaveEvent(KGradientSelector* self, QEvent* event);
void KGradientSelector_OnLeaveEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseLeaveEvent(KGradientSelector* self, QEvent* event);
void KGradientSelector_MoveEvent(KGradientSelector* self, QMoveEvent* event);
void KGradientSelector_OnMoveEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseMoveEvent(KGradientSelector* self, QMoveEvent* event);
void KGradientSelector_ResizeEvent(KGradientSelector* self, QResizeEvent* event);
void KGradientSelector_OnResizeEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseResizeEvent(KGradientSelector* self, QResizeEvent* event);
void KGradientSelector_CloseEvent(KGradientSelector* self, QCloseEvent* event);
void KGradientSelector_OnCloseEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseCloseEvent(KGradientSelector* self, QCloseEvent* event);
void KGradientSelector_ContextMenuEvent(KGradientSelector* self, QContextMenuEvent* event);
void KGradientSelector_OnContextMenuEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseContextMenuEvent(KGradientSelector* self, QContextMenuEvent* event);
void KGradientSelector_TabletEvent(KGradientSelector* self, QTabletEvent* event);
void KGradientSelector_OnTabletEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseTabletEvent(KGradientSelector* self, QTabletEvent* event);
void KGradientSelector_ActionEvent(KGradientSelector* self, QActionEvent* event);
void KGradientSelector_OnActionEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseActionEvent(KGradientSelector* self, QActionEvent* event);
void KGradientSelector_DragEnterEvent(KGradientSelector* self, QDragEnterEvent* event);
void KGradientSelector_OnDragEnterEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDragEnterEvent(KGradientSelector* self, QDragEnterEvent* event);
void KGradientSelector_DragMoveEvent(KGradientSelector* self, QDragMoveEvent* event);
void KGradientSelector_OnDragMoveEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDragMoveEvent(KGradientSelector* self, QDragMoveEvent* event);
void KGradientSelector_DragLeaveEvent(KGradientSelector* self, QDragLeaveEvent* event);
void KGradientSelector_OnDragLeaveEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDragLeaveEvent(KGradientSelector* self, QDragLeaveEvent* event);
void KGradientSelector_DropEvent(KGradientSelector* self, QDropEvent* event);
void KGradientSelector_OnDropEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDropEvent(KGradientSelector* self, QDropEvent* event);
void KGradientSelector_ShowEvent(KGradientSelector* self, QShowEvent* event);
void KGradientSelector_OnShowEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseShowEvent(KGradientSelector* self, QShowEvent* event);
void KGradientSelector_HideEvent(KGradientSelector* self, QHideEvent* event);
void KGradientSelector_OnHideEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseHideEvent(KGradientSelector* self, QHideEvent* event);
bool KGradientSelector_NativeEvent(KGradientSelector* self, const libqt_string eventType, void* message, intptr_t* result);
void KGradientSelector_OnNativeEvent(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseNativeEvent(KGradientSelector* self, const libqt_string eventType, void* message, intptr_t* result);
int KGradientSelector_Metric(const KGradientSelector* self, int param1);
void KGradientSelector_OnMetric(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseMetric(const KGradientSelector* self, int param1);
void KGradientSelector_InitPainter(const KGradientSelector* self, QPainter* painter);
void KGradientSelector_OnInitPainter(const KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseInitPainter(const KGradientSelector* self, QPainter* painter);
QPaintDevice* KGradientSelector_Redirected(const KGradientSelector* self, QPoint* offset);
void KGradientSelector_OnRedirected(const KGradientSelector* self, intptr_t slot);
QPaintDevice* KGradientSelector_QBaseRedirected(const KGradientSelector* self, QPoint* offset);
QPainter* KGradientSelector_SharedPainter(const KGradientSelector* self);
void KGradientSelector_OnSharedPainter(const KGradientSelector* self, intptr_t slot);
QPainter* KGradientSelector_QBaseSharedPainter(const KGradientSelector* self);
void KGradientSelector_InputMethodEvent(KGradientSelector* self, QInputMethodEvent* param1);
void KGradientSelector_OnInputMethodEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseInputMethodEvent(KGradientSelector* self, QInputMethodEvent* param1);
QVariant* KGradientSelector_InputMethodQuery(const KGradientSelector* self, int param1);
void KGradientSelector_OnInputMethodQuery(const KGradientSelector* self, intptr_t slot);
QVariant* KGradientSelector_QBaseInputMethodQuery(const KGradientSelector* self, int param1);
bool KGradientSelector_FocusNextPrevChild(KGradientSelector* self, bool next);
void KGradientSelector_OnFocusNextPrevChild(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseFocusNextPrevChild(KGradientSelector* self, bool next);
bool KGradientSelector_EventFilter(KGradientSelector* self, QObject* watched, QEvent* event);
void KGradientSelector_OnEventFilter(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseEventFilter(KGradientSelector* self, QObject* watched, QEvent* event);
void KGradientSelector_ChildEvent(KGradientSelector* self, QChildEvent* event);
void KGradientSelector_OnChildEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseChildEvent(KGradientSelector* self, QChildEvent* event);
void KGradientSelector_CustomEvent(KGradientSelector* self, QEvent* event);
void KGradientSelector_OnCustomEvent(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseCustomEvent(KGradientSelector* self, QEvent* event);
void KGradientSelector_ConnectNotify(KGradientSelector* self, const QMetaMethod* signal);
void KGradientSelector_OnConnectNotify(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseConnectNotify(KGradientSelector* self, const QMetaMethod* signal);
void KGradientSelector_DisconnectNotify(KGradientSelector* self, const QMetaMethod* signal);
void KGradientSelector_OnDisconnectNotify(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDisconnectNotify(KGradientSelector* self, const QMetaMethod* signal);
void KGradientSelector_SetRepeatAction(KGradientSelector* self, int action);
void KGradientSelector_OnSetRepeatAction(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseSetRepeatAction(KGradientSelector* self, int action);
int KGradientSelector_RepeatAction(const KGradientSelector* self);
void KGradientSelector_OnRepeatAction(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseRepeatAction(const KGradientSelector* self);
void KGradientSelector_UpdateMicroFocus(KGradientSelector* self);
void KGradientSelector_OnUpdateMicroFocus(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseUpdateMicroFocus(KGradientSelector* self);
void KGradientSelector_Create(KGradientSelector* self);
void KGradientSelector_OnCreate(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseCreate(KGradientSelector* self);
void KGradientSelector_Destroy(KGradientSelector* self);
void KGradientSelector_OnDestroy(KGradientSelector* self, intptr_t slot);
void KGradientSelector_QBaseDestroy(KGradientSelector* self);
bool KGradientSelector_FocusNextChild(KGradientSelector* self);
void KGradientSelector_OnFocusNextChild(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseFocusNextChild(KGradientSelector* self);
bool KGradientSelector_FocusPreviousChild(KGradientSelector* self);
void KGradientSelector_OnFocusPreviousChild(KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseFocusPreviousChild(KGradientSelector* self);
QObject* KGradientSelector_Sender(const KGradientSelector* self);
void KGradientSelector_OnSender(const KGradientSelector* self, intptr_t slot);
QObject* KGradientSelector_QBaseSender(const KGradientSelector* self);
int KGradientSelector_SenderSignalIndex(const KGradientSelector* self);
void KGradientSelector_OnSenderSignalIndex(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseSenderSignalIndex(const KGradientSelector* self);
int KGradientSelector_Receivers(const KGradientSelector* self, const char* signal);
void KGradientSelector_OnReceivers(const KGradientSelector* self, intptr_t slot);
int KGradientSelector_QBaseReceivers(const KGradientSelector* self, const char* signal);
bool KGradientSelector_IsSignalConnected(const KGradientSelector* self, const QMetaMethod* signal);
void KGradientSelector_OnIsSignalConnected(const KGradientSelector* self, intptr_t slot);
bool KGradientSelector_QBaseIsSignalConnected(const KGradientSelector* self, const QMetaMethod* signal);
double KGradientSelector_GetDecodedMetricF(const KGradientSelector* self, int metricA, int metricB);
void KGradientSelector_OnGetDecodedMetricF(const KGradientSelector* self, intptr_t slot);
double KGradientSelector_QBaseGetDecodedMetricF(const KGradientSelector* self, int metricA, int metricB);
void KGradientSelector_Delete(KGradientSelector* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
