#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKNEWPASSWORDDIALOG_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKNEWPASSWORDDIALOG_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KNewPasswordDialog KNewPasswordDialog;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDialog QDialog;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QIcon QIcon;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KNewPasswordDialog* KNewPasswordDialog_new(QWidget* parent);
KNewPasswordDialog* KNewPasswordDialog_new2();
QMetaObject* KNewPasswordDialog_MetaObject(const KNewPasswordDialog* self);
void* KNewPasswordDialog_Metacast(KNewPasswordDialog* self, const char* param1);
int KNewPasswordDialog_Metacall(KNewPasswordDialog* self, int param1, int param2, void** param3);
libqt_string KNewPasswordDialog_Tr(const char* s);
void KNewPasswordDialog_SetPrompt(KNewPasswordDialog* self, const libqt_string prompt);
libqt_string KNewPasswordDialog_Prompt(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetIcon(KNewPasswordDialog* self, const QIcon* icon);
QIcon* KNewPasswordDialog_Icon(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetAllowEmptyPasswords(KNewPasswordDialog* self, bool allowed);
bool KNewPasswordDialog_AllowEmptyPasswords(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetMinimumPasswordLength(KNewPasswordDialog* self, int minLength);
int KNewPasswordDialog_MinimumPasswordLength(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetMaximumPasswordLength(KNewPasswordDialog* self, int maxLength);
int KNewPasswordDialog_MaximumPasswordLength(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetReasonablePasswordLength(KNewPasswordDialog* self, int reasonableLength);
int KNewPasswordDialog_ReasonablePasswordLength(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetPasswordStrengthWarningLevel(KNewPasswordDialog* self, int warningLevel);
int KNewPasswordDialog_PasswordStrengthWarningLevel(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetBackgroundWarningColor(KNewPasswordDialog* self, const QColor* color);
QColor* KNewPasswordDialog_BackgroundWarningColor(const KNewPasswordDialog* self);
libqt_string KNewPasswordDialog_Password(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetRevealPasswordAvailable(KNewPasswordDialog* self, bool reveal);
bool KNewPasswordDialog_IsRevealPasswordAvailable(const KNewPasswordDialog* self);
int KNewPasswordDialog_RevealPasswordMode(const KNewPasswordDialog* self);
void KNewPasswordDialog_SetRevealPasswordMode(KNewPasswordDialog* self, int revealPasswordMode);
void KNewPasswordDialog_Accept(KNewPasswordDialog* self);
bool KNewPasswordDialog_CheckPassword(KNewPasswordDialog* self, const libqt_string param1);
void KNewPasswordDialog_NewPassword(KNewPasswordDialog* self, const libqt_string password);
void KNewPasswordDialog_Connect_NewPassword(KNewPasswordDialog* self, intptr_t slot);
libqt_string KNewPasswordDialog_Tr2(const char* s, const char* c);
libqt_string KNewPasswordDialog_Tr3(const char* s, const char* c, int n);
void KNewPasswordDialog_OnMetacall(KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseMetacall(KNewPasswordDialog* self, int param1, int param2, void** param3);
void KNewPasswordDialog_OnAccept(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseAccept(KNewPasswordDialog* self);
void KNewPasswordDialog_OnCheckPassword(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseCheckPassword(KNewPasswordDialog* self, const libqt_string param1);
void KNewPasswordDialog_SetVisible(KNewPasswordDialog* self, bool visible);
void KNewPasswordDialog_OnSetVisible(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseSetVisible(KNewPasswordDialog* self, bool visible);
QSize* KNewPasswordDialog_SizeHint(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnSizeHint(const KNewPasswordDialog* self, intptr_t slot);
QSize* KNewPasswordDialog_QBaseSizeHint(const KNewPasswordDialog* self);
QSize* KNewPasswordDialog_MinimumSizeHint(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnMinimumSizeHint(const KNewPasswordDialog* self, intptr_t slot);
QSize* KNewPasswordDialog_QBaseMinimumSizeHint(const KNewPasswordDialog* self);
void KNewPasswordDialog_Open(KNewPasswordDialog* self);
void KNewPasswordDialog_OnOpen(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseOpen(KNewPasswordDialog* self);
int KNewPasswordDialog_Exec(KNewPasswordDialog* self);
void KNewPasswordDialog_OnExec(KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseExec(KNewPasswordDialog* self);
void KNewPasswordDialog_Done(KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_OnDone(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDone(KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_Reject(KNewPasswordDialog* self);
void KNewPasswordDialog_OnReject(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseReject(KNewPasswordDialog* self);
void KNewPasswordDialog_KeyPressEvent(KNewPasswordDialog* self, QKeyEvent* param1);
void KNewPasswordDialog_OnKeyPressEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseKeyPressEvent(KNewPasswordDialog* self, QKeyEvent* param1);
void KNewPasswordDialog_CloseEvent(KNewPasswordDialog* self, QCloseEvent* param1);
void KNewPasswordDialog_OnCloseEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseCloseEvent(KNewPasswordDialog* self, QCloseEvent* param1);
void KNewPasswordDialog_ShowEvent(KNewPasswordDialog* self, QShowEvent* param1);
void KNewPasswordDialog_OnShowEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseShowEvent(KNewPasswordDialog* self, QShowEvent* param1);
void KNewPasswordDialog_ResizeEvent(KNewPasswordDialog* self, QResizeEvent* param1);
void KNewPasswordDialog_OnResizeEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseResizeEvent(KNewPasswordDialog* self, QResizeEvent* param1);
void KNewPasswordDialog_ContextMenuEvent(KNewPasswordDialog* self, QContextMenuEvent* param1);
void KNewPasswordDialog_OnContextMenuEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseContextMenuEvent(KNewPasswordDialog* self, QContextMenuEvent* param1);
bool KNewPasswordDialog_EventFilter(KNewPasswordDialog* self, QObject* param1, QEvent* param2);
void KNewPasswordDialog_OnEventFilter(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseEventFilter(KNewPasswordDialog* self, QObject* param1, QEvent* param2);
int KNewPasswordDialog_DevType(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnDevType(const KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseDevType(const KNewPasswordDialog* self);
int KNewPasswordDialog_HeightForWidth(const KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_OnHeightForWidth(const KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseHeightForWidth(const KNewPasswordDialog* self, int param1);
bool KNewPasswordDialog_HasHeightForWidth(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnHasHeightForWidth(const KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseHasHeightForWidth(const KNewPasswordDialog* self);
QPaintEngine* KNewPasswordDialog_PaintEngine(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnPaintEngine(const KNewPasswordDialog* self, intptr_t slot);
QPaintEngine* KNewPasswordDialog_QBasePaintEngine(const KNewPasswordDialog* self);
bool KNewPasswordDialog_Event(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_OnEvent(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseEvent(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_MousePressEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_OnMousePressEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseMousePressEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_MouseReleaseEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_OnMouseReleaseEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseMouseReleaseEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_MouseDoubleClickEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_OnMouseDoubleClickEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseMouseDoubleClickEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_MouseMoveEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_OnMouseMoveEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseMouseMoveEvent(KNewPasswordDialog* self, QMouseEvent* event);
void KNewPasswordDialog_WheelEvent(KNewPasswordDialog* self, QWheelEvent* event);
void KNewPasswordDialog_OnWheelEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseWheelEvent(KNewPasswordDialog* self, QWheelEvent* event);
void KNewPasswordDialog_KeyReleaseEvent(KNewPasswordDialog* self, QKeyEvent* event);
void KNewPasswordDialog_OnKeyReleaseEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseKeyReleaseEvent(KNewPasswordDialog* self, QKeyEvent* event);
void KNewPasswordDialog_FocusInEvent(KNewPasswordDialog* self, QFocusEvent* event);
void KNewPasswordDialog_OnFocusInEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseFocusInEvent(KNewPasswordDialog* self, QFocusEvent* event);
void KNewPasswordDialog_FocusOutEvent(KNewPasswordDialog* self, QFocusEvent* event);
void KNewPasswordDialog_OnFocusOutEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseFocusOutEvent(KNewPasswordDialog* self, QFocusEvent* event);
void KNewPasswordDialog_EnterEvent(KNewPasswordDialog* self, QEnterEvent* event);
void KNewPasswordDialog_OnEnterEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseEnterEvent(KNewPasswordDialog* self, QEnterEvent* event);
void KNewPasswordDialog_LeaveEvent(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_OnLeaveEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseLeaveEvent(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_PaintEvent(KNewPasswordDialog* self, QPaintEvent* event);
void KNewPasswordDialog_OnPaintEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBasePaintEvent(KNewPasswordDialog* self, QPaintEvent* event);
void KNewPasswordDialog_MoveEvent(KNewPasswordDialog* self, QMoveEvent* event);
void KNewPasswordDialog_OnMoveEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseMoveEvent(KNewPasswordDialog* self, QMoveEvent* event);
void KNewPasswordDialog_TabletEvent(KNewPasswordDialog* self, QTabletEvent* event);
void KNewPasswordDialog_OnTabletEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseTabletEvent(KNewPasswordDialog* self, QTabletEvent* event);
void KNewPasswordDialog_ActionEvent(KNewPasswordDialog* self, QActionEvent* event);
void KNewPasswordDialog_OnActionEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseActionEvent(KNewPasswordDialog* self, QActionEvent* event);
void KNewPasswordDialog_DragEnterEvent(KNewPasswordDialog* self, QDragEnterEvent* event);
void KNewPasswordDialog_OnDragEnterEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDragEnterEvent(KNewPasswordDialog* self, QDragEnterEvent* event);
void KNewPasswordDialog_DragMoveEvent(KNewPasswordDialog* self, QDragMoveEvent* event);
void KNewPasswordDialog_OnDragMoveEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDragMoveEvent(KNewPasswordDialog* self, QDragMoveEvent* event);
void KNewPasswordDialog_DragLeaveEvent(KNewPasswordDialog* self, QDragLeaveEvent* event);
void KNewPasswordDialog_OnDragLeaveEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDragLeaveEvent(KNewPasswordDialog* self, QDragLeaveEvent* event);
void KNewPasswordDialog_DropEvent(KNewPasswordDialog* self, QDropEvent* event);
void KNewPasswordDialog_OnDropEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDropEvent(KNewPasswordDialog* self, QDropEvent* event);
void KNewPasswordDialog_HideEvent(KNewPasswordDialog* self, QHideEvent* event);
void KNewPasswordDialog_OnHideEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseHideEvent(KNewPasswordDialog* self, QHideEvent* event);
bool KNewPasswordDialog_NativeEvent(KNewPasswordDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KNewPasswordDialog_OnNativeEvent(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseNativeEvent(KNewPasswordDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KNewPasswordDialog_ChangeEvent(KNewPasswordDialog* self, QEvent* param1);
void KNewPasswordDialog_OnChangeEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseChangeEvent(KNewPasswordDialog* self, QEvent* param1);
int KNewPasswordDialog_Metric(const KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_OnMetric(const KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseMetric(const KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_InitPainter(const KNewPasswordDialog* self, QPainter* painter);
void KNewPasswordDialog_OnInitPainter(const KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseInitPainter(const KNewPasswordDialog* self, QPainter* painter);
QPaintDevice* KNewPasswordDialog_Redirected(const KNewPasswordDialog* self, QPoint* offset);
void KNewPasswordDialog_OnRedirected(const KNewPasswordDialog* self, intptr_t slot);
QPaintDevice* KNewPasswordDialog_QBaseRedirected(const KNewPasswordDialog* self, QPoint* offset);
QPainter* KNewPasswordDialog_SharedPainter(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnSharedPainter(const KNewPasswordDialog* self, intptr_t slot);
QPainter* KNewPasswordDialog_QBaseSharedPainter(const KNewPasswordDialog* self);
void KNewPasswordDialog_InputMethodEvent(KNewPasswordDialog* self, QInputMethodEvent* param1);
void KNewPasswordDialog_OnInputMethodEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseInputMethodEvent(KNewPasswordDialog* self, QInputMethodEvent* param1);
QVariant* KNewPasswordDialog_InputMethodQuery(const KNewPasswordDialog* self, int param1);
void KNewPasswordDialog_OnInputMethodQuery(const KNewPasswordDialog* self, intptr_t slot);
QVariant* KNewPasswordDialog_QBaseInputMethodQuery(const KNewPasswordDialog* self, int param1);
bool KNewPasswordDialog_FocusNextPrevChild(KNewPasswordDialog* self, bool next);
void KNewPasswordDialog_OnFocusNextPrevChild(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseFocusNextPrevChild(KNewPasswordDialog* self, bool next);
void KNewPasswordDialog_TimerEvent(KNewPasswordDialog* self, QTimerEvent* event);
void KNewPasswordDialog_OnTimerEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseTimerEvent(KNewPasswordDialog* self, QTimerEvent* event);
void KNewPasswordDialog_ChildEvent(KNewPasswordDialog* self, QChildEvent* event);
void KNewPasswordDialog_OnChildEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseChildEvent(KNewPasswordDialog* self, QChildEvent* event);
void KNewPasswordDialog_CustomEvent(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_OnCustomEvent(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseCustomEvent(KNewPasswordDialog* self, QEvent* event);
void KNewPasswordDialog_ConnectNotify(KNewPasswordDialog* self, const QMetaMethod* signal);
void KNewPasswordDialog_OnConnectNotify(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseConnectNotify(KNewPasswordDialog* self, const QMetaMethod* signal);
void KNewPasswordDialog_DisconnectNotify(KNewPasswordDialog* self, const QMetaMethod* signal);
void KNewPasswordDialog_OnDisconnectNotify(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDisconnectNotify(KNewPasswordDialog* self, const QMetaMethod* signal);
void KNewPasswordDialog_AdjustPosition(KNewPasswordDialog* self, QWidget* param1);
void KNewPasswordDialog_OnAdjustPosition(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseAdjustPosition(KNewPasswordDialog* self, QWidget* param1);
void KNewPasswordDialog_UpdateMicroFocus(KNewPasswordDialog* self);
void KNewPasswordDialog_OnUpdateMicroFocus(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseUpdateMicroFocus(KNewPasswordDialog* self);
void KNewPasswordDialog_Create(KNewPasswordDialog* self);
void KNewPasswordDialog_OnCreate(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseCreate(KNewPasswordDialog* self);
void KNewPasswordDialog_Destroy(KNewPasswordDialog* self);
void KNewPasswordDialog_OnDestroy(KNewPasswordDialog* self, intptr_t slot);
void KNewPasswordDialog_QBaseDestroy(KNewPasswordDialog* self);
bool KNewPasswordDialog_FocusNextChild(KNewPasswordDialog* self);
void KNewPasswordDialog_OnFocusNextChild(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseFocusNextChild(KNewPasswordDialog* self);
bool KNewPasswordDialog_FocusPreviousChild(KNewPasswordDialog* self);
void KNewPasswordDialog_OnFocusPreviousChild(KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseFocusPreviousChild(KNewPasswordDialog* self);
QObject* KNewPasswordDialog_Sender(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnSender(const KNewPasswordDialog* self, intptr_t slot);
QObject* KNewPasswordDialog_QBaseSender(const KNewPasswordDialog* self);
int KNewPasswordDialog_SenderSignalIndex(const KNewPasswordDialog* self);
void KNewPasswordDialog_OnSenderSignalIndex(const KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseSenderSignalIndex(const KNewPasswordDialog* self);
int KNewPasswordDialog_Receivers(const KNewPasswordDialog* self, const char* signal);
void KNewPasswordDialog_OnReceivers(const KNewPasswordDialog* self, intptr_t slot);
int KNewPasswordDialog_QBaseReceivers(const KNewPasswordDialog* self, const char* signal);
bool KNewPasswordDialog_IsSignalConnected(const KNewPasswordDialog* self, const QMetaMethod* signal);
void KNewPasswordDialog_OnIsSignalConnected(const KNewPasswordDialog* self, intptr_t slot);
bool KNewPasswordDialog_QBaseIsSignalConnected(const KNewPasswordDialog* self, const QMetaMethod* signal);
double KNewPasswordDialog_GetDecodedMetricF(const KNewPasswordDialog* self, int metricA, int metricB);
void KNewPasswordDialog_OnGetDecodedMetricF(const KNewPasswordDialog* self, intptr_t slot);
double KNewPasswordDialog_QBaseGetDecodedMetricF(const KNewPasswordDialog* self, int metricA, int metricB);
void KNewPasswordDialog_Delete(KNewPasswordDialog* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
