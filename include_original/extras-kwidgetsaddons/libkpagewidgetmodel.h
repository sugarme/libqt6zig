#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKPAGEWIDGETMODEL_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKPAGEWIDGETMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KPageModel KPageModel;
typedef struct KPageWidgetItem KPageWidgetItem;
typedef struct KPageWidgetModel KPageWidgetModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAction QAction;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QIcon QIcon;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWidget QWidget;
#endif

KPageWidgetItem* KPageWidgetItem_new(QWidget* widget);
KPageWidgetItem* KPageWidgetItem_new2(QWidget* widget, const libqt_string name);
QMetaObject* KPageWidgetItem_MetaObject(const KPageWidgetItem* self);
void* KPageWidgetItem_Metacast(KPageWidgetItem* self, const char* param1);
int KPageWidgetItem_Metacall(KPageWidgetItem* self, int param1, int param2, void** param3);
libqt_string KPageWidgetItem_Tr(const char* s);
QWidget* KPageWidgetItem_Widget(const KPageWidgetItem* self);
void KPageWidgetItem_SetName(KPageWidgetItem* self, const libqt_string name);
libqt_string KPageWidgetItem_Name(const KPageWidgetItem* self);
void KPageWidgetItem_SetHeader(KPageWidgetItem* self, const libqt_string header);
libqt_string KPageWidgetItem_Header(const KPageWidgetItem* self);
void KPageWidgetItem_SetIcon(KPageWidgetItem* self, const QIcon* icon);
QIcon* KPageWidgetItem_Icon(const KPageWidgetItem* self);
void KPageWidgetItem_SetCheckable(KPageWidgetItem* self, bool checkable);
bool KPageWidgetItem_IsCheckable(const KPageWidgetItem* self);
bool KPageWidgetItem_IsChecked(const KPageWidgetItem* self);
bool KPageWidgetItem_IsEnabled(const KPageWidgetItem* self);
bool KPageWidgetItem_IsHeaderVisible(const KPageWidgetItem* self);
void KPageWidgetItem_SetHeaderVisible(KPageWidgetItem* self, bool visible);
libqt_list /* of QAction* */ KPageWidgetItem_Actions(const KPageWidgetItem* self);
void KPageWidgetItem_SetActions(KPageWidgetItem* self, libqt_list /* of QAction* */ actions);
void KPageWidgetItem_SetEnabled(KPageWidgetItem* self, bool enabled);
void KPageWidgetItem_SetChecked(KPageWidgetItem* self, bool checked);
void KPageWidgetItem_Changed(KPageWidgetItem* self);
void KPageWidgetItem_Connect_Changed(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_Toggled(KPageWidgetItem* self, bool checked);
void KPageWidgetItem_Connect_Toggled(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_ActionsChanged(KPageWidgetItem* self);
void KPageWidgetItem_Connect_ActionsChanged(KPageWidgetItem* self, intptr_t slot);
libqt_string KPageWidgetItem_Tr2(const char* s, const char* c);
libqt_string KPageWidgetItem_Tr3(const char* s, const char* c, int n);
void KPageWidgetItem_OnMetacall(KPageWidgetItem* self, intptr_t slot);
int KPageWidgetItem_QBaseMetacall(KPageWidgetItem* self, int param1, int param2, void** param3);
bool KPageWidgetItem_Event(KPageWidgetItem* self, QEvent* event);
void KPageWidgetItem_OnEvent(KPageWidgetItem* self, intptr_t slot);
bool KPageWidgetItem_QBaseEvent(KPageWidgetItem* self, QEvent* event);
bool KPageWidgetItem_EventFilter(KPageWidgetItem* self, QObject* watched, QEvent* event);
void KPageWidgetItem_OnEventFilter(KPageWidgetItem* self, intptr_t slot);
bool KPageWidgetItem_QBaseEventFilter(KPageWidgetItem* self, QObject* watched, QEvent* event);
void KPageWidgetItem_TimerEvent(KPageWidgetItem* self, QTimerEvent* event);
void KPageWidgetItem_OnTimerEvent(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_QBaseTimerEvent(KPageWidgetItem* self, QTimerEvent* event);
void KPageWidgetItem_ChildEvent(KPageWidgetItem* self, QChildEvent* event);
void KPageWidgetItem_OnChildEvent(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_QBaseChildEvent(KPageWidgetItem* self, QChildEvent* event);
void KPageWidgetItem_CustomEvent(KPageWidgetItem* self, QEvent* event);
void KPageWidgetItem_OnCustomEvent(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_QBaseCustomEvent(KPageWidgetItem* self, QEvent* event);
void KPageWidgetItem_ConnectNotify(KPageWidgetItem* self, const QMetaMethod* signal);
void KPageWidgetItem_OnConnectNotify(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_QBaseConnectNotify(KPageWidgetItem* self, const QMetaMethod* signal);
void KPageWidgetItem_DisconnectNotify(KPageWidgetItem* self, const QMetaMethod* signal);
void KPageWidgetItem_OnDisconnectNotify(KPageWidgetItem* self, intptr_t slot);
void KPageWidgetItem_QBaseDisconnectNotify(KPageWidgetItem* self, const QMetaMethod* signal);
QObject* KPageWidgetItem_Sender(const KPageWidgetItem* self);
void KPageWidgetItem_OnSender(const KPageWidgetItem* self, intptr_t slot);
QObject* KPageWidgetItem_QBaseSender(const KPageWidgetItem* self);
int KPageWidgetItem_SenderSignalIndex(const KPageWidgetItem* self);
void KPageWidgetItem_OnSenderSignalIndex(const KPageWidgetItem* self, intptr_t slot);
int KPageWidgetItem_QBaseSenderSignalIndex(const KPageWidgetItem* self);
int KPageWidgetItem_Receivers(const KPageWidgetItem* self, const char* signal);
void KPageWidgetItem_OnReceivers(const KPageWidgetItem* self, intptr_t slot);
int KPageWidgetItem_QBaseReceivers(const KPageWidgetItem* self, const char* signal);
bool KPageWidgetItem_IsSignalConnected(const KPageWidgetItem* self, const QMetaMethod* signal);
void KPageWidgetItem_OnIsSignalConnected(const KPageWidgetItem* self, intptr_t slot);
bool KPageWidgetItem_QBaseIsSignalConnected(const KPageWidgetItem* self, const QMetaMethod* signal);
void KPageWidgetItem_Delete(KPageWidgetItem* self);

KPageWidgetModel* KPageWidgetModel_new();
KPageWidgetModel* KPageWidgetModel_new2(QObject* parent);
QMetaObject* KPageWidgetModel_MetaObject(const KPageWidgetModel* self);
void* KPageWidgetModel_Metacast(KPageWidgetModel* self, const char* param1);
int KPageWidgetModel_Metacall(KPageWidgetModel* self, int param1, int param2, void** param3);
libqt_string KPageWidgetModel_Tr(const char* s);
KPageWidgetItem* KPageWidgetModel_AddPage(KPageWidgetModel* self, QWidget* widget, const libqt_string name);
void KPageWidgetModel_AddPage2(KPageWidgetModel* self, KPageWidgetItem* item);
KPageWidgetItem* KPageWidgetModel_InsertPage(KPageWidgetModel* self, KPageWidgetItem* before, QWidget* widget, const libqt_string name);
void KPageWidgetModel_InsertPage2(KPageWidgetModel* self, KPageWidgetItem* before, KPageWidgetItem* item);
KPageWidgetItem* KPageWidgetModel_AddSubPage(KPageWidgetModel* self, KPageWidgetItem* parent, QWidget* widget, const libqt_string name);
void KPageWidgetModel_AddSubPage2(KPageWidgetModel* self, KPageWidgetItem* parent, KPageWidgetItem* item);
void KPageWidgetModel_RemovePage(KPageWidgetModel* self, KPageWidgetItem* item);
int KPageWidgetModel_ColumnCount(const KPageWidgetModel* self, const QModelIndex* parent);
QVariant* KPageWidgetModel_Data(const KPageWidgetModel* self, const QModelIndex* index, int role);
bool KPageWidgetModel_SetData(KPageWidgetModel* self, const QModelIndex* index, const QVariant* value, int role);
int KPageWidgetModel_Flags(const KPageWidgetModel* self, const QModelIndex* index);
QModelIndex* KPageWidgetModel_Index(const KPageWidgetModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* KPageWidgetModel_Parent(const KPageWidgetModel* self, const QModelIndex* index);
int KPageWidgetModel_RowCount(const KPageWidgetModel* self, const QModelIndex* parent);
KPageWidgetItem* KPageWidgetModel_Item(const KPageWidgetModel* self, const QModelIndex* index);
QModelIndex* KPageWidgetModel_Index2(const KPageWidgetModel* self, const KPageWidgetItem* item);
void KPageWidgetModel_Toggled(KPageWidgetModel* self, KPageWidgetItem* page, bool checked);
void KPageWidgetModel_Connect_Toggled(KPageWidgetModel* self, intptr_t slot);
libqt_string KPageWidgetModel_Tr2(const char* s, const char* c);
libqt_string KPageWidgetModel_Tr3(const char* s, const char* c, int n);
void KPageWidgetModel_OnMetacall(KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseMetacall(KPageWidgetModel* self, int param1, int param2, void** param3);
void KPageWidgetModel_OnColumnCount(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseColumnCount(const KPageWidgetModel* self, const QModelIndex* parent);
void KPageWidgetModel_OnData(const KPageWidgetModel* self, intptr_t slot);
QVariant* KPageWidgetModel_QBaseData(const KPageWidgetModel* self, const QModelIndex* index, int role);
void KPageWidgetModel_OnSetData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseSetData(KPageWidgetModel* self, const QModelIndex* index, const QVariant* value, int role);
void KPageWidgetModel_OnFlags(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseFlags(const KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnIndex(const KPageWidgetModel* self, intptr_t slot);
QModelIndex* KPageWidgetModel_QBaseIndex(const KPageWidgetModel* self, int row, int column, const QModelIndex* parent);
void KPageWidgetModel_OnParent(const KPageWidgetModel* self, intptr_t slot);
QModelIndex* KPageWidgetModel_QBaseParent(const KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnRowCount(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseRowCount(const KPageWidgetModel* self, const QModelIndex* parent);
QModelIndex* KPageWidgetModel_Sibling(const KPageWidgetModel* self, int row, int column, const QModelIndex* idx);
void KPageWidgetModel_OnSibling(const KPageWidgetModel* self, intptr_t slot);
QModelIndex* KPageWidgetModel_QBaseSibling(const KPageWidgetModel* self, int row, int column, const QModelIndex* idx);
bool KPageWidgetModel_HasChildren(const KPageWidgetModel* self, const QModelIndex* parent);
void KPageWidgetModel_OnHasChildren(const KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseHasChildren(const KPageWidgetModel* self, const QModelIndex* parent);
QVariant* KPageWidgetModel_HeaderData(const KPageWidgetModel* self, int section, int orientation, int role);
void KPageWidgetModel_OnHeaderData(const KPageWidgetModel* self, intptr_t slot);
QVariant* KPageWidgetModel_QBaseHeaderData(const KPageWidgetModel* self, int section, int orientation, int role);
bool KPageWidgetModel_SetHeaderData(KPageWidgetModel* self, int section, int orientation, const QVariant* value, int role);
void KPageWidgetModel_OnSetHeaderData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseSetHeaderData(KPageWidgetModel* self, int section, int orientation, const QVariant* value, int role);
libqt_map /* of int to QVariant* */ KPageWidgetModel_ItemData(const KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnItemData(const KPageWidgetModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KPageWidgetModel_QBaseItemData(const KPageWidgetModel* self, const QModelIndex* index);
bool KPageWidgetModel_SetItemData(KPageWidgetModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KPageWidgetModel_OnSetItemData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseSetItemData(KPageWidgetModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KPageWidgetModel_ClearItemData(KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnClearItemData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseClearItemData(KPageWidgetModel* self, const QModelIndex* index);
libqt_list /* of libqt_string */ KPageWidgetModel_MimeTypes(const KPageWidgetModel* self);
void KPageWidgetModel_OnMimeTypes(const KPageWidgetModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KPageWidgetModel_QBaseMimeTypes(const KPageWidgetModel* self);
QMimeData* KPageWidgetModel_MimeData(const KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KPageWidgetModel_OnMimeData(const KPageWidgetModel* self, intptr_t slot);
QMimeData* KPageWidgetModel_QBaseMimeData(const KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool KPageWidgetModel_CanDropMimeData(const KPageWidgetModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KPageWidgetModel_OnCanDropMimeData(const KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseCanDropMimeData(const KPageWidgetModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
bool KPageWidgetModel_DropMimeData(KPageWidgetModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KPageWidgetModel_OnDropMimeData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseDropMimeData(KPageWidgetModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int KPageWidgetModel_SupportedDropActions(const KPageWidgetModel* self);
void KPageWidgetModel_OnSupportedDropActions(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseSupportedDropActions(const KPageWidgetModel* self);
int KPageWidgetModel_SupportedDragActions(const KPageWidgetModel* self);
void KPageWidgetModel_OnSupportedDragActions(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseSupportedDragActions(const KPageWidgetModel* self);
bool KPageWidgetModel_InsertRows(KPageWidgetModel* self, int row, int count, const QModelIndex* parent);
void KPageWidgetModel_OnInsertRows(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseInsertRows(KPageWidgetModel* self, int row, int count, const QModelIndex* parent);
bool KPageWidgetModel_InsertColumns(KPageWidgetModel* self, int column, int count, const QModelIndex* parent);
void KPageWidgetModel_OnInsertColumns(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseInsertColumns(KPageWidgetModel* self, int column, int count, const QModelIndex* parent);
bool KPageWidgetModel_RemoveRows(KPageWidgetModel* self, int row, int count, const QModelIndex* parent);
void KPageWidgetModel_OnRemoveRows(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseRemoveRows(KPageWidgetModel* self, int row, int count, const QModelIndex* parent);
bool KPageWidgetModel_RemoveColumns(KPageWidgetModel* self, int column, int count, const QModelIndex* parent);
void KPageWidgetModel_OnRemoveColumns(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseRemoveColumns(KPageWidgetModel* self, int column, int count, const QModelIndex* parent);
bool KPageWidgetModel_MoveRows(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KPageWidgetModel_OnMoveRows(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseMoveRows(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KPageWidgetModel_MoveColumns(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KPageWidgetModel_OnMoveColumns(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseMoveColumns(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KPageWidgetModel_FetchMore(KPageWidgetModel* self, const QModelIndex* parent);
void KPageWidgetModel_OnFetchMore(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseFetchMore(KPageWidgetModel* self, const QModelIndex* parent);
bool KPageWidgetModel_CanFetchMore(const KPageWidgetModel* self, const QModelIndex* parent);
void KPageWidgetModel_OnCanFetchMore(const KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseCanFetchMore(const KPageWidgetModel* self, const QModelIndex* parent);
void KPageWidgetModel_Sort(KPageWidgetModel* self, int column, int order);
void KPageWidgetModel_OnSort(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseSort(KPageWidgetModel* self, int column, int order);
QModelIndex* KPageWidgetModel_Buddy(const KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnBuddy(const KPageWidgetModel* self, intptr_t slot);
QModelIndex* KPageWidgetModel_QBaseBuddy(const KPageWidgetModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ KPageWidgetModel_Match(const KPageWidgetModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KPageWidgetModel_OnMatch(const KPageWidgetModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KPageWidgetModel_QBaseMatch(const KPageWidgetModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* KPageWidgetModel_Span(const KPageWidgetModel* self, const QModelIndex* index);
void KPageWidgetModel_OnSpan(const KPageWidgetModel* self, intptr_t slot);
QSize* KPageWidgetModel_QBaseSpan(const KPageWidgetModel* self, const QModelIndex* index);
libqt_map /* of int to libqt_string */ KPageWidgetModel_RoleNames(const KPageWidgetModel* self);
void KPageWidgetModel_OnRoleNames(const KPageWidgetModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KPageWidgetModel_QBaseRoleNames(const KPageWidgetModel* self);
void KPageWidgetModel_MultiData(const KPageWidgetModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KPageWidgetModel_OnMultiData(const KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseMultiData(const KPageWidgetModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool KPageWidgetModel_Submit(KPageWidgetModel* self);
void KPageWidgetModel_OnSubmit(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseSubmit(KPageWidgetModel* self);
void KPageWidgetModel_Revert(KPageWidgetModel* self);
void KPageWidgetModel_OnRevert(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseRevert(KPageWidgetModel* self);
void KPageWidgetModel_ResetInternalData(KPageWidgetModel* self);
void KPageWidgetModel_OnResetInternalData(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseResetInternalData(KPageWidgetModel* self);
bool KPageWidgetModel_Event(KPageWidgetModel* self, QEvent* event);
void KPageWidgetModel_OnEvent(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseEvent(KPageWidgetModel* self, QEvent* event);
bool KPageWidgetModel_EventFilter(KPageWidgetModel* self, QObject* watched, QEvent* event);
void KPageWidgetModel_OnEventFilter(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseEventFilter(KPageWidgetModel* self, QObject* watched, QEvent* event);
void KPageWidgetModel_TimerEvent(KPageWidgetModel* self, QTimerEvent* event);
void KPageWidgetModel_OnTimerEvent(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseTimerEvent(KPageWidgetModel* self, QTimerEvent* event);
void KPageWidgetModel_ChildEvent(KPageWidgetModel* self, QChildEvent* event);
void KPageWidgetModel_OnChildEvent(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseChildEvent(KPageWidgetModel* self, QChildEvent* event);
void KPageWidgetModel_CustomEvent(KPageWidgetModel* self, QEvent* event);
void KPageWidgetModel_OnCustomEvent(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseCustomEvent(KPageWidgetModel* self, QEvent* event);
void KPageWidgetModel_ConnectNotify(KPageWidgetModel* self, const QMetaMethod* signal);
void KPageWidgetModel_OnConnectNotify(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseConnectNotify(KPageWidgetModel* self, const QMetaMethod* signal);
void KPageWidgetModel_DisconnectNotify(KPageWidgetModel* self, const QMetaMethod* signal);
void KPageWidgetModel_OnDisconnectNotify(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseDisconnectNotify(KPageWidgetModel* self, const QMetaMethod* signal);
QModelIndex* KPageWidgetModel_CreateIndex(const KPageWidgetModel* self, int row, int column);
void KPageWidgetModel_OnCreateIndex(const KPageWidgetModel* self, intptr_t slot);
QModelIndex* KPageWidgetModel_QBaseCreateIndex(const KPageWidgetModel* self, int row, int column);
void KPageWidgetModel_EncodeData(const KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KPageWidgetModel_OnEncodeData(const KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEncodeData(const KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KPageWidgetModel_DecodeData(KPageWidgetModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KPageWidgetModel_OnDecodeData(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseDecodeData(KPageWidgetModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KPageWidgetModel_BeginInsertRows(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_OnBeginInsertRows(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseBeginInsertRows(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_EndInsertRows(KPageWidgetModel* self);
void KPageWidgetModel_OnEndInsertRows(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndInsertRows(KPageWidgetModel* self);
void KPageWidgetModel_BeginRemoveRows(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_OnBeginRemoveRows(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseBeginRemoveRows(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_EndRemoveRows(KPageWidgetModel* self);
void KPageWidgetModel_OnEndRemoveRows(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndRemoveRows(KPageWidgetModel* self);
bool KPageWidgetModel_BeginMoveRows(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KPageWidgetModel_OnBeginMoveRows(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseBeginMoveRows(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KPageWidgetModel_EndMoveRows(KPageWidgetModel* self);
void KPageWidgetModel_OnEndMoveRows(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndMoveRows(KPageWidgetModel* self);
void KPageWidgetModel_BeginInsertColumns(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_OnBeginInsertColumns(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseBeginInsertColumns(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_EndInsertColumns(KPageWidgetModel* self);
void KPageWidgetModel_OnEndInsertColumns(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndInsertColumns(KPageWidgetModel* self);
void KPageWidgetModel_BeginRemoveColumns(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_OnBeginRemoveColumns(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseBeginRemoveColumns(KPageWidgetModel* self, const QModelIndex* parent, int first, int last);
void KPageWidgetModel_EndRemoveColumns(KPageWidgetModel* self);
void KPageWidgetModel_OnEndRemoveColumns(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndRemoveColumns(KPageWidgetModel* self);
bool KPageWidgetModel_BeginMoveColumns(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KPageWidgetModel_OnBeginMoveColumns(KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseBeginMoveColumns(KPageWidgetModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KPageWidgetModel_EndMoveColumns(KPageWidgetModel* self);
void KPageWidgetModel_OnEndMoveColumns(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndMoveColumns(KPageWidgetModel* self);
void KPageWidgetModel_BeginResetModel(KPageWidgetModel* self);
void KPageWidgetModel_OnBeginResetModel(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseBeginResetModel(KPageWidgetModel* self);
void KPageWidgetModel_EndResetModel(KPageWidgetModel* self);
void KPageWidgetModel_OnEndResetModel(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseEndResetModel(KPageWidgetModel* self);
void KPageWidgetModel_ChangePersistentIndex(KPageWidgetModel* self, const QModelIndex* from, const QModelIndex* to);
void KPageWidgetModel_OnChangePersistentIndex(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseChangePersistentIndex(KPageWidgetModel* self, const QModelIndex* from, const QModelIndex* to);
void KPageWidgetModel_ChangePersistentIndexList(KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KPageWidgetModel_OnChangePersistentIndexList(KPageWidgetModel* self, intptr_t slot);
void KPageWidgetModel_QBaseChangePersistentIndexList(KPageWidgetModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KPageWidgetModel_PersistentIndexList(const KPageWidgetModel* self);
void KPageWidgetModel_OnPersistentIndexList(const KPageWidgetModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KPageWidgetModel_QBasePersistentIndexList(const KPageWidgetModel* self);
QObject* KPageWidgetModel_Sender(const KPageWidgetModel* self);
void KPageWidgetModel_OnSender(const KPageWidgetModel* self, intptr_t slot);
QObject* KPageWidgetModel_QBaseSender(const KPageWidgetModel* self);
int KPageWidgetModel_SenderSignalIndex(const KPageWidgetModel* self);
void KPageWidgetModel_OnSenderSignalIndex(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseSenderSignalIndex(const KPageWidgetModel* self);
int KPageWidgetModel_Receivers(const KPageWidgetModel* self, const char* signal);
void KPageWidgetModel_OnReceivers(const KPageWidgetModel* self, intptr_t slot);
int KPageWidgetModel_QBaseReceivers(const KPageWidgetModel* self, const char* signal);
bool KPageWidgetModel_IsSignalConnected(const KPageWidgetModel* self, const QMetaMethod* signal);
void KPageWidgetModel_OnIsSignalConnected(const KPageWidgetModel* self, intptr_t slot);
bool KPageWidgetModel_QBaseIsSignalConnected(const KPageWidgetModel* self, const QMetaMethod* signal);
void KPageWidgetModel_Delete(KPageWidgetModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
