#pragma once
#ifndef SRC_RESTRICTED_EXTRAS_QCUSTOMPLOTC_LIBQCUSTOMPLOT_H
#define SRC_RESTRICTED_EXTRAS_QCUSTOMPLOTC_LIBQCUSTOMPLOT_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct QActionEvent QActionEvent;
typedef struct QBrush QBrush;
typedef struct QCP QCP;
typedef struct QCPAbstractItem QCPAbstractItem;
typedef struct QCPAbstractLegendItem QCPAbstractLegendItem;
typedef struct QCPAbstractPaintBuffer QCPAbstractPaintBuffer;
typedef struct QCPAbstractPlottable QCPAbstractPlottable;
typedef struct QCPAxis QCPAxis;
typedef struct QCPAxisRect QCPAxisRect;
typedef struct QCPAxisTicker QCPAxisTicker;
typedef struct QCPAxisTickerDateTime QCPAxisTickerDateTime;
typedef struct QCPAxisTickerFixed QCPAxisTickerFixed;
typedef struct QCPAxisTickerLog QCPAxisTickerLog;
typedef struct QCPAxisTickerPi QCPAxisTickerPi;
typedef struct QCPAxisTickerText QCPAxisTickerText;
typedef struct QCPAxisTickerTime QCPAxisTickerTime;
typedef struct QCPBars QCPBars;
typedef struct QCPBarsData QCPBarsData;
typedef struct QCPBarsGroup QCPBarsGroup;
typedef struct QCPColorGradient QCPColorGradient;
typedef struct QCPColorMap QCPColorMap;
typedef struct QCPColorMapData QCPColorMapData;
typedef struct QCPColorScale QCPColorScale;
typedef struct QCPCurve QCPCurve;
typedef struct QCPCurveData QCPCurveData;
typedef struct QCPDataRange QCPDataRange;
typedef struct QCPDataSelection QCPDataSelection;
typedef struct QCPErrorBars QCPErrorBars;
typedef struct QCPErrorBarsData QCPErrorBarsData;
typedef struct QCPFinancial QCPFinancial;
typedef struct QCPFinancialData QCPFinancialData;
typedef struct QCPGraph QCPGraph;
typedef struct QCPGraphData QCPGraphData;
typedef struct QCPGrid QCPGrid;
typedef struct QCPItemAnchor QCPItemAnchor;
typedef struct QCPItemBracket QCPItemBracket;
typedef struct QCPItemCurve QCPItemCurve;
typedef struct QCPItemEllipse QCPItemEllipse;
typedef struct QCPItemLine QCPItemLine;
typedef struct QCPItemPixmap QCPItemPixmap;
typedef struct QCPItemPosition QCPItemPosition;
typedef struct QCPItemRect QCPItemRect;
typedef struct QCPItemStraightLine QCPItemStraightLine;
typedef struct QCPItemText QCPItemText;
typedef struct QCPItemTracer QCPItemTracer;
typedef struct QCPLayer QCPLayer;
typedef struct QCPLayerable QCPLayerable;
typedef struct QCPLayout QCPLayout;
typedef struct QCPLayoutElement QCPLayoutElement;
typedef struct QCPLayoutGrid QCPLayoutGrid;
typedef struct QCPLayoutInset QCPLayoutInset;
typedef struct QCPLegend QCPLegend;
typedef struct QCPLineEnding QCPLineEnding;
typedef struct QCPMarginGroup QCPMarginGroup;
typedef struct QCPPaintBufferPixmap QCPPaintBufferPixmap;
typedef struct QCPPainter QCPPainter;
typedef struct QCPPlottableInterface1D QCPPlottableInterface1D;
typedef struct QCPPlottableLegendItem QCPPlottableLegendItem;
typedef struct QCPPolarAxisAngular QCPPolarAxisAngular;
typedef struct QCPPolarAxisRadial QCPPolarAxisRadial;
typedef struct QCPPolarGraph QCPPolarGraph;
typedef struct QCPPolarGrid QCPPolarGrid;
typedef struct QCPPolarLegendItem QCPPolarLegendItem;
typedef struct QCPRange QCPRange;
typedef struct QCPScatterStyle QCPScatterStyle;
typedef struct QCPSelectionDecorator QCPSelectionDecorator;
typedef struct QCPSelectionDecoratorBracket QCPSelectionDecoratorBracket;
typedef struct QCPSelectionRect QCPSelectionRect;
typedef struct QCPStatisticalBox QCPStatisticalBox;
typedef struct QCPStatisticalBoxData QCPStatisticalBoxData;
typedef struct QCPTextElement QCPTextElement;
typedef struct QCPVector2D QCPVector2D;
typedef struct QChar QChar;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QCustomPlot QCustomPlot;
typedef struct QDate QDate;
typedef struct QDateTime QDateTime;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFont QFont;
typedef struct QHideEvent QHideEvent;
typedef struct QInputEvent QInputEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QLineF QLineF;
typedef struct QLocale QLocale;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPainterPath QPainterPath;
typedef struct QPen QPen;
typedef struct QPixmap QPixmap;
typedef struct QPoint QPoint;
typedef struct QPointF QPointF;
typedef struct QRect QRect;
typedef struct QRectF QRectF;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimeZone QTimeZone;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

QMetaObject* QCP_GetEnumMetaObject(int param1);
const char* QCP_GetEnumName(int param1);
QMetaObject* QCP_GetEnumMetaObject2(int param1);
const char* QCP_GetEnumName2(int param1);
QMetaObject* QCP_GetEnumMetaObject3(int param1);
const char* QCP_GetEnumName3(int param1);
QMetaObject* QCP_GetEnumMetaObject4(int param1);
const char* QCP_GetEnumName4(int param1);
QMetaObject* QCP_GetEnumMetaObject5(int param1);
const char* QCP_GetEnumName5(int param1);
QMetaObject* QCP_GetEnumMetaObject6(int param1);
const char* QCP_GetEnumName6(int param1);
QMetaObject* QCP_GetEnumMetaObject7(int param1);
const char* QCP_GetEnumName7(int param1);
QMetaObject* QCP_GetEnumMetaObject8(int param1);
const char* QCP_GetEnumName8(int param1);
QMetaObject* QCP_GetEnumMetaObject9(int param1);
const char* QCP_GetEnumName9(int param1);
QMetaObject* QCP_GetEnumMetaObject10(int param1);
const char* QCP_GetEnumName10(int param1);
QMetaObject* QCP_GetEnumMetaObject11(int param1);
const char* QCP_GetEnumName11(int param1);
QMetaObject* QCP_GetEnumMetaObject12(int param1);
const char* QCP_GetEnumName12(int param1);
QMetaObject* QCP_GetEnumMetaObject13(int param1);
const char* QCP_GetEnumName13(int param1);
bool QCP_IsInvalidData(double param1);
bool QCP_IsInvalidData2(double param1, double param2);
void QCP_SetMarginValue(QMargins* param1, int param2, int param3);
int QCP_GetMarginValue(const QMargins* param1, int param2);

QCPVector2D* QCPVector2D_new(const QCPVector2D* other);
QCPVector2D* QCPVector2D_new2(QCPVector2D* other);
QCPVector2D* QCPVector2D_new3();
QCPVector2D* QCPVector2D_new4(double x, double y);
QCPVector2D* QCPVector2D_new5(const QPoint* point);
QCPVector2D* QCPVector2D_new6(const QPointF* point);
QCPVector2D* QCPVector2D_new7(const QCPVector2D* param1);
void QCPVector2D_CopyAssign(QCPVector2D* self, QCPVector2D* other);
void QCPVector2D_MoveAssign(QCPVector2D* self, QCPVector2D* other);
double QCPVector2D_X(const QCPVector2D* self);
double QCPVector2D_Y(const QCPVector2D* self);
void QCPVector2D_SetX(QCPVector2D* self, double x);
void QCPVector2D_SetY(QCPVector2D* self, double y);
double QCPVector2D_Length(const QCPVector2D* self);
double QCPVector2D_LengthSquared(const QCPVector2D* self);
double QCPVector2D_Angle(const QCPVector2D* self);
QPoint* QCPVector2D_ToPoint(const QCPVector2D* self);
QPointF* QCPVector2D_ToPointF(const QCPVector2D* self);
bool QCPVector2D_IsNull(const QCPVector2D* self);
void QCPVector2D_Normalize(QCPVector2D* self);
QCPVector2D* QCPVector2D_Normalized(const QCPVector2D* self);
QCPVector2D* QCPVector2D_Perpendicular(const QCPVector2D* self);
double QCPVector2D_Dot(const QCPVector2D* self, const QCPVector2D* vec);
double QCPVector2D_DistanceSquaredToLine(const QCPVector2D* self, const QCPVector2D* start, const QCPVector2D* end);
double QCPVector2D_DistanceSquaredToLine2(const QCPVector2D* self, const QLineF* line);
double QCPVector2D_DistanceToStraightLine(const QCPVector2D* self, const QCPVector2D* base, const QCPVector2D* direction);
QCPVector2D* QCPVector2D_OperatorMultiplyAssign(QCPVector2D* self, double factor);
QCPVector2D* QCPVector2D_OperatorDivideAssign(QCPVector2D* self, double divisor);
QCPVector2D* QCPVector2D_OperatorPlusAssign(QCPVector2D* self, const QCPVector2D* vector);
QCPVector2D* QCPVector2D_OperatorMinusAssign(QCPVector2D* self, const QCPVector2D* vector);
void QCPVector2D_Delete(QCPVector2D* self);

QCPPainter* QCPPainter_new();
QCPPainter* QCPPainter_new2(QPaintDevice* device);
bool QCPPainter_Antialiasing(const QCPPainter* self);
int QCPPainter_Modes(const QCPPainter* self);
void QCPPainter_SetAntialiasing(QCPPainter* self, bool enabled);
void QCPPainter_SetMode(QCPPainter* self, int mode);
void QCPPainter_SetModes(QCPPainter* self, int modes);
bool QCPPainter_Begin(QCPPainter* self, QPaintDevice* device);
void QCPPainter_SetPen(QCPPainter* self, const QPen* pen);
void QCPPainter_SetPen2(QCPPainter* self, const QColor* color);
void QCPPainter_SetPen3(QCPPainter* self, int penStyle);
void QCPPainter_DrawLine(QCPPainter* self, const QLineF* line);
void QCPPainter_DrawLine2(QCPPainter* self, const QPointF* p1, const QPointF* p2);
void QCPPainter_Save(QCPPainter* self);
void QCPPainter_Restore(QCPPainter* self);
void QCPPainter_MakeNonCosmetic(QCPPainter* self);
void QCPPainter_SetMode2(QCPPainter* self, int mode, bool enabled);
void QCPPainter_Delete(QCPPainter* self);

QCPAbstractPaintBuffer* QCPAbstractPaintBuffer_new(const QSize* size, double devicePixelRatio);
QCPAbstractPaintBuffer* QCPAbstractPaintBuffer_new2(const QCPAbstractPaintBuffer* param1);
QSize* QCPAbstractPaintBuffer_Size(const QCPAbstractPaintBuffer* self);
bool QCPAbstractPaintBuffer_Invalidated(const QCPAbstractPaintBuffer* self);
double QCPAbstractPaintBuffer_DevicePixelRatio(const QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_SetSize(QCPAbstractPaintBuffer* self, const QSize* size);
void QCPAbstractPaintBuffer_SetInvalidated(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_SetDevicePixelRatio(QCPAbstractPaintBuffer* self, double ratio);
QCPPainter* QCPAbstractPaintBuffer_StartPainting(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_DonePainting(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_Draw(const QCPAbstractPaintBuffer* self, QCPPainter* painter);
void QCPAbstractPaintBuffer_Clear(QCPAbstractPaintBuffer* self, const QColor* color);
void QCPAbstractPaintBuffer_ReallocateBuffer(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_SetInvalidated1(QCPAbstractPaintBuffer* self, bool invalidated);
void QCPAbstractPaintBuffer_OnStartPainting(QCPAbstractPaintBuffer* self, intptr_t slot);
QCPPainter* QCPAbstractPaintBuffer_QBaseStartPainting(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_OnDonePainting(QCPAbstractPaintBuffer* self, intptr_t slot);
void QCPAbstractPaintBuffer_QBaseDonePainting(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_OnDraw(const QCPAbstractPaintBuffer* self, intptr_t slot);
void QCPAbstractPaintBuffer_QBaseDraw(const QCPAbstractPaintBuffer* self, QCPPainter* painter);
void QCPAbstractPaintBuffer_OnClear(QCPAbstractPaintBuffer* self, intptr_t slot);
void QCPAbstractPaintBuffer_QBaseClear(QCPAbstractPaintBuffer* self, const QColor* color);
void QCPAbstractPaintBuffer_OnReallocateBuffer(QCPAbstractPaintBuffer* self, intptr_t slot);
void QCPAbstractPaintBuffer_QBaseReallocateBuffer(QCPAbstractPaintBuffer* self);
void QCPAbstractPaintBuffer_OperatorAssign(QCPAbstractPaintBuffer* self, const QCPAbstractPaintBuffer* param1);
void QCPAbstractPaintBuffer_OnOperatorAssign(QCPAbstractPaintBuffer* self, intptr_t slot);
void QCPAbstractPaintBuffer_QBaseOperatorAssign(QCPAbstractPaintBuffer* self, const QCPAbstractPaintBuffer* param1);
void QCPAbstractPaintBuffer_Delete(QCPAbstractPaintBuffer* self);

QCPPaintBufferPixmap* QCPPaintBufferPixmap_new(const QSize* size, double devicePixelRatio);
QCPPaintBufferPixmap* QCPPaintBufferPixmap_new2(const QCPPaintBufferPixmap* param1);
QCPPainter* QCPPaintBufferPixmap_StartPainting(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_Draw(const QCPPaintBufferPixmap* self, QCPPainter* painter);
void QCPPaintBufferPixmap_Clear(QCPPaintBufferPixmap* self, const QColor* color);
void QCPPaintBufferPixmap_ReallocateBuffer(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_OnStartPainting(QCPPaintBufferPixmap* self, intptr_t slot);
QCPPainter* QCPPaintBufferPixmap_QBaseStartPainting(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_OnDraw(const QCPPaintBufferPixmap* self, intptr_t slot);
void QCPPaintBufferPixmap_QBaseDraw(const QCPPaintBufferPixmap* self, QCPPainter* painter);
void QCPPaintBufferPixmap_OnClear(QCPPaintBufferPixmap* self, intptr_t slot);
void QCPPaintBufferPixmap_QBaseClear(QCPPaintBufferPixmap* self, const QColor* color);
void QCPPaintBufferPixmap_OnReallocateBuffer(QCPPaintBufferPixmap* self, intptr_t slot);
void QCPPaintBufferPixmap_QBaseReallocateBuffer(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_DonePainting(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_OnDonePainting(QCPPaintBufferPixmap* self, intptr_t slot);
void QCPPaintBufferPixmap_QBaseDonePainting(QCPPaintBufferPixmap* self);
void QCPPaintBufferPixmap_OperatorAssign(QCPPaintBufferPixmap* self, const QCPPaintBufferPixmap* param1);
void QCPPaintBufferPixmap_OnOperatorAssign(QCPPaintBufferPixmap* self, intptr_t slot);
void QCPPaintBufferPixmap_QBaseOperatorAssign(QCPPaintBufferPixmap* self, const QCPPaintBufferPixmap* param1);
void QCPPaintBufferPixmap_Delete(QCPPaintBufferPixmap* self);

QCPLayer* QCPLayer_new(QCustomPlot* parentPlot, const libqt_string layerName);
QMetaObject* QCPLayer_MetaObject(const QCPLayer* self);
void* QCPLayer_Metacast(QCPLayer* self, const char* param1);
int QCPLayer_Metacall(QCPLayer* self, int param1, int param2, void** param3);
libqt_string QCPLayer_Tr(const char* s);
QCustomPlot* QCPLayer_ParentPlot(const QCPLayer* self);
libqt_string QCPLayer_Name(const QCPLayer* self);
int QCPLayer_Index(const QCPLayer* self);
libqt_list /* of QCPLayerable* */ QCPLayer_Children(const QCPLayer* self);
bool QCPLayer_Visible(const QCPLayer* self);
int QCPLayer_Mode(const QCPLayer* self);
void QCPLayer_SetVisible(QCPLayer* self, bool visible);
void QCPLayer_SetMode(QCPLayer* self, int mode);
void QCPLayer_Replot(QCPLayer* self);
libqt_string QCPLayer_Tr2(const char* s, const char* c);
libqt_string QCPLayer_Tr3(const char* s, const char* c, int n);
void QCPLayer_OnMetacall(QCPLayer* self, intptr_t slot);
int QCPLayer_QBaseMetacall(QCPLayer* self, int param1, int param2, void** param3);
bool QCPLayer_Event(QCPLayer* self, QEvent* event);
void QCPLayer_OnEvent(QCPLayer* self, intptr_t slot);
bool QCPLayer_QBaseEvent(QCPLayer* self, QEvent* event);
bool QCPLayer_EventFilter(QCPLayer* self, QObject* watched, QEvent* event);
void QCPLayer_OnEventFilter(QCPLayer* self, intptr_t slot);
bool QCPLayer_QBaseEventFilter(QCPLayer* self, QObject* watched, QEvent* event);
void QCPLayer_TimerEvent(QCPLayer* self, QTimerEvent* event);
void QCPLayer_OnTimerEvent(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseTimerEvent(QCPLayer* self, QTimerEvent* event);
void QCPLayer_ChildEvent(QCPLayer* self, QChildEvent* event);
void QCPLayer_OnChildEvent(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseChildEvent(QCPLayer* self, QChildEvent* event);
void QCPLayer_CustomEvent(QCPLayer* self, QEvent* event);
void QCPLayer_OnCustomEvent(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseCustomEvent(QCPLayer* self, QEvent* event);
void QCPLayer_ConnectNotify(QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_OnConnectNotify(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseConnectNotify(QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_DisconnectNotify(QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_OnDisconnectNotify(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseDisconnectNotify(QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_Draw(QCPLayer* self, QCPPainter* painter);
void QCPLayer_OnDraw(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseDraw(QCPLayer* self, QCPPainter* painter);
void QCPLayer_DrawToPaintBuffer(QCPLayer* self);
void QCPLayer_OnDrawToPaintBuffer(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseDrawToPaintBuffer(QCPLayer* self);
void QCPLayer_AddChild(QCPLayer* self, QCPLayerable* layerable, bool prepend);
void QCPLayer_OnAddChild(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseAddChild(QCPLayer* self, QCPLayerable* layerable, bool prepend);
void QCPLayer_RemoveChild(QCPLayer* self, QCPLayerable* layerable);
void QCPLayer_OnRemoveChild(QCPLayer* self, intptr_t slot);
void QCPLayer_QBaseRemoveChild(QCPLayer* self, QCPLayerable* layerable);
QObject* QCPLayer_Sender(const QCPLayer* self);
void QCPLayer_OnSender(const QCPLayer* self, intptr_t slot);
QObject* QCPLayer_QBaseSender(const QCPLayer* self);
int QCPLayer_SenderSignalIndex(const QCPLayer* self);
void QCPLayer_OnSenderSignalIndex(const QCPLayer* self, intptr_t slot);
int QCPLayer_QBaseSenderSignalIndex(const QCPLayer* self);
int QCPLayer_Receivers(const QCPLayer* self, const char* signal);
void QCPLayer_OnReceivers(const QCPLayer* self, intptr_t slot);
int QCPLayer_QBaseReceivers(const QCPLayer* self, const char* signal);
bool QCPLayer_IsSignalConnected(const QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_OnIsSignalConnected(const QCPLayer* self, intptr_t slot);
bool QCPLayer_QBaseIsSignalConnected(const QCPLayer* self, const QMetaMethod* signal);
void QCPLayer_Delete(QCPLayer* self);

QCPLayerable* QCPLayerable_new(QCustomPlot* plot);
QCPLayerable* QCPLayerable_new2(QCustomPlot* plot, libqt_string targetLayer);
QCPLayerable* QCPLayerable_new3(QCustomPlot* plot, libqt_string targetLayer, QCPLayerable* parentLayerable);
QMetaObject* QCPLayerable_MetaObject(const QCPLayerable* self);
void* QCPLayerable_Metacast(QCPLayerable* self, const char* param1);
int QCPLayerable_Metacall(QCPLayerable* self, int param1, int param2, void** param3);
libqt_string QCPLayerable_Tr(const char* s);
bool QCPLayerable_Visible(const QCPLayerable* self);
QCustomPlot* QCPLayerable_ParentPlot(const QCPLayerable* self);
QCPLayerable* QCPLayerable_ParentLayerable(const QCPLayerable* self);
QCPLayer* QCPLayerable_Layer(const QCPLayerable* self);
bool QCPLayerable_Antialiased(const QCPLayerable* self);
void QCPLayerable_SetVisible(QCPLayerable* self, bool on);
bool QCPLayerable_SetLayer(QCPLayerable* self, QCPLayer* layer);
bool QCPLayerable_SetLayer2(QCPLayerable* self, const libqt_string layerName);
void QCPLayerable_SetAntialiased(QCPLayerable* self, bool enabled);
double QCPLayerable_SelectTest(const QCPLayerable* self, const QPointF* pos, bool onlySelectable, QVariant* details);
bool QCPLayerable_RealVisibility(const QCPLayerable* self);
void QCPLayerable_LayerChanged(QCPLayerable* self, QCPLayer* newLayer);
void QCPLayerable_Connect_LayerChanged(QCPLayerable* self, intptr_t slot);
void QCPLayerable_ParentPlotInitialized(QCPLayerable* self, QCustomPlot* parentPlot);
int QCPLayerable_SelectionCategory(const QCPLayerable* self);
QRect* QCPLayerable_ClipRect(const QCPLayerable* self);
void QCPLayerable_ApplyDefaultAntialiasingHint(const QCPLayerable* self, QCPPainter* painter);
void QCPLayerable_Draw(QCPLayerable* self, QCPPainter* painter);
void QCPLayerable_SelectEvent(QCPLayerable* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayerable_DeselectEvent(QCPLayerable* self, bool* selectionStateChanged);
void QCPLayerable_MousePressEvent(QCPLayerable* self, QMouseEvent* event, const QVariant* details);
void QCPLayerable_MouseMoveEvent(QCPLayerable* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayerable_MouseReleaseEvent(QCPLayerable* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayerable_MouseDoubleClickEvent(QCPLayerable* self, QMouseEvent* event, const QVariant* details);
void QCPLayerable_WheelEvent(QCPLayerable* self, QWheelEvent* event);
libqt_string QCPLayerable_Tr2(const char* s, const char* c);
libqt_string QCPLayerable_Tr3(const char* s, const char* c, int n);
void QCPLayerable_OnMetacall(QCPLayerable* self, intptr_t slot);
int QCPLayerable_QBaseMetacall(QCPLayerable* self, int param1, int param2, void** param3);
void QCPLayerable_OnSelectTest(const QCPLayerable* self, intptr_t slot);
double QCPLayerable_QBaseSelectTest(const QCPLayerable* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayerable_OnParentPlotInitialized(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseParentPlotInitialized(QCPLayerable* self, QCustomPlot* parentPlot);
void QCPLayerable_OnSelectionCategory(const QCPLayerable* self, intptr_t slot);
int QCPLayerable_QBaseSelectionCategory(const QCPLayerable* self);
void QCPLayerable_OnClipRect(const QCPLayerable* self, intptr_t slot);
QRect* QCPLayerable_QBaseClipRect(const QCPLayerable* self);
void QCPLayerable_OnApplyDefaultAntialiasingHint(const QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseApplyDefaultAntialiasingHint(const QCPLayerable* self, QCPPainter* painter);
void QCPLayerable_OnDraw(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseDraw(QCPLayerable* self, QCPPainter* painter);
void QCPLayerable_OnSelectEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseSelectEvent(QCPLayerable* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayerable_OnDeselectEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseDeselectEvent(QCPLayerable* self, bool* selectionStateChanged);
void QCPLayerable_OnMousePressEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseMousePressEvent(QCPLayerable* self, QMouseEvent* event, const QVariant* details);
void QCPLayerable_OnMouseMoveEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseMouseMoveEvent(QCPLayerable* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayerable_OnMouseReleaseEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseMouseReleaseEvent(QCPLayerable* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayerable_OnMouseDoubleClickEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseMouseDoubleClickEvent(QCPLayerable* self, QMouseEvent* event, const QVariant* details);
void QCPLayerable_OnWheelEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseWheelEvent(QCPLayerable* self, QWheelEvent* event);
bool QCPLayerable_Event(QCPLayerable* self, QEvent* event);
void QCPLayerable_OnEvent(QCPLayerable* self, intptr_t slot);
bool QCPLayerable_QBaseEvent(QCPLayerable* self, QEvent* event);
bool QCPLayerable_EventFilter(QCPLayerable* self, QObject* watched, QEvent* event);
void QCPLayerable_OnEventFilter(QCPLayerable* self, intptr_t slot);
bool QCPLayerable_QBaseEventFilter(QCPLayerable* self, QObject* watched, QEvent* event);
void QCPLayerable_TimerEvent(QCPLayerable* self, QTimerEvent* event);
void QCPLayerable_OnTimerEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseTimerEvent(QCPLayerable* self, QTimerEvent* event);
void QCPLayerable_ChildEvent(QCPLayerable* self, QChildEvent* event);
void QCPLayerable_OnChildEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseChildEvent(QCPLayerable* self, QChildEvent* event);
void QCPLayerable_CustomEvent(QCPLayerable* self, QEvent* event);
void QCPLayerable_OnCustomEvent(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseCustomEvent(QCPLayerable* self, QEvent* event);
void QCPLayerable_ConnectNotify(QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_OnConnectNotify(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseConnectNotify(QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_DisconnectNotify(QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_OnDisconnectNotify(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseDisconnectNotify(QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_InitializeParentPlot(QCPLayerable* self, QCustomPlot* parentPlot);
void QCPLayerable_OnInitializeParentPlot(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseInitializeParentPlot(QCPLayerable* self, QCustomPlot* parentPlot);
void QCPLayerable_SetParentLayerable(QCPLayerable* self, QCPLayerable* parentLayerable);
void QCPLayerable_OnSetParentLayerable(QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseSetParentLayerable(QCPLayerable* self, QCPLayerable* parentLayerable);
bool QCPLayerable_MoveToLayer(QCPLayerable* self, QCPLayer* layer, bool prepend);
void QCPLayerable_OnMoveToLayer(QCPLayerable* self, intptr_t slot);
bool QCPLayerable_QBaseMoveToLayer(QCPLayerable* self, QCPLayer* layer, bool prepend);
void QCPLayerable_ApplyAntialiasingHint(const QCPLayerable* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLayerable_OnApplyAntialiasingHint(const QCPLayerable* self, intptr_t slot);
void QCPLayerable_QBaseApplyAntialiasingHint(const QCPLayerable* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLayerable_Sender(const QCPLayerable* self);
void QCPLayerable_OnSender(const QCPLayerable* self, intptr_t slot);
QObject* QCPLayerable_QBaseSender(const QCPLayerable* self);
int QCPLayerable_SenderSignalIndex(const QCPLayerable* self);
void QCPLayerable_OnSenderSignalIndex(const QCPLayerable* self, intptr_t slot);
int QCPLayerable_QBaseSenderSignalIndex(const QCPLayerable* self);
int QCPLayerable_Receivers(const QCPLayerable* self, const char* signal);
void QCPLayerable_OnReceivers(const QCPLayerable* self, intptr_t slot);
int QCPLayerable_QBaseReceivers(const QCPLayerable* self, const char* signal);
bool QCPLayerable_IsSignalConnected(const QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_OnIsSignalConnected(const QCPLayerable* self, intptr_t slot);
bool QCPLayerable_QBaseIsSignalConnected(const QCPLayerable* self, const QMetaMethod* signal);
void QCPLayerable_Delete(QCPLayerable* self);

QCPRange* QCPRange_new(const QCPRange* other);
QCPRange* QCPRange_new2(QCPRange* other);
QCPRange* QCPRange_new3();
QCPRange* QCPRange_new4(double lower, double upper);
QCPRange* QCPRange_new5(const QCPRange* param1);
void QCPRange_CopyAssign(QCPRange* self, QCPRange* other);
void QCPRange_MoveAssign(QCPRange* self, QCPRange* other);
double QCPRange_Lower(const QCPRange* self);
void QCPRange_SetLower(QCPRange* self, double lower);
double QCPRange_Upper(const QCPRange* self);
void QCPRange_SetUpper(QCPRange* self, double upper);
bool QCPRange_OperatorEqual(const QCPRange* self, const QCPRange* other);
bool QCPRange_OperatorNotEqual(const QCPRange* self, const QCPRange* other);
QCPRange* QCPRange_OperatorPlusAssign(QCPRange* self, const double* value);
QCPRange* QCPRange_OperatorMinusAssign(QCPRange* self, const double* value);
QCPRange* QCPRange_OperatorMultiplyAssign(QCPRange* self, const double* value);
QCPRange* QCPRange_OperatorDivideAssign(QCPRange* self, const double* value);
double QCPRange_Size(const QCPRange* self);
double QCPRange_Center(const QCPRange* self);
void QCPRange_Normalize(QCPRange* self);
void QCPRange_Expand(QCPRange* self, const QCPRange* otherRange);
void QCPRange_Expand2(QCPRange* self, double includeCoord);
QCPRange* QCPRange_Expanded(const QCPRange* self, const QCPRange* otherRange);
QCPRange* QCPRange_Expanded2(const QCPRange* self, double includeCoord);
QCPRange* QCPRange_Bounded(const QCPRange* self, double lowerBound, double upperBound);
QCPRange* QCPRange_SanitizedForLogScale(const QCPRange* self);
QCPRange* QCPRange_SanitizedForLinScale(const QCPRange* self);
bool QCPRange_Contains(const QCPRange* self, double value);
bool QCPRange_ValidRange(double lower, double upper);
bool QCPRange_ValidRange2(const QCPRange* range);
void QCPRange_Delete(QCPRange* self);

QCPDataRange* QCPDataRange_new(const QCPDataRange* other);
QCPDataRange* QCPDataRange_new2(QCPDataRange* other);
QCPDataRange* QCPDataRange_new3();
QCPDataRange* QCPDataRange_new4(int begin, int end);
QCPDataRange* QCPDataRange_new5(const QCPDataRange* param1);
void QCPDataRange_CopyAssign(QCPDataRange* self, QCPDataRange* other);
void QCPDataRange_MoveAssign(QCPDataRange* self, QCPDataRange* other);
bool QCPDataRange_OperatorEqual(const QCPDataRange* self, const QCPDataRange* other);
bool QCPDataRange_OperatorNotEqual(const QCPDataRange* self, const QCPDataRange* other);
int QCPDataRange_Begin(const QCPDataRange* self);
int QCPDataRange_End(const QCPDataRange* self);
int QCPDataRange_Size(const QCPDataRange* self);
int QCPDataRange_Length(const QCPDataRange* self);
void QCPDataRange_SetBegin(QCPDataRange* self, int begin);
void QCPDataRange_SetEnd(QCPDataRange* self, int end);
bool QCPDataRange_IsValid(const QCPDataRange* self);
bool QCPDataRange_IsEmpty(const QCPDataRange* self);
QCPDataRange* QCPDataRange_Bounded(const QCPDataRange* self, const QCPDataRange* other);
QCPDataRange* QCPDataRange_Expanded(const QCPDataRange* self, const QCPDataRange* other);
QCPDataRange* QCPDataRange_Intersection(const QCPDataRange* self, const QCPDataRange* other);
QCPDataRange* QCPDataRange_Adjusted(const QCPDataRange* self, int changeBegin, int changeEnd);
bool QCPDataRange_Intersects(const QCPDataRange* self, const QCPDataRange* other);
bool QCPDataRange_Contains(const QCPDataRange* self, const QCPDataRange* other);
void QCPDataRange_Delete(QCPDataRange* self);

QCPDataSelection* QCPDataSelection_new();
QCPDataSelection* QCPDataSelection_new2(const QCPDataRange* range);
QCPDataSelection* QCPDataSelection_new3(const QCPDataSelection* param1);
bool QCPDataSelection_OperatorEqual(const QCPDataSelection* self, const QCPDataSelection* other);
bool QCPDataSelection_OperatorNotEqual(const QCPDataSelection* self, const QCPDataSelection* other);
QCPDataSelection* QCPDataSelection_OperatorPlusAssign(QCPDataSelection* self, const QCPDataSelection* other);
QCPDataSelection* QCPDataSelection_OperatorPlusAssign2(QCPDataSelection* self, const QCPDataRange* other);
QCPDataSelection* QCPDataSelection_OperatorMinusAssign(QCPDataSelection* self, const QCPDataSelection* other);
QCPDataSelection* QCPDataSelection_OperatorMinusAssign2(QCPDataSelection* self, const QCPDataRange* other);
int QCPDataSelection_DataRangeCount(const QCPDataSelection* self);
int QCPDataSelection_DataPointCount(const QCPDataSelection* self);
QCPDataRange* QCPDataSelection_DataRange(const QCPDataSelection* self);
libqt_list /* of QCPDataRange* */ QCPDataSelection_DataRanges(const QCPDataSelection* self);
QCPDataRange* QCPDataSelection_Span(const QCPDataSelection* self);
void QCPDataSelection_AddDataRange(QCPDataSelection* self, const QCPDataRange* dataRange);
void QCPDataSelection_Clear(QCPDataSelection* self);
bool QCPDataSelection_IsEmpty(const QCPDataSelection* self);
void QCPDataSelection_Simplify(QCPDataSelection* self);
void QCPDataSelection_EnforceType(QCPDataSelection* self, int typeVal);
bool QCPDataSelection_Contains(const QCPDataSelection* self, const QCPDataSelection* other);
QCPDataSelection* QCPDataSelection_Intersection(const QCPDataSelection* self, const QCPDataRange* other);
QCPDataSelection* QCPDataSelection_Intersection2(const QCPDataSelection* self, const QCPDataSelection* other);
QCPDataSelection* QCPDataSelection_Inverse(const QCPDataSelection* self, const QCPDataRange* outerRange);
QCPDataRange* QCPDataSelection_DataRange1(const QCPDataSelection* self, int index);
void QCPDataSelection_AddDataRange2(QCPDataSelection* self, const QCPDataRange* dataRange, bool simplify);
void QCPDataSelection_Delete(QCPDataSelection* self);

QCPSelectionRect* QCPSelectionRect_new(QCustomPlot* parentPlot);
QMetaObject* QCPSelectionRect_MetaObject(const QCPSelectionRect* self);
void* QCPSelectionRect_Metacast(QCPSelectionRect* self, const char* param1);
int QCPSelectionRect_Metacall(QCPSelectionRect* self, int param1, int param2, void** param3);
libqt_string QCPSelectionRect_Tr(const char* s);
QRect* QCPSelectionRect_Rect(const QCPSelectionRect* self);
QCPRange* QCPSelectionRect_Range(const QCPSelectionRect* self, const QCPAxis* axis);
QPen* QCPSelectionRect_Pen(const QCPSelectionRect* self);
QBrush* QCPSelectionRect_Brush(const QCPSelectionRect* self);
bool QCPSelectionRect_IsActive(const QCPSelectionRect* self);
void QCPSelectionRect_SetPen(QCPSelectionRect* self, const QPen* pen);
void QCPSelectionRect_SetBrush(QCPSelectionRect* self, const QBrush* brush);
void QCPSelectionRect_Cancel(QCPSelectionRect* self);
void QCPSelectionRect_Started(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_Connect_Started(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_Changed(QCPSelectionRect* self, const QRect* rect, QMouseEvent* event);
void QCPSelectionRect_Connect_Changed(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_Canceled(QCPSelectionRect* self, const QRect* rect, QInputEvent* event);
void QCPSelectionRect_Connect_Canceled(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_Accepted(QCPSelectionRect* self, const QRect* rect, QMouseEvent* event);
void QCPSelectionRect_Connect_Accepted(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_StartSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_MoveSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_EndSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_KeyPressEvent(QCPSelectionRect* self, QKeyEvent* event);
void QCPSelectionRect_ApplyDefaultAntialiasingHint(const QCPSelectionRect* self, QCPPainter* painter);
void QCPSelectionRect_Draw(QCPSelectionRect* self, QCPPainter* painter);
libqt_string QCPSelectionRect_Tr2(const char* s, const char* c);
libqt_string QCPSelectionRect_Tr3(const char* s, const char* c, int n);
void QCPSelectionRect_OnMetacall(QCPSelectionRect* self, intptr_t slot);
int QCPSelectionRect_QBaseMetacall(QCPSelectionRect* self, int param1, int param2, void** param3);
void QCPSelectionRect_OnStartSelection(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseStartSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_OnMoveSelection(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseMoveSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_OnEndSelection(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseEndSelection(QCPSelectionRect* self, QMouseEvent* event);
void QCPSelectionRect_OnKeyPressEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseKeyPressEvent(QCPSelectionRect* self, QKeyEvent* event);
void QCPSelectionRect_OnApplyDefaultAntialiasingHint(const QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseApplyDefaultAntialiasingHint(const QCPSelectionRect* self, QCPPainter* painter);
void QCPSelectionRect_OnDraw(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseDraw(QCPSelectionRect* self, QCPPainter* painter);
double QCPSelectionRect_SelectTest(const QCPSelectionRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPSelectionRect_OnSelectTest(const QCPSelectionRect* self, intptr_t slot);
double QCPSelectionRect_QBaseSelectTest(const QCPSelectionRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPSelectionRect_ParentPlotInitialized(QCPSelectionRect* self, QCustomPlot* parentPlot);
void QCPSelectionRect_OnParentPlotInitialized(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseParentPlotInitialized(QCPSelectionRect* self, QCustomPlot* parentPlot);
int QCPSelectionRect_SelectionCategory(const QCPSelectionRect* self);
void QCPSelectionRect_OnSelectionCategory(const QCPSelectionRect* self, intptr_t slot);
int QCPSelectionRect_QBaseSelectionCategory(const QCPSelectionRect* self);
QRect* QCPSelectionRect_ClipRect(const QCPSelectionRect* self);
void QCPSelectionRect_OnClipRect(const QCPSelectionRect* self, intptr_t slot);
QRect* QCPSelectionRect_QBaseClipRect(const QCPSelectionRect* self);
void QCPSelectionRect_SelectEvent(QCPSelectionRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPSelectionRect_OnSelectEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseSelectEvent(QCPSelectionRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPSelectionRect_DeselectEvent(QCPSelectionRect* self, bool* selectionStateChanged);
void QCPSelectionRect_OnDeselectEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseDeselectEvent(QCPSelectionRect* self, bool* selectionStateChanged);
void QCPSelectionRect_MousePressEvent(QCPSelectionRect* self, QMouseEvent* event, const QVariant* details);
void QCPSelectionRect_OnMousePressEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseMousePressEvent(QCPSelectionRect* self, QMouseEvent* event, const QVariant* details);
void QCPSelectionRect_MouseMoveEvent(QCPSelectionRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPSelectionRect_OnMouseMoveEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseMouseMoveEvent(QCPSelectionRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPSelectionRect_MouseReleaseEvent(QCPSelectionRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPSelectionRect_OnMouseReleaseEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseMouseReleaseEvent(QCPSelectionRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPSelectionRect_MouseDoubleClickEvent(QCPSelectionRect* self, QMouseEvent* event, const QVariant* details);
void QCPSelectionRect_OnMouseDoubleClickEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseMouseDoubleClickEvent(QCPSelectionRect* self, QMouseEvent* event, const QVariant* details);
void QCPSelectionRect_WheelEvent(QCPSelectionRect* self, QWheelEvent* event);
void QCPSelectionRect_OnWheelEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseWheelEvent(QCPSelectionRect* self, QWheelEvent* event);
bool QCPSelectionRect_Event(QCPSelectionRect* self, QEvent* event);
void QCPSelectionRect_OnEvent(QCPSelectionRect* self, intptr_t slot);
bool QCPSelectionRect_QBaseEvent(QCPSelectionRect* self, QEvent* event);
bool QCPSelectionRect_EventFilter(QCPSelectionRect* self, QObject* watched, QEvent* event);
void QCPSelectionRect_OnEventFilter(QCPSelectionRect* self, intptr_t slot);
bool QCPSelectionRect_QBaseEventFilter(QCPSelectionRect* self, QObject* watched, QEvent* event);
void QCPSelectionRect_TimerEvent(QCPSelectionRect* self, QTimerEvent* event);
void QCPSelectionRect_OnTimerEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseTimerEvent(QCPSelectionRect* self, QTimerEvent* event);
void QCPSelectionRect_ChildEvent(QCPSelectionRect* self, QChildEvent* event);
void QCPSelectionRect_OnChildEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseChildEvent(QCPSelectionRect* self, QChildEvent* event);
void QCPSelectionRect_CustomEvent(QCPSelectionRect* self, QEvent* event);
void QCPSelectionRect_OnCustomEvent(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseCustomEvent(QCPSelectionRect* self, QEvent* event);
void QCPSelectionRect_ConnectNotify(QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_OnConnectNotify(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseConnectNotify(QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_DisconnectNotify(QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_OnDisconnectNotify(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseDisconnectNotify(QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_InitializeParentPlot(QCPSelectionRect* self, QCustomPlot* parentPlot);
void QCPSelectionRect_OnInitializeParentPlot(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseInitializeParentPlot(QCPSelectionRect* self, QCustomPlot* parentPlot);
void QCPSelectionRect_SetParentLayerable(QCPSelectionRect* self, QCPLayerable* parentLayerable);
void QCPSelectionRect_OnSetParentLayerable(QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseSetParentLayerable(QCPSelectionRect* self, QCPLayerable* parentLayerable);
bool QCPSelectionRect_MoveToLayer(QCPSelectionRect* self, QCPLayer* layer, bool prepend);
void QCPSelectionRect_OnMoveToLayer(QCPSelectionRect* self, intptr_t slot);
bool QCPSelectionRect_QBaseMoveToLayer(QCPSelectionRect* self, QCPLayer* layer, bool prepend);
void QCPSelectionRect_ApplyAntialiasingHint(const QCPSelectionRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPSelectionRect_OnApplyAntialiasingHint(const QCPSelectionRect* self, intptr_t slot);
void QCPSelectionRect_QBaseApplyAntialiasingHint(const QCPSelectionRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPSelectionRect_Sender(const QCPSelectionRect* self);
void QCPSelectionRect_OnSender(const QCPSelectionRect* self, intptr_t slot);
QObject* QCPSelectionRect_QBaseSender(const QCPSelectionRect* self);
int QCPSelectionRect_SenderSignalIndex(const QCPSelectionRect* self);
void QCPSelectionRect_OnSenderSignalIndex(const QCPSelectionRect* self, intptr_t slot);
int QCPSelectionRect_QBaseSenderSignalIndex(const QCPSelectionRect* self);
int QCPSelectionRect_Receivers(const QCPSelectionRect* self, const char* signal);
void QCPSelectionRect_OnReceivers(const QCPSelectionRect* self, intptr_t slot);
int QCPSelectionRect_QBaseReceivers(const QCPSelectionRect* self, const char* signal);
bool QCPSelectionRect_IsSignalConnected(const QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_OnIsSignalConnected(const QCPSelectionRect* self, intptr_t slot);
bool QCPSelectionRect_QBaseIsSignalConnected(const QCPSelectionRect* self, const QMetaMethod* signal);
void QCPSelectionRect_Delete(QCPSelectionRect* self);

QCPMarginGroup* QCPMarginGroup_new(QCustomPlot* parentPlot);
QMetaObject* QCPMarginGroup_MetaObject(const QCPMarginGroup* self);
void* QCPMarginGroup_Metacast(QCPMarginGroup* self, const char* param1);
int QCPMarginGroup_Metacall(QCPMarginGroup* self, int param1, int param2, void** param3);
libqt_string QCPMarginGroup_Tr(const char* s);
libqt_list /* of QCPLayoutElement* */ QCPMarginGroup_Elements(const QCPMarginGroup* self, int side);
bool QCPMarginGroup_IsEmpty(const QCPMarginGroup* self);
void QCPMarginGroup_Clear(QCPMarginGroup* self);
int QCPMarginGroup_CommonMargin(const QCPMarginGroup* self, int side);
libqt_string QCPMarginGroup_Tr2(const char* s, const char* c);
libqt_string QCPMarginGroup_Tr3(const char* s, const char* c, int n);
void QCPMarginGroup_OnMetacall(QCPMarginGroup* self, intptr_t slot);
int QCPMarginGroup_QBaseMetacall(QCPMarginGroup* self, int param1, int param2, void** param3);
void QCPMarginGroup_OnCommonMargin(const QCPMarginGroup* self, intptr_t slot);
int QCPMarginGroup_QBaseCommonMargin(const QCPMarginGroup* self, int side);
bool QCPMarginGroup_Event(QCPMarginGroup* self, QEvent* event);
void QCPMarginGroup_OnEvent(QCPMarginGroup* self, intptr_t slot);
bool QCPMarginGroup_QBaseEvent(QCPMarginGroup* self, QEvent* event);
bool QCPMarginGroup_EventFilter(QCPMarginGroup* self, QObject* watched, QEvent* event);
void QCPMarginGroup_OnEventFilter(QCPMarginGroup* self, intptr_t slot);
bool QCPMarginGroup_QBaseEventFilter(QCPMarginGroup* self, QObject* watched, QEvent* event);
void QCPMarginGroup_TimerEvent(QCPMarginGroup* self, QTimerEvent* event);
void QCPMarginGroup_OnTimerEvent(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseTimerEvent(QCPMarginGroup* self, QTimerEvent* event);
void QCPMarginGroup_ChildEvent(QCPMarginGroup* self, QChildEvent* event);
void QCPMarginGroup_OnChildEvent(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseChildEvent(QCPMarginGroup* self, QChildEvent* event);
void QCPMarginGroup_CustomEvent(QCPMarginGroup* self, QEvent* event);
void QCPMarginGroup_OnCustomEvent(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseCustomEvent(QCPMarginGroup* self, QEvent* event);
void QCPMarginGroup_ConnectNotify(QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_OnConnectNotify(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseConnectNotify(QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_DisconnectNotify(QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_OnDisconnectNotify(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseDisconnectNotify(QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_AddChild(QCPMarginGroup* self, int side, QCPLayoutElement* element);
void QCPMarginGroup_OnAddChild(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseAddChild(QCPMarginGroup* self, int side, QCPLayoutElement* element);
void QCPMarginGroup_RemoveChild(QCPMarginGroup* self, int side, QCPLayoutElement* element);
void QCPMarginGroup_OnRemoveChild(QCPMarginGroup* self, intptr_t slot);
void QCPMarginGroup_QBaseRemoveChild(QCPMarginGroup* self, int side, QCPLayoutElement* element);
QObject* QCPMarginGroup_Sender(const QCPMarginGroup* self);
void QCPMarginGroup_OnSender(const QCPMarginGroup* self, intptr_t slot);
QObject* QCPMarginGroup_QBaseSender(const QCPMarginGroup* self);
int QCPMarginGroup_SenderSignalIndex(const QCPMarginGroup* self);
void QCPMarginGroup_OnSenderSignalIndex(const QCPMarginGroup* self, intptr_t slot);
int QCPMarginGroup_QBaseSenderSignalIndex(const QCPMarginGroup* self);
int QCPMarginGroup_Receivers(const QCPMarginGroup* self, const char* signal);
void QCPMarginGroup_OnReceivers(const QCPMarginGroup* self, intptr_t slot);
int QCPMarginGroup_QBaseReceivers(const QCPMarginGroup* self, const char* signal);
bool QCPMarginGroup_IsSignalConnected(const QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_OnIsSignalConnected(const QCPMarginGroup* self, intptr_t slot);
bool QCPMarginGroup_QBaseIsSignalConnected(const QCPMarginGroup* self, const QMetaMethod* signal);
void QCPMarginGroup_Delete(QCPMarginGroup* self);

QCPLayoutElement* QCPLayoutElement_new();
QCPLayoutElement* QCPLayoutElement_new2(QCustomPlot* parentPlot);
QMetaObject* QCPLayoutElement_MetaObject(const QCPLayoutElement* self);
void* QCPLayoutElement_Metacast(QCPLayoutElement* self, const char* param1);
int QCPLayoutElement_Metacall(QCPLayoutElement* self, int param1, int param2, void** param3);
libqt_string QCPLayoutElement_Tr(const char* s);
QCPLayout* QCPLayoutElement_Layout(const QCPLayoutElement* self);
QRect* QCPLayoutElement_Rect(const QCPLayoutElement* self);
QRect* QCPLayoutElement_OuterRect(const QCPLayoutElement* self);
QMargins* QCPLayoutElement_Margins(const QCPLayoutElement* self);
QMargins* QCPLayoutElement_MinimumMargins(const QCPLayoutElement* self);
int QCPLayoutElement_AutoMargins(const QCPLayoutElement* self);
QSize* QCPLayoutElement_MinimumSize(const QCPLayoutElement* self);
QSize* QCPLayoutElement_MaximumSize(const QCPLayoutElement* self);
int QCPLayoutElement_SizeConstraintRect(const QCPLayoutElement* self);
QCPMarginGroup* QCPLayoutElement_MarginGroup(const QCPLayoutElement* self, int side);
libqt_map /* of int to QCPMarginGroup* */ QCPLayoutElement_MarginGroups(const QCPLayoutElement* self);
void QCPLayoutElement_SetOuterRect(QCPLayoutElement* self, const QRect* rect);
void QCPLayoutElement_SetMargins(QCPLayoutElement* self, const QMargins* margins);
void QCPLayoutElement_SetMinimumMargins(QCPLayoutElement* self, const QMargins* margins);
void QCPLayoutElement_SetAutoMargins(QCPLayoutElement* self, int sides);
void QCPLayoutElement_SetMinimumSize(QCPLayoutElement* self, const QSize* size);
void QCPLayoutElement_SetMinimumSize2(QCPLayoutElement* self, int width, int height);
void QCPLayoutElement_SetMaximumSize(QCPLayoutElement* self, const QSize* size);
void QCPLayoutElement_SetMaximumSize2(QCPLayoutElement* self, int width, int height);
void QCPLayoutElement_SetSizeConstraintRect(QCPLayoutElement* self, int constraintRect);
void QCPLayoutElement_SetMarginGroup(QCPLayoutElement* self, int sides, QCPMarginGroup* group);
void QCPLayoutElement_Update(QCPLayoutElement* self, int phase);
QSize* QCPLayoutElement_MinimumOuterSizeHint(const QCPLayoutElement* self);
QSize* QCPLayoutElement_MaximumOuterSizeHint(const QCPLayoutElement* self);
libqt_list /* of QCPLayoutElement* */ QCPLayoutElement_Elements(const QCPLayoutElement* self, bool recursive);
double QCPLayoutElement_SelectTest(const QCPLayoutElement* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPLayoutElement_CalculateAutoMargin(QCPLayoutElement* self, int side);
void QCPLayoutElement_LayoutChanged(QCPLayoutElement* self);
void QCPLayoutElement_ApplyDefaultAntialiasingHint(const QCPLayoutElement* self, QCPPainter* painter);
void QCPLayoutElement_Draw(QCPLayoutElement* self, QCPPainter* painter);
void QCPLayoutElement_ParentPlotInitialized(QCPLayoutElement* self, QCustomPlot* parentPlot);
libqt_string QCPLayoutElement_Tr2(const char* s, const char* c);
libqt_string QCPLayoutElement_Tr3(const char* s, const char* c, int n);
void QCPLayoutElement_OnMetacall(QCPLayoutElement* self, intptr_t slot);
int QCPLayoutElement_QBaseMetacall(QCPLayoutElement* self, int param1, int param2, void** param3);
void QCPLayoutElement_OnUpdate(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseUpdate(QCPLayoutElement* self, int phase);
void QCPLayoutElement_OnMinimumOuterSizeHint(const QCPLayoutElement* self, intptr_t slot);
QSize* QCPLayoutElement_QBaseMinimumOuterSizeHint(const QCPLayoutElement* self);
void QCPLayoutElement_OnMaximumOuterSizeHint(const QCPLayoutElement* self, intptr_t slot);
QSize* QCPLayoutElement_QBaseMaximumOuterSizeHint(const QCPLayoutElement* self);
void QCPLayoutElement_OnElements(const QCPLayoutElement* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPLayoutElement_QBaseElements(const QCPLayoutElement* self, bool recursive);
void QCPLayoutElement_OnSelectTest(const QCPLayoutElement* self, intptr_t slot);
double QCPLayoutElement_QBaseSelectTest(const QCPLayoutElement* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayoutElement_OnCalculateAutoMargin(QCPLayoutElement* self, intptr_t slot);
int QCPLayoutElement_QBaseCalculateAutoMargin(QCPLayoutElement* self, int side);
void QCPLayoutElement_OnLayoutChanged(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseLayoutChanged(QCPLayoutElement* self);
void QCPLayoutElement_OnApplyDefaultAntialiasingHint(const QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseApplyDefaultAntialiasingHint(const QCPLayoutElement* self, QCPPainter* painter);
void QCPLayoutElement_OnDraw(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseDraw(QCPLayoutElement* self, QCPPainter* painter);
void QCPLayoutElement_OnParentPlotInitialized(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseParentPlotInitialized(QCPLayoutElement* self, QCustomPlot* parentPlot);
int QCPLayoutElement_SelectionCategory(const QCPLayoutElement* self);
void QCPLayoutElement_OnSelectionCategory(const QCPLayoutElement* self, intptr_t slot);
int QCPLayoutElement_QBaseSelectionCategory(const QCPLayoutElement* self);
QRect* QCPLayoutElement_ClipRect(const QCPLayoutElement* self);
void QCPLayoutElement_OnClipRect(const QCPLayoutElement* self, intptr_t slot);
QRect* QCPLayoutElement_QBaseClipRect(const QCPLayoutElement* self);
void QCPLayoutElement_SelectEvent(QCPLayoutElement* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutElement_OnSelectEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseSelectEvent(QCPLayoutElement* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutElement_DeselectEvent(QCPLayoutElement* self, bool* selectionStateChanged);
void QCPLayoutElement_OnDeselectEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseDeselectEvent(QCPLayoutElement* self, bool* selectionStateChanged);
void QCPLayoutElement_MousePressEvent(QCPLayoutElement* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutElement_OnMousePressEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseMousePressEvent(QCPLayoutElement* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutElement_MouseMoveEvent(QCPLayoutElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutElement_OnMouseMoveEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseMouseMoveEvent(QCPLayoutElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutElement_MouseReleaseEvent(QCPLayoutElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutElement_OnMouseReleaseEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseMouseReleaseEvent(QCPLayoutElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutElement_MouseDoubleClickEvent(QCPLayoutElement* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutElement_OnMouseDoubleClickEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseMouseDoubleClickEvent(QCPLayoutElement* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutElement_WheelEvent(QCPLayoutElement* self, QWheelEvent* event);
void QCPLayoutElement_OnWheelEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseWheelEvent(QCPLayoutElement* self, QWheelEvent* event);
bool QCPLayoutElement_Event(QCPLayoutElement* self, QEvent* event);
void QCPLayoutElement_OnEvent(QCPLayoutElement* self, intptr_t slot);
bool QCPLayoutElement_QBaseEvent(QCPLayoutElement* self, QEvent* event);
bool QCPLayoutElement_EventFilter(QCPLayoutElement* self, QObject* watched, QEvent* event);
void QCPLayoutElement_OnEventFilter(QCPLayoutElement* self, intptr_t slot);
bool QCPLayoutElement_QBaseEventFilter(QCPLayoutElement* self, QObject* watched, QEvent* event);
void QCPLayoutElement_TimerEvent(QCPLayoutElement* self, QTimerEvent* event);
void QCPLayoutElement_OnTimerEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseTimerEvent(QCPLayoutElement* self, QTimerEvent* event);
void QCPLayoutElement_ChildEvent(QCPLayoutElement* self, QChildEvent* event);
void QCPLayoutElement_OnChildEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseChildEvent(QCPLayoutElement* self, QChildEvent* event);
void QCPLayoutElement_CustomEvent(QCPLayoutElement* self, QEvent* event);
void QCPLayoutElement_OnCustomEvent(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseCustomEvent(QCPLayoutElement* self, QEvent* event);
void QCPLayoutElement_ConnectNotify(QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_OnConnectNotify(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseConnectNotify(QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_DisconnectNotify(QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_OnDisconnectNotify(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseDisconnectNotify(QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_InitializeParentPlot(QCPLayoutElement* self, QCustomPlot* parentPlot);
void QCPLayoutElement_OnInitializeParentPlot(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseInitializeParentPlot(QCPLayoutElement* self, QCustomPlot* parentPlot);
void QCPLayoutElement_SetParentLayerable(QCPLayoutElement* self, QCPLayerable* parentLayerable);
void QCPLayoutElement_OnSetParentLayerable(QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseSetParentLayerable(QCPLayoutElement* self, QCPLayerable* parentLayerable);
bool QCPLayoutElement_MoveToLayer(QCPLayoutElement* self, QCPLayer* layer, bool prepend);
void QCPLayoutElement_OnMoveToLayer(QCPLayoutElement* self, intptr_t slot);
bool QCPLayoutElement_QBaseMoveToLayer(QCPLayoutElement* self, QCPLayer* layer, bool prepend);
void QCPLayoutElement_ApplyAntialiasingHint(const QCPLayoutElement* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLayoutElement_OnApplyAntialiasingHint(const QCPLayoutElement* self, intptr_t slot);
void QCPLayoutElement_QBaseApplyAntialiasingHint(const QCPLayoutElement* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLayoutElement_Sender(const QCPLayoutElement* self);
void QCPLayoutElement_OnSender(const QCPLayoutElement* self, intptr_t slot);
QObject* QCPLayoutElement_QBaseSender(const QCPLayoutElement* self);
int QCPLayoutElement_SenderSignalIndex(const QCPLayoutElement* self);
void QCPLayoutElement_OnSenderSignalIndex(const QCPLayoutElement* self, intptr_t slot);
int QCPLayoutElement_QBaseSenderSignalIndex(const QCPLayoutElement* self);
int QCPLayoutElement_Receivers(const QCPLayoutElement* self, const char* signal);
void QCPLayoutElement_OnReceivers(const QCPLayoutElement* self, intptr_t slot);
int QCPLayoutElement_QBaseReceivers(const QCPLayoutElement* self, const char* signal);
bool QCPLayoutElement_IsSignalConnected(const QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_OnIsSignalConnected(const QCPLayoutElement* self, intptr_t slot);
bool QCPLayoutElement_QBaseIsSignalConnected(const QCPLayoutElement* self, const QMetaMethod* signal);
void QCPLayoutElement_Delete(QCPLayoutElement* self);

QCPLayout* QCPLayout_new();
QMetaObject* QCPLayout_MetaObject(const QCPLayout* self);
void* QCPLayout_Metacast(QCPLayout* self, const char* param1);
int QCPLayout_Metacall(QCPLayout* self, int param1, int param2, void** param3);
libqt_string QCPLayout_Tr(const char* s);
void QCPLayout_Update(QCPLayout* self, int phase);
libqt_list /* of QCPLayoutElement* */ QCPLayout_Elements(const QCPLayout* self, bool recursive);
int QCPLayout_ElementCount(const QCPLayout* self);
QCPLayoutElement* QCPLayout_ElementAt(const QCPLayout* self, int index);
QCPLayoutElement* QCPLayout_TakeAt(QCPLayout* self, int index);
bool QCPLayout_Take(QCPLayout* self, QCPLayoutElement* element);
void QCPLayout_Simplify(QCPLayout* self);
bool QCPLayout_RemoveAt(QCPLayout* self, int index);
bool QCPLayout_Remove(QCPLayout* self, QCPLayoutElement* element);
void QCPLayout_Clear(QCPLayout* self);
void QCPLayout_UpdateLayout(QCPLayout* self);
libqt_string QCPLayout_Tr2(const char* s, const char* c);
libqt_string QCPLayout_Tr3(const char* s, const char* c, int n);
void QCPLayout_OnMetacall(QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseMetacall(QCPLayout* self, int param1, int param2, void** param3);
void QCPLayout_OnUpdate(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseUpdate(QCPLayout* self, int phase);
void QCPLayout_OnElements(const QCPLayout* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPLayout_QBaseElements(const QCPLayout* self, bool recursive);
void QCPLayout_OnElementCount(const QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseElementCount(const QCPLayout* self);
void QCPLayout_OnElementAt(const QCPLayout* self, intptr_t slot);
QCPLayoutElement* QCPLayout_QBaseElementAt(const QCPLayout* self, int index);
void QCPLayout_OnTakeAt(QCPLayout* self, intptr_t slot);
QCPLayoutElement* QCPLayout_QBaseTakeAt(QCPLayout* self, int index);
void QCPLayout_OnTake(QCPLayout* self, intptr_t slot);
bool QCPLayout_QBaseTake(QCPLayout* self, QCPLayoutElement* element);
void QCPLayout_OnSimplify(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseSimplify(QCPLayout* self);
void QCPLayout_OnUpdateLayout(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseUpdateLayout(QCPLayout* self);
QSize* QCPLayout_MinimumOuterSizeHint(const QCPLayout* self);
void QCPLayout_OnMinimumOuterSizeHint(const QCPLayout* self, intptr_t slot);
QSize* QCPLayout_QBaseMinimumOuterSizeHint(const QCPLayout* self);
QSize* QCPLayout_MaximumOuterSizeHint(const QCPLayout* self);
void QCPLayout_OnMaximumOuterSizeHint(const QCPLayout* self, intptr_t slot);
QSize* QCPLayout_QBaseMaximumOuterSizeHint(const QCPLayout* self);
double QCPLayout_SelectTest(const QCPLayout* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayout_OnSelectTest(const QCPLayout* self, intptr_t slot);
double QCPLayout_QBaseSelectTest(const QCPLayout* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPLayout_CalculateAutoMargin(QCPLayout* self, int side);
void QCPLayout_OnCalculateAutoMargin(QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseCalculateAutoMargin(QCPLayout* self, int side);
void QCPLayout_LayoutChanged(QCPLayout* self);
void QCPLayout_OnLayoutChanged(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseLayoutChanged(QCPLayout* self);
void QCPLayout_ApplyDefaultAntialiasingHint(const QCPLayout* self, QCPPainter* painter);
void QCPLayout_OnApplyDefaultAntialiasingHint(const QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseApplyDefaultAntialiasingHint(const QCPLayout* self, QCPPainter* painter);
void QCPLayout_Draw(QCPLayout* self, QCPPainter* painter);
void QCPLayout_OnDraw(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseDraw(QCPLayout* self, QCPPainter* painter);
void QCPLayout_ParentPlotInitialized(QCPLayout* self, QCustomPlot* parentPlot);
void QCPLayout_OnParentPlotInitialized(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseParentPlotInitialized(QCPLayout* self, QCustomPlot* parentPlot);
int QCPLayout_SelectionCategory(const QCPLayout* self);
void QCPLayout_OnSelectionCategory(const QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseSelectionCategory(const QCPLayout* self);
QRect* QCPLayout_ClipRect(const QCPLayout* self);
void QCPLayout_OnClipRect(const QCPLayout* self, intptr_t slot);
QRect* QCPLayout_QBaseClipRect(const QCPLayout* self);
void QCPLayout_SelectEvent(QCPLayout* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayout_OnSelectEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseSelectEvent(QCPLayout* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayout_DeselectEvent(QCPLayout* self, bool* selectionStateChanged);
void QCPLayout_OnDeselectEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseDeselectEvent(QCPLayout* self, bool* selectionStateChanged);
void QCPLayout_MousePressEvent(QCPLayout* self, QMouseEvent* event, const QVariant* details);
void QCPLayout_OnMousePressEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseMousePressEvent(QCPLayout* self, QMouseEvent* event, const QVariant* details);
void QCPLayout_MouseMoveEvent(QCPLayout* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayout_OnMouseMoveEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseMouseMoveEvent(QCPLayout* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayout_MouseReleaseEvent(QCPLayout* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayout_OnMouseReleaseEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseMouseReleaseEvent(QCPLayout* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayout_MouseDoubleClickEvent(QCPLayout* self, QMouseEvent* event, const QVariant* details);
void QCPLayout_OnMouseDoubleClickEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseMouseDoubleClickEvent(QCPLayout* self, QMouseEvent* event, const QVariant* details);
void QCPLayout_WheelEvent(QCPLayout* self, QWheelEvent* event);
void QCPLayout_OnWheelEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseWheelEvent(QCPLayout* self, QWheelEvent* event);
bool QCPLayout_Event(QCPLayout* self, QEvent* event);
void QCPLayout_OnEvent(QCPLayout* self, intptr_t slot);
bool QCPLayout_QBaseEvent(QCPLayout* self, QEvent* event);
bool QCPLayout_EventFilter(QCPLayout* self, QObject* watched, QEvent* event);
void QCPLayout_OnEventFilter(QCPLayout* self, intptr_t slot);
bool QCPLayout_QBaseEventFilter(QCPLayout* self, QObject* watched, QEvent* event);
void QCPLayout_TimerEvent(QCPLayout* self, QTimerEvent* event);
void QCPLayout_OnTimerEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseTimerEvent(QCPLayout* self, QTimerEvent* event);
void QCPLayout_ChildEvent(QCPLayout* self, QChildEvent* event);
void QCPLayout_OnChildEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseChildEvent(QCPLayout* self, QChildEvent* event);
void QCPLayout_CustomEvent(QCPLayout* self, QEvent* event);
void QCPLayout_OnCustomEvent(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseCustomEvent(QCPLayout* self, QEvent* event);
void QCPLayout_ConnectNotify(QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_OnConnectNotify(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseConnectNotify(QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_DisconnectNotify(QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_OnDisconnectNotify(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseDisconnectNotify(QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_SizeConstraintsChanged(const QCPLayout* self);
void QCPLayout_OnSizeConstraintsChanged(const QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseSizeConstraintsChanged(const QCPLayout* self);
void QCPLayout_AdoptElement(QCPLayout* self, QCPLayoutElement* el);
void QCPLayout_OnAdoptElement(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseAdoptElement(QCPLayout* self, QCPLayoutElement* el);
void QCPLayout_ReleaseElement(QCPLayout* self, QCPLayoutElement* el);
void QCPLayout_OnReleaseElement(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseReleaseElement(QCPLayout* self, QCPLayoutElement* el);
libqt_list /* of int */ QCPLayout_GetSectionSizes(const QCPLayout* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayout_OnGetSectionSizes(const QCPLayout* self, intptr_t slot);
libqt_list /* of int */ QCPLayout_QBaseGetSectionSizes(const QCPLayout* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayout_InitializeParentPlot(QCPLayout* self, QCustomPlot* parentPlot);
void QCPLayout_OnInitializeParentPlot(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseInitializeParentPlot(QCPLayout* self, QCustomPlot* parentPlot);
void QCPLayout_SetParentLayerable(QCPLayout* self, QCPLayerable* parentLayerable);
void QCPLayout_OnSetParentLayerable(QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseSetParentLayerable(QCPLayout* self, QCPLayerable* parentLayerable);
bool QCPLayout_MoveToLayer(QCPLayout* self, QCPLayer* layer, bool prepend);
void QCPLayout_OnMoveToLayer(QCPLayout* self, intptr_t slot);
bool QCPLayout_QBaseMoveToLayer(QCPLayout* self, QCPLayer* layer, bool prepend);
void QCPLayout_ApplyAntialiasingHint(const QCPLayout* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLayout_OnApplyAntialiasingHint(const QCPLayout* self, intptr_t slot);
void QCPLayout_QBaseApplyAntialiasingHint(const QCPLayout* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLayout_Sender(const QCPLayout* self);
void QCPLayout_OnSender(const QCPLayout* self, intptr_t slot);
QObject* QCPLayout_QBaseSender(const QCPLayout* self);
int QCPLayout_SenderSignalIndex(const QCPLayout* self);
void QCPLayout_OnSenderSignalIndex(const QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseSenderSignalIndex(const QCPLayout* self);
int QCPLayout_Receivers(const QCPLayout* self, const char* signal);
void QCPLayout_OnReceivers(const QCPLayout* self, intptr_t slot);
int QCPLayout_QBaseReceivers(const QCPLayout* self, const char* signal);
bool QCPLayout_IsSignalConnected(const QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_OnIsSignalConnected(const QCPLayout* self, intptr_t slot);
bool QCPLayout_QBaseIsSignalConnected(const QCPLayout* self, const QMetaMethod* signal);
void QCPLayout_Delete(QCPLayout* self);

QCPLayoutGrid* QCPLayoutGrid_new();
QMetaObject* QCPLayoutGrid_MetaObject(const QCPLayoutGrid* self);
void* QCPLayoutGrid_Metacast(QCPLayoutGrid* self, const char* param1);
int QCPLayoutGrid_Metacall(QCPLayoutGrid* self, int param1, int param2, void** param3);
libqt_string QCPLayoutGrid_Tr(const char* s);
int QCPLayoutGrid_RowCount(const QCPLayoutGrid* self);
int QCPLayoutGrid_ColumnCount(const QCPLayoutGrid* self);
libqt_list /* of double */ QCPLayoutGrid_ColumnStretchFactors(const QCPLayoutGrid* self);
libqt_list /* of double */ QCPLayoutGrid_RowStretchFactors(const QCPLayoutGrid* self);
int QCPLayoutGrid_ColumnSpacing(const QCPLayoutGrid* self);
int QCPLayoutGrid_RowSpacing(const QCPLayoutGrid* self);
int QCPLayoutGrid_Wrap(const QCPLayoutGrid* self);
int QCPLayoutGrid_FillOrder(const QCPLayoutGrid* self);
void QCPLayoutGrid_SetColumnStretchFactor(QCPLayoutGrid* self, int column, double factor);
void QCPLayoutGrid_SetColumnStretchFactors(QCPLayoutGrid* self, const libqt_list /* of double */ factors);
void QCPLayoutGrid_SetRowStretchFactor(QCPLayoutGrid* self, int row, double factor);
void QCPLayoutGrid_SetRowStretchFactors(QCPLayoutGrid* self, const libqt_list /* of double */ factors);
void QCPLayoutGrid_SetColumnSpacing(QCPLayoutGrid* self, int pixels);
void QCPLayoutGrid_SetRowSpacing(QCPLayoutGrid* self, int pixels);
void QCPLayoutGrid_SetWrap(QCPLayoutGrid* self, int count);
void QCPLayoutGrid_SetFillOrder(QCPLayoutGrid* self, int order);
void QCPLayoutGrid_UpdateLayout(QCPLayoutGrid* self);
int QCPLayoutGrid_ElementCount(const QCPLayoutGrid* self);
QCPLayoutElement* QCPLayoutGrid_ElementAt(const QCPLayoutGrid* self, int index);
QCPLayoutElement* QCPLayoutGrid_TakeAt(QCPLayoutGrid* self, int index);
bool QCPLayoutGrid_Take(QCPLayoutGrid* self, QCPLayoutElement* element);
libqt_list /* of QCPLayoutElement* */ QCPLayoutGrid_Elements(const QCPLayoutGrid* self, bool recursive);
void QCPLayoutGrid_Simplify(QCPLayoutGrid* self);
QSize* QCPLayoutGrid_MinimumOuterSizeHint(const QCPLayoutGrid* self);
QSize* QCPLayoutGrid_MaximumOuterSizeHint(const QCPLayoutGrid* self);
QCPLayoutElement* QCPLayoutGrid_Element(const QCPLayoutGrid* self, int row, int column);
bool QCPLayoutGrid_AddElement(QCPLayoutGrid* self, int row, int column, QCPLayoutElement* element);
bool QCPLayoutGrid_AddElement2(QCPLayoutGrid* self, QCPLayoutElement* element);
bool QCPLayoutGrid_HasElement(QCPLayoutGrid* self, int row, int column);
void QCPLayoutGrid_ExpandTo(QCPLayoutGrid* self, int newRowCount, int newColumnCount);
void QCPLayoutGrid_InsertRow(QCPLayoutGrid* self, int newIndex);
void QCPLayoutGrid_InsertColumn(QCPLayoutGrid* self, int newIndex);
int QCPLayoutGrid_RowColToIndex(const QCPLayoutGrid* self, int row, int column);
void QCPLayoutGrid_IndexToRowCol(const QCPLayoutGrid* self, int index, int* row, int* column);
libqt_string QCPLayoutGrid_Tr2(const char* s, const char* c);
libqt_string QCPLayoutGrid_Tr3(const char* s, const char* c, int n);
void QCPLayoutGrid_SetFillOrder2(QCPLayoutGrid* self, int order, bool rearrange);
void QCPLayoutGrid_OnMetacall(QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseMetacall(QCPLayoutGrid* self, int param1, int param2, void** param3);
void QCPLayoutGrid_OnUpdateLayout(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseUpdateLayout(QCPLayoutGrid* self);
void QCPLayoutGrid_OnElementCount(const QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseElementCount(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnElementAt(const QCPLayoutGrid* self, intptr_t slot);
QCPLayoutElement* QCPLayoutGrid_QBaseElementAt(const QCPLayoutGrid* self, int index);
void QCPLayoutGrid_OnTakeAt(QCPLayoutGrid* self, intptr_t slot);
QCPLayoutElement* QCPLayoutGrid_QBaseTakeAt(QCPLayoutGrid* self, int index);
void QCPLayoutGrid_OnTake(QCPLayoutGrid* self, intptr_t slot);
bool QCPLayoutGrid_QBaseTake(QCPLayoutGrid* self, QCPLayoutElement* element);
void QCPLayoutGrid_OnElements(const QCPLayoutGrid* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPLayoutGrid_QBaseElements(const QCPLayoutGrid* self, bool recursive);
void QCPLayoutGrid_OnSimplify(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseSimplify(QCPLayoutGrid* self);
void QCPLayoutGrid_OnMinimumOuterSizeHint(const QCPLayoutGrid* self, intptr_t slot);
QSize* QCPLayoutGrid_QBaseMinimumOuterSizeHint(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnMaximumOuterSizeHint(const QCPLayoutGrid* self, intptr_t slot);
QSize* QCPLayoutGrid_QBaseMaximumOuterSizeHint(const QCPLayoutGrid* self);
void QCPLayoutGrid_Update(QCPLayoutGrid* self, int phase);
void QCPLayoutGrid_OnUpdate(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseUpdate(QCPLayoutGrid* self, int phase);
double QCPLayoutGrid_SelectTest(const QCPLayoutGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayoutGrid_OnSelectTest(const QCPLayoutGrid* self, intptr_t slot);
double QCPLayoutGrid_QBaseSelectTest(const QCPLayoutGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPLayoutGrid_CalculateAutoMargin(QCPLayoutGrid* self, int side);
void QCPLayoutGrid_OnCalculateAutoMargin(QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseCalculateAutoMargin(QCPLayoutGrid* self, int side);
void QCPLayoutGrid_LayoutChanged(QCPLayoutGrid* self);
void QCPLayoutGrid_OnLayoutChanged(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseLayoutChanged(QCPLayoutGrid* self);
void QCPLayoutGrid_ApplyDefaultAntialiasingHint(const QCPLayoutGrid* self, QCPPainter* painter);
void QCPLayoutGrid_OnApplyDefaultAntialiasingHint(const QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseApplyDefaultAntialiasingHint(const QCPLayoutGrid* self, QCPPainter* painter);
void QCPLayoutGrid_Draw(QCPLayoutGrid* self, QCPPainter* painter);
void QCPLayoutGrid_OnDraw(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseDraw(QCPLayoutGrid* self, QCPPainter* painter);
void QCPLayoutGrid_ParentPlotInitialized(QCPLayoutGrid* self, QCustomPlot* parentPlot);
void QCPLayoutGrid_OnParentPlotInitialized(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseParentPlotInitialized(QCPLayoutGrid* self, QCustomPlot* parentPlot);
int QCPLayoutGrid_SelectionCategory(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnSelectionCategory(const QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseSelectionCategory(const QCPLayoutGrid* self);
QRect* QCPLayoutGrid_ClipRect(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnClipRect(const QCPLayoutGrid* self, intptr_t slot);
QRect* QCPLayoutGrid_QBaseClipRect(const QCPLayoutGrid* self);
void QCPLayoutGrid_SelectEvent(QCPLayoutGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutGrid_OnSelectEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseSelectEvent(QCPLayoutGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutGrid_DeselectEvent(QCPLayoutGrid* self, bool* selectionStateChanged);
void QCPLayoutGrid_OnDeselectEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseDeselectEvent(QCPLayoutGrid* self, bool* selectionStateChanged);
void QCPLayoutGrid_MousePressEvent(QCPLayoutGrid* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutGrid_OnMousePressEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseMousePressEvent(QCPLayoutGrid* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutGrid_MouseMoveEvent(QCPLayoutGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutGrid_OnMouseMoveEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseMouseMoveEvent(QCPLayoutGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutGrid_MouseReleaseEvent(QCPLayoutGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutGrid_OnMouseReleaseEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseMouseReleaseEvent(QCPLayoutGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutGrid_MouseDoubleClickEvent(QCPLayoutGrid* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutGrid_OnMouseDoubleClickEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseMouseDoubleClickEvent(QCPLayoutGrid* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutGrid_WheelEvent(QCPLayoutGrid* self, QWheelEvent* event);
void QCPLayoutGrid_OnWheelEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseWheelEvent(QCPLayoutGrid* self, QWheelEvent* event);
bool QCPLayoutGrid_Event(QCPLayoutGrid* self, QEvent* event);
void QCPLayoutGrid_OnEvent(QCPLayoutGrid* self, intptr_t slot);
bool QCPLayoutGrid_QBaseEvent(QCPLayoutGrid* self, QEvent* event);
bool QCPLayoutGrid_EventFilter(QCPLayoutGrid* self, QObject* watched, QEvent* event);
void QCPLayoutGrid_OnEventFilter(QCPLayoutGrid* self, intptr_t slot);
bool QCPLayoutGrid_QBaseEventFilter(QCPLayoutGrid* self, QObject* watched, QEvent* event);
void QCPLayoutGrid_TimerEvent(QCPLayoutGrid* self, QTimerEvent* event);
void QCPLayoutGrid_OnTimerEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseTimerEvent(QCPLayoutGrid* self, QTimerEvent* event);
void QCPLayoutGrid_ChildEvent(QCPLayoutGrid* self, QChildEvent* event);
void QCPLayoutGrid_OnChildEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseChildEvent(QCPLayoutGrid* self, QChildEvent* event);
void QCPLayoutGrid_CustomEvent(QCPLayoutGrid* self, QEvent* event);
void QCPLayoutGrid_OnCustomEvent(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseCustomEvent(QCPLayoutGrid* self, QEvent* event);
void QCPLayoutGrid_ConnectNotify(QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_OnConnectNotify(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseConnectNotify(QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_DisconnectNotify(QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_OnDisconnectNotify(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseDisconnectNotify(QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_GetMinimumRowColSizes(const QCPLayoutGrid* self, libqt_list /* of int */ minColWidths, libqt_list /* of int */ minRowHeights);
void QCPLayoutGrid_OnGetMinimumRowColSizes(const QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseGetMinimumRowColSizes(const QCPLayoutGrid* self, libqt_list /* of int */ minColWidths, libqt_list /* of int */ minRowHeights);
void QCPLayoutGrid_GetMaximumRowColSizes(const QCPLayoutGrid* self, libqt_list /* of int */ maxColWidths, libqt_list /* of int */ maxRowHeights);
void QCPLayoutGrid_OnGetMaximumRowColSizes(const QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseGetMaximumRowColSizes(const QCPLayoutGrid* self, libqt_list /* of int */ maxColWidths, libqt_list /* of int */ maxRowHeights);
void QCPLayoutGrid_SizeConstraintsChanged(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnSizeConstraintsChanged(const QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseSizeConstraintsChanged(const QCPLayoutGrid* self);
void QCPLayoutGrid_AdoptElement(QCPLayoutGrid* self, QCPLayoutElement* el);
void QCPLayoutGrid_OnAdoptElement(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseAdoptElement(QCPLayoutGrid* self, QCPLayoutElement* el);
void QCPLayoutGrid_ReleaseElement(QCPLayoutGrid* self, QCPLayoutElement* el);
void QCPLayoutGrid_OnReleaseElement(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseReleaseElement(QCPLayoutGrid* self, QCPLayoutElement* el);
libqt_list /* of int */ QCPLayoutGrid_GetSectionSizes(const QCPLayoutGrid* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayoutGrid_OnGetSectionSizes(const QCPLayoutGrid* self, intptr_t slot);
libqt_list /* of int */ QCPLayoutGrid_QBaseGetSectionSizes(const QCPLayoutGrid* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayoutGrid_InitializeParentPlot(QCPLayoutGrid* self, QCustomPlot* parentPlot);
void QCPLayoutGrid_OnInitializeParentPlot(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseInitializeParentPlot(QCPLayoutGrid* self, QCustomPlot* parentPlot);
void QCPLayoutGrid_SetParentLayerable(QCPLayoutGrid* self, QCPLayerable* parentLayerable);
void QCPLayoutGrid_OnSetParentLayerable(QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseSetParentLayerable(QCPLayoutGrid* self, QCPLayerable* parentLayerable);
bool QCPLayoutGrid_MoveToLayer(QCPLayoutGrid* self, QCPLayer* layer, bool prepend);
void QCPLayoutGrid_OnMoveToLayer(QCPLayoutGrid* self, intptr_t slot);
bool QCPLayoutGrid_QBaseMoveToLayer(QCPLayoutGrid* self, QCPLayer* layer, bool prepend);
void QCPLayoutGrid_ApplyAntialiasingHint(const QCPLayoutGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLayoutGrid_OnApplyAntialiasingHint(const QCPLayoutGrid* self, intptr_t slot);
void QCPLayoutGrid_QBaseApplyAntialiasingHint(const QCPLayoutGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLayoutGrid_Sender(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnSender(const QCPLayoutGrid* self, intptr_t slot);
QObject* QCPLayoutGrid_QBaseSender(const QCPLayoutGrid* self);
int QCPLayoutGrid_SenderSignalIndex(const QCPLayoutGrid* self);
void QCPLayoutGrid_OnSenderSignalIndex(const QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseSenderSignalIndex(const QCPLayoutGrid* self);
int QCPLayoutGrid_Receivers(const QCPLayoutGrid* self, const char* signal);
void QCPLayoutGrid_OnReceivers(const QCPLayoutGrid* self, intptr_t slot);
int QCPLayoutGrid_QBaseReceivers(const QCPLayoutGrid* self, const char* signal);
bool QCPLayoutGrid_IsSignalConnected(const QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_OnIsSignalConnected(const QCPLayoutGrid* self, intptr_t slot);
bool QCPLayoutGrid_QBaseIsSignalConnected(const QCPLayoutGrid* self, const QMetaMethod* signal);
void QCPLayoutGrid_Delete(QCPLayoutGrid* self);

QCPLayoutInset* QCPLayoutInset_new();
QMetaObject* QCPLayoutInset_MetaObject(const QCPLayoutInset* self);
void* QCPLayoutInset_Metacast(QCPLayoutInset* self, const char* param1);
int QCPLayoutInset_Metacall(QCPLayoutInset* self, int param1, int param2, void** param3);
libqt_string QCPLayoutInset_Tr(const char* s);
int QCPLayoutInset_InsetPlacement(const QCPLayoutInset* self, int index);
int QCPLayoutInset_InsetAlignment(const QCPLayoutInset* self, int index);
QRectF* QCPLayoutInset_InsetRect(const QCPLayoutInset* self, int index);
void QCPLayoutInset_SetInsetPlacement(QCPLayoutInset* self, int index, int placement);
void QCPLayoutInset_SetInsetAlignment(QCPLayoutInset* self, int index, int alignment);
void QCPLayoutInset_SetInsetRect(QCPLayoutInset* self, int index, const QRectF* rect);
void QCPLayoutInset_UpdateLayout(QCPLayoutInset* self);
int QCPLayoutInset_ElementCount(const QCPLayoutInset* self);
QCPLayoutElement* QCPLayoutInset_ElementAt(const QCPLayoutInset* self, int index);
QCPLayoutElement* QCPLayoutInset_TakeAt(QCPLayoutInset* self, int index);
bool QCPLayoutInset_Take(QCPLayoutInset* self, QCPLayoutElement* element);
void QCPLayoutInset_Simplify(QCPLayoutInset* self);
double QCPLayoutInset_SelectTest(const QCPLayoutInset* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayoutInset_AddElement(QCPLayoutInset* self, QCPLayoutElement* element, int alignment);
void QCPLayoutInset_AddElement2(QCPLayoutInset* self, QCPLayoutElement* element, const QRectF* rect);
libqt_string QCPLayoutInset_Tr2(const char* s, const char* c);
libqt_string QCPLayoutInset_Tr3(const char* s, const char* c, int n);
void QCPLayoutInset_OnMetacall(QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseMetacall(QCPLayoutInset* self, int param1, int param2, void** param3);
void QCPLayoutInset_OnUpdateLayout(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseUpdateLayout(QCPLayoutInset* self);
void QCPLayoutInset_OnElementCount(const QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseElementCount(const QCPLayoutInset* self);
void QCPLayoutInset_OnElementAt(const QCPLayoutInset* self, intptr_t slot);
QCPLayoutElement* QCPLayoutInset_QBaseElementAt(const QCPLayoutInset* self, int index);
void QCPLayoutInset_OnTakeAt(QCPLayoutInset* self, intptr_t slot);
QCPLayoutElement* QCPLayoutInset_QBaseTakeAt(QCPLayoutInset* self, int index);
void QCPLayoutInset_OnTake(QCPLayoutInset* self, intptr_t slot);
bool QCPLayoutInset_QBaseTake(QCPLayoutInset* self, QCPLayoutElement* element);
void QCPLayoutInset_OnSimplify(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseSimplify(QCPLayoutInset* self);
void QCPLayoutInset_OnSelectTest(const QCPLayoutInset* self, intptr_t slot);
double QCPLayoutInset_QBaseSelectTest(const QCPLayoutInset* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLayoutInset_Update(QCPLayoutInset* self, int phase);
void QCPLayoutInset_OnUpdate(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseUpdate(QCPLayoutInset* self, int phase);
libqt_list /* of QCPLayoutElement* */ QCPLayoutInset_Elements(const QCPLayoutInset* self, bool recursive);
void QCPLayoutInset_OnElements(const QCPLayoutInset* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPLayoutInset_QBaseElements(const QCPLayoutInset* self, bool recursive);
QSize* QCPLayoutInset_MinimumOuterSizeHint(const QCPLayoutInset* self);
void QCPLayoutInset_OnMinimumOuterSizeHint(const QCPLayoutInset* self, intptr_t slot);
QSize* QCPLayoutInset_QBaseMinimumOuterSizeHint(const QCPLayoutInset* self);
QSize* QCPLayoutInset_MaximumOuterSizeHint(const QCPLayoutInset* self);
void QCPLayoutInset_OnMaximumOuterSizeHint(const QCPLayoutInset* self, intptr_t slot);
QSize* QCPLayoutInset_QBaseMaximumOuterSizeHint(const QCPLayoutInset* self);
int QCPLayoutInset_CalculateAutoMargin(QCPLayoutInset* self, int side);
void QCPLayoutInset_OnCalculateAutoMargin(QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseCalculateAutoMargin(QCPLayoutInset* self, int side);
void QCPLayoutInset_LayoutChanged(QCPLayoutInset* self);
void QCPLayoutInset_OnLayoutChanged(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseLayoutChanged(QCPLayoutInset* self);
void QCPLayoutInset_ApplyDefaultAntialiasingHint(const QCPLayoutInset* self, QCPPainter* painter);
void QCPLayoutInset_OnApplyDefaultAntialiasingHint(const QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseApplyDefaultAntialiasingHint(const QCPLayoutInset* self, QCPPainter* painter);
void QCPLayoutInset_Draw(QCPLayoutInset* self, QCPPainter* painter);
void QCPLayoutInset_OnDraw(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseDraw(QCPLayoutInset* self, QCPPainter* painter);
void QCPLayoutInset_ParentPlotInitialized(QCPLayoutInset* self, QCustomPlot* parentPlot);
void QCPLayoutInset_OnParentPlotInitialized(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseParentPlotInitialized(QCPLayoutInset* self, QCustomPlot* parentPlot);
int QCPLayoutInset_SelectionCategory(const QCPLayoutInset* self);
void QCPLayoutInset_OnSelectionCategory(const QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseSelectionCategory(const QCPLayoutInset* self);
QRect* QCPLayoutInset_ClipRect(const QCPLayoutInset* self);
void QCPLayoutInset_OnClipRect(const QCPLayoutInset* self, intptr_t slot);
QRect* QCPLayoutInset_QBaseClipRect(const QCPLayoutInset* self);
void QCPLayoutInset_SelectEvent(QCPLayoutInset* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutInset_OnSelectEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseSelectEvent(QCPLayoutInset* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLayoutInset_DeselectEvent(QCPLayoutInset* self, bool* selectionStateChanged);
void QCPLayoutInset_OnDeselectEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseDeselectEvent(QCPLayoutInset* self, bool* selectionStateChanged);
void QCPLayoutInset_MousePressEvent(QCPLayoutInset* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutInset_OnMousePressEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseMousePressEvent(QCPLayoutInset* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutInset_MouseMoveEvent(QCPLayoutInset* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutInset_OnMouseMoveEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseMouseMoveEvent(QCPLayoutInset* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutInset_MouseReleaseEvent(QCPLayoutInset* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutInset_OnMouseReleaseEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseMouseReleaseEvent(QCPLayoutInset* self, QMouseEvent* event, const QPointF* startPos);
void QCPLayoutInset_MouseDoubleClickEvent(QCPLayoutInset* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutInset_OnMouseDoubleClickEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseMouseDoubleClickEvent(QCPLayoutInset* self, QMouseEvent* event, const QVariant* details);
void QCPLayoutInset_WheelEvent(QCPLayoutInset* self, QWheelEvent* event);
void QCPLayoutInset_OnWheelEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseWheelEvent(QCPLayoutInset* self, QWheelEvent* event);
bool QCPLayoutInset_Event(QCPLayoutInset* self, QEvent* event);
void QCPLayoutInset_OnEvent(QCPLayoutInset* self, intptr_t slot);
bool QCPLayoutInset_QBaseEvent(QCPLayoutInset* self, QEvent* event);
bool QCPLayoutInset_EventFilter(QCPLayoutInset* self, QObject* watched, QEvent* event);
void QCPLayoutInset_OnEventFilter(QCPLayoutInset* self, intptr_t slot);
bool QCPLayoutInset_QBaseEventFilter(QCPLayoutInset* self, QObject* watched, QEvent* event);
void QCPLayoutInset_TimerEvent(QCPLayoutInset* self, QTimerEvent* event);
void QCPLayoutInset_OnTimerEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseTimerEvent(QCPLayoutInset* self, QTimerEvent* event);
void QCPLayoutInset_ChildEvent(QCPLayoutInset* self, QChildEvent* event);
void QCPLayoutInset_OnChildEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseChildEvent(QCPLayoutInset* self, QChildEvent* event);
void QCPLayoutInset_CustomEvent(QCPLayoutInset* self, QEvent* event);
void QCPLayoutInset_OnCustomEvent(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseCustomEvent(QCPLayoutInset* self, QEvent* event);
void QCPLayoutInset_ConnectNotify(QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_OnConnectNotify(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseConnectNotify(QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_DisconnectNotify(QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_OnDisconnectNotify(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseDisconnectNotify(QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_SizeConstraintsChanged(const QCPLayoutInset* self);
void QCPLayoutInset_OnSizeConstraintsChanged(const QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseSizeConstraintsChanged(const QCPLayoutInset* self);
void QCPLayoutInset_AdoptElement(QCPLayoutInset* self, QCPLayoutElement* el);
void QCPLayoutInset_OnAdoptElement(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseAdoptElement(QCPLayoutInset* self, QCPLayoutElement* el);
void QCPLayoutInset_ReleaseElement(QCPLayoutInset* self, QCPLayoutElement* el);
void QCPLayoutInset_OnReleaseElement(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseReleaseElement(QCPLayoutInset* self, QCPLayoutElement* el);
libqt_list /* of int */ QCPLayoutInset_GetSectionSizes(const QCPLayoutInset* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayoutInset_OnGetSectionSizes(const QCPLayoutInset* self, intptr_t slot);
libqt_list /* of int */ QCPLayoutInset_QBaseGetSectionSizes(const QCPLayoutInset* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLayoutInset_InitializeParentPlot(QCPLayoutInset* self, QCustomPlot* parentPlot);
void QCPLayoutInset_OnInitializeParentPlot(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseInitializeParentPlot(QCPLayoutInset* self, QCustomPlot* parentPlot);
void QCPLayoutInset_SetParentLayerable(QCPLayoutInset* self, QCPLayerable* parentLayerable);
void QCPLayoutInset_OnSetParentLayerable(QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseSetParentLayerable(QCPLayoutInset* self, QCPLayerable* parentLayerable);
bool QCPLayoutInset_MoveToLayer(QCPLayoutInset* self, QCPLayer* layer, bool prepend);
void QCPLayoutInset_OnMoveToLayer(QCPLayoutInset* self, intptr_t slot);
bool QCPLayoutInset_QBaseMoveToLayer(QCPLayoutInset* self, QCPLayer* layer, bool prepend);
void QCPLayoutInset_ApplyAntialiasingHint(const QCPLayoutInset* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLayoutInset_OnApplyAntialiasingHint(const QCPLayoutInset* self, intptr_t slot);
void QCPLayoutInset_QBaseApplyAntialiasingHint(const QCPLayoutInset* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLayoutInset_Sender(const QCPLayoutInset* self);
void QCPLayoutInset_OnSender(const QCPLayoutInset* self, intptr_t slot);
QObject* QCPLayoutInset_QBaseSender(const QCPLayoutInset* self);
int QCPLayoutInset_SenderSignalIndex(const QCPLayoutInset* self);
void QCPLayoutInset_OnSenderSignalIndex(const QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseSenderSignalIndex(const QCPLayoutInset* self);
int QCPLayoutInset_Receivers(const QCPLayoutInset* self, const char* signal);
void QCPLayoutInset_OnReceivers(const QCPLayoutInset* self, intptr_t slot);
int QCPLayoutInset_QBaseReceivers(const QCPLayoutInset* self, const char* signal);
bool QCPLayoutInset_IsSignalConnected(const QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_OnIsSignalConnected(const QCPLayoutInset* self, intptr_t slot);
bool QCPLayoutInset_QBaseIsSignalConnected(const QCPLayoutInset* self, const QMetaMethod* signal);
void QCPLayoutInset_Delete(QCPLayoutInset* self);

QCPLineEnding* QCPLineEnding_new(const QCPLineEnding* other);
QCPLineEnding* QCPLineEnding_new2(QCPLineEnding* other);
QCPLineEnding* QCPLineEnding_new3();
QCPLineEnding* QCPLineEnding_new4(int style);
QCPLineEnding* QCPLineEnding_new5(const QCPLineEnding* param1);
QCPLineEnding* QCPLineEnding_new6(int style, double width);
QCPLineEnding* QCPLineEnding_new7(int style, double width, double length);
QCPLineEnding* QCPLineEnding_new8(int style, double width, double length, bool inverted);
void QCPLineEnding_CopyAssign(QCPLineEnding* self, QCPLineEnding* other);
void QCPLineEnding_MoveAssign(QCPLineEnding* self, QCPLineEnding* other);
int QCPLineEnding_Style(const QCPLineEnding* self);
double QCPLineEnding_Width(const QCPLineEnding* self);
double QCPLineEnding_Length(const QCPLineEnding* self);
bool QCPLineEnding_Inverted(const QCPLineEnding* self);
void QCPLineEnding_SetStyle(QCPLineEnding* self, int style);
void QCPLineEnding_SetWidth(QCPLineEnding* self, double width);
void QCPLineEnding_SetLength(QCPLineEnding* self, double length);
void QCPLineEnding_SetInverted(QCPLineEnding* self, bool inverted);
double QCPLineEnding_BoundingDistance(const QCPLineEnding* self);
double QCPLineEnding_RealLength(const QCPLineEnding* self);
void QCPLineEnding_Draw(const QCPLineEnding* self, QCPPainter* painter, const QCPVector2D* pos, const QCPVector2D* dir);
void QCPLineEnding_Draw2(const QCPLineEnding* self, QCPPainter* painter, const QCPVector2D* pos, double angle);
void QCPLineEnding_Delete(QCPLineEnding* self);

QCPAxisTicker* QCPAxisTicker_new();
int QCPAxisTicker_TickStepStrategy(const QCPAxisTicker* self);
int QCPAxisTicker_TickCount(const QCPAxisTicker* self);
double QCPAxisTicker_TickOrigin(const QCPAxisTicker* self);
void QCPAxisTicker_SetTickStepStrategy(QCPAxisTicker* self, int strategy);
void QCPAxisTicker_SetTickCount(QCPAxisTicker* self, int count);
void QCPAxisTicker_SetTickOrigin(QCPAxisTicker* self, double origin);
void QCPAxisTicker_Generate(QCPAxisTicker* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
double QCPAxisTicker_GetTickStep(QCPAxisTicker* self, const QCPRange* range);
int QCPAxisTicker_GetSubTickCount(QCPAxisTicker* self, double tickStep);
libqt_string QCPAxisTicker_GetTickLabel(QCPAxisTicker* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
libqt_list /* of double */ QCPAxisTicker_CreateTickVector(QCPAxisTicker* self, double tickStep, const QCPRange* range);
libqt_list /* of double */ QCPAxisTicker_CreateSubTickVector(QCPAxisTicker* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTicker_CreateLabelVector(QCPAxisTicker* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTicker_OnGenerate(QCPAxisTicker* self, intptr_t slot);
void QCPAxisTicker_QBaseGenerate(QCPAxisTicker* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTicker_OnGetTickStep(QCPAxisTicker* self, intptr_t slot);
double QCPAxisTicker_QBaseGetTickStep(QCPAxisTicker* self, const QCPRange* range);
void QCPAxisTicker_OnGetSubTickCount(QCPAxisTicker* self, intptr_t slot);
int QCPAxisTicker_QBaseGetSubTickCount(QCPAxisTicker* self, double tickStep);
void QCPAxisTicker_OnGetTickLabel(QCPAxisTicker* self, intptr_t slot);
libqt_string QCPAxisTicker_QBaseGetTickLabel(QCPAxisTicker* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTicker_OnCreateTickVector(QCPAxisTicker* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTicker_QBaseCreateTickVector(QCPAxisTicker* self, double tickStep, const QCPRange* range);
void QCPAxisTicker_OnCreateSubTickVector(QCPAxisTicker* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTicker_QBaseCreateSubTickVector(QCPAxisTicker* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTicker_OnCreateLabelVector(QCPAxisTicker* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTicker_QBaseCreateLabelVector(QCPAxisTicker* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTicker_TrimTicks(const QCPAxisTicker* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTicker_OnTrimTicks(const QCPAxisTicker* self, intptr_t slot);
void QCPAxisTicker_QBaseTrimTicks(const QCPAxisTicker* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTicker_PickClosest(const QCPAxisTicker* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTicker_OnPickClosest(const QCPAxisTicker* self, intptr_t slot);
double QCPAxisTicker_QBasePickClosest(const QCPAxisTicker* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTicker_GetMantissa(const QCPAxisTicker* self, double input);
void QCPAxisTicker_OnGetMantissa(const QCPAxisTicker* self, intptr_t slot);
double QCPAxisTicker_QBaseGetMantissa(const QCPAxisTicker* self, double input);
double QCPAxisTicker_CleanMantissa(const QCPAxisTicker* self, double input);
void QCPAxisTicker_OnCleanMantissa(const QCPAxisTicker* self, intptr_t slot);
double QCPAxisTicker_QBaseCleanMantissa(const QCPAxisTicker* self, double input);
double QCPAxisTicker_GetMantissa2(const QCPAxisTicker* self, double input, double* magnitude);
void QCPAxisTicker_OnGetMantissa2(const QCPAxisTicker* self, intptr_t slot);
double QCPAxisTicker_QBaseGetMantissa2(const QCPAxisTicker* self, double input, double* magnitude);
void QCPAxisTicker_Delete(QCPAxisTicker* self);

QCPAxisTickerDateTime* QCPAxisTickerDateTime_new();
libqt_string QCPAxisTickerDateTime_DateTimeFormat(const QCPAxisTickerDateTime* self);
int QCPAxisTickerDateTime_DateTimeSpec(const QCPAxisTickerDateTime* self);
QTimeZone* QCPAxisTickerDateTime_TimeZone(const QCPAxisTickerDateTime* self);
void QCPAxisTickerDateTime_SetDateTimeFormat(QCPAxisTickerDateTime* self, const libqt_string format);
void QCPAxisTickerDateTime_SetDateTimeSpec(QCPAxisTickerDateTime* self, int spec);
void QCPAxisTickerDateTime_SetTimeZone(QCPAxisTickerDateTime* self, const QTimeZone* zone);
void QCPAxisTickerDateTime_SetTickOrigin(QCPAxisTickerDateTime* self, double origin);
void QCPAxisTickerDateTime_SetTickOrigin2(QCPAxisTickerDateTime* self, const QDateTime* origin);
QDateTime* QCPAxisTickerDateTime_KeyToDateTime(double key);
double QCPAxisTickerDateTime_DateTimeToKey(const QDateTime* dateTime);
double QCPAxisTickerDateTime_DateTimeToKey2(const QDate* date);
double QCPAxisTickerDateTime_GetTickStep(QCPAxisTickerDateTime* self, const QCPRange* range);
int QCPAxisTickerDateTime_GetSubTickCount(QCPAxisTickerDateTime* self, double tickStep);
libqt_string QCPAxisTickerDateTime_GetTickLabel(QCPAxisTickerDateTime* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
libqt_list /* of double */ QCPAxisTickerDateTime_CreateTickVector(QCPAxisTickerDateTime* self, double tickStep, const QCPRange* range);
double QCPAxisTickerDateTime_DateTimeToKey22(const QDate* date, int timeSpec);
void QCPAxisTickerDateTime_OnGetTickStep(QCPAxisTickerDateTime* self, intptr_t slot);
double QCPAxisTickerDateTime_QBaseGetTickStep(QCPAxisTickerDateTime* self, const QCPRange* range);
void QCPAxisTickerDateTime_OnGetSubTickCount(QCPAxisTickerDateTime* self, intptr_t slot);
int QCPAxisTickerDateTime_QBaseGetSubTickCount(QCPAxisTickerDateTime* self, double tickStep);
void QCPAxisTickerDateTime_OnGetTickLabel(QCPAxisTickerDateTime* self, intptr_t slot);
libqt_string QCPAxisTickerDateTime_QBaseGetTickLabel(QCPAxisTickerDateTime* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerDateTime_OnCreateTickVector(QCPAxisTickerDateTime* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerDateTime_QBaseCreateTickVector(QCPAxisTickerDateTime* self, double tickStep, const QCPRange* range);
void QCPAxisTickerDateTime_Generate(QCPAxisTickerDateTime* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerDateTime_OnGenerate(QCPAxisTickerDateTime* self, intptr_t slot);
void QCPAxisTickerDateTime_QBaseGenerate(QCPAxisTickerDateTime* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
libqt_list /* of double */ QCPAxisTickerDateTime_CreateSubTickVector(QCPAxisTickerDateTime* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerDateTime_OnCreateSubTickVector(QCPAxisTickerDateTime* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerDateTime_QBaseCreateSubTickVector(QCPAxisTickerDateTime* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerDateTime_CreateLabelVector(QCPAxisTickerDateTime* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerDateTime_OnCreateLabelVector(QCPAxisTickerDateTime* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerDateTime_QBaseCreateLabelVector(QCPAxisTickerDateTime* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerDateTime_TrimTicks(const QCPAxisTickerDateTime* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerDateTime_OnTrimTicks(const QCPAxisTickerDateTime* self, intptr_t slot);
void QCPAxisTickerDateTime_QBaseTrimTicks(const QCPAxisTickerDateTime* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerDateTime_PickClosest(const QCPAxisTickerDateTime* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerDateTime_OnPickClosest(const QCPAxisTickerDateTime* self, intptr_t slot);
double QCPAxisTickerDateTime_QBasePickClosest(const QCPAxisTickerDateTime* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerDateTime_GetMantissa(const QCPAxisTickerDateTime* self, double input);
void QCPAxisTickerDateTime_OnGetMantissa(const QCPAxisTickerDateTime* self, intptr_t slot);
double QCPAxisTickerDateTime_QBaseGetMantissa(const QCPAxisTickerDateTime* self, double input);
double QCPAxisTickerDateTime_CleanMantissa(const QCPAxisTickerDateTime* self, double input);
void QCPAxisTickerDateTime_OnCleanMantissa(const QCPAxisTickerDateTime* self, intptr_t slot);
double QCPAxisTickerDateTime_QBaseCleanMantissa(const QCPAxisTickerDateTime* self, double input);
void QCPAxisTickerDateTime_Delete(QCPAxisTickerDateTime* self);

QCPAxisTickerTime* QCPAxisTickerTime_new();
libqt_string QCPAxisTickerTime_TimeFormat(const QCPAxisTickerTime* self);
int QCPAxisTickerTime_FieldWidth(const QCPAxisTickerTime* self, int unit);
void QCPAxisTickerTime_SetTimeFormat(QCPAxisTickerTime* self, const libqt_string format);
void QCPAxisTickerTime_SetFieldWidth(QCPAxisTickerTime* self, int unit, int width);
double QCPAxisTickerTime_GetTickStep(QCPAxisTickerTime* self, const QCPRange* range);
int QCPAxisTickerTime_GetSubTickCount(QCPAxisTickerTime* self, double tickStep);
libqt_string QCPAxisTickerTime_GetTickLabel(QCPAxisTickerTime* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerTime_OnGetTickStep(QCPAxisTickerTime* self, intptr_t slot);
double QCPAxisTickerTime_QBaseGetTickStep(QCPAxisTickerTime* self, const QCPRange* range);
void QCPAxisTickerTime_OnGetSubTickCount(QCPAxisTickerTime* self, intptr_t slot);
int QCPAxisTickerTime_QBaseGetSubTickCount(QCPAxisTickerTime* self, double tickStep);
void QCPAxisTickerTime_OnGetTickLabel(QCPAxisTickerTime* self, intptr_t slot);
libqt_string QCPAxisTickerTime_QBaseGetTickLabel(QCPAxisTickerTime* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerTime_Generate(QCPAxisTickerTime* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerTime_OnGenerate(QCPAxisTickerTime* self, intptr_t slot);
void QCPAxisTickerTime_QBaseGenerate(QCPAxisTickerTime* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
libqt_list /* of double */ QCPAxisTickerTime_CreateTickVector(QCPAxisTickerTime* self, double tickStep, const QCPRange* range);
void QCPAxisTickerTime_OnCreateTickVector(QCPAxisTickerTime* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerTime_QBaseCreateTickVector(QCPAxisTickerTime* self, double tickStep, const QCPRange* range);
libqt_list /* of double */ QCPAxisTickerTime_CreateSubTickVector(QCPAxisTickerTime* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerTime_OnCreateSubTickVector(QCPAxisTickerTime* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerTime_QBaseCreateSubTickVector(QCPAxisTickerTime* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerTime_CreateLabelVector(QCPAxisTickerTime* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerTime_OnCreateLabelVector(QCPAxisTickerTime* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerTime_QBaseCreateLabelVector(QCPAxisTickerTime* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerTime_ReplaceUnit(const QCPAxisTickerTime* self, libqt_string text, int unit, int value);
void QCPAxisTickerTime_OnReplaceUnit(const QCPAxisTickerTime* self, intptr_t slot);
void QCPAxisTickerTime_QBaseReplaceUnit(const QCPAxisTickerTime* self, libqt_string text, int unit, int value);
void QCPAxisTickerTime_TrimTicks(const QCPAxisTickerTime* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerTime_OnTrimTicks(const QCPAxisTickerTime* self, intptr_t slot);
void QCPAxisTickerTime_QBaseTrimTicks(const QCPAxisTickerTime* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerTime_PickClosest(const QCPAxisTickerTime* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerTime_OnPickClosest(const QCPAxisTickerTime* self, intptr_t slot);
double QCPAxisTickerTime_QBasePickClosest(const QCPAxisTickerTime* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerTime_GetMantissa(const QCPAxisTickerTime* self, double input);
void QCPAxisTickerTime_OnGetMantissa(const QCPAxisTickerTime* self, intptr_t slot);
double QCPAxisTickerTime_QBaseGetMantissa(const QCPAxisTickerTime* self, double input);
double QCPAxisTickerTime_CleanMantissa(const QCPAxisTickerTime* self, double input);
void QCPAxisTickerTime_OnCleanMantissa(const QCPAxisTickerTime* self, intptr_t slot);
double QCPAxisTickerTime_QBaseCleanMantissa(const QCPAxisTickerTime* self, double input);
void QCPAxisTickerTime_Delete(QCPAxisTickerTime* self);

QCPAxisTickerFixed* QCPAxisTickerFixed_new();
double QCPAxisTickerFixed_TickStep(const QCPAxisTickerFixed* self);
int QCPAxisTickerFixed_ScaleStrategy(const QCPAxisTickerFixed* self);
void QCPAxisTickerFixed_SetTickStep(QCPAxisTickerFixed* self, double step);
void QCPAxisTickerFixed_SetScaleStrategy(QCPAxisTickerFixed* self, int strategy);
double QCPAxisTickerFixed_GetTickStep(QCPAxisTickerFixed* self, const QCPRange* range);
void QCPAxisTickerFixed_OnGetTickStep(QCPAxisTickerFixed* self, intptr_t slot);
double QCPAxisTickerFixed_QBaseGetTickStep(QCPAxisTickerFixed* self, const QCPRange* range);
void QCPAxisTickerFixed_Generate(QCPAxisTickerFixed* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerFixed_OnGenerate(QCPAxisTickerFixed* self, intptr_t slot);
void QCPAxisTickerFixed_QBaseGenerate(QCPAxisTickerFixed* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
int QCPAxisTickerFixed_GetSubTickCount(QCPAxisTickerFixed* self, double tickStep);
void QCPAxisTickerFixed_OnGetSubTickCount(QCPAxisTickerFixed* self, intptr_t slot);
int QCPAxisTickerFixed_QBaseGetSubTickCount(QCPAxisTickerFixed* self, double tickStep);
libqt_string QCPAxisTickerFixed_GetTickLabel(QCPAxisTickerFixed* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerFixed_OnGetTickLabel(QCPAxisTickerFixed* self, intptr_t slot);
libqt_string QCPAxisTickerFixed_QBaseGetTickLabel(QCPAxisTickerFixed* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
libqt_list /* of double */ QCPAxisTickerFixed_CreateTickVector(QCPAxisTickerFixed* self, double tickStep, const QCPRange* range);
void QCPAxisTickerFixed_OnCreateTickVector(QCPAxisTickerFixed* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerFixed_QBaseCreateTickVector(QCPAxisTickerFixed* self, double tickStep, const QCPRange* range);
libqt_list /* of double */ QCPAxisTickerFixed_CreateSubTickVector(QCPAxisTickerFixed* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerFixed_OnCreateSubTickVector(QCPAxisTickerFixed* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerFixed_QBaseCreateSubTickVector(QCPAxisTickerFixed* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerFixed_CreateLabelVector(QCPAxisTickerFixed* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerFixed_OnCreateLabelVector(QCPAxisTickerFixed* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerFixed_QBaseCreateLabelVector(QCPAxisTickerFixed* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerFixed_TrimTicks(const QCPAxisTickerFixed* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerFixed_OnTrimTicks(const QCPAxisTickerFixed* self, intptr_t slot);
void QCPAxisTickerFixed_QBaseTrimTicks(const QCPAxisTickerFixed* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerFixed_PickClosest(const QCPAxisTickerFixed* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerFixed_OnPickClosest(const QCPAxisTickerFixed* self, intptr_t slot);
double QCPAxisTickerFixed_QBasePickClosest(const QCPAxisTickerFixed* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerFixed_GetMantissa(const QCPAxisTickerFixed* self, double input);
void QCPAxisTickerFixed_OnGetMantissa(const QCPAxisTickerFixed* self, intptr_t slot);
double QCPAxisTickerFixed_QBaseGetMantissa(const QCPAxisTickerFixed* self, double input);
double QCPAxisTickerFixed_CleanMantissa(const QCPAxisTickerFixed* self, double input);
void QCPAxisTickerFixed_OnCleanMantissa(const QCPAxisTickerFixed* self, intptr_t slot);
double QCPAxisTickerFixed_QBaseCleanMantissa(const QCPAxisTickerFixed* self, double input);
void QCPAxisTickerFixed_Delete(QCPAxisTickerFixed* self);

QCPAxisTickerText* QCPAxisTickerText_new();
libqt_map /* of double to libqt_string */ QCPAxisTickerText_Ticks(QCPAxisTickerText* self);
int QCPAxisTickerText_SubTickCount(const QCPAxisTickerText* self);
void QCPAxisTickerText_SetTicks(QCPAxisTickerText* self, const libqt_map /* of double to libqt_string */ ticks);
void QCPAxisTickerText_SetTicks2(QCPAxisTickerText* self, const libqt_list /* of double */ positions, const libqt_list /* of libqt_string */ labels);
void QCPAxisTickerText_SetSubTickCount(QCPAxisTickerText* self, int subTicks);
void QCPAxisTickerText_Clear(QCPAxisTickerText* self);
void QCPAxisTickerText_AddTick(QCPAxisTickerText* self, double position, const libqt_string label);
void QCPAxisTickerText_AddTicks(QCPAxisTickerText* self, const libqt_map /* of double to libqt_string */ ticks);
void QCPAxisTickerText_AddTicks2(QCPAxisTickerText* self, const libqt_list /* of double */ positions, const libqt_list /* of libqt_string */ labels);
double QCPAxisTickerText_GetTickStep(QCPAxisTickerText* self, const QCPRange* range);
int QCPAxisTickerText_GetSubTickCount(QCPAxisTickerText* self, double tickStep);
libqt_string QCPAxisTickerText_GetTickLabel(QCPAxisTickerText* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
libqt_list /* of double */ QCPAxisTickerText_CreateTickVector(QCPAxisTickerText* self, double tickStep, const QCPRange* range);
void QCPAxisTickerText_OnGetTickStep(QCPAxisTickerText* self, intptr_t slot);
double QCPAxisTickerText_QBaseGetTickStep(QCPAxisTickerText* self, const QCPRange* range);
void QCPAxisTickerText_OnGetSubTickCount(QCPAxisTickerText* self, intptr_t slot);
int QCPAxisTickerText_QBaseGetSubTickCount(QCPAxisTickerText* self, double tickStep);
void QCPAxisTickerText_OnGetTickLabel(QCPAxisTickerText* self, intptr_t slot);
libqt_string QCPAxisTickerText_QBaseGetTickLabel(QCPAxisTickerText* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerText_OnCreateTickVector(QCPAxisTickerText* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerText_QBaseCreateTickVector(QCPAxisTickerText* self, double tickStep, const QCPRange* range);
void QCPAxisTickerText_Generate(QCPAxisTickerText* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerText_OnGenerate(QCPAxisTickerText* self, intptr_t slot);
void QCPAxisTickerText_QBaseGenerate(QCPAxisTickerText* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
libqt_list /* of double */ QCPAxisTickerText_CreateSubTickVector(QCPAxisTickerText* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerText_OnCreateSubTickVector(QCPAxisTickerText* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerText_QBaseCreateSubTickVector(QCPAxisTickerText* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerText_CreateLabelVector(QCPAxisTickerText* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerText_OnCreateLabelVector(QCPAxisTickerText* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerText_QBaseCreateLabelVector(QCPAxisTickerText* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerText_TrimTicks(const QCPAxisTickerText* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerText_OnTrimTicks(const QCPAxisTickerText* self, intptr_t slot);
void QCPAxisTickerText_QBaseTrimTicks(const QCPAxisTickerText* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerText_PickClosest(const QCPAxisTickerText* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerText_OnPickClosest(const QCPAxisTickerText* self, intptr_t slot);
double QCPAxisTickerText_QBasePickClosest(const QCPAxisTickerText* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerText_GetMantissa(const QCPAxisTickerText* self, double input);
void QCPAxisTickerText_OnGetMantissa(const QCPAxisTickerText* self, intptr_t slot);
double QCPAxisTickerText_QBaseGetMantissa(const QCPAxisTickerText* self, double input);
double QCPAxisTickerText_CleanMantissa(const QCPAxisTickerText* self, double input);
void QCPAxisTickerText_OnCleanMantissa(const QCPAxisTickerText* self, intptr_t slot);
double QCPAxisTickerText_QBaseCleanMantissa(const QCPAxisTickerText* self, double input);
void QCPAxisTickerText_Delete(QCPAxisTickerText* self);

QCPAxisTickerPi* QCPAxisTickerPi_new();
libqt_string QCPAxisTickerPi_PiSymbol(const QCPAxisTickerPi* self);
double QCPAxisTickerPi_PiValue(const QCPAxisTickerPi* self);
bool QCPAxisTickerPi_Periodicity(const QCPAxisTickerPi* self);
int QCPAxisTickerPi_FractionStyle(const QCPAxisTickerPi* self);
void QCPAxisTickerPi_SetPiSymbol(QCPAxisTickerPi* self, libqt_string symbol);
void QCPAxisTickerPi_SetPiValue(QCPAxisTickerPi* self, double pi);
void QCPAxisTickerPi_SetPeriodicity(QCPAxisTickerPi* self, int multiplesOfPi);
void QCPAxisTickerPi_SetFractionStyle(QCPAxisTickerPi* self, int style);
double QCPAxisTickerPi_GetTickStep(QCPAxisTickerPi* self, const QCPRange* range);
int QCPAxisTickerPi_GetSubTickCount(QCPAxisTickerPi* self, double tickStep);
libqt_string QCPAxisTickerPi_GetTickLabel(QCPAxisTickerPi* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerPi_OnGetTickStep(QCPAxisTickerPi* self, intptr_t slot);
double QCPAxisTickerPi_QBaseGetTickStep(QCPAxisTickerPi* self, const QCPRange* range);
void QCPAxisTickerPi_OnGetSubTickCount(QCPAxisTickerPi* self, intptr_t slot);
int QCPAxisTickerPi_QBaseGetSubTickCount(QCPAxisTickerPi* self, double tickStep);
void QCPAxisTickerPi_OnGetTickLabel(QCPAxisTickerPi* self, intptr_t slot);
libqt_string QCPAxisTickerPi_QBaseGetTickLabel(QCPAxisTickerPi* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerPi_Generate(QCPAxisTickerPi* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerPi_OnGenerate(QCPAxisTickerPi* self, intptr_t slot);
void QCPAxisTickerPi_QBaseGenerate(QCPAxisTickerPi* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
libqt_list /* of double */ QCPAxisTickerPi_CreateTickVector(QCPAxisTickerPi* self, double tickStep, const QCPRange* range);
void QCPAxisTickerPi_OnCreateTickVector(QCPAxisTickerPi* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerPi_QBaseCreateTickVector(QCPAxisTickerPi* self, double tickStep, const QCPRange* range);
libqt_list /* of double */ QCPAxisTickerPi_CreateSubTickVector(QCPAxisTickerPi* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerPi_OnCreateSubTickVector(QCPAxisTickerPi* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerPi_QBaseCreateSubTickVector(QCPAxisTickerPi* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerPi_CreateLabelVector(QCPAxisTickerPi* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerPi_OnCreateLabelVector(QCPAxisTickerPi* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerPi_QBaseCreateLabelVector(QCPAxisTickerPi* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerPi_SimplifyFraction(const QCPAxisTickerPi* self, int* numerator, int* denominator);
void QCPAxisTickerPi_OnSimplifyFraction(const QCPAxisTickerPi* self, intptr_t slot);
void QCPAxisTickerPi_QBaseSimplifyFraction(const QCPAxisTickerPi* self, int* numerator, int* denominator);
libqt_string QCPAxisTickerPi_FractionToString(const QCPAxisTickerPi* self, int numerator, int denominator);
void QCPAxisTickerPi_OnFractionToString(const QCPAxisTickerPi* self, intptr_t slot);
libqt_string QCPAxisTickerPi_QBaseFractionToString(const QCPAxisTickerPi* self, int numerator, int denominator);
libqt_string QCPAxisTickerPi_UnicodeFraction(const QCPAxisTickerPi* self, int numerator, int denominator);
void QCPAxisTickerPi_OnUnicodeFraction(const QCPAxisTickerPi* self, intptr_t slot);
libqt_string QCPAxisTickerPi_QBaseUnicodeFraction(const QCPAxisTickerPi* self, int numerator, int denominator);
libqt_string QCPAxisTickerPi_UnicodeSuperscript(const QCPAxisTickerPi* self, int number);
void QCPAxisTickerPi_OnUnicodeSuperscript(const QCPAxisTickerPi* self, intptr_t slot);
libqt_string QCPAxisTickerPi_QBaseUnicodeSuperscript(const QCPAxisTickerPi* self, int number);
libqt_string QCPAxisTickerPi_UnicodeSubscript(const QCPAxisTickerPi* self, int number);
void QCPAxisTickerPi_OnUnicodeSubscript(const QCPAxisTickerPi* self, intptr_t slot);
libqt_string QCPAxisTickerPi_QBaseUnicodeSubscript(const QCPAxisTickerPi* self, int number);
void QCPAxisTickerPi_TrimTicks(const QCPAxisTickerPi* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerPi_OnTrimTicks(const QCPAxisTickerPi* self, intptr_t slot);
void QCPAxisTickerPi_QBaseTrimTicks(const QCPAxisTickerPi* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerPi_PickClosest(const QCPAxisTickerPi* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerPi_OnPickClosest(const QCPAxisTickerPi* self, intptr_t slot);
double QCPAxisTickerPi_QBasePickClosest(const QCPAxisTickerPi* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerPi_GetMantissa(const QCPAxisTickerPi* self, double input);
void QCPAxisTickerPi_OnGetMantissa(const QCPAxisTickerPi* self, intptr_t slot);
double QCPAxisTickerPi_QBaseGetMantissa(const QCPAxisTickerPi* self, double input);
double QCPAxisTickerPi_CleanMantissa(const QCPAxisTickerPi* self, double input);
void QCPAxisTickerPi_OnCleanMantissa(const QCPAxisTickerPi* self, intptr_t slot);
double QCPAxisTickerPi_QBaseCleanMantissa(const QCPAxisTickerPi* self, double input);
void QCPAxisTickerPi_Delete(QCPAxisTickerPi* self);

QCPAxisTickerLog* QCPAxisTickerLog_new();
double QCPAxisTickerLog_LogBase(const QCPAxisTickerLog* self);
int QCPAxisTickerLog_SubTickCount(const QCPAxisTickerLog* self);
void QCPAxisTickerLog_SetLogBase(QCPAxisTickerLog* self, double base);
void QCPAxisTickerLog_SetSubTickCount(QCPAxisTickerLog* self, int subTicks);
int QCPAxisTickerLog_GetSubTickCount(QCPAxisTickerLog* self, double tickStep);
libqt_list /* of double */ QCPAxisTickerLog_CreateTickVector(QCPAxisTickerLog* self, double tickStep, const QCPRange* range);
void QCPAxisTickerLog_OnGetSubTickCount(QCPAxisTickerLog* self, intptr_t slot);
int QCPAxisTickerLog_QBaseGetSubTickCount(QCPAxisTickerLog* self, double tickStep);
void QCPAxisTickerLog_OnCreateTickVector(QCPAxisTickerLog* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerLog_QBaseCreateTickVector(QCPAxisTickerLog* self, double tickStep, const QCPRange* range);
void QCPAxisTickerLog_Generate(QCPAxisTickerLog* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
void QCPAxisTickerLog_OnGenerate(QCPAxisTickerLog* self, intptr_t slot);
void QCPAxisTickerLog_QBaseGenerate(QCPAxisTickerLog* self, const QCPRange* range, const QLocale* locale, QChar* formatChar, int precision, libqt_list /* of double */ ticks, libqt_list /* of double */ subTicks, libqt_list /* of libqt_string */ tickLabels);
double QCPAxisTickerLog_GetTickStep(QCPAxisTickerLog* self, const QCPRange* range);
void QCPAxisTickerLog_OnGetTickStep(QCPAxisTickerLog* self, intptr_t slot);
double QCPAxisTickerLog_QBaseGetTickStep(QCPAxisTickerLog* self, const QCPRange* range);
libqt_string QCPAxisTickerLog_GetTickLabel(QCPAxisTickerLog* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerLog_OnGetTickLabel(QCPAxisTickerLog* self, intptr_t slot);
libqt_string QCPAxisTickerLog_QBaseGetTickLabel(QCPAxisTickerLog* self, double tick, const QLocale* locale, QChar* formatChar, int precision);
libqt_list /* of double */ QCPAxisTickerLog_CreateSubTickVector(QCPAxisTickerLog* self, int subTickCount, const libqt_list /* of double */ ticks);
void QCPAxisTickerLog_OnCreateSubTickVector(QCPAxisTickerLog* self, intptr_t slot);
libqt_list /* of double */ QCPAxisTickerLog_QBaseCreateSubTickVector(QCPAxisTickerLog* self, int subTickCount, const libqt_list /* of double */ ticks);
libqt_list /* of libqt_string */ QCPAxisTickerLog_CreateLabelVector(QCPAxisTickerLog* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerLog_OnCreateLabelVector(QCPAxisTickerLog* self, intptr_t slot);
libqt_list /* of libqt_string */ QCPAxisTickerLog_QBaseCreateLabelVector(QCPAxisTickerLog* self, const libqt_list /* of double */ ticks, const QLocale* locale, QChar* formatChar, int precision);
void QCPAxisTickerLog_TrimTicks(const QCPAxisTickerLog* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
void QCPAxisTickerLog_OnTrimTicks(const QCPAxisTickerLog* self, intptr_t slot);
void QCPAxisTickerLog_QBaseTrimTicks(const QCPAxisTickerLog* self, const QCPRange* range, libqt_list /* of double */ ticks, bool keepOneOutlier);
double QCPAxisTickerLog_PickClosest(const QCPAxisTickerLog* self, double target, const libqt_list /* of double */ candidates);
void QCPAxisTickerLog_OnPickClosest(const QCPAxisTickerLog* self, intptr_t slot);
double QCPAxisTickerLog_QBasePickClosest(const QCPAxisTickerLog* self, double target, const libqt_list /* of double */ candidates);
double QCPAxisTickerLog_GetMantissa(const QCPAxisTickerLog* self, double input);
void QCPAxisTickerLog_OnGetMantissa(const QCPAxisTickerLog* self, intptr_t slot);
double QCPAxisTickerLog_QBaseGetMantissa(const QCPAxisTickerLog* self, double input);
double QCPAxisTickerLog_CleanMantissa(const QCPAxisTickerLog* self, double input);
void QCPAxisTickerLog_OnCleanMantissa(const QCPAxisTickerLog* self, intptr_t slot);
double QCPAxisTickerLog_QBaseCleanMantissa(const QCPAxisTickerLog* self, double input);
void QCPAxisTickerLog_Delete(QCPAxisTickerLog* self);

QCPGrid* QCPGrid_new(QCPAxis* parentAxis);
QMetaObject* QCPGrid_MetaObject(const QCPGrid* self);
void* QCPGrid_Metacast(QCPGrid* self, const char* param1);
int QCPGrid_Metacall(QCPGrid* self, int param1, int param2, void** param3);
libqt_string QCPGrid_Tr(const char* s);
bool QCPGrid_SubGridVisible(const QCPGrid* self);
bool QCPGrid_AntialiasedSubGrid(const QCPGrid* self);
bool QCPGrid_AntialiasedZeroLine(const QCPGrid* self);
QPen* QCPGrid_Pen(const QCPGrid* self);
QPen* QCPGrid_SubGridPen(const QCPGrid* self);
QPen* QCPGrid_ZeroLinePen(const QCPGrid* self);
void QCPGrid_SetSubGridVisible(QCPGrid* self, bool visible);
void QCPGrid_SetAntialiasedSubGrid(QCPGrid* self, bool enabled);
void QCPGrid_SetAntialiasedZeroLine(QCPGrid* self, bool enabled);
void QCPGrid_SetPen(QCPGrid* self, const QPen* pen);
void QCPGrid_SetSubGridPen(QCPGrid* self, const QPen* pen);
void QCPGrid_SetZeroLinePen(QCPGrid* self, const QPen* pen);
void QCPGrid_ApplyDefaultAntialiasingHint(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_Draw(QCPGrid* self, QCPPainter* painter);
libqt_string QCPGrid_Tr2(const char* s, const char* c);
libqt_string QCPGrid_Tr3(const char* s, const char* c, int n);
void QCPGrid_OnMetacall(QCPGrid* self, intptr_t slot);
int QCPGrid_QBaseMetacall(QCPGrid* self, int param1, int param2, void** param3);
void QCPGrid_OnApplyDefaultAntialiasingHint(const QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseApplyDefaultAntialiasingHint(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_OnDraw(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseDraw(QCPGrid* self, QCPPainter* painter);
double QCPGrid_SelectTest(const QCPGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPGrid_OnSelectTest(const QCPGrid* self, intptr_t slot);
double QCPGrid_QBaseSelectTest(const QCPGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPGrid_ParentPlotInitialized(QCPGrid* self, QCustomPlot* parentPlot);
void QCPGrid_OnParentPlotInitialized(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseParentPlotInitialized(QCPGrid* self, QCustomPlot* parentPlot);
int QCPGrid_SelectionCategory(const QCPGrid* self);
void QCPGrid_OnSelectionCategory(const QCPGrid* self, intptr_t slot);
int QCPGrid_QBaseSelectionCategory(const QCPGrid* self);
QRect* QCPGrid_ClipRect(const QCPGrid* self);
void QCPGrid_OnClipRect(const QCPGrid* self, intptr_t slot);
QRect* QCPGrid_QBaseClipRect(const QCPGrid* self);
void QCPGrid_SelectEvent(QCPGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPGrid_OnSelectEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseSelectEvent(QCPGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPGrid_DeselectEvent(QCPGrid* self, bool* selectionStateChanged);
void QCPGrid_OnDeselectEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseDeselectEvent(QCPGrid* self, bool* selectionStateChanged);
void QCPGrid_MousePressEvent(QCPGrid* self, QMouseEvent* event, const QVariant* details);
void QCPGrid_OnMousePressEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseMousePressEvent(QCPGrid* self, QMouseEvent* event, const QVariant* details);
void QCPGrid_MouseMoveEvent(QCPGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPGrid_OnMouseMoveEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseMouseMoveEvent(QCPGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPGrid_MouseReleaseEvent(QCPGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPGrid_OnMouseReleaseEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseMouseReleaseEvent(QCPGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPGrid_MouseDoubleClickEvent(QCPGrid* self, QMouseEvent* event, const QVariant* details);
void QCPGrid_OnMouseDoubleClickEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseMouseDoubleClickEvent(QCPGrid* self, QMouseEvent* event, const QVariant* details);
void QCPGrid_WheelEvent(QCPGrid* self, QWheelEvent* event);
void QCPGrid_OnWheelEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseWheelEvent(QCPGrid* self, QWheelEvent* event);
bool QCPGrid_Event(QCPGrid* self, QEvent* event);
void QCPGrid_OnEvent(QCPGrid* self, intptr_t slot);
bool QCPGrid_QBaseEvent(QCPGrid* self, QEvent* event);
bool QCPGrid_EventFilter(QCPGrid* self, QObject* watched, QEvent* event);
void QCPGrid_OnEventFilter(QCPGrid* self, intptr_t slot);
bool QCPGrid_QBaseEventFilter(QCPGrid* self, QObject* watched, QEvent* event);
void QCPGrid_TimerEvent(QCPGrid* self, QTimerEvent* event);
void QCPGrid_OnTimerEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseTimerEvent(QCPGrid* self, QTimerEvent* event);
void QCPGrid_ChildEvent(QCPGrid* self, QChildEvent* event);
void QCPGrid_OnChildEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseChildEvent(QCPGrid* self, QChildEvent* event);
void QCPGrid_CustomEvent(QCPGrid* self, QEvent* event);
void QCPGrid_OnCustomEvent(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseCustomEvent(QCPGrid* self, QEvent* event);
void QCPGrid_ConnectNotify(QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_OnConnectNotify(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseConnectNotify(QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_DisconnectNotify(QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_OnDisconnectNotify(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseDisconnectNotify(QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_DrawGridLines(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_OnDrawGridLines(const QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseDrawGridLines(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_DrawSubGridLines(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_OnDrawSubGridLines(const QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseDrawSubGridLines(const QCPGrid* self, QCPPainter* painter);
void QCPGrid_InitializeParentPlot(QCPGrid* self, QCustomPlot* parentPlot);
void QCPGrid_OnInitializeParentPlot(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseInitializeParentPlot(QCPGrid* self, QCustomPlot* parentPlot);
void QCPGrid_SetParentLayerable(QCPGrid* self, QCPLayerable* parentLayerable);
void QCPGrid_OnSetParentLayerable(QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseSetParentLayerable(QCPGrid* self, QCPLayerable* parentLayerable);
bool QCPGrid_MoveToLayer(QCPGrid* self, QCPLayer* layer, bool prepend);
void QCPGrid_OnMoveToLayer(QCPGrid* self, intptr_t slot);
bool QCPGrid_QBaseMoveToLayer(QCPGrid* self, QCPLayer* layer, bool prepend);
void QCPGrid_ApplyAntialiasingHint(const QCPGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPGrid_OnApplyAntialiasingHint(const QCPGrid* self, intptr_t slot);
void QCPGrid_QBaseApplyAntialiasingHint(const QCPGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPGrid_Sender(const QCPGrid* self);
void QCPGrid_OnSender(const QCPGrid* self, intptr_t slot);
QObject* QCPGrid_QBaseSender(const QCPGrid* self);
int QCPGrid_SenderSignalIndex(const QCPGrid* self);
void QCPGrid_OnSenderSignalIndex(const QCPGrid* self, intptr_t slot);
int QCPGrid_QBaseSenderSignalIndex(const QCPGrid* self);
int QCPGrid_Receivers(const QCPGrid* self, const char* signal);
void QCPGrid_OnReceivers(const QCPGrid* self, intptr_t slot);
int QCPGrid_QBaseReceivers(const QCPGrid* self, const char* signal);
bool QCPGrid_IsSignalConnected(const QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_OnIsSignalConnected(const QCPGrid* self, intptr_t slot);
bool QCPGrid_QBaseIsSignalConnected(const QCPGrid* self, const QMetaMethod* signal);
void QCPGrid_Delete(QCPGrid* self);

QCPAxis* QCPAxis_new(QCPAxisRect* parent, int typeVal);
QMetaObject* QCPAxis_MetaObject(const QCPAxis* self);
void* QCPAxis_Metacast(QCPAxis* self, const char* param1);
int QCPAxis_Metacall(QCPAxis* self, int param1, int param2, void** param3);
libqt_string QCPAxis_Tr(const char* s);
int QCPAxis_AxisType(const QCPAxis* self);
QCPAxisRect* QCPAxis_AxisRect(const QCPAxis* self);
int QCPAxis_ScaleType(const QCPAxis* self);
QCPRange* QCPAxis_Range(const QCPAxis* self);
bool QCPAxis_RangeReversed(const QCPAxis* self);
bool QCPAxis_Ticks(const QCPAxis* self);
bool QCPAxis_TickLabels(const QCPAxis* self);
int QCPAxis_TickLabelPadding(const QCPAxis* self);
QFont* QCPAxis_TickLabelFont(const QCPAxis* self);
QColor* QCPAxis_TickLabelColor(const QCPAxis* self);
double QCPAxis_TickLabelRotation(const QCPAxis* self);
int QCPAxis_TickLabelSide(const QCPAxis* self);
libqt_string QCPAxis_NumberFormat(const QCPAxis* self);
int QCPAxis_NumberPrecision(const QCPAxis* self);
libqt_list /* of double */ QCPAxis_TickVector(const QCPAxis* self);
libqt_list /* of libqt_string */ QCPAxis_TickVectorLabels(const QCPAxis* self);
int QCPAxis_TickLengthIn(const QCPAxis* self);
int QCPAxis_TickLengthOut(const QCPAxis* self);
bool QCPAxis_SubTicks(const QCPAxis* self);
int QCPAxis_SubTickLengthIn(const QCPAxis* self);
int QCPAxis_SubTickLengthOut(const QCPAxis* self);
QPen* QCPAxis_BasePen(const QCPAxis* self);
QPen* QCPAxis_TickPen(const QCPAxis* self);
QPen* QCPAxis_SubTickPen(const QCPAxis* self);
QFont* QCPAxis_LabelFont(const QCPAxis* self);
QColor* QCPAxis_LabelColor(const QCPAxis* self);
libqt_string QCPAxis_Label(const QCPAxis* self);
int QCPAxis_LabelPadding(const QCPAxis* self);
int QCPAxis_Padding(const QCPAxis* self);
int QCPAxis_Offset(const QCPAxis* self);
int QCPAxis_SelectedParts(const QCPAxis* self);
int QCPAxis_SelectableParts(const QCPAxis* self);
QFont* QCPAxis_SelectedTickLabelFont(const QCPAxis* self);
QFont* QCPAxis_SelectedLabelFont(const QCPAxis* self);
QColor* QCPAxis_SelectedTickLabelColor(const QCPAxis* self);
QColor* QCPAxis_SelectedLabelColor(const QCPAxis* self);
QPen* QCPAxis_SelectedBasePen(const QCPAxis* self);
QPen* QCPAxis_SelectedTickPen(const QCPAxis* self);
QPen* QCPAxis_SelectedSubTickPen(const QCPAxis* self);
QCPLineEnding* QCPAxis_LowerEnding(const QCPAxis* self);
QCPLineEnding* QCPAxis_UpperEnding(const QCPAxis* self);
QCPGrid* QCPAxis_Grid(const QCPAxis* self);
void QCPAxis_SetScaleType(QCPAxis* self, int typeVal);
void QCPAxis_SetRange(QCPAxis* self, const QCPRange* range);
void QCPAxis_SetRange2(QCPAxis* self, double lower, double upper);
void QCPAxis_SetRange3(QCPAxis* self, double position, double size, int alignment);
void QCPAxis_SetRangeLower(QCPAxis* self, double lower);
void QCPAxis_SetRangeUpper(QCPAxis* self, double upper);
void QCPAxis_SetRangeReversed(QCPAxis* self, bool reversed);
void QCPAxis_SetTicks(QCPAxis* self, bool show);
void QCPAxis_SetTickLabels(QCPAxis* self, bool show);
void QCPAxis_SetTickLabelPadding(QCPAxis* self, int padding);
void QCPAxis_SetTickLabelFont(QCPAxis* self, const QFont* font);
void QCPAxis_SetTickLabelColor(QCPAxis* self, const QColor* color);
void QCPAxis_SetTickLabelRotation(QCPAxis* self, double degrees);
void QCPAxis_SetTickLabelSide(QCPAxis* self, int side);
void QCPAxis_SetNumberFormat(QCPAxis* self, const libqt_string formatCode);
void QCPAxis_SetNumberPrecision(QCPAxis* self, int precision);
void QCPAxis_SetTickLength(QCPAxis* self, int inside);
void QCPAxis_SetTickLengthIn(QCPAxis* self, int inside);
void QCPAxis_SetTickLengthOut(QCPAxis* self, int outside);
void QCPAxis_SetSubTicks(QCPAxis* self, bool show);
void QCPAxis_SetSubTickLength(QCPAxis* self, int inside);
void QCPAxis_SetSubTickLengthIn(QCPAxis* self, int inside);
void QCPAxis_SetSubTickLengthOut(QCPAxis* self, int outside);
void QCPAxis_SetBasePen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetTickPen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetSubTickPen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetLabelFont(QCPAxis* self, const QFont* font);
void QCPAxis_SetLabelColor(QCPAxis* self, const QColor* color);
void QCPAxis_SetLabel(QCPAxis* self, const libqt_string str);
void QCPAxis_SetLabelPadding(QCPAxis* self, int padding);
void QCPAxis_SetPadding(QCPAxis* self, int padding);
void QCPAxis_SetOffset(QCPAxis* self, int offset);
void QCPAxis_SetSelectedTickLabelFont(QCPAxis* self, const QFont* font);
void QCPAxis_SetSelectedLabelFont(QCPAxis* self, const QFont* font);
void QCPAxis_SetSelectedTickLabelColor(QCPAxis* self, const QColor* color);
void QCPAxis_SetSelectedLabelColor(QCPAxis* self, const QColor* color);
void QCPAxis_SetSelectedBasePen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetSelectedTickPen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetSelectedSubTickPen(QCPAxis* self, const QPen* pen);
void QCPAxis_SetSelectableParts(QCPAxis* self, const int* selectableParts);
void QCPAxis_SetSelectedParts(QCPAxis* self, const int* selectedParts);
void QCPAxis_SetLowerEnding(QCPAxis* self, const QCPLineEnding* ending);
void QCPAxis_SetUpperEnding(QCPAxis* self, const QCPLineEnding* ending);
double QCPAxis_SelectTest(const QCPAxis* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPAxis_Orientation(const QCPAxis* self);
int QCPAxis_PixelOrientation(const QCPAxis* self);
void QCPAxis_MoveRange(QCPAxis* self, double diff);
void QCPAxis_ScaleRange(QCPAxis* self, double factor);
void QCPAxis_ScaleRange2(QCPAxis* self, double factor, double center);
void QCPAxis_SetScaleRatio(QCPAxis* self, const QCPAxis* otherAxis);
void QCPAxis_Rescale(QCPAxis* self);
double QCPAxis_PixelToCoord(const QCPAxis* self, double value);
double QCPAxis_CoordToPixel(const QCPAxis* self, double value);
int QCPAxis_GetPartAt(const QCPAxis* self, const QPointF* pos);
libqt_list /* of QCPAbstractPlottable* */ QCPAxis_Plottables(const QCPAxis* self);
libqt_list /* of QCPGraph* */ QCPAxis_Graphs(const QCPAxis* self);
libqt_list /* of QCPAbstractItem* */ QCPAxis_Items(const QCPAxis* self);
int QCPAxis_MarginSideToAxisType(int side);
int QCPAxis_Orientation2(int typeVal);
int QCPAxis_Opposite(int typeVal);
void QCPAxis_RangeChanged(QCPAxis* self, const QCPRange* newRange);
void QCPAxis_RangeChanged2(QCPAxis* self, const QCPRange* newRange, const QCPRange* oldRange);
void QCPAxis_ScaleTypeChanged(QCPAxis* self, int scaleType);
void QCPAxis_SelectionChanged(QCPAxis* self, const int* parts);
void QCPAxis_SelectableChanged(QCPAxis* self, const int* parts);
int QCPAxis_CalculateMargin(QCPAxis* self);
void QCPAxis_ApplyDefaultAntialiasingHint(const QCPAxis* self, QCPPainter* painter);
void QCPAxis_Draw(QCPAxis* self, QCPPainter* painter);
int QCPAxis_SelectionCategory(const QCPAxis* self);
void QCPAxis_SelectEvent(QCPAxis* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAxis_DeselectEvent(QCPAxis* self, bool* selectionStateChanged);
void QCPAxis_MousePressEvent(QCPAxis* self, QMouseEvent* event, const QVariant* details);
void QCPAxis_MouseMoveEvent(QCPAxis* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxis_MouseReleaseEvent(QCPAxis* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxis_WheelEvent(QCPAxis* self, QWheelEvent* event);
libqt_string QCPAxis_Tr2(const char* s, const char* c);
libqt_string QCPAxis_Tr3(const char* s, const char* c, int n);
void QCPAxis_SetTickLength2(QCPAxis* self, int inside, int outside);
void QCPAxis_SetSubTickLength2(QCPAxis* self, int inside, int outside);
void QCPAxis_SetScaleRatio2(QCPAxis* self, const QCPAxis* otherAxis, double ratio);
void QCPAxis_Rescale1(QCPAxis* self, bool onlyVisiblePlottables);
void QCPAxis_OnMetacall(QCPAxis* self, intptr_t slot);
int QCPAxis_QBaseMetacall(QCPAxis* self, int param1, int param2, void** param3);
void QCPAxis_OnSelectTest(const QCPAxis* self, intptr_t slot);
double QCPAxis_QBaseSelectTest(const QCPAxis* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAxis_OnCalculateMargin(QCPAxis* self, intptr_t slot);
int QCPAxis_QBaseCalculateMargin(QCPAxis* self);
void QCPAxis_OnApplyDefaultAntialiasingHint(const QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseApplyDefaultAntialiasingHint(const QCPAxis* self, QCPPainter* painter);
void QCPAxis_OnDraw(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseDraw(QCPAxis* self, QCPPainter* painter);
void QCPAxis_OnSelectionCategory(const QCPAxis* self, intptr_t slot);
int QCPAxis_QBaseSelectionCategory(const QCPAxis* self);
void QCPAxis_OnSelectEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseSelectEvent(QCPAxis* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAxis_OnDeselectEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseDeselectEvent(QCPAxis* self, bool* selectionStateChanged);
void QCPAxis_OnMousePressEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseMousePressEvent(QCPAxis* self, QMouseEvent* event, const QVariant* details);
void QCPAxis_OnMouseMoveEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseMouseMoveEvent(QCPAxis* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxis_OnMouseReleaseEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseMouseReleaseEvent(QCPAxis* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxis_OnWheelEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseWheelEvent(QCPAxis* self, QWheelEvent* event);
void QCPAxis_ParentPlotInitialized(QCPAxis* self, QCustomPlot* parentPlot);
void QCPAxis_OnParentPlotInitialized(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseParentPlotInitialized(QCPAxis* self, QCustomPlot* parentPlot);
QRect* QCPAxis_ClipRect(const QCPAxis* self);
void QCPAxis_OnClipRect(const QCPAxis* self, intptr_t slot);
QRect* QCPAxis_QBaseClipRect(const QCPAxis* self);
void QCPAxis_MouseDoubleClickEvent(QCPAxis* self, QMouseEvent* event, const QVariant* details);
void QCPAxis_OnMouseDoubleClickEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseMouseDoubleClickEvent(QCPAxis* self, QMouseEvent* event, const QVariant* details);
bool QCPAxis_Event(QCPAxis* self, QEvent* event);
void QCPAxis_OnEvent(QCPAxis* self, intptr_t slot);
bool QCPAxis_QBaseEvent(QCPAxis* self, QEvent* event);
bool QCPAxis_EventFilter(QCPAxis* self, QObject* watched, QEvent* event);
void QCPAxis_OnEventFilter(QCPAxis* self, intptr_t slot);
bool QCPAxis_QBaseEventFilter(QCPAxis* self, QObject* watched, QEvent* event);
void QCPAxis_TimerEvent(QCPAxis* self, QTimerEvent* event);
void QCPAxis_OnTimerEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseTimerEvent(QCPAxis* self, QTimerEvent* event);
void QCPAxis_ChildEvent(QCPAxis* self, QChildEvent* event);
void QCPAxis_OnChildEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseChildEvent(QCPAxis* self, QChildEvent* event);
void QCPAxis_CustomEvent(QCPAxis* self, QEvent* event);
void QCPAxis_OnCustomEvent(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseCustomEvent(QCPAxis* self, QEvent* event);
void QCPAxis_ConnectNotify(QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_OnConnectNotify(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseConnectNotify(QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_DisconnectNotify(QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_OnDisconnectNotify(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseDisconnectNotify(QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_SetupTickVectors(QCPAxis* self);
void QCPAxis_OnSetupTickVectors(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseSetupTickVectors(QCPAxis* self);
QPen* QCPAxis_GetBasePen(const QCPAxis* self);
void QCPAxis_OnGetBasePen(const QCPAxis* self, intptr_t slot);
QPen* QCPAxis_QBaseGetBasePen(const QCPAxis* self);
QPen* QCPAxis_GetTickPen(const QCPAxis* self);
void QCPAxis_OnGetTickPen(const QCPAxis* self, intptr_t slot);
QPen* QCPAxis_QBaseGetTickPen(const QCPAxis* self);
QPen* QCPAxis_GetSubTickPen(const QCPAxis* self);
void QCPAxis_OnGetSubTickPen(const QCPAxis* self, intptr_t slot);
QPen* QCPAxis_QBaseGetSubTickPen(const QCPAxis* self);
QFont* QCPAxis_GetTickLabelFont(const QCPAxis* self);
void QCPAxis_OnGetTickLabelFont(const QCPAxis* self, intptr_t slot);
QFont* QCPAxis_QBaseGetTickLabelFont(const QCPAxis* self);
QFont* QCPAxis_GetLabelFont(const QCPAxis* self);
void QCPAxis_OnGetLabelFont(const QCPAxis* self, intptr_t slot);
QFont* QCPAxis_QBaseGetLabelFont(const QCPAxis* self);
QColor* QCPAxis_GetTickLabelColor(const QCPAxis* self);
void QCPAxis_OnGetTickLabelColor(const QCPAxis* self, intptr_t slot);
QColor* QCPAxis_QBaseGetTickLabelColor(const QCPAxis* self);
QColor* QCPAxis_GetLabelColor(const QCPAxis* self);
void QCPAxis_OnGetLabelColor(const QCPAxis* self, intptr_t slot);
QColor* QCPAxis_QBaseGetLabelColor(const QCPAxis* self);
void QCPAxis_InitializeParentPlot(QCPAxis* self, QCustomPlot* parentPlot);
void QCPAxis_OnInitializeParentPlot(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseInitializeParentPlot(QCPAxis* self, QCustomPlot* parentPlot);
void QCPAxis_SetParentLayerable(QCPAxis* self, QCPLayerable* parentLayerable);
void QCPAxis_OnSetParentLayerable(QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseSetParentLayerable(QCPAxis* self, QCPLayerable* parentLayerable);
bool QCPAxis_MoveToLayer(QCPAxis* self, QCPLayer* layer, bool prepend);
void QCPAxis_OnMoveToLayer(QCPAxis* self, intptr_t slot);
bool QCPAxis_QBaseMoveToLayer(QCPAxis* self, QCPLayer* layer, bool prepend);
void QCPAxis_ApplyAntialiasingHint(const QCPAxis* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPAxis_OnApplyAntialiasingHint(const QCPAxis* self, intptr_t slot);
void QCPAxis_QBaseApplyAntialiasingHint(const QCPAxis* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPAxis_Sender(const QCPAxis* self);
void QCPAxis_OnSender(const QCPAxis* self, intptr_t slot);
QObject* QCPAxis_QBaseSender(const QCPAxis* self);
int QCPAxis_SenderSignalIndex(const QCPAxis* self);
void QCPAxis_OnSenderSignalIndex(const QCPAxis* self, intptr_t slot);
int QCPAxis_QBaseSenderSignalIndex(const QCPAxis* self);
int QCPAxis_Receivers(const QCPAxis* self, const char* signal);
void QCPAxis_OnReceivers(const QCPAxis* self, intptr_t slot);
int QCPAxis_QBaseReceivers(const QCPAxis* self, const char* signal);
bool QCPAxis_IsSignalConnected(const QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_OnIsSignalConnected(const QCPAxis* self, intptr_t slot);
bool QCPAxis_QBaseIsSignalConnected(const QCPAxis* self, const QMetaMethod* signal);
void QCPAxis_Delete(QCPAxis* self);

QCPScatterStyle* QCPScatterStyle_new();
QCPScatterStyle* QCPScatterStyle_new2(int shape);
QCPScatterStyle* QCPScatterStyle_new3(int shape, const QColor* color, double size);
QCPScatterStyle* QCPScatterStyle_new4(int shape, const QColor* color, const QColor* fill, double size);
QCPScatterStyle* QCPScatterStyle_new5(int shape, const QPen* pen, const QBrush* brush, double size);
QCPScatterStyle* QCPScatterStyle_new6(const QPixmap* pixmap);
QCPScatterStyle* QCPScatterStyle_new7(const QPainterPath* customPath, const QPen* pen);
QCPScatterStyle* QCPScatterStyle_new8(int shape, double size);
QCPScatterStyle* QCPScatterStyle_new9(const QPainterPath* customPath, const QPen* pen, const QBrush* brush);
QCPScatterStyle* QCPScatterStyle_new10(const QPainterPath* customPath, const QPen* pen, const QBrush* brush, double size);
double QCPScatterStyle_Size(const QCPScatterStyle* self);
int QCPScatterStyle_Shape(const QCPScatterStyle* self);
QPen* QCPScatterStyle_Pen(const QCPScatterStyle* self);
QBrush* QCPScatterStyle_Brush(const QCPScatterStyle* self);
QPixmap* QCPScatterStyle_Pixmap(const QCPScatterStyle* self);
QPainterPath* QCPScatterStyle_CustomPath(const QCPScatterStyle* self);
void QCPScatterStyle_SetFromOther(QCPScatterStyle* self, const QCPScatterStyle* other, int properties);
void QCPScatterStyle_SetSize(QCPScatterStyle* self, double size);
void QCPScatterStyle_SetShape(QCPScatterStyle* self, int shape);
void QCPScatterStyle_SetPen(QCPScatterStyle* self, const QPen* pen);
void QCPScatterStyle_SetBrush(QCPScatterStyle* self, const QBrush* brush);
void QCPScatterStyle_SetPixmap(QCPScatterStyle* self, const QPixmap* pixmap);
void QCPScatterStyle_SetCustomPath(QCPScatterStyle* self, const QPainterPath* customPath);
bool QCPScatterStyle_IsNone(const QCPScatterStyle* self);
bool QCPScatterStyle_IsPenDefined(const QCPScatterStyle* self);
void QCPScatterStyle_UndefinePen(QCPScatterStyle* self);
void QCPScatterStyle_ApplyTo(const QCPScatterStyle* self, QCPPainter* painter, const QPen* defaultPen);
void QCPScatterStyle_DrawShape(const QCPScatterStyle* self, QCPPainter* painter, const QPointF* pos);
void QCPScatterStyle_DrawShape2(const QCPScatterStyle* self, QCPPainter* painter, double x, double y);
void QCPScatterStyle_Delete(QCPScatterStyle* self);

QCPSelectionDecorator* QCPSelectionDecorator_new();
QPen* QCPSelectionDecorator_Pen(const QCPSelectionDecorator* self);
QBrush* QCPSelectionDecorator_Brush(const QCPSelectionDecorator* self);
QCPScatterStyle* QCPSelectionDecorator_ScatterStyle(const QCPSelectionDecorator* self);
int QCPSelectionDecorator_UsedScatterProperties(const QCPSelectionDecorator* self);
void QCPSelectionDecorator_SetPen(QCPSelectionDecorator* self, const QPen* pen);
void QCPSelectionDecorator_SetBrush(QCPSelectionDecorator* self, const QBrush* brush);
void QCPSelectionDecorator_SetScatterStyle(QCPSelectionDecorator* self, const QCPScatterStyle* scatterStyle);
void QCPSelectionDecorator_SetUsedScatterProperties(QCPSelectionDecorator* self, const int* properties);
void QCPSelectionDecorator_ApplyPen(const QCPSelectionDecorator* self, QCPPainter* painter);
void QCPSelectionDecorator_ApplyBrush(const QCPSelectionDecorator* self, QCPPainter* painter);
QCPScatterStyle* QCPSelectionDecorator_GetFinalScatterStyle(const QCPSelectionDecorator* self, const QCPScatterStyle* unselectedStyle);
void QCPSelectionDecorator_CopyFrom(QCPSelectionDecorator* self, const QCPSelectionDecorator* other);
void QCPSelectionDecorator_DrawDecoration(QCPSelectionDecorator* self, QCPPainter* painter, QCPDataSelection* selection);
bool QCPSelectionDecorator_RegisterWithPlottable(QCPSelectionDecorator* self, QCPAbstractPlottable* plottable);
void QCPSelectionDecorator_SetScatterStyle2(QCPSelectionDecorator* self, const QCPScatterStyle* scatterStyle, int usedProperties);
void QCPSelectionDecorator_OnCopyFrom(QCPSelectionDecorator* self, intptr_t slot);
void QCPSelectionDecorator_QBaseCopyFrom(QCPSelectionDecorator* self, const QCPSelectionDecorator* other);
void QCPSelectionDecorator_OnDrawDecoration(QCPSelectionDecorator* self, intptr_t slot);
void QCPSelectionDecorator_QBaseDrawDecoration(QCPSelectionDecorator* self, QCPPainter* painter, QCPDataSelection* selection);
void QCPSelectionDecorator_OnRegisterWithPlottable(QCPSelectionDecorator* self, intptr_t slot);
bool QCPSelectionDecorator_QBaseRegisterWithPlottable(QCPSelectionDecorator* self, QCPAbstractPlottable* plottable);
void QCPSelectionDecorator_Delete(QCPSelectionDecorator* self);

QCPAbstractPlottable* QCPAbstractPlottable_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPAbstractPlottable_MetaObject(const QCPAbstractPlottable* self);
void* QCPAbstractPlottable_Metacast(QCPAbstractPlottable* self, const char* param1);
int QCPAbstractPlottable_Metacall(QCPAbstractPlottable* self, int param1, int param2, void** param3);
libqt_string QCPAbstractPlottable_Tr(const char* s);
libqt_string QCPAbstractPlottable_Name(const QCPAbstractPlottable* self);
bool QCPAbstractPlottable_AntialiasedFill(const QCPAbstractPlottable* self);
bool QCPAbstractPlottable_AntialiasedScatters(const QCPAbstractPlottable* self);
QPen* QCPAbstractPlottable_Pen(const QCPAbstractPlottable* self);
QBrush* QCPAbstractPlottable_Brush(const QCPAbstractPlottable* self);
QCPAxis* QCPAbstractPlottable_KeyAxis(const QCPAbstractPlottable* self);
QCPAxis* QCPAbstractPlottable_ValueAxis(const QCPAbstractPlottable* self);
int QCPAbstractPlottable_Selectable(const QCPAbstractPlottable* self);
bool QCPAbstractPlottable_Selected(const QCPAbstractPlottable* self);
QCPDataSelection* QCPAbstractPlottable_Selection(const QCPAbstractPlottable* self);
QCPSelectionDecorator* QCPAbstractPlottable_SelectionDecorator(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_SetName(QCPAbstractPlottable* self, const libqt_string name);
void QCPAbstractPlottable_SetAntialiasedFill(QCPAbstractPlottable* self, bool enabled);
void QCPAbstractPlottable_SetAntialiasedScatters(QCPAbstractPlottable* self, bool enabled);
void QCPAbstractPlottable_SetPen(QCPAbstractPlottable* self, const QPen* pen);
void QCPAbstractPlottable_SetBrush(QCPAbstractPlottable* self, const QBrush* brush);
void QCPAbstractPlottable_SetKeyAxis(QCPAbstractPlottable* self, QCPAxis* axis);
void QCPAbstractPlottable_SetValueAxis(QCPAbstractPlottable* self, QCPAxis* axis);
void QCPAbstractPlottable_SetSelectable(QCPAbstractPlottable* self, int selectable);
void QCPAbstractPlottable_SetSelection(QCPAbstractPlottable* self, QCPDataSelection* selection);
void QCPAbstractPlottable_SetSelectionDecorator(QCPAbstractPlottable* self, QCPSelectionDecorator* decorator);
double QCPAbstractPlottable_SelectTest(const QCPAbstractPlottable* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPPlottableInterface1D* QCPAbstractPlottable_Interface1D(QCPAbstractPlottable* self);
QCPRange* QCPAbstractPlottable_GetKeyRange(const QCPAbstractPlottable* self, bool* foundRange, int inSignDomain);
QCPRange* QCPAbstractPlottable_GetValueRange(const QCPAbstractPlottable* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPAbstractPlottable_CoordsToPixels(const QCPAbstractPlottable* self, double key, double value, double* x, double* y);
QPointF* QCPAbstractPlottable_CoordsToPixels2(const QCPAbstractPlottable* self, double key, double value);
void QCPAbstractPlottable_PixelsToCoords(const QCPAbstractPlottable* self, double x, double y, double* key, double* value);
void QCPAbstractPlottable_PixelsToCoords2(const QCPAbstractPlottable* self, const QPointF* pixelPos, double* key, double* value);
void QCPAbstractPlottable_RescaleAxes(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_RescaleKeyAxis(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_RescaleValueAxis(const QCPAbstractPlottable* self);
bool QCPAbstractPlottable_AddToLegend(QCPAbstractPlottable* self, QCPLegend* legend);
bool QCPAbstractPlottable_AddToLegend2(QCPAbstractPlottable* self);
bool QCPAbstractPlottable_RemoveFromLegend(const QCPAbstractPlottable* self, QCPLegend* legend);
bool QCPAbstractPlottable_RemoveFromLegend2(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_SelectionChanged(QCPAbstractPlottable* self, bool selected);
void QCPAbstractPlottable_SelectionChanged2(QCPAbstractPlottable* self, const QCPDataSelection* selection);
void QCPAbstractPlottable_SelectableChanged(QCPAbstractPlottable* self, int selectable);
QRect* QCPAbstractPlottable_ClipRect(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_Draw(QCPAbstractPlottable* self, QCPPainter* painter);
int QCPAbstractPlottable_SelectionCategory(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_ApplyDefaultAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_SelectEvent(QCPAbstractPlottable* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractPlottable_DeselectEvent(QCPAbstractPlottable* self, bool* selectionStateChanged);
void QCPAbstractPlottable_DrawLegendIcon(const QCPAbstractPlottable* self, QCPPainter* painter, const QRectF* rect);
libqt_string QCPAbstractPlottable_Tr2(const char* s, const char* c);
libqt_string QCPAbstractPlottable_Tr3(const char* s, const char* c, int n);
void QCPAbstractPlottable_RescaleAxes1(const QCPAbstractPlottable* self, bool onlyEnlarge);
void QCPAbstractPlottable_RescaleKeyAxis1(const QCPAbstractPlottable* self, bool onlyEnlarge);
void QCPAbstractPlottable_RescaleValueAxis1(const QCPAbstractPlottable* self, bool onlyEnlarge);
void QCPAbstractPlottable_RescaleValueAxis2(const QCPAbstractPlottable* self, bool onlyEnlarge, bool inKeyRange);
void QCPAbstractPlottable_OnMetacall(QCPAbstractPlottable* self, intptr_t slot);
int QCPAbstractPlottable_QBaseMetacall(QCPAbstractPlottable* self, int param1, int param2, void** param3);
void QCPAbstractPlottable_OnSelectTest(const QCPAbstractPlottable* self, intptr_t slot);
double QCPAbstractPlottable_QBaseSelectTest(const QCPAbstractPlottable* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAbstractPlottable_OnInterface1D(QCPAbstractPlottable* self, intptr_t slot);
QCPPlottableInterface1D* QCPAbstractPlottable_QBaseInterface1D(QCPAbstractPlottable* self);
void QCPAbstractPlottable_OnGetKeyRange(const QCPAbstractPlottable* self, intptr_t slot);
QCPRange* QCPAbstractPlottable_QBaseGetKeyRange(const QCPAbstractPlottable* self, bool* foundRange, int inSignDomain);
void QCPAbstractPlottable_OnGetValueRange(const QCPAbstractPlottable* self, intptr_t slot);
QCPRange* QCPAbstractPlottable_QBaseGetValueRange(const QCPAbstractPlottable* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPAbstractPlottable_OnClipRect(const QCPAbstractPlottable* self, intptr_t slot);
QRect* QCPAbstractPlottable_QBaseClipRect(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_OnDraw(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseDraw(QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_OnSelectionCategory(const QCPAbstractPlottable* self, intptr_t slot);
int QCPAbstractPlottable_QBaseSelectionCategory(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_OnApplyDefaultAntialiasingHint(const QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseApplyDefaultAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_OnSelectEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseSelectEvent(QCPAbstractPlottable* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractPlottable_OnDeselectEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseDeselectEvent(QCPAbstractPlottable* self, bool* selectionStateChanged);
void QCPAbstractPlottable_OnDrawLegendIcon(const QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseDrawLegendIcon(const QCPAbstractPlottable* self, QCPPainter* painter, const QRectF* rect);
void QCPAbstractPlottable_ParentPlotInitialized(QCPAbstractPlottable* self, QCustomPlot* parentPlot);
void QCPAbstractPlottable_OnParentPlotInitialized(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseParentPlotInitialized(QCPAbstractPlottable* self, QCustomPlot* parentPlot);
void QCPAbstractPlottable_MousePressEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractPlottable_OnMousePressEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseMousePressEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractPlottable_MouseMoveEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractPlottable_OnMouseMoveEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseMouseMoveEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractPlottable_MouseReleaseEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractPlottable_OnMouseReleaseEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseMouseReleaseEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractPlottable_MouseDoubleClickEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractPlottable_OnMouseDoubleClickEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseMouseDoubleClickEvent(QCPAbstractPlottable* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractPlottable_WheelEvent(QCPAbstractPlottable* self, QWheelEvent* event);
void QCPAbstractPlottable_OnWheelEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseWheelEvent(QCPAbstractPlottable* self, QWheelEvent* event);
bool QCPAbstractPlottable_Event(QCPAbstractPlottable* self, QEvent* event);
void QCPAbstractPlottable_OnEvent(QCPAbstractPlottable* self, intptr_t slot);
bool QCPAbstractPlottable_QBaseEvent(QCPAbstractPlottable* self, QEvent* event);
bool QCPAbstractPlottable_EventFilter(QCPAbstractPlottable* self, QObject* watched, QEvent* event);
void QCPAbstractPlottable_OnEventFilter(QCPAbstractPlottable* self, intptr_t slot);
bool QCPAbstractPlottable_QBaseEventFilter(QCPAbstractPlottable* self, QObject* watched, QEvent* event);
void QCPAbstractPlottable_TimerEvent(QCPAbstractPlottable* self, QTimerEvent* event);
void QCPAbstractPlottable_OnTimerEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseTimerEvent(QCPAbstractPlottable* self, QTimerEvent* event);
void QCPAbstractPlottable_ChildEvent(QCPAbstractPlottable* self, QChildEvent* event);
void QCPAbstractPlottable_OnChildEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseChildEvent(QCPAbstractPlottable* self, QChildEvent* event);
void QCPAbstractPlottable_CustomEvent(QCPAbstractPlottable* self, QEvent* event);
void QCPAbstractPlottable_OnCustomEvent(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseCustomEvent(QCPAbstractPlottable* self, QEvent* event);
void QCPAbstractPlottable_ConnectNotify(QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_OnConnectNotify(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseConnectNotify(QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_DisconnectNotify(QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_OnDisconnectNotify(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseDisconnectNotify(QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_ApplyFillAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_OnApplyFillAntialiasingHint(const QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseApplyFillAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_ApplyScattersAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_OnApplyScattersAntialiasingHint(const QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseApplyScattersAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter);
void QCPAbstractPlottable_InitializeParentPlot(QCPAbstractPlottable* self, QCustomPlot* parentPlot);
void QCPAbstractPlottable_OnInitializeParentPlot(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseInitializeParentPlot(QCPAbstractPlottable* self, QCustomPlot* parentPlot);
void QCPAbstractPlottable_SetParentLayerable(QCPAbstractPlottable* self, QCPLayerable* parentLayerable);
void QCPAbstractPlottable_OnSetParentLayerable(QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseSetParentLayerable(QCPAbstractPlottable* self, QCPLayerable* parentLayerable);
bool QCPAbstractPlottable_MoveToLayer(QCPAbstractPlottable* self, QCPLayer* layer, bool prepend);
void QCPAbstractPlottable_OnMoveToLayer(QCPAbstractPlottable* self, intptr_t slot);
bool QCPAbstractPlottable_QBaseMoveToLayer(QCPAbstractPlottable* self, QCPLayer* layer, bool prepend);
void QCPAbstractPlottable_ApplyAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPAbstractPlottable_OnApplyAntialiasingHint(const QCPAbstractPlottable* self, intptr_t slot);
void QCPAbstractPlottable_QBaseApplyAntialiasingHint(const QCPAbstractPlottable* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPAbstractPlottable_Sender(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_OnSender(const QCPAbstractPlottable* self, intptr_t slot);
QObject* QCPAbstractPlottable_QBaseSender(const QCPAbstractPlottable* self);
int QCPAbstractPlottable_SenderSignalIndex(const QCPAbstractPlottable* self);
void QCPAbstractPlottable_OnSenderSignalIndex(const QCPAbstractPlottable* self, intptr_t slot);
int QCPAbstractPlottable_QBaseSenderSignalIndex(const QCPAbstractPlottable* self);
int QCPAbstractPlottable_Receivers(const QCPAbstractPlottable* self, const char* signal);
void QCPAbstractPlottable_OnReceivers(const QCPAbstractPlottable* self, intptr_t slot);
int QCPAbstractPlottable_QBaseReceivers(const QCPAbstractPlottable* self, const char* signal);
bool QCPAbstractPlottable_IsSignalConnected(const QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_OnIsSignalConnected(const QCPAbstractPlottable* self, intptr_t slot);
bool QCPAbstractPlottable_QBaseIsSignalConnected(const QCPAbstractPlottable* self, const QMetaMethod* signal);
void QCPAbstractPlottable_Delete(QCPAbstractPlottable* self);

QCPItemAnchor* QCPItemAnchor_new(QCustomPlot* parentPlot, QCPAbstractItem* parentItem, const libqt_string name);
QCPItemAnchor* QCPItemAnchor_new2(QCustomPlot* parentPlot, QCPAbstractItem* parentItem, const libqt_string name, int anchorId);
libqt_string QCPItemAnchor_Name(const QCPItemAnchor* self);
QPointF* QCPItemAnchor_PixelPosition(const QCPItemAnchor* self);
QCPItemPosition* QCPItemAnchor_ToQCPItemPosition(QCPItemAnchor* self);
void QCPItemAnchor_OnPixelPosition(const QCPItemAnchor* self, intptr_t slot);
QPointF* QCPItemAnchor_QBasePixelPosition(const QCPItemAnchor* self);
void QCPItemAnchor_OnToQCPItemPosition(QCPItemAnchor* self, intptr_t slot);
QCPItemPosition* QCPItemAnchor_QBaseToQCPItemPosition(QCPItemAnchor* self);
void QCPItemAnchor_AddChildX(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_OnAddChildX(QCPItemAnchor* self, intptr_t slot);
void QCPItemAnchor_QBaseAddChildX(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_RemoveChildX(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_OnRemoveChildX(QCPItemAnchor* self, intptr_t slot);
void QCPItemAnchor_QBaseRemoveChildX(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_AddChildY(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_OnAddChildY(QCPItemAnchor* self, intptr_t slot);
void QCPItemAnchor_QBaseAddChildY(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_RemoveChildY(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_OnRemoveChildY(QCPItemAnchor* self, intptr_t slot);
void QCPItemAnchor_QBaseRemoveChildY(QCPItemAnchor* self, QCPItemPosition* pos);
void QCPItemAnchor_Delete(QCPItemAnchor* self);

QCPItemPosition* QCPItemPosition_new(QCustomPlot* parentPlot, QCPAbstractItem* parentItem, const libqt_string name);
int QCPItemPosition_Type(const QCPItemPosition* self);
int QCPItemPosition_TypeX(const QCPItemPosition* self);
int QCPItemPosition_TypeY(const QCPItemPosition* self);
QCPItemAnchor* QCPItemPosition_ParentAnchor(const QCPItemPosition* self);
QCPItemAnchor* QCPItemPosition_ParentAnchorX(const QCPItemPosition* self);
QCPItemAnchor* QCPItemPosition_ParentAnchorY(const QCPItemPosition* self);
double QCPItemPosition_Key(const QCPItemPosition* self);
double QCPItemPosition_Value(const QCPItemPosition* self);
QPointF* QCPItemPosition_Coords(const QCPItemPosition* self);
QCPAxis* QCPItemPosition_KeyAxis(const QCPItemPosition* self);
QCPAxis* QCPItemPosition_ValueAxis(const QCPItemPosition* self);
QCPAxisRect* QCPItemPosition_AxisRect(const QCPItemPosition* self);
QPointF* QCPItemPosition_PixelPosition(const QCPItemPosition* self);
void QCPItemPosition_SetType(QCPItemPosition* self, int typeVal);
void QCPItemPosition_SetTypeX(QCPItemPosition* self, int typeVal);
void QCPItemPosition_SetTypeY(QCPItemPosition* self, int typeVal);
bool QCPItemPosition_SetParentAnchor(QCPItemPosition* self, QCPItemAnchor* parentAnchor);
bool QCPItemPosition_SetParentAnchorX(QCPItemPosition* self, QCPItemAnchor* parentAnchor);
bool QCPItemPosition_SetParentAnchorY(QCPItemPosition* self, QCPItemAnchor* parentAnchor);
void QCPItemPosition_SetCoords(QCPItemPosition* self, double key, double value);
void QCPItemPosition_SetCoords2(QCPItemPosition* self, const QPointF* pos);
void QCPItemPosition_SetAxes(QCPItemPosition* self, QCPAxis* keyAxis, QCPAxis* valueAxis);
void QCPItemPosition_SetAxisRect(QCPItemPosition* self, QCPAxisRect* axisRect);
void QCPItemPosition_SetPixelPosition(QCPItemPosition* self, const QPointF* pixelPosition);
QCPItemPosition* QCPItemPosition_ToQCPItemPosition(QCPItemPosition* self);
bool QCPItemPosition_SetParentAnchor2(QCPItemPosition* self, QCPItemAnchor* parentAnchor, bool keepPixelPosition);
bool QCPItemPosition_SetParentAnchorX2(QCPItemPosition* self, QCPItemAnchor* parentAnchor, bool keepPixelPosition);
bool QCPItemPosition_SetParentAnchorY2(QCPItemPosition* self, QCPItemAnchor* parentAnchor, bool keepPixelPosition);
void QCPItemPosition_OnPixelPosition(const QCPItemPosition* self, intptr_t slot);
QPointF* QCPItemPosition_QBasePixelPosition(const QCPItemPosition* self);
void QCPItemPosition_OnToQCPItemPosition(QCPItemPosition* self, intptr_t slot);
QCPItemPosition* QCPItemPosition_QBaseToQCPItemPosition(QCPItemPosition* self);
void QCPItemPosition_AddChildX(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_OnAddChildX(QCPItemPosition* self, intptr_t slot);
void QCPItemPosition_QBaseAddChildX(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_RemoveChildX(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_OnRemoveChildX(QCPItemPosition* self, intptr_t slot);
void QCPItemPosition_QBaseRemoveChildX(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_AddChildY(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_OnAddChildY(QCPItemPosition* self, intptr_t slot);
void QCPItemPosition_QBaseAddChildY(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_RemoveChildY(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_OnRemoveChildY(QCPItemPosition* self, intptr_t slot);
void QCPItemPosition_QBaseRemoveChildY(QCPItemPosition* self, QCPItemPosition* pos);
void QCPItemPosition_Delete(QCPItemPosition* self);

QCPAbstractItem* QCPAbstractItem_new(QCustomPlot* parentPlot);
QMetaObject* QCPAbstractItem_MetaObject(const QCPAbstractItem* self);
void* QCPAbstractItem_Metacast(QCPAbstractItem* self, const char* param1);
int QCPAbstractItem_Metacall(QCPAbstractItem* self, int param1, int param2, void** param3);
libqt_string QCPAbstractItem_Tr(const char* s);
bool QCPAbstractItem_ClipToAxisRect(const QCPAbstractItem* self);
QCPAxisRect* QCPAbstractItem_ClipAxisRect(const QCPAbstractItem* self);
bool QCPAbstractItem_Selectable(const QCPAbstractItem* self);
bool QCPAbstractItem_Selected(const QCPAbstractItem* self);
void QCPAbstractItem_SetClipToAxisRect(QCPAbstractItem* self, bool clip);
void QCPAbstractItem_SetClipAxisRect(QCPAbstractItem* self, QCPAxisRect* rect);
void QCPAbstractItem_SetSelectable(QCPAbstractItem* self, bool selectable);
void QCPAbstractItem_SetSelected(QCPAbstractItem* self, bool selected);
double QCPAbstractItem_SelectTest(const QCPAbstractItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
libqt_list /* of QCPItemPosition* */ QCPAbstractItem_Positions(const QCPAbstractItem* self);
libqt_list /* of QCPItemAnchor* */ QCPAbstractItem_Anchors(const QCPAbstractItem* self);
QCPItemPosition* QCPAbstractItem_Position(const QCPAbstractItem* self, const libqt_string name);
QCPItemAnchor* QCPAbstractItem_Anchor(const QCPAbstractItem* self, const libqt_string name);
bool QCPAbstractItem_HasAnchor(const QCPAbstractItem* self, const libqt_string name);
void QCPAbstractItem_SelectionChanged(QCPAbstractItem* self, bool selected);
void QCPAbstractItem_Connect_SelectionChanged(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_SelectableChanged(QCPAbstractItem* self, bool selectable);
void QCPAbstractItem_Connect_SelectableChanged(QCPAbstractItem* self, intptr_t slot);
int QCPAbstractItem_SelectionCategory(const QCPAbstractItem* self);
QRect* QCPAbstractItem_ClipRect(const QCPAbstractItem* self);
void QCPAbstractItem_ApplyDefaultAntialiasingHint(const QCPAbstractItem* self, QCPPainter* painter);
void QCPAbstractItem_Draw(QCPAbstractItem* self, QCPPainter* painter);
void QCPAbstractItem_SelectEvent(QCPAbstractItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractItem_DeselectEvent(QCPAbstractItem* self, bool* selectionStateChanged);
QPointF* QCPAbstractItem_AnchorPixelPosition(const QCPAbstractItem* self, int anchorId);
libqt_string QCPAbstractItem_Tr2(const char* s, const char* c);
libqt_string QCPAbstractItem_Tr3(const char* s, const char* c, int n);
void QCPAbstractItem_OnMetacall(QCPAbstractItem* self, intptr_t slot);
int QCPAbstractItem_QBaseMetacall(QCPAbstractItem* self, int param1, int param2, void** param3);
void QCPAbstractItem_OnSelectTest(const QCPAbstractItem* self, intptr_t slot);
double QCPAbstractItem_QBaseSelectTest(const QCPAbstractItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAbstractItem_OnSelectionCategory(const QCPAbstractItem* self, intptr_t slot);
int QCPAbstractItem_QBaseSelectionCategory(const QCPAbstractItem* self);
void QCPAbstractItem_OnClipRect(const QCPAbstractItem* self, intptr_t slot);
QRect* QCPAbstractItem_QBaseClipRect(const QCPAbstractItem* self);
void QCPAbstractItem_OnApplyDefaultAntialiasingHint(const QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseApplyDefaultAntialiasingHint(const QCPAbstractItem* self, QCPPainter* painter);
void QCPAbstractItem_OnDraw(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseDraw(QCPAbstractItem* self, QCPPainter* painter);
void QCPAbstractItem_OnSelectEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseSelectEvent(QCPAbstractItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractItem_OnDeselectEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseDeselectEvent(QCPAbstractItem* self, bool* selectionStateChanged);
void QCPAbstractItem_OnAnchorPixelPosition(const QCPAbstractItem* self, intptr_t slot);
QPointF* QCPAbstractItem_QBaseAnchorPixelPosition(const QCPAbstractItem* self, int anchorId);
void QCPAbstractItem_ParentPlotInitialized(QCPAbstractItem* self, QCustomPlot* parentPlot);
void QCPAbstractItem_OnParentPlotInitialized(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseParentPlotInitialized(QCPAbstractItem* self, QCustomPlot* parentPlot);
void QCPAbstractItem_MousePressEvent(QCPAbstractItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractItem_OnMousePressEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseMousePressEvent(QCPAbstractItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractItem_MouseMoveEvent(QCPAbstractItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractItem_OnMouseMoveEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseMouseMoveEvent(QCPAbstractItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractItem_MouseReleaseEvent(QCPAbstractItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractItem_OnMouseReleaseEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseMouseReleaseEvent(QCPAbstractItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractItem_MouseDoubleClickEvent(QCPAbstractItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractItem_OnMouseDoubleClickEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseMouseDoubleClickEvent(QCPAbstractItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractItem_WheelEvent(QCPAbstractItem* self, QWheelEvent* event);
void QCPAbstractItem_OnWheelEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseWheelEvent(QCPAbstractItem* self, QWheelEvent* event);
bool QCPAbstractItem_Event(QCPAbstractItem* self, QEvent* event);
void QCPAbstractItem_OnEvent(QCPAbstractItem* self, intptr_t slot);
bool QCPAbstractItem_QBaseEvent(QCPAbstractItem* self, QEvent* event);
bool QCPAbstractItem_EventFilter(QCPAbstractItem* self, QObject* watched, QEvent* event);
void QCPAbstractItem_OnEventFilter(QCPAbstractItem* self, intptr_t slot);
bool QCPAbstractItem_QBaseEventFilter(QCPAbstractItem* self, QObject* watched, QEvent* event);
void QCPAbstractItem_TimerEvent(QCPAbstractItem* self, QTimerEvent* event);
void QCPAbstractItem_OnTimerEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseTimerEvent(QCPAbstractItem* self, QTimerEvent* event);
void QCPAbstractItem_ChildEvent(QCPAbstractItem* self, QChildEvent* event);
void QCPAbstractItem_OnChildEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseChildEvent(QCPAbstractItem* self, QChildEvent* event);
void QCPAbstractItem_CustomEvent(QCPAbstractItem* self, QEvent* event);
void QCPAbstractItem_OnCustomEvent(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseCustomEvent(QCPAbstractItem* self, QEvent* event);
void QCPAbstractItem_ConnectNotify(QCPAbstractItem* self, const QMetaMethod* signal);
void QCPAbstractItem_OnConnectNotify(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseConnectNotify(QCPAbstractItem* self, const QMetaMethod* signal);
void QCPAbstractItem_DisconnectNotify(QCPAbstractItem* self, const QMetaMethod* signal);
void QCPAbstractItem_OnDisconnectNotify(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseDisconnectNotify(QCPAbstractItem* self, const QMetaMethod* signal);
double QCPAbstractItem_RectDistance(const QCPAbstractItem* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPAbstractItem_OnRectDistance(const QCPAbstractItem* self, intptr_t slot);
double QCPAbstractItem_QBaseRectDistance(const QCPAbstractItem* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPAbstractItem_CreatePosition(QCPAbstractItem* self, const libqt_string name);
void QCPAbstractItem_OnCreatePosition(QCPAbstractItem* self, intptr_t slot);
QCPItemPosition* QCPAbstractItem_QBaseCreatePosition(QCPAbstractItem* self, const libqt_string name);
QCPItemAnchor* QCPAbstractItem_CreateAnchor(QCPAbstractItem* self, const libqt_string name, int anchorId);
void QCPAbstractItem_OnCreateAnchor(QCPAbstractItem* self, intptr_t slot);
QCPItemAnchor* QCPAbstractItem_QBaseCreateAnchor(QCPAbstractItem* self, const libqt_string name, int anchorId);
void QCPAbstractItem_InitializeParentPlot(QCPAbstractItem* self, QCustomPlot* parentPlot);
void QCPAbstractItem_OnInitializeParentPlot(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseInitializeParentPlot(QCPAbstractItem* self, QCustomPlot* parentPlot);
void QCPAbstractItem_SetParentLayerable(QCPAbstractItem* self, QCPLayerable* parentLayerable);
void QCPAbstractItem_OnSetParentLayerable(QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseSetParentLayerable(QCPAbstractItem* self, QCPLayerable* parentLayerable);
bool QCPAbstractItem_MoveToLayer(QCPAbstractItem* self, QCPLayer* layer, bool prepend);
void QCPAbstractItem_OnMoveToLayer(QCPAbstractItem* self, intptr_t slot);
bool QCPAbstractItem_QBaseMoveToLayer(QCPAbstractItem* self, QCPLayer* layer, bool prepend);
void QCPAbstractItem_ApplyAntialiasingHint(const QCPAbstractItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPAbstractItem_OnApplyAntialiasingHint(const QCPAbstractItem* self, intptr_t slot);
void QCPAbstractItem_QBaseApplyAntialiasingHint(const QCPAbstractItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPAbstractItem_Sender(const QCPAbstractItem* self);
void QCPAbstractItem_OnSender(const QCPAbstractItem* self, intptr_t slot);
QObject* QCPAbstractItem_QBaseSender(const QCPAbstractItem* self);
int QCPAbstractItem_SenderSignalIndex(const QCPAbstractItem* self);
void QCPAbstractItem_OnSenderSignalIndex(const QCPAbstractItem* self, intptr_t slot);
int QCPAbstractItem_QBaseSenderSignalIndex(const QCPAbstractItem* self);
int QCPAbstractItem_Receivers(const QCPAbstractItem* self, const char* signal);
void QCPAbstractItem_OnReceivers(const QCPAbstractItem* self, intptr_t slot);
int QCPAbstractItem_QBaseReceivers(const QCPAbstractItem* self, const char* signal);
bool QCPAbstractItem_IsSignalConnected(const QCPAbstractItem* self, const QMetaMethod* signal);
void QCPAbstractItem_OnIsSignalConnected(const QCPAbstractItem* self, intptr_t slot);
bool QCPAbstractItem_QBaseIsSignalConnected(const QCPAbstractItem* self, const QMetaMethod* signal);
void QCPAbstractItem_Delete(QCPAbstractItem* self);

QCustomPlot* QCustomPlot_new(QWidget* parent);
QCustomPlot* QCustomPlot_new2();
QMetaObject* QCustomPlot_MetaObject(const QCustomPlot* self);
void* QCustomPlot_Metacast(QCustomPlot* self, const char* param1);
int QCustomPlot_Metacall(QCustomPlot* self, int param1, int param2, void** param3);
libqt_string QCustomPlot_Tr(const char* s);
QRect* QCustomPlot_Viewport(const QCustomPlot* self);
double QCustomPlot_BufferDevicePixelRatio(const QCustomPlot* self);
QPixmap* QCustomPlot_Background(const QCustomPlot* self);
bool QCustomPlot_BackgroundScaled(const QCustomPlot* self);
int QCustomPlot_BackgroundScaledMode(const QCustomPlot* self);
QCPLayoutGrid* QCustomPlot_PlotLayout(const QCustomPlot* self);
int QCustomPlot_AntialiasedElements(const QCustomPlot* self);
int QCustomPlot_NotAntialiasedElements(const QCustomPlot* self);
bool QCustomPlot_AutoAddPlottableToLegend(const QCustomPlot* self);
int QCustomPlot_Interactions(const QCustomPlot* self);
int QCustomPlot_SelectionTolerance(const QCustomPlot* self);
bool QCustomPlot_NoAntialiasingOnDrag(const QCustomPlot* self);
int QCustomPlot_PlottingHints(const QCustomPlot* self);
int QCustomPlot_MultiSelectModifier(const QCustomPlot* self);
int QCustomPlot_SelectionRectMode(const QCustomPlot* self);
QCPSelectionRect* QCustomPlot_SelectionRect(const QCustomPlot* self);
bool QCustomPlot_OpenGl(const QCustomPlot* self);
void QCustomPlot_SetViewport(QCustomPlot* self, const QRect* rect);
void QCustomPlot_SetBufferDevicePixelRatio(QCustomPlot* self, double ratio);
void QCustomPlot_SetBackground(QCustomPlot* self, const QPixmap* pm);
void QCustomPlot_SetBackground2(QCustomPlot* self, const QPixmap* pm, bool scaled);
void QCustomPlot_SetBackground3(QCustomPlot* self, const QBrush* brush);
void QCustomPlot_SetBackgroundScaled(QCustomPlot* self, bool scaled);
void QCustomPlot_SetBackgroundScaledMode(QCustomPlot* self, int mode);
void QCustomPlot_SetAntialiasedElements(QCustomPlot* self, const int* antialiasedElements);
void QCustomPlot_SetAntialiasedElement(QCustomPlot* self, int antialiasedElement);
void QCustomPlot_SetNotAntialiasedElements(QCustomPlot* self, const int* notAntialiasedElements);
void QCustomPlot_SetNotAntialiasedElement(QCustomPlot* self, int notAntialiasedElement);
void QCustomPlot_SetAutoAddPlottableToLegend(QCustomPlot* self, bool on);
void QCustomPlot_SetInteractions(QCustomPlot* self, const int* interactions);
void QCustomPlot_SetInteraction(QCustomPlot* self, const int* interaction);
void QCustomPlot_SetSelectionTolerance(QCustomPlot* self, int pixels);
void QCustomPlot_SetNoAntialiasingOnDrag(QCustomPlot* self, bool enabled);
void QCustomPlot_SetPlottingHints(QCustomPlot* self, const int* hints);
void QCustomPlot_SetPlottingHint(QCustomPlot* self, int hint);
void QCustomPlot_SetMultiSelectModifier(QCustomPlot* self, int modifier);
void QCustomPlot_SetSelectionRectMode(QCustomPlot* self, int mode);
void QCustomPlot_SetSelectionRect(QCustomPlot* self, QCPSelectionRect* selectionRect);
void QCustomPlot_SetOpenGl(QCustomPlot* self, bool enabled);
QCPAbstractPlottable* QCustomPlot_Plottable(QCustomPlot* self, int index);
QCPAbstractPlottable* QCustomPlot_Plottable2(QCustomPlot* self);
bool QCustomPlot_RemovePlottable(QCustomPlot* self, QCPAbstractPlottable* plottable);
bool QCustomPlot_RemovePlottable2(QCustomPlot* self, int index);
int QCustomPlot_ClearPlottables(QCustomPlot* self);
int QCustomPlot_PlottableCount(const QCustomPlot* self);
libqt_list /* of QCPAbstractPlottable* */ QCustomPlot_SelectedPlottables(const QCustomPlot* self);
QCPAbstractPlottable* QCustomPlot_PlottableAt(const QCustomPlot* self, const QPointF* pos);
bool QCustomPlot_HasPlottable(const QCustomPlot* self, QCPAbstractPlottable* plottable);
QCPGraph* QCustomPlot_Graph(const QCustomPlot* self, int index);
QCPGraph* QCustomPlot_Graph2(const QCustomPlot* self);
QCPGraph* QCustomPlot_AddGraph(QCustomPlot* self);
bool QCustomPlot_RemoveGraph(QCustomPlot* self, QCPGraph* graph);
bool QCustomPlot_RemoveGraph2(QCustomPlot* self, int index);
int QCustomPlot_ClearGraphs(QCustomPlot* self);
int QCustomPlot_GraphCount(const QCustomPlot* self);
libqt_list /* of QCPGraph* */ QCustomPlot_SelectedGraphs(const QCustomPlot* self);
QCPAbstractItem* QCustomPlot_Item(const QCustomPlot* self, int index);
QCPAbstractItem* QCustomPlot_Item2(const QCustomPlot* self);
bool QCustomPlot_RemoveItem(QCustomPlot* self, QCPAbstractItem* item);
bool QCustomPlot_RemoveItem2(QCustomPlot* self, int index);
int QCustomPlot_ClearItems(QCustomPlot* self);
int QCustomPlot_ItemCount(const QCustomPlot* self);
libqt_list /* of QCPAbstractItem* */ QCustomPlot_SelectedItems(const QCustomPlot* self);
QCPAbstractItem* QCustomPlot_ItemAt(const QCustomPlot* self, const QPointF* pos);
bool QCustomPlot_HasItem(const QCustomPlot* self, QCPAbstractItem* item);
QCPLayer* QCustomPlot_Layer(const QCustomPlot* self, const libqt_string name);
QCPLayer* QCustomPlot_Layer2(const QCustomPlot* self, int index);
QCPLayer* QCustomPlot_CurrentLayer(const QCustomPlot* self);
bool QCustomPlot_SetCurrentLayer(QCustomPlot* self, const libqt_string name);
bool QCustomPlot_SetCurrentLayer2(QCustomPlot* self, QCPLayer* layer);
int QCustomPlot_LayerCount(const QCustomPlot* self);
bool QCustomPlot_AddLayer(QCustomPlot* self, const libqt_string name);
bool QCustomPlot_RemoveLayer(QCustomPlot* self, QCPLayer* layer);
bool QCustomPlot_MoveLayer(QCustomPlot* self, QCPLayer* layer, QCPLayer* otherLayer);
int QCustomPlot_AxisRectCount(const QCustomPlot* self);
QCPAxisRect* QCustomPlot_AxisRect(const QCustomPlot* self);
libqt_list /* of QCPAxisRect* */ QCustomPlot_AxisRects(const QCustomPlot* self);
QCPLayoutElement* QCustomPlot_LayoutElementAt(const QCustomPlot* self, const QPointF* pos);
QCPAxisRect* QCustomPlot_AxisRectAt(const QCustomPlot* self, const QPointF* pos);
void QCustomPlot_RescaleAxes(QCustomPlot* self);
libqt_list /* of QCPAxis* */ QCustomPlot_SelectedAxes(const QCustomPlot* self);
libqt_list /* of QCPLegend* */ QCustomPlot_SelectedLegends(const QCustomPlot* self);
void QCustomPlot_DeselectAll(QCustomPlot* self);
bool QCustomPlot_SavePdf(QCustomPlot* self, const libqt_string fileName);
bool QCustomPlot_SavePng(QCustomPlot* self, const libqt_string fileName);
bool QCustomPlot_SaveJpg(QCustomPlot* self, const libqt_string fileName);
bool QCustomPlot_SaveBmp(QCustomPlot* self, const libqt_string fileName);
bool QCustomPlot_SaveRastered(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, const char* format);
QPixmap* QCustomPlot_ToPixmap(QCustomPlot* self);
void QCustomPlot_ToPainter(QCustomPlot* self, QCPPainter* painter);
void QCustomPlot_Replot(QCustomPlot* self);
double QCustomPlot_ReplotTime(const QCustomPlot* self);
QCPAxis* QCustomPlot_XAxis(const QCustomPlot* self);
void QCustomPlot_SetXAxis(QCustomPlot* self, QCPAxis* xAxis);
QCPAxis* QCustomPlot_YAxis(const QCustomPlot* self);
void QCustomPlot_SetYAxis(QCustomPlot* self, QCPAxis* yAxis);
QCPAxis* QCustomPlot_XAxis2(const QCustomPlot* self);
void QCustomPlot_SetXAxis2(QCustomPlot* self, QCPAxis* xAxis2);
QCPAxis* QCustomPlot_YAxis2(const QCustomPlot* self);
void QCustomPlot_SetYAxis2(QCustomPlot* self, QCPAxis* yAxis2);
QCPLegend* QCustomPlot_Legend(const QCustomPlot* self);
void QCustomPlot_SetLegend(QCustomPlot* self, QCPLegend* legend);
void QCustomPlot_MouseDoubleClick(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_Connect_MouseDoubleClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_MousePress(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_Connect_MousePress(QCustomPlot* self, intptr_t slot);
void QCustomPlot_MouseMove(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_Connect_MouseMove(QCustomPlot* self, intptr_t slot);
void QCustomPlot_MouseRelease(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_Connect_MouseRelease(QCustomPlot* self, intptr_t slot);
void QCustomPlot_MouseWheel(QCustomPlot* self, QWheelEvent* event);
void QCustomPlot_Connect_MouseWheel(QCustomPlot* self, intptr_t slot);
void QCustomPlot_PlottableClick(QCustomPlot* self, QCPAbstractPlottable* plottable, int dataIndex, QMouseEvent* event);
void QCustomPlot_Connect_PlottableClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_PlottableDoubleClick(QCustomPlot* self, QCPAbstractPlottable* plottable, int dataIndex, QMouseEvent* event);
void QCustomPlot_Connect_PlottableDoubleClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_ItemClick(QCustomPlot* self, QCPAbstractItem* item, QMouseEvent* event);
void QCustomPlot_Connect_ItemClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_ItemDoubleClick(QCustomPlot* self, QCPAbstractItem* item, QMouseEvent* event);
void QCustomPlot_Connect_ItemDoubleClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_AxisClick(QCustomPlot* self, QCPAxis* axis, int part, QMouseEvent* event);
void QCustomPlot_Connect_AxisClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_AxisDoubleClick(QCustomPlot* self, QCPAxis* axis, int part, QMouseEvent* event);
void QCustomPlot_Connect_AxisDoubleClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_LegendClick(QCustomPlot* self, QCPLegend* legend, QCPAbstractLegendItem* item, QMouseEvent* event);
void QCustomPlot_Connect_LegendClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_LegendDoubleClick(QCustomPlot* self, QCPLegend* legend, QCPAbstractLegendItem* item, QMouseEvent* event);
void QCustomPlot_Connect_LegendDoubleClick(QCustomPlot* self, intptr_t slot);
void QCustomPlot_SelectionChangedByUser(QCustomPlot* self);
void QCustomPlot_Connect_SelectionChangedByUser(QCustomPlot* self, intptr_t slot);
void QCustomPlot_BeforeReplot(QCustomPlot* self);
void QCustomPlot_Connect_BeforeReplot(QCustomPlot* self, intptr_t slot);
void QCustomPlot_AfterLayout(QCustomPlot* self);
void QCustomPlot_Connect_AfterLayout(QCustomPlot* self, intptr_t slot);
void QCustomPlot_AfterReplot(QCustomPlot* self);
void QCustomPlot_Connect_AfterReplot(QCustomPlot* self, intptr_t slot);
QSize* QCustomPlot_MinimumSizeHint(const QCustomPlot* self);
QSize* QCustomPlot_SizeHint(const QCustomPlot* self);
void QCustomPlot_PaintEvent(QCustomPlot* self, QPaintEvent* event);
void QCustomPlot_ResizeEvent(QCustomPlot* self, QResizeEvent* event);
void QCustomPlot_MouseDoubleClickEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_MousePressEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_MouseMoveEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_MouseReleaseEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_WheelEvent(QCustomPlot* self, QWheelEvent* event);
void QCustomPlot_Draw(QCustomPlot* self, QCPPainter* painter);
void QCustomPlot_UpdateLayout(QCustomPlot* self);
void QCustomPlot_AxisRemoved(QCustomPlot* self, QCPAxis* axis);
void QCustomPlot_LegendRemoved(QCustomPlot* self, QCPLegend* legend);
void QCustomPlot_ProcessRectSelection(QCustomPlot* self, QRect* rect, QMouseEvent* event);
void QCustomPlot_ProcessRectZoom(QCustomPlot* self, QRect* rect, QMouseEvent* event);
void QCustomPlot_ProcessPointSelection(QCustomPlot* self, QMouseEvent* event);
libqt_string QCustomPlot_Tr2(const char* s, const char* c);
libqt_string QCustomPlot_Tr3(const char* s, const char* c, int n);
void QCustomPlot_SetBackground32(QCustomPlot* self, const QPixmap* pm, bool scaled, int mode);
void QCustomPlot_SetAntialiasedElement2(QCustomPlot* self, int antialiasedElement, bool enabled);
void QCustomPlot_SetNotAntialiasedElement2(QCustomPlot* self, int notAntialiasedElement, bool enabled);
void QCustomPlot_SetInteraction2(QCustomPlot* self, const int* interaction, bool enabled);
void QCustomPlot_SetPlottingHint2(QCustomPlot* self, int hint, bool enabled);
void QCustomPlot_SetOpenGl2(QCustomPlot* self, bool enabled, int multisampling);
QCPAbstractPlottable* QCustomPlot_PlottableAt2(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
QCPAbstractPlottable* QCustomPlot_PlottableAt3(const QCustomPlot* self, const QPointF* pos, bool onlySelectable, int* dataIndex);
QCPGraph* QCustomPlot_AddGraph1(QCustomPlot* self, QCPAxis* keyAxis);
QCPGraph* QCustomPlot_AddGraph2(QCustomPlot* self, QCPAxis* keyAxis, QCPAxis* valueAxis);
QCPAbstractItem* QCustomPlot_ItemAt2(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
bool QCustomPlot_AddLayer2(QCustomPlot* self, const libqt_string name, QCPLayer* otherLayer);
bool QCustomPlot_AddLayer3(QCustomPlot* self, const libqt_string name, QCPLayer* otherLayer, int insertMode);
bool QCustomPlot_MoveLayer3(QCustomPlot* self, QCPLayer* layer, QCPLayer* otherLayer, int insertMode);
QCPAxisRect* QCustomPlot_AxisRect1(const QCustomPlot* self, int index);
void QCustomPlot_RescaleAxes1(QCustomPlot* self, bool onlyVisiblePlottables);
bool QCustomPlot_SavePdf2(QCustomPlot* self, const libqt_string fileName, int width);
bool QCustomPlot_SavePdf3(QCustomPlot* self, const libqt_string fileName, int width, int height);
bool QCustomPlot_SavePdf4(QCustomPlot* self, const libqt_string fileName, int width, int height, int exportPen);
bool QCustomPlot_SavePdf5(QCustomPlot* self, const libqt_string fileName, int width, int height, int exportPen, const libqt_string pdfCreator);
bool QCustomPlot_SavePdf6(QCustomPlot* self, const libqt_string fileName, int width, int height, int exportPen, const libqt_string pdfCreator, const libqt_string pdfTitle);
bool QCustomPlot_SavePng2(QCustomPlot* self, const libqt_string fileName, int width);
bool QCustomPlot_SavePng3(QCustomPlot* self, const libqt_string fileName, int width, int height);
bool QCustomPlot_SavePng4(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale);
bool QCustomPlot_SavePng5(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality);
bool QCustomPlot_SavePng6(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality, int resolution);
bool QCustomPlot_SavePng7(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality, int resolution, int resolutionUnit);
bool QCustomPlot_SaveJpg2(QCustomPlot* self, const libqt_string fileName, int width);
bool QCustomPlot_SaveJpg3(QCustomPlot* self, const libqt_string fileName, int width, int height);
bool QCustomPlot_SaveJpg4(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale);
bool QCustomPlot_SaveJpg5(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality);
bool QCustomPlot_SaveJpg6(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality, int resolution);
bool QCustomPlot_SaveJpg7(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int quality, int resolution, int resolutionUnit);
bool QCustomPlot_SaveBmp2(QCustomPlot* self, const libqt_string fileName, int width);
bool QCustomPlot_SaveBmp3(QCustomPlot* self, const libqt_string fileName, int width, int height);
bool QCustomPlot_SaveBmp4(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale);
bool QCustomPlot_SaveBmp5(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int resolution);
bool QCustomPlot_SaveBmp6(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, int resolution, int resolutionUnit);
bool QCustomPlot_SaveRastered6(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, const char* format, int quality);
bool QCustomPlot_SaveRastered7(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, const char* format, int quality, int resolution);
bool QCustomPlot_SaveRastered8(QCustomPlot* self, const libqt_string fileName, int width, int height, double scale, const char* format, int quality, int resolution, int resolutionUnit);
QPixmap* QCustomPlot_ToPixmap1(QCustomPlot* self, int width);
QPixmap* QCustomPlot_ToPixmap2(QCustomPlot* self, int width, int height);
QPixmap* QCustomPlot_ToPixmap3(QCustomPlot* self, int width, int height, double scale);
void QCustomPlot_ToPainter2(QCustomPlot* self, QCPPainter* painter, int width);
void QCustomPlot_ToPainter3(QCustomPlot* self, QCPPainter* painter, int width, int height);
void QCustomPlot_Replot1(QCustomPlot* self, int refreshPriority);
double QCustomPlot_ReplotTime1(const QCustomPlot* self, bool average);
void QCustomPlot_OnMetacall(QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseMetacall(QCustomPlot* self, int param1, int param2, void** param3);
void QCustomPlot_OnMinimumSizeHint(const QCustomPlot* self, intptr_t slot);
QSize* QCustomPlot_QBaseMinimumSizeHint(const QCustomPlot* self);
void QCustomPlot_OnSizeHint(const QCustomPlot* self, intptr_t slot);
QSize* QCustomPlot_QBaseSizeHint(const QCustomPlot* self);
void QCustomPlot_OnPaintEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBasePaintEvent(QCustomPlot* self, QPaintEvent* event);
void QCustomPlot_OnResizeEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseResizeEvent(QCustomPlot* self, QResizeEvent* event);
void QCustomPlot_OnMouseDoubleClickEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseMouseDoubleClickEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_OnMousePressEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseMousePressEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_OnMouseMoveEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseMouseMoveEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_OnMouseReleaseEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseMouseReleaseEvent(QCustomPlot* self, QMouseEvent* event);
void QCustomPlot_OnWheelEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseWheelEvent(QCustomPlot* self, QWheelEvent* event);
void QCustomPlot_OnDraw(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDraw(QCustomPlot* self, QCPPainter* painter);
void QCustomPlot_OnUpdateLayout(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseUpdateLayout(QCustomPlot* self);
void QCustomPlot_OnAxisRemoved(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseAxisRemoved(QCustomPlot* self, QCPAxis* axis);
void QCustomPlot_OnLegendRemoved(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseLegendRemoved(QCustomPlot* self, QCPLegend* legend);
void QCustomPlot_OnProcessRectSelection(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseProcessRectSelection(QCustomPlot* self, QRect* rect, QMouseEvent* event);
void QCustomPlot_OnProcessRectZoom(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseProcessRectZoom(QCustomPlot* self, QRect* rect, QMouseEvent* event);
void QCustomPlot_OnProcessPointSelection(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseProcessPointSelection(QCustomPlot* self, QMouseEvent* event);
int QCustomPlot_DevType(const QCustomPlot* self);
void QCustomPlot_OnDevType(const QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseDevType(const QCustomPlot* self);
void QCustomPlot_SetVisible(QCustomPlot* self, bool visible);
void QCustomPlot_OnSetVisible(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseSetVisible(QCustomPlot* self, bool visible);
int QCustomPlot_HeightForWidth(const QCustomPlot* self, int param1);
void QCustomPlot_OnHeightForWidth(const QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseHeightForWidth(const QCustomPlot* self, int param1);
bool QCustomPlot_HasHeightForWidth(const QCustomPlot* self);
void QCustomPlot_OnHasHeightForWidth(const QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseHasHeightForWidth(const QCustomPlot* self);
QPaintEngine* QCustomPlot_PaintEngine(const QCustomPlot* self);
void QCustomPlot_OnPaintEngine(const QCustomPlot* self, intptr_t slot);
QPaintEngine* QCustomPlot_QBasePaintEngine(const QCustomPlot* self);
bool QCustomPlot_Event(QCustomPlot* self, QEvent* event);
void QCustomPlot_OnEvent(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseEvent(QCustomPlot* self, QEvent* event);
void QCustomPlot_KeyPressEvent(QCustomPlot* self, QKeyEvent* event);
void QCustomPlot_OnKeyPressEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseKeyPressEvent(QCustomPlot* self, QKeyEvent* event);
void QCustomPlot_KeyReleaseEvent(QCustomPlot* self, QKeyEvent* event);
void QCustomPlot_OnKeyReleaseEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseKeyReleaseEvent(QCustomPlot* self, QKeyEvent* event);
void QCustomPlot_FocusInEvent(QCustomPlot* self, QFocusEvent* event);
void QCustomPlot_OnFocusInEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseFocusInEvent(QCustomPlot* self, QFocusEvent* event);
void QCustomPlot_FocusOutEvent(QCustomPlot* self, QFocusEvent* event);
void QCustomPlot_OnFocusOutEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseFocusOutEvent(QCustomPlot* self, QFocusEvent* event);
void QCustomPlot_EnterEvent(QCustomPlot* self, QEnterEvent* event);
void QCustomPlot_OnEnterEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseEnterEvent(QCustomPlot* self, QEnterEvent* event);
void QCustomPlot_LeaveEvent(QCustomPlot* self, QEvent* event);
void QCustomPlot_OnLeaveEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseLeaveEvent(QCustomPlot* self, QEvent* event);
void QCustomPlot_MoveEvent(QCustomPlot* self, QMoveEvent* event);
void QCustomPlot_OnMoveEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseMoveEvent(QCustomPlot* self, QMoveEvent* event);
void QCustomPlot_CloseEvent(QCustomPlot* self, QCloseEvent* event);
void QCustomPlot_OnCloseEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseCloseEvent(QCustomPlot* self, QCloseEvent* event);
void QCustomPlot_ContextMenuEvent(QCustomPlot* self, QContextMenuEvent* event);
void QCustomPlot_OnContextMenuEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseContextMenuEvent(QCustomPlot* self, QContextMenuEvent* event);
void QCustomPlot_TabletEvent(QCustomPlot* self, QTabletEvent* event);
void QCustomPlot_OnTabletEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseTabletEvent(QCustomPlot* self, QTabletEvent* event);
void QCustomPlot_ActionEvent(QCustomPlot* self, QActionEvent* event);
void QCustomPlot_OnActionEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseActionEvent(QCustomPlot* self, QActionEvent* event);
void QCustomPlot_DragEnterEvent(QCustomPlot* self, QDragEnterEvent* event);
void QCustomPlot_OnDragEnterEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDragEnterEvent(QCustomPlot* self, QDragEnterEvent* event);
void QCustomPlot_DragMoveEvent(QCustomPlot* self, QDragMoveEvent* event);
void QCustomPlot_OnDragMoveEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDragMoveEvent(QCustomPlot* self, QDragMoveEvent* event);
void QCustomPlot_DragLeaveEvent(QCustomPlot* self, QDragLeaveEvent* event);
void QCustomPlot_OnDragLeaveEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDragLeaveEvent(QCustomPlot* self, QDragLeaveEvent* event);
void QCustomPlot_DropEvent(QCustomPlot* self, QDropEvent* event);
void QCustomPlot_OnDropEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDropEvent(QCustomPlot* self, QDropEvent* event);
void QCustomPlot_ShowEvent(QCustomPlot* self, QShowEvent* event);
void QCustomPlot_OnShowEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseShowEvent(QCustomPlot* self, QShowEvent* event);
void QCustomPlot_HideEvent(QCustomPlot* self, QHideEvent* event);
void QCustomPlot_OnHideEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseHideEvent(QCustomPlot* self, QHideEvent* event);
bool QCustomPlot_NativeEvent(QCustomPlot* self, const libqt_string eventType, void* message, intptr_t* result);
void QCustomPlot_OnNativeEvent(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseNativeEvent(QCustomPlot* self, const libqt_string eventType, void* message, intptr_t* result);
void QCustomPlot_ChangeEvent(QCustomPlot* self, QEvent* param1);
void QCustomPlot_OnChangeEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseChangeEvent(QCustomPlot* self, QEvent* param1);
int QCustomPlot_Metric(const QCustomPlot* self, int param1);
void QCustomPlot_OnMetric(const QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseMetric(const QCustomPlot* self, int param1);
void QCustomPlot_InitPainter(const QCustomPlot* self, QPainter* painter);
void QCustomPlot_OnInitPainter(const QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseInitPainter(const QCustomPlot* self, QPainter* painter);
QPaintDevice* QCustomPlot_Redirected(const QCustomPlot* self, QPoint* offset);
void QCustomPlot_OnRedirected(const QCustomPlot* self, intptr_t slot);
QPaintDevice* QCustomPlot_QBaseRedirected(const QCustomPlot* self, QPoint* offset);
QPainter* QCustomPlot_SharedPainter(const QCustomPlot* self);
void QCustomPlot_OnSharedPainter(const QCustomPlot* self, intptr_t slot);
QPainter* QCustomPlot_QBaseSharedPainter(const QCustomPlot* self);
void QCustomPlot_InputMethodEvent(QCustomPlot* self, QInputMethodEvent* param1);
void QCustomPlot_OnInputMethodEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseInputMethodEvent(QCustomPlot* self, QInputMethodEvent* param1);
QVariant* QCustomPlot_InputMethodQuery(const QCustomPlot* self, int param1);
void QCustomPlot_OnInputMethodQuery(const QCustomPlot* self, intptr_t slot);
QVariant* QCustomPlot_QBaseInputMethodQuery(const QCustomPlot* self, int param1);
bool QCustomPlot_FocusNextPrevChild(QCustomPlot* self, bool next);
void QCustomPlot_OnFocusNextPrevChild(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseFocusNextPrevChild(QCustomPlot* self, bool next);
bool QCustomPlot_EventFilter(QCustomPlot* self, QObject* watched, QEvent* event);
void QCustomPlot_OnEventFilter(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseEventFilter(QCustomPlot* self, QObject* watched, QEvent* event);
void QCustomPlot_TimerEvent(QCustomPlot* self, QTimerEvent* event);
void QCustomPlot_OnTimerEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseTimerEvent(QCustomPlot* self, QTimerEvent* event);
void QCustomPlot_ChildEvent(QCustomPlot* self, QChildEvent* event);
void QCustomPlot_OnChildEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseChildEvent(QCustomPlot* self, QChildEvent* event);
void QCustomPlot_CustomEvent(QCustomPlot* self, QEvent* event);
void QCustomPlot_OnCustomEvent(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseCustomEvent(QCustomPlot* self, QEvent* event);
void QCustomPlot_ConnectNotify(QCustomPlot* self, const QMetaMethod* signal);
void QCustomPlot_OnConnectNotify(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseConnectNotify(QCustomPlot* self, const QMetaMethod* signal);
void QCustomPlot_DisconnectNotify(QCustomPlot* self, const QMetaMethod* signal);
void QCustomPlot_OnDisconnectNotify(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDisconnectNotify(QCustomPlot* self, const QMetaMethod* signal);
bool QCustomPlot_RegisterPlottable(QCustomPlot* self, QCPAbstractPlottable* plottable);
void QCustomPlot_OnRegisterPlottable(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseRegisterPlottable(QCustomPlot* self, QCPAbstractPlottable* plottable);
bool QCustomPlot_RegisterGraph(QCustomPlot* self, QCPGraph* graph);
void QCustomPlot_OnRegisterGraph(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseRegisterGraph(QCustomPlot* self, QCPGraph* graph);
bool QCustomPlot_RegisterItem(QCustomPlot* self, QCPAbstractItem* item);
void QCustomPlot_OnRegisterItem(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseRegisterItem(QCustomPlot* self, QCPAbstractItem* item);
void QCustomPlot_UpdateLayerIndices(const QCustomPlot* self);
void QCustomPlot_OnUpdateLayerIndices(const QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseUpdateLayerIndices(const QCustomPlot* self);
QCPLayerable* QCustomPlot_LayerableAt(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
void QCustomPlot_OnLayerableAt(const QCustomPlot* self, intptr_t slot);
QCPLayerable* QCustomPlot_QBaseLayerableAt(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
libqt_list /* of QCPLayerable* */ QCustomPlot_LayerableListAt(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
void QCustomPlot_OnLayerableListAt(const QCustomPlot* self, intptr_t slot);
libqt_list /* of QCPLayerable* */ QCustomPlot_QBaseLayerableListAt(const QCustomPlot* self, const QPointF* pos, bool onlySelectable);
void QCustomPlot_DrawBackground(QCustomPlot* self, QCPPainter* painter);
void QCustomPlot_OnDrawBackground(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDrawBackground(QCustomPlot* self, QCPPainter* painter);
void QCustomPlot_SetupPaintBuffers(QCustomPlot* self);
void QCustomPlot_OnSetupPaintBuffers(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseSetupPaintBuffers(QCustomPlot* self);
QCPAbstractPaintBuffer* QCustomPlot_CreatePaintBuffer(QCustomPlot* self);
void QCustomPlot_OnCreatePaintBuffer(QCustomPlot* self, intptr_t slot);
QCPAbstractPaintBuffer* QCustomPlot_QBaseCreatePaintBuffer(QCustomPlot* self);
bool QCustomPlot_HasInvalidatedPaintBuffers(QCustomPlot* self);
void QCustomPlot_OnHasInvalidatedPaintBuffers(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseHasInvalidatedPaintBuffers(QCustomPlot* self);
bool QCustomPlot_SetupOpenGl(QCustomPlot* self);
void QCustomPlot_OnSetupOpenGl(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseSetupOpenGl(QCustomPlot* self);
void QCustomPlot_FreeOpenGl(QCustomPlot* self);
void QCustomPlot_OnFreeOpenGl(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseFreeOpenGl(QCustomPlot* self);
QCPLayerable* QCustomPlot_LayerableAt3(const QCustomPlot* self, const QPointF* pos, bool onlySelectable, QVariant* selectionDetails);
void QCustomPlot_OnLayerableAt3(const QCustomPlot* self, intptr_t slot);
QCPLayerable* QCustomPlot_QBaseLayerableAt3(const QCustomPlot* self, const QPointF* pos, bool onlySelectable, QVariant* selectionDetails);
libqt_list /* of QCPLayerable* */ QCustomPlot_LayerableListAt3(const QCustomPlot* self, const QPointF* pos, bool onlySelectable, libqt_list /* of QVariant* */ selectionDetails);
void QCustomPlot_OnLayerableListAt3(const QCustomPlot* self, intptr_t slot);
libqt_list /* of QCPLayerable* */ QCustomPlot_QBaseLayerableListAt3(const QCustomPlot* self, const QPointF* pos, bool onlySelectable, libqt_list /* of QVariant* */ selectionDetails);
void QCustomPlot_UpdateMicroFocus(QCustomPlot* self);
void QCustomPlot_OnUpdateMicroFocus(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseUpdateMicroFocus(QCustomPlot* self);
void QCustomPlot_Create(QCustomPlot* self);
void QCustomPlot_OnCreate(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseCreate(QCustomPlot* self);
void QCustomPlot_Destroy(QCustomPlot* self);
void QCustomPlot_OnDestroy(QCustomPlot* self, intptr_t slot);
void QCustomPlot_QBaseDestroy(QCustomPlot* self);
bool QCustomPlot_FocusNextChild(QCustomPlot* self);
void QCustomPlot_OnFocusNextChild(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseFocusNextChild(QCustomPlot* self);
bool QCustomPlot_FocusPreviousChild(QCustomPlot* self);
void QCustomPlot_OnFocusPreviousChild(QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseFocusPreviousChild(QCustomPlot* self);
QObject* QCustomPlot_Sender(const QCustomPlot* self);
void QCustomPlot_OnSender(const QCustomPlot* self, intptr_t slot);
QObject* QCustomPlot_QBaseSender(const QCustomPlot* self);
int QCustomPlot_SenderSignalIndex(const QCustomPlot* self);
void QCustomPlot_OnSenderSignalIndex(const QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseSenderSignalIndex(const QCustomPlot* self);
int QCustomPlot_Receivers(const QCustomPlot* self, const char* signal);
void QCustomPlot_OnReceivers(const QCustomPlot* self, intptr_t slot);
int QCustomPlot_QBaseReceivers(const QCustomPlot* self, const char* signal);
bool QCustomPlot_IsSignalConnected(const QCustomPlot* self, const QMetaMethod* signal);
void QCustomPlot_OnIsSignalConnected(const QCustomPlot* self, intptr_t slot);
bool QCustomPlot_QBaseIsSignalConnected(const QCustomPlot* self, const QMetaMethod* signal);
double QCustomPlot_GetDecodedMetricF(const QCustomPlot* self, int metricA, int metricB);
void QCustomPlot_OnGetDecodedMetricF(const QCustomPlot* self, intptr_t slot);
double QCustomPlot_QBaseGetDecodedMetricF(const QCustomPlot* self, int metricA, int metricB);
void QCustomPlot_Delete(QCustomPlot* self);

int QCPPlottableInterface1D_DataCount(const QCPPlottableInterface1D* self);
double QCPPlottableInterface1D_DataMainKey(const QCPPlottableInterface1D* self, int index);
double QCPPlottableInterface1D_DataSortKey(const QCPPlottableInterface1D* self, int index);
double QCPPlottableInterface1D_DataMainValue(const QCPPlottableInterface1D* self, int index);
QCPRange* QCPPlottableInterface1D_DataValueRange(const QCPPlottableInterface1D* self, int index);
QPointF* QCPPlottableInterface1D_DataPixelPosition(const QCPPlottableInterface1D* self, int index);
bool QCPPlottableInterface1D_SortKeyIsMainKey(const QCPPlottableInterface1D* self);
QCPDataSelection* QCPPlottableInterface1D_SelectTestRect(const QCPPlottableInterface1D* self, const QRectF* rect, bool onlySelectable);
int QCPPlottableInterface1D_FindBegin(const QCPPlottableInterface1D* self, double sortKey, bool expandedRange);
int QCPPlottableInterface1D_FindEnd(const QCPPlottableInterface1D* self, double sortKey, bool expandedRange);
void QCPPlottableInterface1D_OperatorAssign(QCPPlottableInterface1D* self, const QCPPlottableInterface1D* param1);
void QCPPlottableInterface1D_Delete(QCPPlottableInterface1D* self);

QCPColorGradient* QCPColorGradient_new();
QCPColorGradient* QCPColorGradient_new2(int preset);
QCPColorGradient* QCPColorGradient_new3(const QCPColorGradient* param1);
bool QCPColorGradient_OperatorEqual(const QCPColorGradient* self, const QCPColorGradient* other);
bool QCPColorGradient_OperatorNotEqual(const QCPColorGradient* self, const QCPColorGradient* other);
int QCPColorGradient_LevelCount(const QCPColorGradient* self);
libqt_map /* of double to QColor* */ QCPColorGradient_ColorStops(const QCPColorGradient* self);
int QCPColorGradient_ColorInterpolation(const QCPColorGradient* self);
int QCPColorGradient_NanHandling(const QCPColorGradient* self);
QColor* QCPColorGradient_NanColor(const QCPColorGradient* self);
bool QCPColorGradient_Periodic(const QCPColorGradient* self);
void QCPColorGradient_SetLevelCount(QCPColorGradient* self, int n);
void QCPColorGradient_SetColorStops(QCPColorGradient* self, const libqt_map /* of double to QColor* */ colorStops);
void QCPColorGradient_SetColorStopAt(QCPColorGradient* self, double position, const QColor* color);
void QCPColorGradient_SetColorInterpolation(QCPColorGradient* self, int interpolation);
void QCPColorGradient_SetNanHandling(QCPColorGradient* self, int handling);
void QCPColorGradient_SetNanColor(QCPColorGradient* self, const QColor* color);
void QCPColorGradient_SetPeriodic(QCPColorGradient* self, bool enabled);
void QCPColorGradient_Colorize(QCPColorGradient* self, const double* data, const QCPRange* range, unsigned int* scanLine, int n);
void QCPColorGradient_Colorize2(QCPColorGradient* self, const double* data, const unsigned char* alpha, const QCPRange* range, unsigned int* scanLine, int n);
unsigned int QCPColorGradient_Color(QCPColorGradient* self, double position, const QCPRange* range);
void QCPColorGradient_LoadPreset(QCPColorGradient* self, int preset);
void QCPColorGradient_ClearColorStops(QCPColorGradient* self);
QCPColorGradient* QCPColorGradient_Inverted(const QCPColorGradient* self);
void QCPColorGradient_Colorize5(QCPColorGradient* self, const double* data, const QCPRange* range, unsigned int* scanLine, int n, int dataIndexFactor);
void QCPColorGradient_Colorize6(QCPColorGradient* self, const double* data, const QCPRange* range, unsigned int* scanLine, int n, int dataIndexFactor, bool logarithmic);
void QCPColorGradient_Colorize62(QCPColorGradient* self, const double* data, const unsigned char* alpha, const QCPRange* range, unsigned int* scanLine, int n, int dataIndexFactor);
void QCPColorGradient_Colorize7(QCPColorGradient* self, const double* data, const unsigned char* alpha, const QCPRange* range, unsigned int* scanLine, int n, int dataIndexFactor, bool logarithmic);
unsigned int QCPColorGradient_Color3(QCPColorGradient* self, double position, const QCPRange* range, bool logarithmic);
void QCPColorGradient_Delete(QCPColorGradient* self);

QCPSelectionDecoratorBracket* QCPSelectionDecoratorBracket_new();
QPen* QCPSelectionDecoratorBracket_BracketPen(const QCPSelectionDecoratorBracket* self);
QBrush* QCPSelectionDecoratorBracket_BracketBrush(const QCPSelectionDecoratorBracket* self);
int QCPSelectionDecoratorBracket_BracketWidth(const QCPSelectionDecoratorBracket* self);
int QCPSelectionDecoratorBracket_BracketHeight(const QCPSelectionDecoratorBracket* self);
int QCPSelectionDecoratorBracket_BracketStyle(const QCPSelectionDecoratorBracket* self);
bool QCPSelectionDecoratorBracket_TangentToData(const QCPSelectionDecoratorBracket* self);
int QCPSelectionDecoratorBracket_TangentAverage(const QCPSelectionDecoratorBracket* self);
void QCPSelectionDecoratorBracket_SetBracketPen(QCPSelectionDecoratorBracket* self, const QPen* pen);
void QCPSelectionDecoratorBracket_SetBracketBrush(QCPSelectionDecoratorBracket* self, const QBrush* brush);
void QCPSelectionDecoratorBracket_SetBracketWidth(QCPSelectionDecoratorBracket* self, int width);
void QCPSelectionDecoratorBracket_SetBracketHeight(QCPSelectionDecoratorBracket* self, int height);
void QCPSelectionDecoratorBracket_SetBracketStyle(QCPSelectionDecoratorBracket* self, int style);
void QCPSelectionDecoratorBracket_SetTangentToData(QCPSelectionDecoratorBracket* self, bool enabled);
void QCPSelectionDecoratorBracket_SetTangentAverage(QCPSelectionDecoratorBracket* self, int pointCount);
void QCPSelectionDecoratorBracket_DrawBracket(const QCPSelectionDecoratorBracket* self, QCPPainter* painter, int direction);
void QCPSelectionDecoratorBracket_DrawDecoration(QCPSelectionDecoratorBracket* self, QCPPainter* painter, QCPDataSelection* selection);
void QCPSelectionDecoratorBracket_OnDrawBracket(const QCPSelectionDecoratorBracket* self, intptr_t slot);
void QCPSelectionDecoratorBracket_QBaseDrawBracket(const QCPSelectionDecoratorBracket* self, QCPPainter* painter, int direction);
void QCPSelectionDecoratorBracket_OnDrawDecoration(QCPSelectionDecoratorBracket* self, intptr_t slot);
void QCPSelectionDecoratorBracket_QBaseDrawDecoration(QCPSelectionDecoratorBracket* self, QCPPainter* painter, QCPDataSelection* selection);
void QCPSelectionDecoratorBracket_CopyFrom(QCPSelectionDecoratorBracket* self, const QCPSelectionDecorator* other);
void QCPSelectionDecoratorBracket_OnCopyFrom(QCPSelectionDecoratorBracket* self, intptr_t slot);
void QCPSelectionDecoratorBracket_QBaseCopyFrom(QCPSelectionDecoratorBracket* self, const QCPSelectionDecorator* other);
bool QCPSelectionDecoratorBracket_RegisterWithPlottable(QCPSelectionDecoratorBracket* self, QCPAbstractPlottable* plottable);
void QCPSelectionDecoratorBracket_OnRegisterWithPlottable(QCPSelectionDecoratorBracket* self, intptr_t slot);
bool QCPSelectionDecoratorBracket_QBaseRegisterWithPlottable(QCPSelectionDecoratorBracket* self, QCPAbstractPlottable* plottable);
double QCPSelectionDecoratorBracket_GetTangentAngle(const QCPSelectionDecoratorBracket* self, const QCPPlottableInterface1D* interface1d, int dataIndex, int direction);
void QCPSelectionDecoratorBracket_OnGetTangentAngle(const QCPSelectionDecoratorBracket* self, intptr_t slot);
double QCPSelectionDecoratorBracket_QBaseGetTangentAngle(const QCPSelectionDecoratorBracket* self, const QCPPlottableInterface1D* interface1d, int dataIndex, int direction);
QPointF* QCPSelectionDecoratorBracket_GetPixelCoordinates(const QCPSelectionDecoratorBracket* self, const QCPPlottableInterface1D* interface1d, int dataIndex);
void QCPSelectionDecoratorBracket_OnGetPixelCoordinates(const QCPSelectionDecoratorBracket* self, intptr_t slot);
QPointF* QCPSelectionDecoratorBracket_QBaseGetPixelCoordinates(const QCPSelectionDecoratorBracket* self, const QCPPlottableInterface1D* interface1d, int dataIndex);
void QCPSelectionDecoratorBracket_Delete(QCPSelectionDecoratorBracket* self);

QCPAxisRect* QCPAxisRect_new(QCustomPlot* parentPlot);
QCPAxisRect* QCPAxisRect_new2(QCustomPlot* parentPlot, bool setupDefaultAxes);
QMetaObject* QCPAxisRect_MetaObject(const QCPAxisRect* self);
void* QCPAxisRect_Metacast(QCPAxisRect* self, const char* param1);
int QCPAxisRect_Metacall(QCPAxisRect* self, int param1, int param2, void** param3);
libqt_string QCPAxisRect_Tr(const char* s);
QPixmap* QCPAxisRect_Background(const QCPAxisRect* self);
QBrush* QCPAxisRect_BackgroundBrush(const QCPAxisRect* self);
bool QCPAxisRect_BackgroundScaled(const QCPAxisRect* self);
int QCPAxisRect_BackgroundScaledMode(const QCPAxisRect* self);
int QCPAxisRect_RangeDrag(const QCPAxisRect* self);
int QCPAxisRect_RangeZoom(const QCPAxisRect* self);
QCPAxis* QCPAxisRect_RangeDragAxis(QCPAxisRect* self, int orientation);
QCPAxis* QCPAxisRect_RangeZoomAxis(QCPAxisRect* self, int orientation);
libqt_list /* of QCPAxis* */ QCPAxisRect_RangeDragAxes(QCPAxisRect* self, int orientation);
libqt_list /* of QCPAxis* */ QCPAxisRect_RangeZoomAxes(QCPAxisRect* self, int orientation);
double QCPAxisRect_RangeZoomFactor(QCPAxisRect* self, int orientation);
void QCPAxisRect_SetBackground(QCPAxisRect* self, const QPixmap* pm);
void QCPAxisRect_SetBackground2(QCPAxisRect* self, const QPixmap* pm, bool scaled);
void QCPAxisRect_SetBackground3(QCPAxisRect* self, const QBrush* brush);
void QCPAxisRect_SetBackgroundScaled(QCPAxisRect* self, bool scaled);
void QCPAxisRect_SetBackgroundScaledMode(QCPAxisRect* self, int mode);
void QCPAxisRect_SetRangeDrag(QCPAxisRect* self, int orientations);
void QCPAxisRect_SetRangeZoom(QCPAxisRect* self, int orientations);
void QCPAxisRect_SetRangeDragAxes(QCPAxisRect* self, QCPAxis* horizontal, QCPAxis* vertical);
void QCPAxisRect_SetRangeDragAxes2(QCPAxisRect* self, libqt_list /* of QCPAxis* */ axes);
void QCPAxisRect_SetRangeDragAxes3(QCPAxisRect* self, libqt_list /* of QCPAxis* */ horizontal, libqt_list /* of QCPAxis* */ vertical);
void QCPAxisRect_SetRangeZoomAxes(QCPAxisRect* self, QCPAxis* horizontal, QCPAxis* vertical);
void QCPAxisRect_SetRangeZoomAxes2(QCPAxisRect* self, libqt_list /* of QCPAxis* */ axes);
void QCPAxisRect_SetRangeZoomAxes3(QCPAxisRect* self, libqt_list /* of QCPAxis* */ horizontal, libqt_list /* of QCPAxis* */ vertical);
void QCPAxisRect_SetRangeZoomFactor(QCPAxisRect* self, double horizontalFactor, double verticalFactor);
void QCPAxisRect_SetRangeZoomFactor2(QCPAxisRect* self, double factor);
int QCPAxisRect_AxisCount(const QCPAxisRect* self, int typeVal);
QCPAxis* QCPAxisRect_Axis(const QCPAxisRect* self, int typeVal);
libqt_list /* of QCPAxis* */ QCPAxisRect_Axes(const QCPAxisRect* self, int types);
libqt_list /* of QCPAxis* */ QCPAxisRect_Axes2(const QCPAxisRect* self);
QCPAxis* QCPAxisRect_AddAxis(QCPAxisRect* self, int typeVal);
libqt_list /* of QCPAxis* */ QCPAxisRect_AddAxes(QCPAxisRect* self, int types);
bool QCPAxisRect_RemoveAxis(QCPAxisRect* self, QCPAxis* axis);
QCPLayoutInset* QCPAxisRect_InsetLayout(const QCPAxisRect* self);
void QCPAxisRect_Zoom(QCPAxisRect* self, const QRectF* pixelRect);
void QCPAxisRect_Zoom2(QCPAxisRect* self, const QRectF* pixelRect, const libqt_list /* of QCPAxis* */ affectedAxes);
void QCPAxisRect_SetupFullAxesBox(QCPAxisRect* self);
libqt_list /* of QCPAbstractPlottable* */ QCPAxisRect_Plottables(const QCPAxisRect* self);
libqt_list /* of QCPGraph* */ QCPAxisRect_Graphs(const QCPAxisRect* self);
libqt_list /* of QCPAbstractItem* */ QCPAxisRect_Items(const QCPAxisRect* self);
int QCPAxisRect_Left(const QCPAxisRect* self);
int QCPAxisRect_Right(const QCPAxisRect* self);
int QCPAxisRect_Top(const QCPAxisRect* self);
int QCPAxisRect_Bottom(const QCPAxisRect* self);
int QCPAxisRect_Width(const QCPAxisRect* self);
int QCPAxisRect_Height(const QCPAxisRect* self);
QSize* QCPAxisRect_Size(const QCPAxisRect* self);
QPoint* QCPAxisRect_TopLeft(const QCPAxisRect* self);
QPoint* QCPAxisRect_TopRight(const QCPAxisRect* self);
QPoint* QCPAxisRect_BottomLeft(const QCPAxisRect* self);
QPoint* QCPAxisRect_BottomRight(const QCPAxisRect* self);
QPoint* QCPAxisRect_Center(const QCPAxisRect* self);
void QCPAxisRect_Update(QCPAxisRect* self, int phase);
libqt_list /* of QCPLayoutElement* */ QCPAxisRect_Elements(const QCPAxisRect* self, bool recursive);
void QCPAxisRect_ApplyDefaultAntialiasingHint(const QCPAxisRect* self, QCPPainter* painter);
void QCPAxisRect_Draw(QCPAxisRect* self, QCPPainter* painter);
int QCPAxisRect_CalculateAutoMargin(QCPAxisRect* self, int side);
void QCPAxisRect_LayoutChanged(QCPAxisRect* self);
void QCPAxisRect_MousePressEvent(QCPAxisRect* self, QMouseEvent* event, const QVariant* details);
void QCPAxisRect_MouseMoveEvent(QCPAxisRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxisRect_MouseReleaseEvent(QCPAxisRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxisRect_WheelEvent(QCPAxisRect* self, QWheelEvent* event);
libqt_string QCPAxisRect_Tr2(const char* s, const char* c);
libqt_string QCPAxisRect_Tr3(const char* s, const char* c, int n);
void QCPAxisRect_SetBackground32(QCPAxisRect* self, const QPixmap* pm, bool scaled, int mode);
QCPAxis* QCPAxisRect_Axis2(const QCPAxisRect* self, int typeVal, int index);
QCPAxis* QCPAxisRect_AddAxis2(QCPAxisRect* self, int typeVal, QCPAxis* axis);
void QCPAxisRect_SetupFullAxesBox1(QCPAxisRect* self, bool connectRanges);
void QCPAxisRect_OnMetacall(QCPAxisRect* self, intptr_t slot);
int QCPAxisRect_QBaseMetacall(QCPAxisRect* self, int param1, int param2, void** param3);
void QCPAxisRect_OnUpdate(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseUpdate(QCPAxisRect* self, int phase);
void QCPAxisRect_OnElements(const QCPAxisRect* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPAxisRect_QBaseElements(const QCPAxisRect* self, bool recursive);
void QCPAxisRect_OnApplyDefaultAntialiasingHint(const QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseApplyDefaultAntialiasingHint(const QCPAxisRect* self, QCPPainter* painter);
void QCPAxisRect_OnDraw(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseDraw(QCPAxisRect* self, QCPPainter* painter);
void QCPAxisRect_OnCalculateAutoMargin(QCPAxisRect* self, intptr_t slot);
int QCPAxisRect_QBaseCalculateAutoMargin(QCPAxisRect* self, int side);
void QCPAxisRect_OnLayoutChanged(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseLayoutChanged(QCPAxisRect* self);
void QCPAxisRect_OnMousePressEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseMousePressEvent(QCPAxisRect* self, QMouseEvent* event, const QVariant* details);
void QCPAxisRect_OnMouseMoveEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseMouseMoveEvent(QCPAxisRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxisRect_OnMouseReleaseEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseMouseReleaseEvent(QCPAxisRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPAxisRect_OnWheelEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseWheelEvent(QCPAxisRect* self, QWheelEvent* event);
QSize* QCPAxisRect_MinimumOuterSizeHint(const QCPAxisRect* self);
void QCPAxisRect_OnMinimumOuterSizeHint(const QCPAxisRect* self, intptr_t slot);
QSize* QCPAxisRect_QBaseMinimumOuterSizeHint(const QCPAxisRect* self);
QSize* QCPAxisRect_MaximumOuterSizeHint(const QCPAxisRect* self);
void QCPAxisRect_OnMaximumOuterSizeHint(const QCPAxisRect* self, intptr_t slot);
QSize* QCPAxisRect_QBaseMaximumOuterSizeHint(const QCPAxisRect* self);
double QCPAxisRect_SelectTest(const QCPAxisRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAxisRect_OnSelectTest(const QCPAxisRect* self, intptr_t slot);
double QCPAxisRect_QBaseSelectTest(const QCPAxisRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAxisRect_ParentPlotInitialized(QCPAxisRect* self, QCustomPlot* parentPlot);
void QCPAxisRect_OnParentPlotInitialized(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseParentPlotInitialized(QCPAxisRect* self, QCustomPlot* parentPlot);
int QCPAxisRect_SelectionCategory(const QCPAxisRect* self);
void QCPAxisRect_OnSelectionCategory(const QCPAxisRect* self, intptr_t slot);
int QCPAxisRect_QBaseSelectionCategory(const QCPAxisRect* self);
QRect* QCPAxisRect_ClipRect(const QCPAxisRect* self);
void QCPAxisRect_OnClipRect(const QCPAxisRect* self, intptr_t slot);
QRect* QCPAxisRect_QBaseClipRect(const QCPAxisRect* self);
void QCPAxisRect_SelectEvent(QCPAxisRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAxisRect_OnSelectEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseSelectEvent(QCPAxisRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAxisRect_DeselectEvent(QCPAxisRect* self, bool* selectionStateChanged);
void QCPAxisRect_OnDeselectEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseDeselectEvent(QCPAxisRect* self, bool* selectionStateChanged);
void QCPAxisRect_MouseDoubleClickEvent(QCPAxisRect* self, QMouseEvent* event, const QVariant* details);
void QCPAxisRect_OnMouseDoubleClickEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseMouseDoubleClickEvent(QCPAxisRect* self, QMouseEvent* event, const QVariant* details);
bool QCPAxisRect_Event(QCPAxisRect* self, QEvent* event);
void QCPAxisRect_OnEvent(QCPAxisRect* self, intptr_t slot);
bool QCPAxisRect_QBaseEvent(QCPAxisRect* self, QEvent* event);
bool QCPAxisRect_EventFilter(QCPAxisRect* self, QObject* watched, QEvent* event);
void QCPAxisRect_OnEventFilter(QCPAxisRect* self, intptr_t slot);
bool QCPAxisRect_QBaseEventFilter(QCPAxisRect* self, QObject* watched, QEvent* event);
void QCPAxisRect_TimerEvent(QCPAxisRect* self, QTimerEvent* event);
void QCPAxisRect_OnTimerEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseTimerEvent(QCPAxisRect* self, QTimerEvent* event);
void QCPAxisRect_ChildEvent(QCPAxisRect* self, QChildEvent* event);
void QCPAxisRect_OnChildEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseChildEvent(QCPAxisRect* self, QChildEvent* event);
void QCPAxisRect_CustomEvent(QCPAxisRect* self, QEvent* event);
void QCPAxisRect_OnCustomEvent(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseCustomEvent(QCPAxisRect* self, QEvent* event);
void QCPAxisRect_ConnectNotify(QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_OnConnectNotify(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseConnectNotify(QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_DisconnectNotify(QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_OnDisconnectNotify(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseDisconnectNotify(QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_DrawBackground(QCPAxisRect* self, QCPPainter* painter);
void QCPAxisRect_OnDrawBackground(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseDrawBackground(QCPAxisRect* self, QCPPainter* painter);
void QCPAxisRect_UpdateAxesOffset(QCPAxisRect* self, int typeVal);
void QCPAxisRect_OnUpdateAxesOffset(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseUpdateAxesOffset(QCPAxisRect* self, int typeVal);
void QCPAxisRect_InitializeParentPlot(QCPAxisRect* self, QCustomPlot* parentPlot);
void QCPAxisRect_OnInitializeParentPlot(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseInitializeParentPlot(QCPAxisRect* self, QCustomPlot* parentPlot);
void QCPAxisRect_SetParentLayerable(QCPAxisRect* self, QCPLayerable* parentLayerable);
void QCPAxisRect_OnSetParentLayerable(QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseSetParentLayerable(QCPAxisRect* self, QCPLayerable* parentLayerable);
bool QCPAxisRect_MoveToLayer(QCPAxisRect* self, QCPLayer* layer, bool prepend);
void QCPAxisRect_OnMoveToLayer(QCPAxisRect* self, intptr_t slot);
bool QCPAxisRect_QBaseMoveToLayer(QCPAxisRect* self, QCPLayer* layer, bool prepend);
void QCPAxisRect_ApplyAntialiasingHint(const QCPAxisRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPAxisRect_OnApplyAntialiasingHint(const QCPAxisRect* self, intptr_t slot);
void QCPAxisRect_QBaseApplyAntialiasingHint(const QCPAxisRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPAxisRect_Sender(const QCPAxisRect* self);
void QCPAxisRect_OnSender(const QCPAxisRect* self, intptr_t slot);
QObject* QCPAxisRect_QBaseSender(const QCPAxisRect* self);
int QCPAxisRect_SenderSignalIndex(const QCPAxisRect* self);
void QCPAxisRect_OnSenderSignalIndex(const QCPAxisRect* self, intptr_t slot);
int QCPAxisRect_QBaseSenderSignalIndex(const QCPAxisRect* self);
int QCPAxisRect_Receivers(const QCPAxisRect* self, const char* signal);
void QCPAxisRect_OnReceivers(const QCPAxisRect* self, intptr_t slot);
int QCPAxisRect_QBaseReceivers(const QCPAxisRect* self, const char* signal);
bool QCPAxisRect_IsSignalConnected(const QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_OnIsSignalConnected(const QCPAxisRect* self, intptr_t slot);
bool QCPAxisRect_QBaseIsSignalConnected(const QCPAxisRect* self, const QMetaMethod* signal);
void QCPAxisRect_Delete(QCPAxisRect* self);

QCPAbstractLegendItem* QCPAbstractLegendItem_new(QCPLegend* parent);
QMetaObject* QCPAbstractLegendItem_MetaObject(const QCPAbstractLegendItem* self);
void* QCPAbstractLegendItem_Metacast(QCPAbstractLegendItem* self, const char* param1);
int QCPAbstractLegendItem_Metacall(QCPAbstractLegendItem* self, int param1, int param2, void** param3);
libqt_string QCPAbstractLegendItem_Tr(const char* s);
QCPLegend* QCPAbstractLegendItem_ParentLegend(const QCPAbstractLegendItem* self);
QFont* QCPAbstractLegendItem_Font(const QCPAbstractLegendItem* self);
QColor* QCPAbstractLegendItem_TextColor(const QCPAbstractLegendItem* self);
QFont* QCPAbstractLegendItem_SelectedFont(const QCPAbstractLegendItem* self);
QColor* QCPAbstractLegendItem_SelectedTextColor(const QCPAbstractLegendItem* self);
bool QCPAbstractLegendItem_Selectable(const QCPAbstractLegendItem* self);
bool QCPAbstractLegendItem_Selected(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_SetFont(QCPAbstractLegendItem* self, const QFont* font);
void QCPAbstractLegendItem_SetTextColor(QCPAbstractLegendItem* self, const QColor* color);
void QCPAbstractLegendItem_SetSelectedFont(QCPAbstractLegendItem* self, const QFont* font);
void QCPAbstractLegendItem_SetSelectedTextColor(QCPAbstractLegendItem* self, const QColor* color);
void QCPAbstractLegendItem_SetSelectable(QCPAbstractLegendItem* self, bool selectable);
void QCPAbstractLegendItem_SetSelected(QCPAbstractLegendItem* self, bool selected);
double QCPAbstractLegendItem_SelectTest(const QCPAbstractLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAbstractLegendItem_SelectionChanged(QCPAbstractLegendItem* self, bool selected);
void QCPAbstractLegendItem_Connect_SelectionChanged(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_SelectableChanged(QCPAbstractLegendItem* self, bool selectable);
void QCPAbstractLegendItem_Connect_SelectableChanged(QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_SelectionCategory(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_ApplyDefaultAntialiasingHint(const QCPAbstractLegendItem* self, QCPPainter* painter);
QRect* QCPAbstractLegendItem_ClipRect(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_Draw(QCPAbstractLegendItem* self, QCPPainter* painter);
void QCPAbstractLegendItem_SelectEvent(QCPAbstractLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractLegendItem_DeselectEvent(QCPAbstractLegendItem* self, bool* selectionStateChanged);
libqt_string QCPAbstractLegendItem_Tr2(const char* s, const char* c);
libqt_string QCPAbstractLegendItem_Tr3(const char* s, const char* c, int n);
void QCPAbstractLegendItem_OnMetacall(QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_QBaseMetacall(QCPAbstractLegendItem* self, int param1, int param2, void** param3);
void QCPAbstractLegendItem_OnSelectTest(const QCPAbstractLegendItem* self, intptr_t slot);
double QCPAbstractLegendItem_QBaseSelectTest(const QCPAbstractLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPAbstractLegendItem_OnSelectionCategory(const QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_QBaseSelectionCategory(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnApplyDefaultAntialiasingHint(const QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseApplyDefaultAntialiasingHint(const QCPAbstractLegendItem* self, QCPPainter* painter);
void QCPAbstractLegendItem_OnClipRect(const QCPAbstractLegendItem* self, intptr_t slot);
QRect* QCPAbstractLegendItem_QBaseClipRect(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnDraw(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseDraw(QCPAbstractLegendItem* self, QCPPainter* painter);
void QCPAbstractLegendItem_OnSelectEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseSelectEvent(QCPAbstractLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPAbstractLegendItem_OnDeselectEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseDeselectEvent(QCPAbstractLegendItem* self, bool* selectionStateChanged);
void QCPAbstractLegendItem_Update(QCPAbstractLegendItem* self, int phase);
void QCPAbstractLegendItem_OnUpdate(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseUpdate(QCPAbstractLegendItem* self, int phase);
QSize* QCPAbstractLegendItem_MinimumOuterSizeHint(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnMinimumOuterSizeHint(const QCPAbstractLegendItem* self, intptr_t slot);
QSize* QCPAbstractLegendItem_QBaseMinimumOuterSizeHint(const QCPAbstractLegendItem* self);
QSize* QCPAbstractLegendItem_MaximumOuterSizeHint(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnMaximumOuterSizeHint(const QCPAbstractLegendItem* self, intptr_t slot);
QSize* QCPAbstractLegendItem_QBaseMaximumOuterSizeHint(const QCPAbstractLegendItem* self);
libqt_list /* of QCPLayoutElement* */ QCPAbstractLegendItem_Elements(const QCPAbstractLegendItem* self, bool recursive);
void QCPAbstractLegendItem_OnElements(const QCPAbstractLegendItem* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPAbstractLegendItem_QBaseElements(const QCPAbstractLegendItem* self, bool recursive);
int QCPAbstractLegendItem_CalculateAutoMargin(QCPAbstractLegendItem* self, int side);
void QCPAbstractLegendItem_OnCalculateAutoMargin(QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_QBaseCalculateAutoMargin(QCPAbstractLegendItem* self, int side);
void QCPAbstractLegendItem_LayoutChanged(QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnLayoutChanged(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseLayoutChanged(QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_ParentPlotInitialized(QCPAbstractLegendItem* self, QCustomPlot* parentPlot);
void QCPAbstractLegendItem_OnParentPlotInitialized(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseParentPlotInitialized(QCPAbstractLegendItem* self, QCustomPlot* parentPlot);
void QCPAbstractLegendItem_MousePressEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractLegendItem_OnMousePressEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseMousePressEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractLegendItem_MouseMoveEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractLegendItem_OnMouseMoveEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseMouseMoveEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractLegendItem_MouseReleaseEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractLegendItem_OnMouseReleaseEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseMouseReleaseEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPAbstractLegendItem_MouseDoubleClickEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractLegendItem_OnMouseDoubleClickEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseMouseDoubleClickEvent(QCPAbstractLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPAbstractLegendItem_WheelEvent(QCPAbstractLegendItem* self, QWheelEvent* event);
void QCPAbstractLegendItem_OnWheelEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseWheelEvent(QCPAbstractLegendItem* self, QWheelEvent* event);
bool QCPAbstractLegendItem_Event(QCPAbstractLegendItem* self, QEvent* event);
void QCPAbstractLegendItem_OnEvent(QCPAbstractLegendItem* self, intptr_t slot);
bool QCPAbstractLegendItem_QBaseEvent(QCPAbstractLegendItem* self, QEvent* event);
bool QCPAbstractLegendItem_EventFilter(QCPAbstractLegendItem* self, QObject* watched, QEvent* event);
void QCPAbstractLegendItem_OnEventFilter(QCPAbstractLegendItem* self, intptr_t slot);
bool QCPAbstractLegendItem_QBaseEventFilter(QCPAbstractLegendItem* self, QObject* watched, QEvent* event);
void QCPAbstractLegendItem_TimerEvent(QCPAbstractLegendItem* self, QTimerEvent* event);
void QCPAbstractLegendItem_OnTimerEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseTimerEvent(QCPAbstractLegendItem* self, QTimerEvent* event);
void QCPAbstractLegendItem_ChildEvent(QCPAbstractLegendItem* self, QChildEvent* event);
void QCPAbstractLegendItem_OnChildEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseChildEvent(QCPAbstractLegendItem* self, QChildEvent* event);
void QCPAbstractLegendItem_CustomEvent(QCPAbstractLegendItem* self, QEvent* event);
void QCPAbstractLegendItem_OnCustomEvent(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseCustomEvent(QCPAbstractLegendItem* self, QEvent* event);
void QCPAbstractLegendItem_ConnectNotify(QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_OnConnectNotify(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseConnectNotify(QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_DisconnectNotify(QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_OnDisconnectNotify(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseDisconnectNotify(QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_InitializeParentPlot(QCPAbstractLegendItem* self, QCustomPlot* parentPlot);
void QCPAbstractLegendItem_OnInitializeParentPlot(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseInitializeParentPlot(QCPAbstractLegendItem* self, QCustomPlot* parentPlot);
void QCPAbstractLegendItem_SetParentLayerable(QCPAbstractLegendItem* self, QCPLayerable* parentLayerable);
void QCPAbstractLegendItem_OnSetParentLayerable(QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseSetParentLayerable(QCPAbstractLegendItem* self, QCPLayerable* parentLayerable);
bool QCPAbstractLegendItem_MoveToLayer(QCPAbstractLegendItem* self, QCPLayer* layer, bool prepend);
void QCPAbstractLegendItem_OnMoveToLayer(QCPAbstractLegendItem* self, intptr_t slot);
bool QCPAbstractLegendItem_QBaseMoveToLayer(QCPAbstractLegendItem* self, QCPLayer* layer, bool prepend);
void QCPAbstractLegendItem_ApplyAntialiasingHint(const QCPAbstractLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPAbstractLegendItem_OnApplyAntialiasingHint(const QCPAbstractLegendItem* self, intptr_t slot);
void QCPAbstractLegendItem_QBaseApplyAntialiasingHint(const QCPAbstractLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPAbstractLegendItem_Sender(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnSender(const QCPAbstractLegendItem* self, intptr_t slot);
QObject* QCPAbstractLegendItem_QBaseSender(const QCPAbstractLegendItem* self);
int QCPAbstractLegendItem_SenderSignalIndex(const QCPAbstractLegendItem* self);
void QCPAbstractLegendItem_OnSenderSignalIndex(const QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_QBaseSenderSignalIndex(const QCPAbstractLegendItem* self);
int QCPAbstractLegendItem_Receivers(const QCPAbstractLegendItem* self, const char* signal);
void QCPAbstractLegendItem_OnReceivers(const QCPAbstractLegendItem* self, intptr_t slot);
int QCPAbstractLegendItem_QBaseReceivers(const QCPAbstractLegendItem* self, const char* signal);
bool QCPAbstractLegendItem_IsSignalConnected(const QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_OnIsSignalConnected(const QCPAbstractLegendItem* self, intptr_t slot);
bool QCPAbstractLegendItem_QBaseIsSignalConnected(const QCPAbstractLegendItem* self, const QMetaMethod* signal);
void QCPAbstractLegendItem_Delete(QCPAbstractLegendItem* self);

QCPPlottableLegendItem* QCPPlottableLegendItem_new(QCPLegend* parent, QCPAbstractPlottable* plottable);
QMetaObject* QCPPlottableLegendItem_MetaObject(const QCPPlottableLegendItem* self);
void* QCPPlottableLegendItem_Metacast(QCPPlottableLegendItem* self, const char* param1);
int QCPPlottableLegendItem_Metacall(QCPPlottableLegendItem* self, int param1, int param2, void** param3);
libqt_string QCPPlottableLegendItem_Tr(const char* s);
QCPAbstractPlottable* QCPPlottableLegendItem_Plottable(QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_Draw(QCPPlottableLegendItem* self, QCPPainter* painter);
QSize* QCPPlottableLegendItem_MinimumOuterSizeHint(const QCPPlottableLegendItem* self);
libqt_string QCPPlottableLegendItem_Tr2(const char* s, const char* c);
libqt_string QCPPlottableLegendItem_Tr3(const char* s, const char* c, int n);
void QCPPlottableLegendItem_OnMetacall(QCPPlottableLegendItem* self, intptr_t slot);
int QCPPlottableLegendItem_QBaseMetacall(QCPPlottableLegendItem* self, int param1, int param2, void** param3);
void QCPPlottableLegendItem_OnDraw(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseDraw(QCPPlottableLegendItem* self, QCPPainter* painter);
void QCPPlottableLegendItem_OnMinimumOuterSizeHint(const QCPPlottableLegendItem* self, intptr_t slot);
QSize* QCPPlottableLegendItem_QBaseMinimumOuterSizeHint(const QCPPlottableLegendItem* self);
double QCPPlottableLegendItem_SelectTest(const QCPPlottableLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPlottableLegendItem_OnSelectTest(const QCPPlottableLegendItem* self, intptr_t slot);
double QCPPlottableLegendItem_QBaseSelectTest(const QCPPlottableLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPPlottableLegendItem_SelectionCategory(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnSelectionCategory(const QCPPlottableLegendItem* self, intptr_t slot);
int QCPPlottableLegendItem_QBaseSelectionCategory(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_ApplyDefaultAntialiasingHint(const QCPPlottableLegendItem* self, QCPPainter* painter);
void QCPPlottableLegendItem_OnApplyDefaultAntialiasingHint(const QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseApplyDefaultAntialiasingHint(const QCPPlottableLegendItem* self, QCPPainter* painter);
QRect* QCPPlottableLegendItem_ClipRect(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnClipRect(const QCPPlottableLegendItem* self, intptr_t slot);
QRect* QCPPlottableLegendItem_QBaseClipRect(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_SelectEvent(QCPPlottableLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPlottableLegendItem_OnSelectEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseSelectEvent(QCPPlottableLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPlottableLegendItem_DeselectEvent(QCPPlottableLegendItem* self, bool* selectionStateChanged);
void QCPPlottableLegendItem_OnDeselectEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseDeselectEvent(QCPPlottableLegendItem* self, bool* selectionStateChanged);
void QCPPlottableLegendItem_Update(QCPPlottableLegendItem* self, int phase);
void QCPPlottableLegendItem_OnUpdate(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseUpdate(QCPPlottableLegendItem* self, int phase);
QSize* QCPPlottableLegendItem_MaximumOuterSizeHint(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnMaximumOuterSizeHint(const QCPPlottableLegendItem* self, intptr_t slot);
QSize* QCPPlottableLegendItem_QBaseMaximumOuterSizeHint(const QCPPlottableLegendItem* self);
libqt_list /* of QCPLayoutElement* */ QCPPlottableLegendItem_Elements(const QCPPlottableLegendItem* self, bool recursive);
void QCPPlottableLegendItem_OnElements(const QCPPlottableLegendItem* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPPlottableLegendItem_QBaseElements(const QCPPlottableLegendItem* self, bool recursive);
int QCPPlottableLegendItem_CalculateAutoMargin(QCPPlottableLegendItem* self, int side);
void QCPPlottableLegendItem_OnCalculateAutoMargin(QCPPlottableLegendItem* self, intptr_t slot);
int QCPPlottableLegendItem_QBaseCalculateAutoMargin(QCPPlottableLegendItem* self, int side);
void QCPPlottableLegendItem_LayoutChanged(QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnLayoutChanged(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseLayoutChanged(QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_ParentPlotInitialized(QCPPlottableLegendItem* self, QCustomPlot* parentPlot);
void QCPPlottableLegendItem_OnParentPlotInitialized(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseParentPlotInitialized(QCPPlottableLegendItem* self, QCustomPlot* parentPlot);
void QCPPlottableLegendItem_MousePressEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPlottableLegendItem_OnMousePressEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseMousePressEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPlottableLegendItem_MouseMoveEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPlottableLegendItem_OnMouseMoveEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseMouseMoveEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPlottableLegendItem_MouseReleaseEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPlottableLegendItem_OnMouseReleaseEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseMouseReleaseEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPlottableLegendItem_MouseDoubleClickEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPlottableLegendItem_OnMouseDoubleClickEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseMouseDoubleClickEvent(QCPPlottableLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPlottableLegendItem_WheelEvent(QCPPlottableLegendItem* self, QWheelEvent* event);
void QCPPlottableLegendItem_OnWheelEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseWheelEvent(QCPPlottableLegendItem* self, QWheelEvent* event);
bool QCPPlottableLegendItem_Event(QCPPlottableLegendItem* self, QEvent* event);
void QCPPlottableLegendItem_OnEvent(QCPPlottableLegendItem* self, intptr_t slot);
bool QCPPlottableLegendItem_QBaseEvent(QCPPlottableLegendItem* self, QEvent* event);
bool QCPPlottableLegendItem_EventFilter(QCPPlottableLegendItem* self, QObject* watched, QEvent* event);
void QCPPlottableLegendItem_OnEventFilter(QCPPlottableLegendItem* self, intptr_t slot);
bool QCPPlottableLegendItem_QBaseEventFilter(QCPPlottableLegendItem* self, QObject* watched, QEvent* event);
void QCPPlottableLegendItem_TimerEvent(QCPPlottableLegendItem* self, QTimerEvent* event);
void QCPPlottableLegendItem_OnTimerEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseTimerEvent(QCPPlottableLegendItem* self, QTimerEvent* event);
void QCPPlottableLegendItem_ChildEvent(QCPPlottableLegendItem* self, QChildEvent* event);
void QCPPlottableLegendItem_OnChildEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseChildEvent(QCPPlottableLegendItem* self, QChildEvent* event);
void QCPPlottableLegendItem_CustomEvent(QCPPlottableLegendItem* self, QEvent* event);
void QCPPlottableLegendItem_OnCustomEvent(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseCustomEvent(QCPPlottableLegendItem* self, QEvent* event);
void QCPPlottableLegendItem_ConnectNotify(QCPPlottableLegendItem* self, const QMetaMethod* signal);
void QCPPlottableLegendItem_OnConnectNotify(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseConnectNotify(QCPPlottableLegendItem* self, const QMetaMethod* signal);
void QCPPlottableLegendItem_DisconnectNotify(QCPPlottableLegendItem* self, const QMetaMethod* signal);
void QCPPlottableLegendItem_OnDisconnectNotify(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseDisconnectNotify(QCPPlottableLegendItem* self, const QMetaMethod* signal);
QPen* QCPPlottableLegendItem_GetIconBorderPen(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnGetIconBorderPen(const QCPPlottableLegendItem* self, intptr_t slot);
QPen* QCPPlottableLegendItem_QBaseGetIconBorderPen(const QCPPlottableLegendItem* self);
QColor* QCPPlottableLegendItem_GetTextColor(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnGetTextColor(const QCPPlottableLegendItem* self, intptr_t slot);
QColor* QCPPlottableLegendItem_QBaseGetTextColor(const QCPPlottableLegendItem* self);
QFont* QCPPlottableLegendItem_GetFont(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnGetFont(const QCPPlottableLegendItem* self, intptr_t slot);
QFont* QCPPlottableLegendItem_QBaseGetFont(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_InitializeParentPlot(QCPPlottableLegendItem* self, QCustomPlot* parentPlot);
void QCPPlottableLegendItem_OnInitializeParentPlot(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseInitializeParentPlot(QCPPlottableLegendItem* self, QCustomPlot* parentPlot);
void QCPPlottableLegendItem_SetParentLayerable(QCPPlottableLegendItem* self, QCPLayerable* parentLayerable);
void QCPPlottableLegendItem_OnSetParentLayerable(QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseSetParentLayerable(QCPPlottableLegendItem* self, QCPLayerable* parentLayerable);
bool QCPPlottableLegendItem_MoveToLayer(QCPPlottableLegendItem* self, QCPLayer* layer, bool prepend);
void QCPPlottableLegendItem_OnMoveToLayer(QCPPlottableLegendItem* self, intptr_t slot);
bool QCPPlottableLegendItem_QBaseMoveToLayer(QCPPlottableLegendItem* self, QCPLayer* layer, bool prepend);
void QCPPlottableLegendItem_ApplyAntialiasingHint(const QCPPlottableLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPlottableLegendItem_OnApplyAntialiasingHint(const QCPPlottableLegendItem* self, intptr_t slot);
void QCPPlottableLegendItem_QBaseApplyAntialiasingHint(const QCPPlottableLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPlottableLegendItem_Sender(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnSender(const QCPPlottableLegendItem* self, intptr_t slot);
QObject* QCPPlottableLegendItem_QBaseSender(const QCPPlottableLegendItem* self);
int QCPPlottableLegendItem_SenderSignalIndex(const QCPPlottableLegendItem* self);
void QCPPlottableLegendItem_OnSenderSignalIndex(const QCPPlottableLegendItem* self, intptr_t slot);
int QCPPlottableLegendItem_QBaseSenderSignalIndex(const QCPPlottableLegendItem* self);
int QCPPlottableLegendItem_Receivers(const QCPPlottableLegendItem* self, const char* signal);
void QCPPlottableLegendItem_OnReceivers(const QCPPlottableLegendItem* self, intptr_t slot);
int QCPPlottableLegendItem_QBaseReceivers(const QCPPlottableLegendItem* self, const char* signal);
bool QCPPlottableLegendItem_IsSignalConnected(const QCPPlottableLegendItem* self, const QMetaMethod* signal);
void QCPPlottableLegendItem_OnIsSignalConnected(const QCPPlottableLegendItem* self, intptr_t slot);
bool QCPPlottableLegendItem_QBaseIsSignalConnected(const QCPPlottableLegendItem* self, const QMetaMethod* signal);
void QCPPlottableLegendItem_Delete(QCPPlottableLegendItem* self);

QCPLegend* QCPLegend_new();
QMetaObject* QCPLegend_MetaObject(const QCPLegend* self);
void* QCPLegend_Metacast(QCPLegend* self, const char* param1);
int QCPLegend_Metacall(QCPLegend* self, int param1, int param2, void** param3);
libqt_string QCPLegend_Tr(const char* s);
QPen* QCPLegend_BorderPen(const QCPLegend* self);
QBrush* QCPLegend_Brush(const QCPLegend* self);
QFont* QCPLegend_Font(const QCPLegend* self);
QColor* QCPLegend_TextColor(const QCPLegend* self);
QSize* QCPLegend_IconSize(const QCPLegend* self);
int QCPLegend_IconTextPadding(const QCPLegend* self);
QPen* QCPLegend_IconBorderPen(const QCPLegend* self);
int QCPLegend_SelectableParts(const QCPLegend* self);
int QCPLegend_SelectedParts(const QCPLegend* self);
QPen* QCPLegend_SelectedBorderPen(const QCPLegend* self);
QPen* QCPLegend_SelectedIconBorderPen(const QCPLegend* self);
QBrush* QCPLegend_SelectedBrush(const QCPLegend* self);
QFont* QCPLegend_SelectedFont(const QCPLegend* self);
QColor* QCPLegend_SelectedTextColor(const QCPLegend* self);
void QCPLegend_SetBorderPen(QCPLegend* self, const QPen* pen);
void QCPLegend_SetBrush(QCPLegend* self, const QBrush* brush);
void QCPLegend_SetFont(QCPLegend* self, const QFont* font);
void QCPLegend_SetTextColor(QCPLegend* self, const QColor* color);
void QCPLegend_SetIconSize(QCPLegend* self, const QSize* size);
void QCPLegend_SetIconSize2(QCPLegend* self, int width, int height);
void QCPLegend_SetIconTextPadding(QCPLegend* self, int padding);
void QCPLegend_SetIconBorderPen(QCPLegend* self, const QPen* pen);
void QCPLegend_SetSelectableParts(QCPLegend* self, const int* selectableParts);
void QCPLegend_SetSelectedParts(QCPLegend* self, const int* selectedParts);
void QCPLegend_SetSelectedBorderPen(QCPLegend* self, const QPen* pen);
void QCPLegend_SetSelectedIconBorderPen(QCPLegend* self, const QPen* pen);
void QCPLegend_SetSelectedBrush(QCPLegend* self, const QBrush* brush);
void QCPLegend_SetSelectedFont(QCPLegend* self, const QFont* font);
void QCPLegend_SetSelectedTextColor(QCPLegend* self, const QColor* color);
double QCPLegend_SelectTest(const QCPLegend* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPAbstractLegendItem* QCPLegend_Item(const QCPLegend* self, int index);
QCPPlottableLegendItem* QCPLegend_ItemWithPlottable(const QCPLegend* self, const QCPAbstractPlottable* plottable);
int QCPLegend_ItemCount(const QCPLegend* self);
bool QCPLegend_HasItem(const QCPLegend* self, QCPAbstractLegendItem* item);
bool QCPLegend_HasItemWithPlottable(const QCPLegend* self, const QCPAbstractPlottable* plottable);
bool QCPLegend_AddItem(QCPLegend* self, QCPAbstractLegendItem* item);
bool QCPLegend_RemoveItem(QCPLegend* self, int index);
bool QCPLegend_RemoveItem2(QCPLegend* self, QCPAbstractLegendItem* item);
void QCPLegend_ClearItems(QCPLegend* self);
libqt_list /* of QCPAbstractLegendItem* */ QCPLegend_SelectedItems(const QCPLegend* self);
void QCPLegend_SelectionChanged(QCPLegend* self, int parts);
void QCPLegend_Connect_SelectionChanged(QCPLegend* self, intptr_t slot);
void QCPLegend_SelectableChanged(QCPLegend* self, int parts);
void QCPLegend_Connect_SelectableChanged(QCPLegend* self, intptr_t slot);
void QCPLegend_ParentPlotInitialized(QCPLegend* self, QCustomPlot* parentPlot);
int QCPLegend_SelectionCategory(const QCPLegend* self);
void QCPLegend_ApplyDefaultAntialiasingHint(const QCPLegend* self, QCPPainter* painter);
void QCPLegend_Draw(QCPLegend* self, QCPPainter* painter);
void QCPLegend_SelectEvent(QCPLegend* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLegend_DeselectEvent(QCPLegend* self, bool* selectionStateChanged);
libqt_string QCPLegend_Tr2(const char* s, const char* c);
libqt_string QCPLegend_Tr3(const char* s, const char* c, int n);
void QCPLegend_OnMetacall(QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseMetacall(QCPLegend* self, int param1, int param2, void** param3);
void QCPLegend_OnSelectTest(const QCPLegend* self, intptr_t slot);
double QCPLegend_QBaseSelectTest(const QCPLegend* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPLegend_OnParentPlotInitialized(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseParentPlotInitialized(QCPLegend* self, QCustomPlot* parentPlot);
void QCPLegend_OnSelectionCategory(const QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseSelectionCategory(const QCPLegend* self);
void QCPLegend_OnApplyDefaultAntialiasingHint(const QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseApplyDefaultAntialiasingHint(const QCPLegend* self, QCPPainter* painter);
void QCPLegend_OnDraw(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseDraw(QCPLegend* self, QCPPainter* painter);
void QCPLegend_OnSelectEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseSelectEvent(QCPLegend* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPLegend_OnDeselectEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseDeselectEvent(QCPLegend* self, bool* selectionStateChanged);
void QCPLegend_UpdateLayout(QCPLegend* self);
void QCPLegend_OnUpdateLayout(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseUpdateLayout(QCPLegend* self);
int QCPLegend_ElementCount(const QCPLegend* self);
void QCPLegend_OnElementCount(const QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseElementCount(const QCPLegend* self);
QCPLayoutElement* QCPLegend_ElementAt(const QCPLegend* self, int index);
void QCPLegend_OnElementAt(const QCPLegend* self, intptr_t slot);
QCPLayoutElement* QCPLegend_QBaseElementAt(const QCPLegend* self, int index);
QCPLayoutElement* QCPLegend_TakeAt(QCPLegend* self, int index);
void QCPLegend_OnTakeAt(QCPLegend* self, intptr_t slot);
QCPLayoutElement* QCPLegend_QBaseTakeAt(QCPLegend* self, int index);
bool QCPLegend_Take(QCPLegend* self, QCPLayoutElement* element);
void QCPLegend_OnTake(QCPLegend* self, intptr_t slot);
bool QCPLegend_QBaseTake(QCPLegend* self, QCPLayoutElement* element);
libqt_list /* of QCPLayoutElement* */ QCPLegend_Elements(const QCPLegend* self, bool recursive);
void QCPLegend_OnElements(const QCPLegend* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPLegend_QBaseElements(const QCPLegend* self, bool recursive);
void QCPLegend_Simplify(QCPLegend* self);
void QCPLegend_OnSimplify(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseSimplify(QCPLegend* self);
QSize* QCPLegend_MinimumOuterSizeHint(const QCPLegend* self);
void QCPLegend_OnMinimumOuterSizeHint(const QCPLegend* self, intptr_t slot);
QSize* QCPLegend_QBaseMinimumOuterSizeHint(const QCPLegend* self);
QSize* QCPLegend_MaximumOuterSizeHint(const QCPLegend* self);
void QCPLegend_OnMaximumOuterSizeHint(const QCPLegend* self, intptr_t slot);
QSize* QCPLegend_QBaseMaximumOuterSizeHint(const QCPLegend* self);
void QCPLegend_Update(QCPLegend* self, int phase);
void QCPLegend_OnUpdate(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseUpdate(QCPLegend* self, int phase);
int QCPLegend_CalculateAutoMargin(QCPLegend* self, int side);
void QCPLegend_OnCalculateAutoMargin(QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseCalculateAutoMargin(QCPLegend* self, int side);
void QCPLegend_LayoutChanged(QCPLegend* self);
void QCPLegend_OnLayoutChanged(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseLayoutChanged(QCPLegend* self);
QRect* QCPLegend_ClipRect(const QCPLegend* self);
void QCPLegend_OnClipRect(const QCPLegend* self, intptr_t slot);
QRect* QCPLegend_QBaseClipRect(const QCPLegend* self);
void QCPLegend_MousePressEvent(QCPLegend* self, QMouseEvent* event, const QVariant* details);
void QCPLegend_OnMousePressEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseMousePressEvent(QCPLegend* self, QMouseEvent* event, const QVariant* details);
void QCPLegend_MouseMoveEvent(QCPLegend* self, QMouseEvent* event, const QPointF* startPos);
void QCPLegend_OnMouseMoveEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseMouseMoveEvent(QCPLegend* self, QMouseEvent* event, const QPointF* startPos);
void QCPLegend_MouseReleaseEvent(QCPLegend* self, QMouseEvent* event, const QPointF* startPos);
void QCPLegend_OnMouseReleaseEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseMouseReleaseEvent(QCPLegend* self, QMouseEvent* event, const QPointF* startPos);
void QCPLegend_MouseDoubleClickEvent(QCPLegend* self, QMouseEvent* event, const QVariant* details);
void QCPLegend_OnMouseDoubleClickEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseMouseDoubleClickEvent(QCPLegend* self, QMouseEvent* event, const QVariant* details);
void QCPLegend_WheelEvent(QCPLegend* self, QWheelEvent* event);
void QCPLegend_OnWheelEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseWheelEvent(QCPLegend* self, QWheelEvent* event);
bool QCPLegend_Event(QCPLegend* self, QEvent* event);
void QCPLegend_OnEvent(QCPLegend* self, intptr_t slot);
bool QCPLegend_QBaseEvent(QCPLegend* self, QEvent* event);
bool QCPLegend_EventFilter(QCPLegend* self, QObject* watched, QEvent* event);
void QCPLegend_OnEventFilter(QCPLegend* self, intptr_t slot);
bool QCPLegend_QBaseEventFilter(QCPLegend* self, QObject* watched, QEvent* event);
void QCPLegend_TimerEvent(QCPLegend* self, QTimerEvent* event);
void QCPLegend_OnTimerEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseTimerEvent(QCPLegend* self, QTimerEvent* event);
void QCPLegend_ChildEvent(QCPLegend* self, QChildEvent* event);
void QCPLegend_OnChildEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseChildEvent(QCPLegend* self, QChildEvent* event);
void QCPLegend_CustomEvent(QCPLegend* self, QEvent* event);
void QCPLegend_OnCustomEvent(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseCustomEvent(QCPLegend* self, QEvent* event);
void QCPLegend_ConnectNotify(QCPLegend* self, const QMetaMethod* signal);
void QCPLegend_OnConnectNotify(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseConnectNotify(QCPLegend* self, const QMetaMethod* signal);
void QCPLegend_DisconnectNotify(QCPLegend* self, const QMetaMethod* signal);
void QCPLegend_OnDisconnectNotify(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseDisconnectNotify(QCPLegend* self, const QMetaMethod* signal);
QPen* QCPLegend_GetBorderPen(const QCPLegend* self);
void QCPLegend_OnGetBorderPen(const QCPLegend* self, intptr_t slot);
QPen* QCPLegend_QBaseGetBorderPen(const QCPLegend* self);
QBrush* QCPLegend_GetBrush(const QCPLegend* self);
void QCPLegend_OnGetBrush(const QCPLegend* self, intptr_t slot);
QBrush* QCPLegend_QBaseGetBrush(const QCPLegend* self);
void QCPLegend_GetMinimumRowColSizes(const QCPLegend* self, libqt_list /* of int */ minColWidths, libqt_list /* of int */ minRowHeights);
void QCPLegend_OnGetMinimumRowColSizes(const QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseGetMinimumRowColSizes(const QCPLegend* self, libqt_list /* of int */ minColWidths, libqt_list /* of int */ minRowHeights);
void QCPLegend_GetMaximumRowColSizes(const QCPLegend* self, libqt_list /* of int */ maxColWidths, libqt_list /* of int */ maxRowHeights);
void QCPLegend_OnGetMaximumRowColSizes(const QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseGetMaximumRowColSizes(const QCPLegend* self, libqt_list /* of int */ maxColWidths, libqt_list /* of int */ maxRowHeights);
void QCPLegend_SizeConstraintsChanged(const QCPLegend* self);
void QCPLegend_OnSizeConstraintsChanged(const QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseSizeConstraintsChanged(const QCPLegend* self);
void QCPLegend_AdoptElement(QCPLegend* self, QCPLayoutElement* el);
void QCPLegend_OnAdoptElement(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseAdoptElement(QCPLegend* self, QCPLayoutElement* el);
void QCPLegend_ReleaseElement(QCPLegend* self, QCPLayoutElement* el);
void QCPLegend_OnReleaseElement(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseReleaseElement(QCPLegend* self, QCPLayoutElement* el);
libqt_list /* of int */ QCPLegend_GetSectionSizes(const QCPLegend* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLegend_OnGetSectionSizes(const QCPLegend* self, intptr_t slot);
libqt_list /* of int */ QCPLegend_QBaseGetSectionSizes(const QCPLegend* self, libqt_list /* of int */ maxSizes, libqt_list /* of int */ minSizes, libqt_list /* of double */ stretchFactors, int totalSize);
void QCPLegend_InitializeParentPlot(QCPLegend* self, QCustomPlot* parentPlot);
void QCPLegend_OnInitializeParentPlot(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseInitializeParentPlot(QCPLegend* self, QCustomPlot* parentPlot);
void QCPLegend_SetParentLayerable(QCPLegend* self, QCPLayerable* parentLayerable);
void QCPLegend_OnSetParentLayerable(QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseSetParentLayerable(QCPLegend* self, QCPLayerable* parentLayerable);
bool QCPLegend_MoveToLayer(QCPLegend* self, QCPLayer* layer, bool prepend);
void QCPLegend_OnMoveToLayer(QCPLegend* self, intptr_t slot);
bool QCPLegend_QBaseMoveToLayer(QCPLegend* self, QCPLayer* layer, bool prepend);
void QCPLegend_ApplyAntialiasingHint(const QCPLegend* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPLegend_OnApplyAntialiasingHint(const QCPLegend* self, intptr_t slot);
void QCPLegend_QBaseApplyAntialiasingHint(const QCPLegend* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPLegend_Sender(const QCPLegend* self);
void QCPLegend_OnSender(const QCPLegend* self, intptr_t slot);
QObject* QCPLegend_QBaseSender(const QCPLegend* self);
int QCPLegend_SenderSignalIndex(const QCPLegend* self);
void QCPLegend_OnSenderSignalIndex(const QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseSenderSignalIndex(const QCPLegend* self);
int QCPLegend_Receivers(const QCPLegend* self, const char* signal);
void QCPLegend_OnReceivers(const QCPLegend* self, intptr_t slot);
int QCPLegend_QBaseReceivers(const QCPLegend* self, const char* signal);
bool QCPLegend_IsSignalConnected(const QCPLegend* self, const QMetaMethod* signal);
void QCPLegend_OnIsSignalConnected(const QCPLegend* self, intptr_t slot);
bool QCPLegend_QBaseIsSignalConnected(const QCPLegend* self, const QMetaMethod* signal);
void QCPLegend_Delete(QCPLegend* self);

QCPTextElement* QCPTextElement_new(QCustomPlot* parentPlot);
QCPTextElement* QCPTextElement_new2(QCustomPlot* parentPlot, const libqt_string text);
QCPTextElement* QCPTextElement_new3(QCustomPlot* parentPlot, const libqt_string text, double pointSize);
QCPTextElement* QCPTextElement_new4(QCustomPlot* parentPlot, const libqt_string text, const libqt_string fontFamily, double pointSize);
QCPTextElement* QCPTextElement_new5(QCustomPlot* parentPlot, const libqt_string text, const QFont* font);
QMetaObject* QCPTextElement_MetaObject(const QCPTextElement* self);
void* QCPTextElement_Metacast(QCPTextElement* self, const char* param1);
int QCPTextElement_Metacall(QCPTextElement* self, int param1, int param2, void** param3);
libqt_string QCPTextElement_Tr(const char* s);
libqt_string QCPTextElement_Text(const QCPTextElement* self);
int QCPTextElement_TextFlags(const QCPTextElement* self);
QFont* QCPTextElement_Font(const QCPTextElement* self);
QColor* QCPTextElement_TextColor(const QCPTextElement* self);
QFont* QCPTextElement_SelectedFont(const QCPTextElement* self);
QColor* QCPTextElement_SelectedTextColor(const QCPTextElement* self);
bool QCPTextElement_Selectable(const QCPTextElement* self);
bool QCPTextElement_Selected(const QCPTextElement* self);
void QCPTextElement_SetText(QCPTextElement* self, const libqt_string text);
void QCPTextElement_SetTextFlags(QCPTextElement* self, int flags);
void QCPTextElement_SetFont(QCPTextElement* self, const QFont* font);
void QCPTextElement_SetTextColor(QCPTextElement* self, const QColor* color);
void QCPTextElement_SetSelectedFont(QCPTextElement* self, const QFont* font);
void QCPTextElement_SetSelectedTextColor(QCPTextElement* self, const QColor* color);
void QCPTextElement_SetSelectable(QCPTextElement* self, bool selectable);
void QCPTextElement_SetSelected(QCPTextElement* self, bool selected);
double QCPTextElement_SelectTest(const QCPTextElement* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPTextElement_MousePressEvent(QCPTextElement* self, QMouseEvent* event, const QVariant* details);
void QCPTextElement_MouseReleaseEvent(QCPTextElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPTextElement_MouseDoubleClickEvent(QCPTextElement* self, QMouseEvent* event, const QVariant* details);
void QCPTextElement_SelectionChanged(QCPTextElement* self, bool selected);
void QCPTextElement_Connect_SelectionChanged(QCPTextElement* self, intptr_t slot);
void QCPTextElement_SelectableChanged(QCPTextElement* self, bool selectable);
void QCPTextElement_Connect_SelectableChanged(QCPTextElement* self, intptr_t slot);
void QCPTextElement_Clicked(QCPTextElement* self, QMouseEvent* event);
void QCPTextElement_Connect_Clicked(QCPTextElement* self, intptr_t slot);
void QCPTextElement_DoubleClicked(QCPTextElement* self, QMouseEvent* event);
void QCPTextElement_Connect_DoubleClicked(QCPTextElement* self, intptr_t slot);
void QCPTextElement_ApplyDefaultAntialiasingHint(const QCPTextElement* self, QCPPainter* painter);
void QCPTextElement_Draw(QCPTextElement* self, QCPPainter* painter);
QSize* QCPTextElement_MinimumOuterSizeHint(const QCPTextElement* self);
QSize* QCPTextElement_MaximumOuterSizeHint(const QCPTextElement* self);
void QCPTextElement_SelectEvent(QCPTextElement* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPTextElement_DeselectEvent(QCPTextElement* self, bool* selectionStateChanged);
libqt_string QCPTextElement_Tr2(const char* s, const char* c);
libqt_string QCPTextElement_Tr3(const char* s, const char* c, int n);
void QCPTextElement_OnMetacall(QCPTextElement* self, intptr_t slot);
int QCPTextElement_QBaseMetacall(QCPTextElement* self, int param1, int param2, void** param3);
void QCPTextElement_OnSelectTest(const QCPTextElement* self, intptr_t slot);
double QCPTextElement_QBaseSelectTest(const QCPTextElement* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPTextElement_OnMousePressEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseMousePressEvent(QCPTextElement* self, QMouseEvent* event, const QVariant* details);
void QCPTextElement_OnMouseReleaseEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseMouseReleaseEvent(QCPTextElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPTextElement_OnMouseDoubleClickEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseMouseDoubleClickEvent(QCPTextElement* self, QMouseEvent* event, const QVariant* details);
void QCPTextElement_OnApplyDefaultAntialiasingHint(const QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseApplyDefaultAntialiasingHint(const QCPTextElement* self, QCPPainter* painter);
void QCPTextElement_OnDraw(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseDraw(QCPTextElement* self, QCPPainter* painter);
void QCPTextElement_OnMinimumOuterSizeHint(const QCPTextElement* self, intptr_t slot);
QSize* QCPTextElement_QBaseMinimumOuterSizeHint(const QCPTextElement* self);
void QCPTextElement_OnMaximumOuterSizeHint(const QCPTextElement* self, intptr_t slot);
QSize* QCPTextElement_QBaseMaximumOuterSizeHint(const QCPTextElement* self);
void QCPTextElement_OnSelectEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseSelectEvent(QCPTextElement* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPTextElement_OnDeselectEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseDeselectEvent(QCPTextElement* self, bool* selectionStateChanged);
void QCPTextElement_Update(QCPTextElement* self, int phase);
void QCPTextElement_OnUpdate(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseUpdate(QCPTextElement* self, int phase);
libqt_list /* of QCPLayoutElement* */ QCPTextElement_Elements(const QCPTextElement* self, bool recursive);
void QCPTextElement_OnElements(const QCPTextElement* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPTextElement_QBaseElements(const QCPTextElement* self, bool recursive);
int QCPTextElement_CalculateAutoMargin(QCPTextElement* self, int side);
void QCPTextElement_OnCalculateAutoMargin(QCPTextElement* self, intptr_t slot);
int QCPTextElement_QBaseCalculateAutoMargin(QCPTextElement* self, int side);
void QCPTextElement_LayoutChanged(QCPTextElement* self);
void QCPTextElement_OnLayoutChanged(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseLayoutChanged(QCPTextElement* self);
void QCPTextElement_ParentPlotInitialized(QCPTextElement* self, QCustomPlot* parentPlot);
void QCPTextElement_OnParentPlotInitialized(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseParentPlotInitialized(QCPTextElement* self, QCustomPlot* parentPlot);
int QCPTextElement_SelectionCategory(const QCPTextElement* self);
void QCPTextElement_OnSelectionCategory(const QCPTextElement* self, intptr_t slot);
int QCPTextElement_QBaseSelectionCategory(const QCPTextElement* self);
QRect* QCPTextElement_ClipRect(const QCPTextElement* self);
void QCPTextElement_OnClipRect(const QCPTextElement* self, intptr_t slot);
QRect* QCPTextElement_QBaseClipRect(const QCPTextElement* self);
void QCPTextElement_MouseMoveEvent(QCPTextElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPTextElement_OnMouseMoveEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseMouseMoveEvent(QCPTextElement* self, QMouseEvent* event, const QPointF* startPos);
void QCPTextElement_WheelEvent(QCPTextElement* self, QWheelEvent* event);
void QCPTextElement_OnWheelEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseWheelEvent(QCPTextElement* self, QWheelEvent* event);
bool QCPTextElement_Event(QCPTextElement* self, QEvent* event);
void QCPTextElement_OnEvent(QCPTextElement* self, intptr_t slot);
bool QCPTextElement_QBaseEvent(QCPTextElement* self, QEvent* event);
bool QCPTextElement_EventFilter(QCPTextElement* self, QObject* watched, QEvent* event);
void QCPTextElement_OnEventFilter(QCPTextElement* self, intptr_t slot);
bool QCPTextElement_QBaseEventFilter(QCPTextElement* self, QObject* watched, QEvent* event);
void QCPTextElement_TimerEvent(QCPTextElement* self, QTimerEvent* event);
void QCPTextElement_OnTimerEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseTimerEvent(QCPTextElement* self, QTimerEvent* event);
void QCPTextElement_ChildEvent(QCPTextElement* self, QChildEvent* event);
void QCPTextElement_OnChildEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseChildEvent(QCPTextElement* self, QChildEvent* event);
void QCPTextElement_CustomEvent(QCPTextElement* self, QEvent* event);
void QCPTextElement_OnCustomEvent(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseCustomEvent(QCPTextElement* self, QEvent* event);
void QCPTextElement_ConnectNotify(QCPTextElement* self, const QMetaMethod* signal);
void QCPTextElement_OnConnectNotify(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseConnectNotify(QCPTextElement* self, const QMetaMethod* signal);
void QCPTextElement_DisconnectNotify(QCPTextElement* self, const QMetaMethod* signal);
void QCPTextElement_OnDisconnectNotify(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseDisconnectNotify(QCPTextElement* self, const QMetaMethod* signal);
QFont* QCPTextElement_MainFont(const QCPTextElement* self);
void QCPTextElement_OnMainFont(const QCPTextElement* self, intptr_t slot);
QFont* QCPTextElement_QBaseMainFont(const QCPTextElement* self);
QColor* QCPTextElement_MainTextColor(const QCPTextElement* self);
void QCPTextElement_OnMainTextColor(const QCPTextElement* self, intptr_t slot);
QColor* QCPTextElement_QBaseMainTextColor(const QCPTextElement* self);
void QCPTextElement_InitializeParentPlot(QCPTextElement* self, QCustomPlot* parentPlot);
void QCPTextElement_OnInitializeParentPlot(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseInitializeParentPlot(QCPTextElement* self, QCustomPlot* parentPlot);
void QCPTextElement_SetParentLayerable(QCPTextElement* self, QCPLayerable* parentLayerable);
void QCPTextElement_OnSetParentLayerable(QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseSetParentLayerable(QCPTextElement* self, QCPLayerable* parentLayerable);
bool QCPTextElement_MoveToLayer(QCPTextElement* self, QCPLayer* layer, bool prepend);
void QCPTextElement_OnMoveToLayer(QCPTextElement* self, intptr_t slot);
bool QCPTextElement_QBaseMoveToLayer(QCPTextElement* self, QCPLayer* layer, bool prepend);
void QCPTextElement_ApplyAntialiasingHint(const QCPTextElement* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPTextElement_OnApplyAntialiasingHint(const QCPTextElement* self, intptr_t slot);
void QCPTextElement_QBaseApplyAntialiasingHint(const QCPTextElement* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPTextElement_Sender(const QCPTextElement* self);
void QCPTextElement_OnSender(const QCPTextElement* self, intptr_t slot);
QObject* QCPTextElement_QBaseSender(const QCPTextElement* self);
int QCPTextElement_SenderSignalIndex(const QCPTextElement* self);
void QCPTextElement_OnSenderSignalIndex(const QCPTextElement* self, intptr_t slot);
int QCPTextElement_QBaseSenderSignalIndex(const QCPTextElement* self);
int QCPTextElement_Receivers(const QCPTextElement* self, const char* signal);
void QCPTextElement_OnReceivers(const QCPTextElement* self, intptr_t slot);
int QCPTextElement_QBaseReceivers(const QCPTextElement* self, const char* signal);
bool QCPTextElement_IsSignalConnected(const QCPTextElement* self, const QMetaMethod* signal);
void QCPTextElement_OnIsSignalConnected(const QCPTextElement* self, intptr_t slot);
bool QCPTextElement_QBaseIsSignalConnected(const QCPTextElement* self, const QMetaMethod* signal);
void QCPTextElement_Delete(QCPTextElement* self);

QCPColorScale* QCPColorScale_new(QCustomPlot* parentPlot);
QMetaObject* QCPColorScale_MetaObject(const QCPColorScale* self);
void* QCPColorScale_Metacast(QCPColorScale* self, const char* param1);
int QCPColorScale_Metacall(QCPColorScale* self, int param1, int param2, void** param3);
libqt_string QCPColorScale_Tr(const char* s);
QCPAxis* QCPColorScale_Axis(const QCPColorScale* self);
int QCPColorScale_Type(const QCPColorScale* self);
QCPRange* QCPColorScale_DataRange(const QCPColorScale* self);
int QCPColorScale_DataScaleType(const QCPColorScale* self);
QCPColorGradient* QCPColorScale_Gradient(const QCPColorScale* self);
libqt_string QCPColorScale_Label(const QCPColorScale* self);
int QCPColorScale_BarWidth(const QCPColorScale* self);
bool QCPColorScale_RangeDrag(const QCPColorScale* self);
bool QCPColorScale_RangeZoom(const QCPColorScale* self);
void QCPColorScale_SetType(QCPColorScale* self, int typeVal);
void QCPColorScale_SetDataRange(QCPColorScale* self, const QCPRange* dataRange);
void QCPColorScale_SetDataScaleType(QCPColorScale* self, int scaleType);
void QCPColorScale_SetGradient(QCPColorScale* self, const QCPColorGradient* gradient);
void QCPColorScale_SetLabel(QCPColorScale* self, const libqt_string str);
void QCPColorScale_SetBarWidth(QCPColorScale* self, int width);
void QCPColorScale_SetRangeDrag(QCPColorScale* self, bool enabled);
void QCPColorScale_SetRangeZoom(QCPColorScale* self, bool enabled);
libqt_list /* of QCPColorMap* */ QCPColorScale_ColorMaps(const QCPColorScale* self);
void QCPColorScale_RescaleDataRange(QCPColorScale* self, bool onlyVisibleMaps);
void QCPColorScale_Update(QCPColorScale* self, int phase);
void QCPColorScale_DataRangeChanged(QCPColorScale* self, const QCPRange* newRange);
void QCPColorScale_Connect_DataRangeChanged(QCPColorScale* self, intptr_t slot);
void QCPColorScale_DataScaleTypeChanged(QCPColorScale* self, int scaleType);
void QCPColorScale_Connect_DataScaleTypeChanged(QCPColorScale* self, intptr_t slot);
void QCPColorScale_GradientChanged(QCPColorScale* self, const QCPColorGradient* newGradient);
void QCPColorScale_Connect_GradientChanged(QCPColorScale* self, intptr_t slot);
void QCPColorScale_ApplyDefaultAntialiasingHint(const QCPColorScale* self, QCPPainter* painter);
void QCPColorScale_MousePressEvent(QCPColorScale* self, QMouseEvent* event, const QVariant* details);
void QCPColorScale_MouseMoveEvent(QCPColorScale* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorScale_MouseReleaseEvent(QCPColorScale* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorScale_WheelEvent(QCPColorScale* self, QWheelEvent* event);
libqt_string QCPColorScale_Tr2(const char* s, const char* c);
libqt_string QCPColorScale_Tr3(const char* s, const char* c, int n);
void QCPColorScale_OnMetacall(QCPColorScale* self, intptr_t slot);
int QCPColorScale_QBaseMetacall(QCPColorScale* self, int param1, int param2, void** param3);
void QCPColorScale_OnUpdate(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseUpdate(QCPColorScale* self, int phase);
void QCPColorScale_OnApplyDefaultAntialiasingHint(const QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseApplyDefaultAntialiasingHint(const QCPColorScale* self, QCPPainter* painter);
void QCPColorScale_OnMousePressEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseMousePressEvent(QCPColorScale* self, QMouseEvent* event, const QVariant* details);
void QCPColorScale_OnMouseMoveEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseMouseMoveEvent(QCPColorScale* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorScale_OnMouseReleaseEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseMouseReleaseEvent(QCPColorScale* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorScale_OnWheelEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseWheelEvent(QCPColorScale* self, QWheelEvent* event);
QSize* QCPColorScale_MinimumOuterSizeHint(const QCPColorScale* self);
void QCPColorScale_OnMinimumOuterSizeHint(const QCPColorScale* self, intptr_t slot);
QSize* QCPColorScale_QBaseMinimumOuterSizeHint(const QCPColorScale* self);
QSize* QCPColorScale_MaximumOuterSizeHint(const QCPColorScale* self);
void QCPColorScale_OnMaximumOuterSizeHint(const QCPColorScale* self, intptr_t slot);
QSize* QCPColorScale_QBaseMaximumOuterSizeHint(const QCPColorScale* self);
libqt_list /* of QCPLayoutElement* */ QCPColorScale_Elements(const QCPColorScale* self, bool recursive);
void QCPColorScale_OnElements(const QCPColorScale* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPColorScale_QBaseElements(const QCPColorScale* self, bool recursive);
double QCPColorScale_SelectTest(const QCPColorScale* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPColorScale_OnSelectTest(const QCPColorScale* self, intptr_t slot);
double QCPColorScale_QBaseSelectTest(const QCPColorScale* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPColorScale_CalculateAutoMargin(QCPColorScale* self, int side);
void QCPColorScale_OnCalculateAutoMargin(QCPColorScale* self, intptr_t slot);
int QCPColorScale_QBaseCalculateAutoMargin(QCPColorScale* self, int side);
void QCPColorScale_LayoutChanged(QCPColorScale* self);
void QCPColorScale_OnLayoutChanged(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseLayoutChanged(QCPColorScale* self);
void QCPColorScale_Draw(QCPColorScale* self, QCPPainter* painter);
void QCPColorScale_OnDraw(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseDraw(QCPColorScale* self, QCPPainter* painter);
void QCPColorScale_ParentPlotInitialized(QCPColorScale* self, QCustomPlot* parentPlot);
void QCPColorScale_OnParentPlotInitialized(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseParentPlotInitialized(QCPColorScale* self, QCustomPlot* parentPlot);
int QCPColorScale_SelectionCategory(const QCPColorScale* self);
void QCPColorScale_OnSelectionCategory(const QCPColorScale* self, intptr_t slot);
int QCPColorScale_QBaseSelectionCategory(const QCPColorScale* self);
QRect* QCPColorScale_ClipRect(const QCPColorScale* self);
void QCPColorScale_OnClipRect(const QCPColorScale* self, intptr_t slot);
QRect* QCPColorScale_QBaseClipRect(const QCPColorScale* self);
void QCPColorScale_SelectEvent(QCPColorScale* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPColorScale_OnSelectEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseSelectEvent(QCPColorScale* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPColorScale_DeselectEvent(QCPColorScale* self, bool* selectionStateChanged);
void QCPColorScale_OnDeselectEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseDeselectEvent(QCPColorScale* self, bool* selectionStateChanged);
void QCPColorScale_MouseDoubleClickEvent(QCPColorScale* self, QMouseEvent* event, const QVariant* details);
void QCPColorScale_OnMouseDoubleClickEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseMouseDoubleClickEvent(QCPColorScale* self, QMouseEvent* event, const QVariant* details);
bool QCPColorScale_Event(QCPColorScale* self, QEvent* event);
void QCPColorScale_OnEvent(QCPColorScale* self, intptr_t slot);
bool QCPColorScale_QBaseEvent(QCPColorScale* self, QEvent* event);
bool QCPColorScale_EventFilter(QCPColorScale* self, QObject* watched, QEvent* event);
void QCPColorScale_OnEventFilter(QCPColorScale* self, intptr_t slot);
bool QCPColorScale_QBaseEventFilter(QCPColorScale* self, QObject* watched, QEvent* event);
void QCPColorScale_TimerEvent(QCPColorScale* self, QTimerEvent* event);
void QCPColorScale_OnTimerEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseTimerEvent(QCPColorScale* self, QTimerEvent* event);
void QCPColorScale_ChildEvent(QCPColorScale* self, QChildEvent* event);
void QCPColorScale_OnChildEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseChildEvent(QCPColorScale* self, QChildEvent* event);
void QCPColorScale_CustomEvent(QCPColorScale* self, QEvent* event);
void QCPColorScale_OnCustomEvent(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseCustomEvent(QCPColorScale* self, QEvent* event);
void QCPColorScale_ConnectNotify(QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_OnConnectNotify(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseConnectNotify(QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_DisconnectNotify(QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_OnDisconnectNotify(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseDisconnectNotify(QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_InitializeParentPlot(QCPColorScale* self, QCustomPlot* parentPlot);
void QCPColorScale_OnInitializeParentPlot(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseInitializeParentPlot(QCPColorScale* self, QCustomPlot* parentPlot);
void QCPColorScale_SetParentLayerable(QCPColorScale* self, QCPLayerable* parentLayerable);
void QCPColorScale_OnSetParentLayerable(QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseSetParentLayerable(QCPColorScale* self, QCPLayerable* parentLayerable);
bool QCPColorScale_MoveToLayer(QCPColorScale* self, QCPLayer* layer, bool prepend);
void QCPColorScale_OnMoveToLayer(QCPColorScale* self, intptr_t slot);
bool QCPColorScale_QBaseMoveToLayer(QCPColorScale* self, QCPLayer* layer, bool prepend);
void QCPColorScale_ApplyAntialiasingHint(const QCPColorScale* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPColorScale_OnApplyAntialiasingHint(const QCPColorScale* self, intptr_t slot);
void QCPColorScale_QBaseApplyAntialiasingHint(const QCPColorScale* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPColorScale_Sender(const QCPColorScale* self);
void QCPColorScale_OnSender(const QCPColorScale* self, intptr_t slot);
QObject* QCPColorScale_QBaseSender(const QCPColorScale* self);
int QCPColorScale_SenderSignalIndex(const QCPColorScale* self);
void QCPColorScale_OnSenderSignalIndex(const QCPColorScale* self, intptr_t slot);
int QCPColorScale_QBaseSenderSignalIndex(const QCPColorScale* self);
int QCPColorScale_Receivers(const QCPColorScale* self, const char* signal);
void QCPColorScale_OnReceivers(const QCPColorScale* self, intptr_t slot);
int QCPColorScale_QBaseReceivers(const QCPColorScale* self, const char* signal);
bool QCPColorScale_IsSignalConnected(const QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_OnIsSignalConnected(const QCPColorScale* self, intptr_t slot);
bool QCPColorScale_QBaseIsSignalConnected(const QCPColorScale* self, const QMetaMethod* signal);
void QCPColorScale_Delete(QCPColorScale* self);

QCPGraphData* QCPGraphData_new(const QCPGraphData* other);
QCPGraphData* QCPGraphData_new2(QCPGraphData* other);
QCPGraphData* QCPGraphData_new3();
QCPGraphData* QCPGraphData_new4(double key, double value);
QCPGraphData* QCPGraphData_new5(const QCPGraphData* param1);
void QCPGraphData_CopyAssign(QCPGraphData* self, QCPGraphData* other);
void QCPGraphData_MoveAssign(QCPGraphData* self, QCPGraphData* other);
double QCPGraphData_SortKey(const QCPGraphData* self);
QCPGraphData* QCPGraphData_FromSortKey(double sortKey);
bool QCPGraphData_SortKeyIsMainKey();
double QCPGraphData_MainKey(const QCPGraphData* self);
double QCPGraphData_MainValue(const QCPGraphData* self);
QCPRange* QCPGraphData_ValueRange(const QCPGraphData* self);
double QCPGraphData_Key(const QCPGraphData* self);
void QCPGraphData_SetKey(QCPGraphData* self, double key);
double QCPGraphData_Value(const QCPGraphData* self);
void QCPGraphData_SetValue(QCPGraphData* self, double value);
void QCPGraphData_Delete(QCPGraphData* self);

QCPGraph* QCPGraph_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPGraph_MetaObject(const QCPGraph* self);
void* QCPGraph_Metacast(QCPGraph* self, const char* param1);
int QCPGraph_Metacall(QCPGraph* self, int param1, int param2, void** param3);
libqt_string QCPGraph_Tr(const char* s);
int QCPGraph_LineStyle(const QCPGraph* self);
QCPScatterStyle* QCPGraph_ScatterStyle(const QCPGraph* self);
int QCPGraph_ScatterSkip(const QCPGraph* self);
QCPGraph* QCPGraph_ChannelFillGraph(const QCPGraph* self);
bool QCPGraph_AdaptiveSampling(const QCPGraph* self);
void QCPGraph_SetData2(QCPGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPGraph_SetLineStyle(QCPGraph* self, int ls);
void QCPGraph_SetScatterStyle(QCPGraph* self, const QCPScatterStyle* style);
void QCPGraph_SetScatterSkip(QCPGraph* self, int skip);
void QCPGraph_SetChannelFillGraph(QCPGraph* self, QCPGraph* targetGraph);
void QCPGraph_SetAdaptiveSampling(QCPGraph* self, bool enabled);
void QCPGraph_AddData(QCPGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPGraph_AddData2(QCPGraph* self, double key, double value);
double QCPGraph_SelectTest(const QCPGraph* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPGraph_GetKeyRange(const QCPGraph* self, bool* foundRange, int inSignDomain);
QCPRange* QCPGraph_GetValueRange(const QCPGraph* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPGraph_Draw(QCPGraph* self, QCPPainter* painter);
void QCPGraph_DrawLegendIcon(const QCPGraph* self, QCPPainter* painter, const QRectF* rect);
void QCPGraph_DrawFill(const QCPGraph* self, QCPPainter* painter, libqt_list /* of QPointF* */ lines);
void QCPGraph_DrawScatterPlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ scatters, const QCPScatterStyle* style);
void QCPGraph_DrawLinePlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPGraph_DrawImpulsePlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
libqt_string QCPGraph_Tr2(const char* s, const char* c);
libqt_string QCPGraph_Tr3(const char* s, const char* c, int n);
void QCPGraph_SetData3(QCPGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPGraph_AddData3(QCPGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPGraph_OnMetacall(QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseMetacall(QCPGraph* self, int param1, int param2, void** param3);
void QCPGraph_OnSelectTest(const QCPGraph* self, intptr_t slot);
double QCPGraph_QBaseSelectTest(const QCPGraph* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPGraph_OnGetKeyRange(const QCPGraph* self, intptr_t slot);
QCPRange* QCPGraph_QBaseGetKeyRange(const QCPGraph* self, bool* foundRange, int inSignDomain);
void QCPGraph_OnGetValueRange(const QCPGraph* self, intptr_t slot);
QCPRange* QCPGraph_QBaseGetValueRange(const QCPGraph* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPGraph_OnDraw(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDraw(QCPGraph* self, QCPPainter* painter);
void QCPGraph_OnDrawLegendIcon(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDrawLegendIcon(const QCPGraph* self, QCPPainter* painter, const QRectF* rect);
void QCPGraph_OnDrawFill(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDrawFill(const QCPGraph* self, QCPPainter* painter, libqt_list /* of QPointF* */ lines);
void QCPGraph_OnDrawScatterPlot(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDrawScatterPlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ scatters, const QCPScatterStyle* style);
void QCPGraph_OnDrawLinePlot(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDrawLinePlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPGraph_OnDrawImpulsePlot(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDrawImpulsePlot(const QCPGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
int QCPGraph_DataCount(const QCPGraph* self);
void QCPGraph_OnDataCount(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseDataCount(const QCPGraph* self);
double QCPGraph_DataMainKey(const QCPGraph* self, int index);
void QCPGraph_OnDataMainKey(const QCPGraph* self, intptr_t slot);
double QCPGraph_QBaseDataMainKey(const QCPGraph* self, int index);
double QCPGraph_DataSortKey(const QCPGraph* self, int index);
void QCPGraph_OnDataSortKey(const QCPGraph* self, intptr_t slot);
double QCPGraph_QBaseDataSortKey(const QCPGraph* self, int index);
double QCPGraph_DataMainValue(const QCPGraph* self, int index);
void QCPGraph_OnDataMainValue(const QCPGraph* self, intptr_t slot);
double QCPGraph_QBaseDataMainValue(const QCPGraph* self, int index);
QCPRange* QCPGraph_DataValueRange(const QCPGraph* self, int index);
void QCPGraph_OnDataValueRange(const QCPGraph* self, intptr_t slot);
QCPRange* QCPGraph_QBaseDataValueRange(const QCPGraph* self, int index);
QPointF* QCPGraph_DataPixelPosition(const QCPGraph* self, int index);
void QCPGraph_OnDataPixelPosition(const QCPGraph* self, intptr_t slot);
QPointF* QCPGraph_QBaseDataPixelPosition(const QCPGraph* self, int index);
bool QCPGraph_SortKeyIsMainKey(const QCPGraph* self);
void QCPGraph_OnSortKeyIsMainKey(const QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseSortKeyIsMainKey(const QCPGraph* self);
QCPDataSelection* QCPGraph_SelectTestRect(const QCPGraph* self, const QRectF* rect, bool onlySelectable);
void QCPGraph_OnSelectTestRect(const QCPGraph* self, intptr_t slot);
QCPDataSelection* QCPGraph_QBaseSelectTestRect(const QCPGraph* self, const QRectF* rect, bool onlySelectable);
int QCPGraph_FindBegin(const QCPGraph* self, double sortKey, bool expandedRange);
void QCPGraph_OnFindBegin(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindBegin(const QCPGraph* self, double sortKey, bool expandedRange);
int QCPGraph_FindEnd(const QCPGraph* self, double sortKey, bool expandedRange);
void QCPGraph_OnFindEnd(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindEnd(const QCPGraph* self, double sortKey, bool expandedRange);
QCPPlottableInterface1D* QCPGraph_Interface1D(QCPGraph* self);
void QCPGraph_OnInterface1D(QCPGraph* self, intptr_t slot);
QCPPlottableInterface1D* QCPGraph_QBaseInterface1D(QCPGraph* self);
QRect* QCPGraph_ClipRect(const QCPGraph* self);
void QCPGraph_OnClipRect(const QCPGraph* self, intptr_t slot);
QRect* QCPGraph_QBaseClipRect(const QCPGraph* self);
int QCPGraph_SelectionCategory(const QCPGraph* self);
void QCPGraph_OnSelectionCategory(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseSelectionCategory(const QCPGraph* self);
void QCPGraph_ApplyDefaultAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_OnApplyDefaultAntialiasingHint(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseApplyDefaultAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_SelectEvent(QCPGraph* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPGraph_OnSelectEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseSelectEvent(QCPGraph* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPGraph_DeselectEvent(QCPGraph* self, bool* selectionStateChanged);
void QCPGraph_OnDeselectEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDeselectEvent(QCPGraph* self, bool* selectionStateChanged);
void QCPGraph_ParentPlotInitialized(QCPGraph* self, QCustomPlot* parentPlot);
void QCPGraph_OnParentPlotInitialized(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseParentPlotInitialized(QCPGraph* self, QCustomPlot* parentPlot);
void QCPGraph_MousePressEvent(QCPGraph* self, QMouseEvent* event, const QVariant* details);
void QCPGraph_OnMousePressEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseMousePressEvent(QCPGraph* self, QMouseEvent* event, const QVariant* details);
void QCPGraph_MouseMoveEvent(QCPGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPGraph_OnMouseMoveEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseMouseMoveEvent(QCPGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPGraph_MouseReleaseEvent(QCPGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPGraph_OnMouseReleaseEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseMouseReleaseEvent(QCPGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPGraph_MouseDoubleClickEvent(QCPGraph* self, QMouseEvent* event, const QVariant* details);
void QCPGraph_OnMouseDoubleClickEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseMouseDoubleClickEvent(QCPGraph* self, QMouseEvent* event, const QVariant* details);
void QCPGraph_WheelEvent(QCPGraph* self, QWheelEvent* event);
void QCPGraph_OnWheelEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseWheelEvent(QCPGraph* self, QWheelEvent* event);
bool QCPGraph_Event(QCPGraph* self, QEvent* event);
void QCPGraph_OnEvent(QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseEvent(QCPGraph* self, QEvent* event);
bool QCPGraph_EventFilter(QCPGraph* self, QObject* watched, QEvent* event);
void QCPGraph_OnEventFilter(QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseEventFilter(QCPGraph* self, QObject* watched, QEvent* event);
void QCPGraph_TimerEvent(QCPGraph* self, QTimerEvent* event);
void QCPGraph_OnTimerEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseTimerEvent(QCPGraph* self, QTimerEvent* event);
void QCPGraph_ChildEvent(QCPGraph* self, QChildEvent* event);
void QCPGraph_OnChildEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseChildEvent(QCPGraph* self, QChildEvent* event);
void QCPGraph_CustomEvent(QCPGraph* self, QEvent* event);
void QCPGraph_OnCustomEvent(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseCustomEvent(QCPGraph* self, QEvent* event);
void QCPGraph_ConnectNotify(QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_OnConnectNotify(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseConnectNotify(QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_DisconnectNotify(QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_OnDisconnectNotify(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseDisconnectNotify(QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_GetLines(const QCPGraph* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange);
void QCPGraph_OnGetLines(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseGetLines(const QCPGraph* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange);
void QCPGraph_GetScatters(const QCPGraph* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange);
void QCPGraph_OnGetScatters(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseGetScatters(const QCPGraph* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange);
libqt_list /* of QPointF* */ QCPGraph_DataToLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPGraph_OnDataToLines(const QCPGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPGraph_QBaseDataToLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
libqt_list /* of QPointF* */ QCPGraph_DataToStepLeftLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPGraph_OnDataToStepLeftLines(const QCPGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPGraph_QBaseDataToStepLeftLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
libqt_list /* of QPointF* */ QCPGraph_DataToStepRightLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPGraph_OnDataToStepRightLines(const QCPGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPGraph_QBaseDataToStepRightLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
libqt_list /* of QPointF* */ QCPGraph_DataToStepCenterLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPGraph_OnDataToStepCenterLines(const QCPGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPGraph_QBaseDataToStepCenterLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
libqt_list /* of QPointF* */ QCPGraph_DataToImpulseLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPGraph_OnDataToImpulseLines(const QCPGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPGraph_QBaseDataToImpulseLines(const QCPGraph* self, const libqt_list /* of QCPGraphData* */ data);
libqt_list /* of QCPDataRange* */ QCPGraph_GetNonNanSegments(const QCPGraph* self, const libqt_list /* of QPointF* */ lineData, int keyOrientation);
void QCPGraph_OnGetNonNanSegments(const QCPGraph* self, intptr_t slot);
libqt_list /* of QCPDataRange* */ QCPGraph_QBaseGetNonNanSegments(const QCPGraph* self, const libqt_list /* of QPointF* */ lineData, int keyOrientation);
libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ QCPGraph_GetOverlappingSegments(const QCPGraph* self, libqt_list /* of QCPDataRange* */ thisSegments, const libqt_list /* of QPointF* */ thisData, libqt_list /* of QCPDataRange* */ otherSegments, const libqt_list /* of QPointF* */ otherData);
void QCPGraph_OnGetOverlappingSegments(const QCPGraph* self, intptr_t slot);
libqt_list /* of libqt_pair  tuple of QCPDataRange* and QCPDataRange*  */ QCPGraph_QBaseGetOverlappingSegments(const QCPGraph* self, libqt_list /* of QCPDataRange* */ thisSegments, const libqt_list /* of QPointF* */ thisData, libqt_list /* of QCPDataRange* */ otherSegments, const libqt_list /* of QPointF* */ otherData);
bool QCPGraph_SegmentsIntersect(const QCPGraph* self, double aLower, double aUpper, double bLower, double bUpper, int* bPrecedence);
void QCPGraph_OnSegmentsIntersect(const QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseSegmentsIntersect(const QCPGraph* self, double aLower, double aUpper, double bLower, double bUpper, int* bPrecedence);
QPointF* QCPGraph_GetFillBasePoint(const QCPGraph* self, QPointF* matchingDataPoint);
void QCPGraph_OnGetFillBasePoint(const QCPGraph* self, intptr_t slot);
QPointF* QCPGraph_QBaseGetFillBasePoint(const QCPGraph* self, QPointF* matchingDataPoint);
int QCPGraph_FindIndexBelowX(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double x);
void QCPGraph_OnFindIndexBelowX(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindIndexBelowX(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double x);
int QCPGraph_FindIndexAboveX(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double x);
void QCPGraph_OnFindIndexAboveX(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindIndexAboveX(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double x);
int QCPGraph_FindIndexBelowY(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double y);
void QCPGraph_OnFindIndexBelowY(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindIndexBelowY(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double y);
int QCPGraph_FindIndexAboveY(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double y);
void QCPGraph_OnFindIndexAboveY(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseFindIndexAboveY(const QCPGraph* self, const libqt_list /* of QPointF* */ data, double y);
void QCPGraph_ApplyFillAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_OnApplyFillAntialiasingHint(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseApplyFillAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_ApplyScattersAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_OnApplyScattersAntialiasingHint(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseApplyScattersAntialiasingHint(const QCPGraph* self, QCPPainter* painter);
void QCPGraph_InitializeParentPlot(QCPGraph* self, QCustomPlot* parentPlot);
void QCPGraph_OnInitializeParentPlot(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseInitializeParentPlot(QCPGraph* self, QCustomPlot* parentPlot);
void QCPGraph_SetParentLayerable(QCPGraph* self, QCPLayerable* parentLayerable);
void QCPGraph_OnSetParentLayerable(QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseSetParentLayerable(QCPGraph* self, QCPLayerable* parentLayerable);
bool QCPGraph_MoveToLayer(QCPGraph* self, QCPLayer* layer, bool prepend);
void QCPGraph_OnMoveToLayer(QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseMoveToLayer(QCPGraph* self, QCPLayer* layer, bool prepend);
void QCPGraph_ApplyAntialiasingHint(const QCPGraph* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPGraph_OnApplyAntialiasingHint(const QCPGraph* self, intptr_t slot);
void QCPGraph_QBaseApplyAntialiasingHint(const QCPGraph* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPGraph_Sender(const QCPGraph* self);
void QCPGraph_OnSender(const QCPGraph* self, intptr_t slot);
QObject* QCPGraph_QBaseSender(const QCPGraph* self);
int QCPGraph_SenderSignalIndex(const QCPGraph* self);
void QCPGraph_OnSenderSignalIndex(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseSenderSignalIndex(const QCPGraph* self);
int QCPGraph_Receivers(const QCPGraph* self, const char* signal);
void QCPGraph_OnReceivers(const QCPGraph* self, intptr_t slot);
int QCPGraph_QBaseReceivers(const QCPGraph* self, const char* signal);
bool QCPGraph_IsSignalConnected(const QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_OnIsSignalConnected(const QCPGraph* self, intptr_t slot);
bool QCPGraph_QBaseIsSignalConnected(const QCPGraph* self, const QMetaMethod* signal);
void QCPGraph_Delete(QCPGraph* self);

QCPCurveData* QCPCurveData_new(const QCPCurveData* other);
QCPCurveData* QCPCurveData_new2(QCPCurveData* other);
QCPCurveData* QCPCurveData_new3();
QCPCurveData* QCPCurveData_new4(double t, double key, double value);
QCPCurveData* QCPCurveData_new5(const QCPCurveData* param1);
void QCPCurveData_CopyAssign(QCPCurveData* self, QCPCurveData* other);
void QCPCurveData_MoveAssign(QCPCurveData* self, QCPCurveData* other);
double QCPCurveData_SortKey(const QCPCurveData* self);
QCPCurveData* QCPCurveData_FromSortKey(double sortKey);
bool QCPCurveData_SortKeyIsMainKey();
double QCPCurveData_MainKey(const QCPCurveData* self);
double QCPCurveData_MainValue(const QCPCurveData* self);
QCPRange* QCPCurveData_ValueRange(const QCPCurveData* self);
double QCPCurveData_T(const QCPCurveData* self);
void QCPCurveData_SetT(QCPCurveData* self, double t);
double QCPCurveData_Key(const QCPCurveData* self);
void QCPCurveData_SetKey(QCPCurveData* self, double key);
double QCPCurveData_Value(const QCPCurveData* self);
void QCPCurveData_SetValue(QCPCurveData* self, double value);
void QCPCurveData_Delete(QCPCurveData* self);

QCPCurve* QCPCurve_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPCurve_MetaObject(const QCPCurve* self);
void* QCPCurve_Metacast(QCPCurve* self, const char* param1);
int QCPCurve_Metacall(QCPCurve* self, int param1, int param2, void** param3);
libqt_string QCPCurve_Tr(const char* s);
QCPScatterStyle* QCPCurve_ScatterStyle(const QCPCurve* self);
int QCPCurve_ScatterSkip(const QCPCurve* self);
int QCPCurve_LineStyle(const QCPCurve* self);
void QCPCurve_SetData2(QCPCurve* self, const libqt_list /* of double */ t, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPCurve_SetData3(QCPCurve* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPCurve_SetScatterStyle(QCPCurve* self, const QCPScatterStyle* style);
void QCPCurve_SetScatterSkip(QCPCurve* self, int skip);
void QCPCurve_SetLineStyle(QCPCurve* self, int style);
void QCPCurve_AddData(QCPCurve* self, const libqt_list /* of double */ t, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPCurve_AddData2(QCPCurve* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPCurve_AddData3(QCPCurve* self, double t, double key, double value);
void QCPCurve_AddData4(QCPCurve* self, double key, double value);
double QCPCurve_SelectTest(const QCPCurve* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPCurve_GetKeyRange(const QCPCurve* self, bool* foundRange, int inSignDomain);
QCPRange* QCPCurve_GetValueRange(const QCPCurve* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPCurve_Draw(QCPCurve* self, QCPPainter* painter);
void QCPCurve_DrawLegendIcon(const QCPCurve* self, QCPPainter* painter, const QRectF* rect);
void QCPCurve_DrawCurveLine(const QCPCurve* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPCurve_DrawScatterPlot(const QCPCurve* self, QCPPainter* painter, const libqt_list /* of QPointF* */ points, const QCPScatterStyle* style);
libqt_string QCPCurve_Tr2(const char* s, const char* c);
libqt_string QCPCurve_Tr3(const char* s, const char* c, int n);
void QCPCurve_SetData4(QCPCurve* self, const libqt_list /* of double */ t, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPCurve_AddData42(QCPCurve* self, const libqt_list /* of double */ t, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPCurve_OnMetacall(QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseMetacall(QCPCurve* self, int param1, int param2, void** param3);
void QCPCurve_OnSelectTest(const QCPCurve* self, intptr_t slot);
double QCPCurve_QBaseSelectTest(const QCPCurve* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPCurve_OnGetKeyRange(const QCPCurve* self, intptr_t slot);
QCPRange* QCPCurve_QBaseGetKeyRange(const QCPCurve* self, bool* foundRange, int inSignDomain);
void QCPCurve_OnGetValueRange(const QCPCurve* self, intptr_t slot);
QCPRange* QCPCurve_QBaseGetValueRange(const QCPCurve* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPCurve_OnDraw(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDraw(QCPCurve* self, QCPPainter* painter);
void QCPCurve_OnDrawLegendIcon(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDrawLegendIcon(const QCPCurve* self, QCPPainter* painter, const QRectF* rect);
void QCPCurve_OnDrawCurveLine(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDrawCurveLine(const QCPCurve* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPCurve_OnDrawScatterPlot(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDrawScatterPlot(const QCPCurve* self, QCPPainter* painter, const libqt_list /* of QPointF* */ points, const QCPScatterStyle* style);
int QCPCurve_DataCount(const QCPCurve* self);
void QCPCurve_OnDataCount(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseDataCount(const QCPCurve* self);
double QCPCurve_DataMainKey(const QCPCurve* self, int index);
void QCPCurve_OnDataMainKey(const QCPCurve* self, intptr_t slot);
double QCPCurve_QBaseDataMainKey(const QCPCurve* self, int index);
double QCPCurve_DataSortKey(const QCPCurve* self, int index);
void QCPCurve_OnDataSortKey(const QCPCurve* self, intptr_t slot);
double QCPCurve_QBaseDataSortKey(const QCPCurve* self, int index);
double QCPCurve_DataMainValue(const QCPCurve* self, int index);
void QCPCurve_OnDataMainValue(const QCPCurve* self, intptr_t slot);
double QCPCurve_QBaseDataMainValue(const QCPCurve* self, int index);
QCPRange* QCPCurve_DataValueRange(const QCPCurve* self, int index);
void QCPCurve_OnDataValueRange(const QCPCurve* self, intptr_t slot);
QCPRange* QCPCurve_QBaseDataValueRange(const QCPCurve* self, int index);
QPointF* QCPCurve_DataPixelPosition(const QCPCurve* self, int index);
void QCPCurve_OnDataPixelPosition(const QCPCurve* self, intptr_t slot);
QPointF* QCPCurve_QBaseDataPixelPosition(const QCPCurve* self, int index);
bool QCPCurve_SortKeyIsMainKey(const QCPCurve* self);
void QCPCurve_OnSortKeyIsMainKey(const QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseSortKeyIsMainKey(const QCPCurve* self);
QCPDataSelection* QCPCurve_SelectTestRect(const QCPCurve* self, const QRectF* rect, bool onlySelectable);
void QCPCurve_OnSelectTestRect(const QCPCurve* self, intptr_t slot);
QCPDataSelection* QCPCurve_QBaseSelectTestRect(const QCPCurve* self, const QRectF* rect, bool onlySelectable);
int QCPCurve_FindBegin(const QCPCurve* self, double sortKey, bool expandedRange);
void QCPCurve_OnFindBegin(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseFindBegin(const QCPCurve* self, double sortKey, bool expandedRange);
int QCPCurve_FindEnd(const QCPCurve* self, double sortKey, bool expandedRange);
void QCPCurve_OnFindEnd(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseFindEnd(const QCPCurve* self, double sortKey, bool expandedRange);
QCPPlottableInterface1D* QCPCurve_Interface1D(QCPCurve* self);
void QCPCurve_OnInterface1D(QCPCurve* self, intptr_t slot);
QCPPlottableInterface1D* QCPCurve_QBaseInterface1D(QCPCurve* self);
QRect* QCPCurve_ClipRect(const QCPCurve* self);
void QCPCurve_OnClipRect(const QCPCurve* self, intptr_t slot);
QRect* QCPCurve_QBaseClipRect(const QCPCurve* self);
int QCPCurve_SelectionCategory(const QCPCurve* self);
void QCPCurve_OnSelectionCategory(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseSelectionCategory(const QCPCurve* self);
void QCPCurve_ApplyDefaultAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_OnApplyDefaultAntialiasingHint(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseApplyDefaultAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_SelectEvent(QCPCurve* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPCurve_OnSelectEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseSelectEvent(QCPCurve* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPCurve_DeselectEvent(QCPCurve* self, bool* selectionStateChanged);
void QCPCurve_OnDeselectEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDeselectEvent(QCPCurve* self, bool* selectionStateChanged);
void QCPCurve_ParentPlotInitialized(QCPCurve* self, QCustomPlot* parentPlot);
void QCPCurve_OnParentPlotInitialized(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseParentPlotInitialized(QCPCurve* self, QCustomPlot* parentPlot);
void QCPCurve_MousePressEvent(QCPCurve* self, QMouseEvent* event, const QVariant* details);
void QCPCurve_OnMousePressEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseMousePressEvent(QCPCurve* self, QMouseEvent* event, const QVariant* details);
void QCPCurve_MouseMoveEvent(QCPCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPCurve_OnMouseMoveEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseMouseMoveEvent(QCPCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPCurve_MouseReleaseEvent(QCPCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPCurve_OnMouseReleaseEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseMouseReleaseEvent(QCPCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPCurve_MouseDoubleClickEvent(QCPCurve* self, QMouseEvent* event, const QVariant* details);
void QCPCurve_OnMouseDoubleClickEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseMouseDoubleClickEvent(QCPCurve* self, QMouseEvent* event, const QVariant* details);
void QCPCurve_WheelEvent(QCPCurve* self, QWheelEvent* event);
void QCPCurve_OnWheelEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseWheelEvent(QCPCurve* self, QWheelEvent* event);
bool QCPCurve_Event(QCPCurve* self, QEvent* event);
void QCPCurve_OnEvent(QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseEvent(QCPCurve* self, QEvent* event);
bool QCPCurve_EventFilter(QCPCurve* self, QObject* watched, QEvent* event);
void QCPCurve_OnEventFilter(QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseEventFilter(QCPCurve* self, QObject* watched, QEvent* event);
void QCPCurve_TimerEvent(QCPCurve* self, QTimerEvent* event);
void QCPCurve_OnTimerEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseTimerEvent(QCPCurve* self, QTimerEvent* event);
void QCPCurve_ChildEvent(QCPCurve* self, QChildEvent* event);
void QCPCurve_OnChildEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseChildEvent(QCPCurve* self, QChildEvent* event);
void QCPCurve_CustomEvent(QCPCurve* self, QEvent* event);
void QCPCurve_OnCustomEvent(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseCustomEvent(QCPCurve* self, QEvent* event);
void QCPCurve_ConnectNotify(QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_OnConnectNotify(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseConnectNotify(QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_DisconnectNotify(QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_OnDisconnectNotify(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseDisconnectNotify(QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_GetCurveLines(const QCPCurve* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange, double penWidth);
void QCPCurve_OnGetCurveLines(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseGetCurveLines(const QCPCurve* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange, double penWidth);
void QCPCurve_GetScatters(const QCPCurve* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange, double scatterWidth);
void QCPCurve_OnGetScatters(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseGetScatters(const QCPCurve* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange, double scatterWidth);
int QCPCurve_GetRegion(const QCPCurve* self, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
void QCPCurve_OnGetRegion(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseGetRegion(const QCPCurve* self, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
QPointF* QCPCurve_GetOptimizedPoint(const QCPCurve* self, int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
void QCPCurve_OnGetOptimizedPoint(const QCPCurve* self, intptr_t slot);
QPointF* QCPCurve_QBaseGetOptimizedPoint(const QCPCurve* self, int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
libqt_list /* of QPointF* */ QCPCurve_GetOptimizedCornerPoints(const QCPCurve* self, int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
void QCPCurve_OnGetOptimizedCornerPoints(const QCPCurve* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPCurve_QBaseGetOptimizedCornerPoints(const QCPCurve* self, int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin);
bool QCPCurve_MayTraverse(const QCPCurve* self, int prevRegion, int currentRegion);
void QCPCurve_OnMayTraverse(const QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseMayTraverse(const QCPCurve* self, int prevRegion, int currentRegion);
bool QCPCurve_GetTraverse(const QCPCurve* self, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF* crossA, QPointF* crossB);
void QCPCurve_OnGetTraverse(const QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseGetTraverse(const QCPCurve* self, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF* crossA, QPointF* crossB);
void QCPCurve_GetTraverseCornerPoints(const QCPCurve* self, int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, libqt_list /* of QPointF* */ beforeTraverse, libqt_list /* of QPointF* */ afterTraverse);
void QCPCurve_OnGetTraverseCornerPoints(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseGetTraverseCornerPoints(const QCPCurve* self, int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, libqt_list /* of QPointF* */ beforeTraverse, libqt_list /* of QPointF* */ afterTraverse);
void QCPCurve_ApplyFillAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_OnApplyFillAntialiasingHint(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseApplyFillAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_ApplyScattersAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_OnApplyScattersAntialiasingHint(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseApplyScattersAntialiasingHint(const QCPCurve* self, QCPPainter* painter);
void QCPCurve_InitializeParentPlot(QCPCurve* self, QCustomPlot* parentPlot);
void QCPCurve_OnInitializeParentPlot(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseInitializeParentPlot(QCPCurve* self, QCustomPlot* parentPlot);
void QCPCurve_SetParentLayerable(QCPCurve* self, QCPLayerable* parentLayerable);
void QCPCurve_OnSetParentLayerable(QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseSetParentLayerable(QCPCurve* self, QCPLayerable* parentLayerable);
bool QCPCurve_MoveToLayer(QCPCurve* self, QCPLayer* layer, bool prepend);
void QCPCurve_OnMoveToLayer(QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseMoveToLayer(QCPCurve* self, QCPLayer* layer, bool prepend);
void QCPCurve_ApplyAntialiasingHint(const QCPCurve* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPCurve_OnApplyAntialiasingHint(const QCPCurve* self, intptr_t slot);
void QCPCurve_QBaseApplyAntialiasingHint(const QCPCurve* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPCurve_Sender(const QCPCurve* self);
void QCPCurve_OnSender(const QCPCurve* self, intptr_t slot);
QObject* QCPCurve_QBaseSender(const QCPCurve* self);
int QCPCurve_SenderSignalIndex(const QCPCurve* self);
void QCPCurve_OnSenderSignalIndex(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseSenderSignalIndex(const QCPCurve* self);
int QCPCurve_Receivers(const QCPCurve* self, const char* signal);
void QCPCurve_OnReceivers(const QCPCurve* self, intptr_t slot);
int QCPCurve_QBaseReceivers(const QCPCurve* self, const char* signal);
bool QCPCurve_IsSignalConnected(const QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_OnIsSignalConnected(const QCPCurve* self, intptr_t slot);
bool QCPCurve_QBaseIsSignalConnected(const QCPCurve* self, const QMetaMethod* signal);
void QCPCurve_Delete(QCPCurve* self);

QCPBarsGroup* QCPBarsGroup_new(QCustomPlot* parentPlot);
QMetaObject* QCPBarsGroup_MetaObject(const QCPBarsGroup* self);
void* QCPBarsGroup_Metacast(QCPBarsGroup* self, const char* param1);
int QCPBarsGroup_Metacall(QCPBarsGroup* self, int param1, int param2, void** param3);
libqt_string QCPBarsGroup_Tr(const char* s);
int QCPBarsGroup_SpacingType(const QCPBarsGroup* self);
double QCPBarsGroup_Spacing(const QCPBarsGroup* self);
void QCPBarsGroup_SetSpacingType(QCPBarsGroup* self, int spacingType);
void QCPBarsGroup_SetSpacing(QCPBarsGroup* self, double spacing);
libqt_list /* of QCPBars* */ QCPBarsGroup_Bars(const QCPBarsGroup* self);
QCPBars* QCPBarsGroup_Bars2(const QCPBarsGroup* self, int index);
int QCPBarsGroup_Size(const QCPBarsGroup* self);
bool QCPBarsGroup_IsEmpty(const QCPBarsGroup* self);
void QCPBarsGroup_Clear(QCPBarsGroup* self);
bool QCPBarsGroup_Contains(const QCPBarsGroup* self, QCPBars* bars);
void QCPBarsGroup_Append(QCPBarsGroup* self, QCPBars* bars);
void QCPBarsGroup_Insert(QCPBarsGroup* self, int i, QCPBars* bars);
void QCPBarsGroup_Remove(QCPBarsGroup* self, QCPBars* bars);
libqt_string QCPBarsGroup_Tr2(const char* s, const char* c);
libqt_string QCPBarsGroup_Tr3(const char* s, const char* c, int n);
void QCPBarsGroup_OnMetacall(QCPBarsGroup* self, intptr_t slot);
int QCPBarsGroup_QBaseMetacall(QCPBarsGroup* self, int param1, int param2, void** param3);
bool QCPBarsGroup_Event(QCPBarsGroup* self, QEvent* event);
void QCPBarsGroup_OnEvent(QCPBarsGroup* self, intptr_t slot);
bool QCPBarsGroup_QBaseEvent(QCPBarsGroup* self, QEvent* event);
bool QCPBarsGroup_EventFilter(QCPBarsGroup* self, QObject* watched, QEvent* event);
void QCPBarsGroup_OnEventFilter(QCPBarsGroup* self, intptr_t slot);
bool QCPBarsGroup_QBaseEventFilter(QCPBarsGroup* self, QObject* watched, QEvent* event);
void QCPBarsGroup_TimerEvent(QCPBarsGroup* self, QTimerEvent* event);
void QCPBarsGroup_OnTimerEvent(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseTimerEvent(QCPBarsGroup* self, QTimerEvent* event);
void QCPBarsGroup_ChildEvent(QCPBarsGroup* self, QChildEvent* event);
void QCPBarsGroup_OnChildEvent(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseChildEvent(QCPBarsGroup* self, QChildEvent* event);
void QCPBarsGroup_CustomEvent(QCPBarsGroup* self, QEvent* event);
void QCPBarsGroup_OnCustomEvent(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseCustomEvent(QCPBarsGroup* self, QEvent* event);
void QCPBarsGroup_ConnectNotify(QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_OnConnectNotify(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseConnectNotify(QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_DisconnectNotify(QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_OnDisconnectNotify(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseDisconnectNotify(QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_RegisterBars(QCPBarsGroup* self, QCPBars* bars);
void QCPBarsGroup_OnRegisterBars(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseRegisterBars(QCPBarsGroup* self, QCPBars* bars);
void QCPBarsGroup_UnregisterBars(QCPBarsGroup* self, QCPBars* bars);
void QCPBarsGroup_OnUnregisterBars(QCPBarsGroup* self, intptr_t slot);
void QCPBarsGroup_QBaseUnregisterBars(QCPBarsGroup* self, QCPBars* bars);
double QCPBarsGroup_KeyPixelOffset(QCPBarsGroup* self, const QCPBars* bars, double keyCoord);
void QCPBarsGroup_OnKeyPixelOffset(QCPBarsGroup* self, intptr_t slot);
double QCPBarsGroup_QBaseKeyPixelOffset(QCPBarsGroup* self, const QCPBars* bars, double keyCoord);
double QCPBarsGroup_GetPixelSpacing(QCPBarsGroup* self, const QCPBars* bars, double keyCoord);
void QCPBarsGroup_OnGetPixelSpacing(QCPBarsGroup* self, intptr_t slot);
double QCPBarsGroup_QBaseGetPixelSpacing(QCPBarsGroup* self, const QCPBars* bars, double keyCoord);
QObject* QCPBarsGroup_Sender(const QCPBarsGroup* self);
void QCPBarsGroup_OnSender(const QCPBarsGroup* self, intptr_t slot);
QObject* QCPBarsGroup_QBaseSender(const QCPBarsGroup* self);
int QCPBarsGroup_SenderSignalIndex(const QCPBarsGroup* self);
void QCPBarsGroup_OnSenderSignalIndex(const QCPBarsGroup* self, intptr_t slot);
int QCPBarsGroup_QBaseSenderSignalIndex(const QCPBarsGroup* self);
int QCPBarsGroup_Receivers(const QCPBarsGroup* self, const char* signal);
void QCPBarsGroup_OnReceivers(const QCPBarsGroup* self, intptr_t slot);
int QCPBarsGroup_QBaseReceivers(const QCPBarsGroup* self, const char* signal);
bool QCPBarsGroup_IsSignalConnected(const QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_OnIsSignalConnected(const QCPBarsGroup* self, intptr_t slot);
bool QCPBarsGroup_QBaseIsSignalConnected(const QCPBarsGroup* self, const QMetaMethod* signal);
void QCPBarsGroup_Delete(QCPBarsGroup* self);

QCPBarsData* QCPBarsData_new(const QCPBarsData* other);
QCPBarsData* QCPBarsData_new2(QCPBarsData* other);
QCPBarsData* QCPBarsData_new3();
QCPBarsData* QCPBarsData_new4(double key, double value);
QCPBarsData* QCPBarsData_new5(const QCPBarsData* param1);
void QCPBarsData_CopyAssign(QCPBarsData* self, QCPBarsData* other);
void QCPBarsData_MoveAssign(QCPBarsData* self, QCPBarsData* other);
double QCPBarsData_SortKey(const QCPBarsData* self);
QCPBarsData* QCPBarsData_FromSortKey(double sortKey);
bool QCPBarsData_SortKeyIsMainKey();
double QCPBarsData_MainKey(const QCPBarsData* self);
double QCPBarsData_MainValue(const QCPBarsData* self);
QCPRange* QCPBarsData_ValueRange(const QCPBarsData* self);
double QCPBarsData_Key(const QCPBarsData* self);
void QCPBarsData_SetKey(QCPBarsData* self, double key);
double QCPBarsData_Value(const QCPBarsData* self);
void QCPBarsData_SetValue(QCPBarsData* self, double value);
void QCPBarsData_Delete(QCPBarsData* self);

QCPBars* QCPBars_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPBars_MetaObject(const QCPBars* self);
void* QCPBars_Metacast(QCPBars* self, const char* param1);
int QCPBars_Metacall(QCPBars* self, int param1, int param2, void** param3);
libqt_string QCPBars_Tr(const char* s);
double QCPBars_Width(const QCPBars* self);
int QCPBars_WidthType(const QCPBars* self);
QCPBarsGroup* QCPBars_BarsGroup(const QCPBars* self);
double QCPBars_BaseValue(const QCPBars* self);
double QCPBars_StackingGap(const QCPBars* self);
QCPBars* QCPBars_BarBelow(const QCPBars* self);
QCPBars* QCPBars_BarAbove(const QCPBars* self);
void QCPBars_SetData2(QCPBars* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPBars_SetWidth(QCPBars* self, double width);
void QCPBars_SetWidthType(QCPBars* self, int widthType);
void QCPBars_SetBarsGroup(QCPBars* self, QCPBarsGroup* barsGroup);
void QCPBars_SetBaseValue(QCPBars* self, double baseValue);
void QCPBars_SetStackingGap(QCPBars* self, double pixels);
void QCPBars_AddData(QCPBars* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPBars_AddData2(QCPBars* self, double key, double value);
void QCPBars_MoveBelow(QCPBars* self, QCPBars* bars);
void QCPBars_MoveAbove(QCPBars* self, QCPBars* bars);
QCPDataSelection* QCPBars_SelectTestRect(const QCPBars* self, const QRectF* rect, bool onlySelectable);
double QCPBars_SelectTest(const QCPBars* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPBars_GetKeyRange(const QCPBars* self, bool* foundRange, int inSignDomain);
QCPRange* QCPBars_GetValueRange(const QCPBars* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
QPointF* QCPBars_DataPixelPosition(const QCPBars* self, int index);
void QCPBars_Draw(QCPBars* self, QCPPainter* painter);
void QCPBars_DrawLegendIcon(const QCPBars* self, QCPPainter* painter, const QRectF* rect);
libqt_string QCPBars_Tr2(const char* s, const char* c);
libqt_string QCPBars_Tr3(const char* s, const char* c, int n);
void QCPBars_SetData3(QCPBars* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPBars_AddData3(QCPBars* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPBars_OnMetacall(QCPBars* self, intptr_t slot);
int QCPBars_QBaseMetacall(QCPBars* self, int param1, int param2, void** param3);
void QCPBars_OnSelectTestRect(const QCPBars* self, intptr_t slot);
QCPDataSelection* QCPBars_QBaseSelectTestRect(const QCPBars* self, const QRectF* rect, bool onlySelectable);
void QCPBars_OnSelectTest(const QCPBars* self, intptr_t slot);
double QCPBars_QBaseSelectTest(const QCPBars* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPBars_OnGetKeyRange(const QCPBars* self, intptr_t slot);
QCPRange* QCPBars_QBaseGetKeyRange(const QCPBars* self, bool* foundRange, int inSignDomain);
void QCPBars_OnGetValueRange(const QCPBars* self, intptr_t slot);
QCPRange* QCPBars_QBaseGetValueRange(const QCPBars* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPBars_OnDataPixelPosition(const QCPBars* self, intptr_t slot);
QPointF* QCPBars_QBaseDataPixelPosition(const QCPBars* self, int index);
void QCPBars_OnDraw(QCPBars* self, intptr_t slot);
void QCPBars_QBaseDraw(QCPBars* self, QCPPainter* painter);
void QCPBars_OnDrawLegendIcon(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseDrawLegendIcon(const QCPBars* self, QCPPainter* painter, const QRectF* rect);
int QCPBars_DataCount(const QCPBars* self);
void QCPBars_OnDataCount(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseDataCount(const QCPBars* self);
double QCPBars_DataMainKey(const QCPBars* self, int index);
void QCPBars_OnDataMainKey(const QCPBars* self, intptr_t slot);
double QCPBars_QBaseDataMainKey(const QCPBars* self, int index);
double QCPBars_DataSortKey(const QCPBars* self, int index);
void QCPBars_OnDataSortKey(const QCPBars* self, intptr_t slot);
double QCPBars_QBaseDataSortKey(const QCPBars* self, int index);
double QCPBars_DataMainValue(const QCPBars* self, int index);
void QCPBars_OnDataMainValue(const QCPBars* self, intptr_t slot);
double QCPBars_QBaseDataMainValue(const QCPBars* self, int index);
QCPRange* QCPBars_DataValueRange(const QCPBars* self, int index);
void QCPBars_OnDataValueRange(const QCPBars* self, intptr_t slot);
QCPRange* QCPBars_QBaseDataValueRange(const QCPBars* self, int index);
bool QCPBars_SortKeyIsMainKey(const QCPBars* self);
void QCPBars_OnSortKeyIsMainKey(const QCPBars* self, intptr_t slot);
bool QCPBars_QBaseSortKeyIsMainKey(const QCPBars* self);
int QCPBars_FindBegin(const QCPBars* self, double sortKey, bool expandedRange);
void QCPBars_OnFindBegin(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseFindBegin(const QCPBars* self, double sortKey, bool expandedRange);
int QCPBars_FindEnd(const QCPBars* self, double sortKey, bool expandedRange);
void QCPBars_OnFindEnd(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseFindEnd(const QCPBars* self, double sortKey, bool expandedRange);
QCPPlottableInterface1D* QCPBars_Interface1D(QCPBars* self);
void QCPBars_OnInterface1D(QCPBars* self, intptr_t slot);
QCPPlottableInterface1D* QCPBars_QBaseInterface1D(QCPBars* self);
QRect* QCPBars_ClipRect(const QCPBars* self);
void QCPBars_OnClipRect(const QCPBars* self, intptr_t slot);
QRect* QCPBars_QBaseClipRect(const QCPBars* self);
int QCPBars_SelectionCategory(const QCPBars* self);
void QCPBars_OnSelectionCategory(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseSelectionCategory(const QCPBars* self);
void QCPBars_ApplyDefaultAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_OnApplyDefaultAntialiasingHint(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseApplyDefaultAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_SelectEvent(QCPBars* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPBars_OnSelectEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseSelectEvent(QCPBars* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPBars_DeselectEvent(QCPBars* self, bool* selectionStateChanged);
void QCPBars_OnDeselectEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseDeselectEvent(QCPBars* self, bool* selectionStateChanged);
void QCPBars_ParentPlotInitialized(QCPBars* self, QCustomPlot* parentPlot);
void QCPBars_OnParentPlotInitialized(QCPBars* self, intptr_t slot);
void QCPBars_QBaseParentPlotInitialized(QCPBars* self, QCustomPlot* parentPlot);
void QCPBars_MousePressEvent(QCPBars* self, QMouseEvent* event, const QVariant* details);
void QCPBars_OnMousePressEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseMousePressEvent(QCPBars* self, QMouseEvent* event, const QVariant* details);
void QCPBars_MouseMoveEvent(QCPBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPBars_OnMouseMoveEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseMouseMoveEvent(QCPBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPBars_MouseReleaseEvent(QCPBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPBars_OnMouseReleaseEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseMouseReleaseEvent(QCPBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPBars_MouseDoubleClickEvent(QCPBars* self, QMouseEvent* event, const QVariant* details);
void QCPBars_OnMouseDoubleClickEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseMouseDoubleClickEvent(QCPBars* self, QMouseEvent* event, const QVariant* details);
void QCPBars_WheelEvent(QCPBars* self, QWheelEvent* event);
void QCPBars_OnWheelEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseWheelEvent(QCPBars* self, QWheelEvent* event);
bool QCPBars_Event(QCPBars* self, QEvent* event);
void QCPBars_OnEvent(QCPBars* self, intptr_t slot);
bool QCPBars_QBaseEvent(QCPBars* self, QEvent* event);
bool QCPBars_EventFilter(QCPBars* self, QObject* watched, QEvent* event);
void QCPBars_OnEventFilter(QCPBars* self, intptr_t slot);
bool QCPBars_QBaseEventFilter(QCPBars* self, QObject* watched, QEvent* event);
void QCPBars_TimerEvent(QCPBars* self, QTimerEvent* event);
void QCPBars_OnTimerEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseTimerEvent(QCPBars* self, QTimerEvent* event);
void QCPBars_ChildEvent(QCPBars* self, QChildEvent* event);
void QCPBars_OnChildEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseChildEvent(QCPBars* self, QChildEvent* event);
void QCPBars_CustomEvent(QCPBars* self, QEvent* event);
void QCPBars_OnCustomEvent(QCPBars* self, intptr_t slot);
void QCPBars_QBaseCustomEvent(QCPBars* self, QEvent* event);
void QCPBars_ConnectNotify(QCPBars* self, const QMetaMethod* signal);
void QCPBars_OnConnectNotify(QCPBars* self, intptr_t slot);
void QCPBars_QBaseConnectNotify(QCPBars* self, const QMetaMethod* signal);
void QCPBars_DisconnectNotify(QCPBars* self, const QMetaMethod* signal);
void QCPBars_OnDisconnectNotify(QCPBars* self, intptr_t slot);
void QCPBars_QBaseDisconnectNotify(QCPBars* self, const QMetaMethod* signal);
QRectF* QCPBars_GetBarRect(const QCPBars* self, double key, double value);
void QCPBars_OnGetBarRect(const QCPBars* self, intptr_t slot);
QRectF* QCPBars_QBaseGetBarRect(const QCPBars* self, double key, double value);
void QCPBars_GetPixelWidth(const QCPBars* self, double key, double* lower, double* upper);
void QCPBars_OnGetPixelWidth(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseGetPixelWidth(const QCPBars* self, double key, double* lower, double* upper);
double QCPBars_GetStackedBaseValue(const QCPBars* self, double key, bool positive);
void QCPBars_OnGetStackedBaseValue(const QCPBars* self, intptr_t slot);
double QCPBars_QBaseGetStackedBaseValue(const QCPBars* self, double key, bool positive);
void QCPBars_ConnectBars(QCPBars* self, QCPBars* lower, QCPBars* upper);
void QCPBars_OnConnectBars(QCPBars* self, intptr_t slot);
void QCPBars_QBaseConnectBars(QCPBars* self, QCPBars* lower, QCPBars* upper);
void QCPBars_ApplyFillAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_OnApplyFillAntialiasingHint(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseApplyFillAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_ApplyScattersAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_OnApplyScattersAntialiasingHint(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseApplyScattersAntialiasingHint(const QCPBars* self, QCPPainter* painter);
void QCPBars_InitializeParentPlot(QCPBars* self, QCustomPlot* parentPlot);
void QCPBars_OnInitializeParentPlot(QCPBars* self, intptr_t slot);
void QCPBars_QBaseInitializeParentPlot(QCPBars* self, QCustomPlot* parentPlot);
void QCPBars_SetParentLayerable(QCPBars* self, QCPLayerable* parentLayerable);
void QCPBars_OnSetParentLayerable(QCPBars* self, intptr_t slot);
void QCPBars_QBaseSetParentLayerable(QCPBars* self, QCPLayerable* parentLayerable);
bool QCPBars_MoveToLayer(QCPBars* self, QCPLayer* layer, bool prepend);
void QCPBars_OnMoveToLayer(QCPBars* self, intptr_t slot);
bool QCPBars_QBaseMoveToLayer(QCPBars* self, QCPLayer* layer, bool prepend);
void QCPBars_ApplyAntialiasingHint(const QCPBars* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPBars_OnApplyAntialiasingHint(const QCPBars* self, intptr_t slot);
void QCPBars_QBaseApplyAntialiasingHint(const QCPBars* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPBars_Sender(const QCPBars* self);
void QCPBars_OnSender(const QCPBars* self, intptr_t slot);
QObject* QCPBars_QBaseSender(const QCPBars* self);
int QCPBars_SenderSignalIndex(const QCPBars* self);
void QCPBars_OnSenderSignalIndex(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseSenderSignalIndex(const QCPBars* self);
int QCPBars_Receivers(const QCPBars* self, const char* signal);
void QCPBars_OnReceivers(const QCPBars* self, intptr_t slot);
int QCPBars_QBaseReceivers(const QCPBars* self, const char* signal);
bool QCPBars_IsSignalConnected(const QCPBars* self, const QMetaMethod* signal);
void QCPBars_OnIsSignalConnected(const QCPBars* self, intptr_t slot);
bool QCPBars_QBaseIsSignalConnected(const QCPBars* self, const QMetaMethod* signal);
void QCPBars_Delete(QCPBars* self);

QCPStatisticalBoxData* QCPStatisticalBoxData_new();
QCPStatisticalBoxData* QCPStatisticalBoxData_new2(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum);
QCPStatisticalBoxData* QCPStatisticalBoxData_new3(const QCPStatisticalBoxData* param1);
QCPStatisticalBoxData* QCPStatisticalBoxData_new4(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const libqt_list /* of double */ outliers);
double QCPStatisticalBoxData_SortKey(const QCPStatisticalBoxData* self);
QCPStatisticalBoxData* QCPStatisticalBoxData_FromSortKey(double sortKey);
bool QCPStatisticalBoxData_SortKeyIsMainKey();
double QCPStatisticalBoxData_MainKey(const QCPStatisticalBoxData* self);
double QCPStatisticalBoxData_MainValue(const QCPStatisticalBoxData* self);
QCPRange* QCPStatisticalBoxData_ValueRange(const QCPStatisticalBoxData* self);
double QCPStatisticalBoxData_Key(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetKey(QCPStatisticalBoxData* self, double key);
double QCPStatisticalBoxData_Minimum(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetMinimum(QCPStatisticalBoxData* self, double minimum);
double QCPStatisticalBoxData_LowerQuartile(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetLowerQuartile(QCPStatisticalBoxData* self, double lowerQuartile);
double QCPStatisticalBoxData_Median(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetMedian(QCPStatisticalBoxData* self, double median);
double QCPStatisticalBoxData_UpperQuartile(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetUpperQuartile(QCPStatisticalBoxData* self, double upperQuartile);
double QCPStatisticalBoxData_Maximum(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetMaximum(QCPStatisticalBoxData* self, double maximum);
libqt_list /* of double */ QCPStatisticalBoxData_Outliers(const QCPStatisticalBoxData* self);
void QCPStatisticalBoxData_SetOutliers(QCPStatisticalBoxData* self, libqt_list /* of double */ outliers);
void QCPStatisticalBoxData_Delete(QCPStatisticalBoxData* self);

QCPStatisticalBox* QCPStatisticalBox_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPStatisticalBox_MetaObject(const QCPStatisticalBox* self);
void* QCPStatisticalBox_Metacast(QCPStatisticalBox* self, const char* param1);
int QCPStatisticalBox_Metacall(QCPStatisticalBox* self, int param1, int param2, void** param3);
libqt_string QCPStatisticalBox_Tr(const char* s);
double QCPStatisticalBox_Width(const QCPStatisticalBox* self);
double QCPStatisticalBox_WhiskerWidth(const QCPStatisticalBox* self);
QPen* QCPStatisticalBox_WhiskerPen(const QCPStatisticalBox* self);
QPen* QCPStatisticalBox_WhiskerBarPen(const QCPStatisticalBox* self);
bool QCPStatisticalBox_WhiskerAntialiased(const QCPStatisticalBox* self);
QPen* QCPStatisticalBox_MedianPen(const QCPStatisticalBox* self);
QCPScatterStyle* QCPStatisticalBox_OutlierStyle(const QCPStatisticalBox* self);
void QCPStatisticalBox_SetData2(QCPStatisticalBox* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ minimum, const libqt_list /* of double */ lowerQuartile, const libqt_list /* of double */ median, const libqt_list /* of double */ upperQuartile, const libqt_list /* of double */ maximum);
void QCPStatisticalBox_SetWidth(QCPStatisticalBox* self, double width);
void QCPStatisticalBox_SetWhiskerWidth(QCPStatisticalBox* self, double width);
void QCPStatisticalBox_SetWhiskerPen(QCPStatisticalBox* self, const QPen* pen);
void QCPStatisticalBox_SetWhiskerBarPen(QCPStatisticalBox* self, const QPen* pen);
void QCPStatisticalBox_SetWhiskerAntialiased(QCPStatisticalBox* self, bool enabled);
void QCPStatisticalBox_SetMedianPen(QCPStatisticalBox* self, const QPen* pen);
void QCPStatisticalBox_SetOutlierStyle(QCPStatisticalBox* self, const QCPScatterStyle* style);
void QCPStatisticalBox_AddData(QCPStatisticalBox* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ minimum, const libqt_list /* of double */ lowerQuartile, const libqt_list /* of double */ median, const libqt_list /* of double */ upperQuartile, const libqt_list /* of double */ maximum);
void QCPStatisticalBox_AddData2(QCPStatisticalBox* self, double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum);
QCPDataSelection* QCPStatisticalBox_SelectTestRect(const QCPStatisticalBox* self, const QRectF* rect, bool onlySelectable);
double QCPStatisticalBox_SelectTest(const QCPStatisticalBox* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPStatisticalBox_GetKeyRange(const QCPStatisticalBox* self, bool* foundRange, int inSignDomain);
QCPRange* QCPStatisticalBox_GetValueRange(const QCPStatisticalBox* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPStatisticalBox_Draw(QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_DrawLegendIcon(const QCPStatisticalBox* self, QCPPainter* painter, const QRectF* rect);
libqt_string QCPStatisticalBox_Tr2(const char* s, const char* c);
libqt_string QCPStatisticalBox_Tr3(const char* s, const char* c, int n);
void QCPStatisticalBox_SetData7(QCPStatisticalBox* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ minimum, const libqt_list /* of double */ lowerQuartile, const libqt_list /* of double */ median, const libqt_list /* of double */ upperQuartile, const libqt_list /* of double */ maximum, bool alreadySorted);
void QCPStatisticalBox_AddData7(QCPStatisticalBox* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ minimum, const libqt_list /* of double */ lowerQuartile, const libqt_list /* of double */ median, const libqt_list /* of double */ upperQuartile, const libqt_list /* of double */ maximum, bool alreadySorted);
void QCPStatisticalBox_AddData72(QCPStatisticalBox* self, double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const libqt_list /* of double */ outliers);
void QCPStatisticalBox_OnMetacall(QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseMetacall(QCPStatisticalBox* self, int param1, int param2, void** param3);
void QCPStatisticalBox_OnSelectTestRect(const QCPStatisticalBox* self, intptr_t slot);
QCPDataSelection* QCPStatisticalBox_QBaseSelectTestRect(const QCPStatisticalBox* self, const QRectF* rect, bool onlySelectable);
void QCPStatisticalBox_OnSelectTest(const QCPStatisticalBox* self, intptr_t slot);
double QCPStatisticalBox_QBaseSelectTest(const QCPStatisticalBox* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPStatisticalBox_OnGetKeyRange(const QCPStatisticalBox* self, intptr_t slot);
QCPRange* QCPStatisticalBox_QBaseGetKeyRange(const QCPStatisticalBox* self, bool* foundRange, int inSignDomain);
void QCPStatisticalBox_OnGetValueRange(const QCPStatisticalBox* self, intptr_t slot);
QCPRange* QCPStatisticalBox_QBaseGetValueRange(const QCPStatisticalBox* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPStatisticalBox_OnDraw(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseDraw(QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_OnDrawLegendIcon(const QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseDrawLegendIcon(const QCPStatisticalBox* self, QCPPainter* painter, const QRectF* rect);
int QCPStatisticalBox_DataCount(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnDataCount(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseDataCount(const QCPStatisticalBox* self);
double QCPStatisticalBox_DataMainKey(const QCPStatisticalBox* self, int index);
void QCPStatisticalBox_OnDataMainKey(const QCPStatisticalBox* self, intptr_t slot);
double QCPStatisticalBox_QBaseDataMainKey(const QCPStatisticalBox* self, int index);
double QCPStatisticalBox_DataSortKey(const QCPStatisticalBox* self, int index);
void QCPStatisticalBox_OnDataSortKey(const QCPStatisticalBox* self, intptr_t slot);
double QCPStatisticalBox_QBaseDataSortKey(const QCPStatisticalBox* self, int index);
double QCPStatisticalBox_DataMainValue(const QCPStatisticalBox* self, int index);
void QCPStatisticalBox_OnDataMainValue(const QCPStatisticalBox* self, intptr_t slot);
double QCPStatisticalBox_QBaseDataMainValue(const QCPStatisticalBox* self, int index);
QCPRange* QCPStatisticalBox_DataValueRange(const QCPStatisticalBox* self, int index);
void QCPStatisticalBox_OnDataValueRange(const QCPStatisticalBox* self, intptr_t slot);
QCPRange* QCPStatisticalBox_QBaseDataValueRange(const QCPStatisticalBox* self, int index);
QPointF* QCPStatisticalBox_DataPixelPosition(const QCPStatisticalBox* self, int index);
void QCPStatisticalBox_OnDataPixelPosition(const QCPStatisticalBox* self, intptr_t slot);
QPointF* QCPStatisticalBox_QBaseDataPixelPosition(const QCPStatisticalBox* self, int index);
bool QCPStatisticalBox_SortKeyIsMainKey(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnSortKeyIsMainKey(const QCPStatisticalBox* self, intptr_t slot);
bool QCPStatisticalBox_QBaseSortKeyIsMainKey(const QCPStatisticalBox* self);
int QCPStatisticalBox_FindBegin(const QCPStatisticalBox* self, double sortKey, bool expandedRange);
void QCPStatisticalBox_OnFindBegin(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseFindBegin(const QCPStatisticalBox* self, double sortKey, bool expandedRange);
int QCPStatisticalBox_FindEnd(const QCPStatisticalBox* self, double sortKey, bool expandedRange);
void QCPStatisticalBox_OnFindEnd(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseFindEnd(const QCPStatisticalBox* self, double sortKey, bool expandedRange);
QCPPlottableInterface1D* QCPStatisticalBox_Interface1D(QCPStatisticalBox* self);
void QCPStatisticalBox_OnInterface1D(QCPStatisticalBox* self, intptr_t slot);
QCPPlottableInterface1D* QCPStatisticalBox_QBaseInterface1D(QCPStatisticalBox* self);
QRect* QCPStatisticalBox_ClipRect(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnClipRect(const QCPStatisticalBox* self, intptr_t slot);
QRect* QCPStatisticalBox_QBaseClipRect(const QCPStatisticalBox* self);
int QCPStatisticalBox_SelectionCategory(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnSelectionCategory(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseSelectionCategory(const QCPStatisticalBox* self);
void QCPStatisticalBox_ApplyDefaultAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_OnApplyDefaultAntialiasingHint(const QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseApplyDefaultAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_SelectEvent(QCPStatisticalBox* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPStatisticalBox_OnSelectEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseSelectEvent(QCPStatisticalBox* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPStatisticalBox_DeselectEvent(QCPStatisticalBox* self, bool* selectionStateChanged);
void QCPStatisticalBox_OnDeselectEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseDeselectEvent(QCPStatisticalBox* self, bool* selectionStateChanged);
void QCPStatisticalBox_ParentPlotInitialized(QCPStatisticalBox* self, QCustomPlot* parentPlot);
void QCPStatisticalBox_OnParentPlotInitialized(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseParentPlotInitialized(QCPStatisticalBox* self, QCustomPlot* parentPlot);
void QCPStatisticalBox_MousePressEvent(QCPStatisticalBox* self, QMouseEvent* event, const QVariant* details);
void QCPStatisticalBox_OnMousePressEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseMousePressEvent(QCPStatisticalBox* self, QMouseEvent* event, const QVariant* details);
void QCPStatisticalBox_MouseMoveEvent(QCPStatisticalBox* self, QMouseEvent* event, const QPointF* startPos);
void QCPStatisticalBox_OnMouseMoveEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseMouseMoveEvent(QCPStatisticalBox* self, QMouseEvent* event, const QPointF* startPos);
void QCPStatisticalBox_MouseReleaseEvent(QCPStatisticalBox* self, QMouseEvent* event, const QPointF* startPos);
void QCPStatisticalBox_OnMouseReleaseEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseMouseReleaseEvent(QCPStatisticalBox* self, QMouseEvent* event, const QPointF* startPos);
void QCPStatisticalBox_MouseDoubleClickEvent(QCPStatisticalBox* self, QMouseEvent* event, const QVariant* details);
void QCPStatisticalBox_OnMouseDoubleClickEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseMouseDoubleClickEvent(QCPStatisticalBox* self, QMouseEvent* event, const QVariant* details);
void QCPStatisticalBox_WheelEvent(QCPStatisticalBox* self, QWheelEvent* event);
void QCPStatisticalBox_OnWheelEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseWheelEvent(QCPStatisticalBox* self, QWheelEvent* event);
bool QCPStatisticalBox_Event(QCPStatisticalBox* self, QEvent* event);
void QCPStatisticalBox_OnEvent(QCPStatisticalBox* self, intptr_t slot);
bool QCPStatisticalBox_QBaseEvent(QCPStatisticalBox* self, QEvent* event);
bool QCPStatisticalBox_EventFilter(QCPStatisticalBox* self, QObject* watched, QEvent* event);
void QCPStatisticalBox_OnEventFilter(QCPStatisticalBox* self, intptr_t slot);
bool QCPStatisticalBox_QBaseEventFilter(QCPStatisticalBox* self, QObject* watched, QEvent* event);
void QCPStatisticalBox_TimerEvent(QCPStatisticalBox* self, QTimerEvent* event);
void QCPStatisticalBox_OnTimerEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseTimerEvent(QCPStatisticalBox* self, QTimerEvent* event);
void QCPStatisticalBox_ChildEvent(QCPStatisticalBox* self, QChildEvent* event);
void QCPStatisticalBox_OnChildEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseChildEvent(QCPStatisticalBox* self, QChildEvent* event);
void QCPStatisticalBox_CustomEvent(QCPStatisticalBox* self, QEvent* event);
void QCPStatisticalBox_OnCustomEvent(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseCustomEvent(QCPStatisticalBox* self, QEvent* event);
void QCPStatisticalBox_ConnectNotify(QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_OnConnectNotify(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseConnectNotify(QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_DisconnectNotify(QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_OnDisconnectNotify(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseDisconnectNotify(QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_ApplyFillAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_OnApplyFillAntialiasingHint(const QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseApplyFillAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_ApplyScattersAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_OnApplyScattersAntialiasingHint(const QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseApplyScattersAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter);
void QCPStatisticalBox_InitializeParentPlot(QCPStatisticalBox* self, QCustomPlot* parentPlot);
void QCPStatisticalBox_OnInitializeParentPlot(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseInitializeParentPlot(QCPStatisticalBox* self, QCustomPlot* parentPlot);
void QCPStatisticalBox_SetParentLayerable(QCPStatisticalBox* self, QCPLayerable* parentLayerable);
void QCPStatisticalBox_OnSetParentLayerable(QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseSetParentLayerable(QCPStatisticalBox* self, QCPLayerable* parentLayerable);
bool QCPStatisticalBox_MoveToLayer(QCPStatisticalBox* self, QCPLayer* layer, bool prepend);
void QCPStatisticalBox_OnMoveToLayer(QCPStatisticalBox* self, intptr_t slot);
bool QCPStatisticalBox_QBaseMoveToLayer(QCPStatisticalBox* self, QCPLayer* layer, bool prepend);
void QCPStatisticalBox_ApplyAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPStatisticalBox_OnApplyAntialiasingHint(const QCPStatisticalBox* self, intptr_t slot);
void QCPStatisticalBox_QBaseApplyAntialiasingHint(const QCPStatisticalBox* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPStatisticalBox_Sender(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnSender(const QCPStatisticalBox* self, intptr_t slot);
QObject* QCPStatisticalBox_QBaseSender(const QCPStatisticalBox* self);
int QCPStatisticalBox_SenderSignalIndex(const QCPStatisticalBox* self);
void QCPStatisticalBox_OnSenderSignalIndex(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseSenderSignalIndex(const QCPStatisticalBox* self);
int QCPStatisticalBox_Receivers(const QCPStatisticalBox* self, const char* signal);
void QCPStatisticalBox_OnReceivers(const QCPStatisticalBox* self, intptr_t slot);
int QCPStatisticalBox_QBaseReceivers(const QCPStatisticalBox* self, const char* signal);
bool QCPStatisticalBox_IsSignalConnected(const QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_OnIsSignalConnected(const QCPStatisticalBox* self, intptr_t slot);
bool QCPStatisticalBox_QBaseIsSignalConnected(const QCPStatisticalBox* self, const QMetaMethod* signal);
void QCPStatisticalBox_Delete(QCPStatisticalBox* self);

QCPColorMapData* QCPColorMapData_new(int keySize, int valueSize, const QCPRange* keyRange, const QCPRange* valueRange);
QCPColorMapData* QCPColorMapData_new2(const QCPColorMapData* other);
void QCPColorMapData_OperatorAssign(QCPColorMapData* self, const QCPColorMapData* other);
int QCPColorMapData_KeySize(const QCPColorMapData* self);
int QCPColorMapData_ValueSize(const QCPColorMapData* self);
QCPRange* QCPColorMapData_KeyRange(const QCPColorMapData* self);
QCPRange* QCPColorMapData_ValueRange(const QCPColorMapData* self);
QCPRange* QCPColorMapData_DataBounds(const QCPColorMapData* self);
double QCPColorMapData_Data(QCPColorMapData* self, double key, double value);
double QCPColorMapData_Cell(QCPColorMapData* self, int keyIndex, int valueIndex);
unsigned char QCPColorMapData_Alpha(QCPColorMapData* self, int keyIndex, int valueIndex);
void QCPColorMapData_SetSize(QCPColorMapData* self, int keySize, int valueSize);
void QCPColorMapData_SetKeySize(QCPColorMapData* self, int keySize);
void QCPColorMapData_SetValueSize(QCPColorMapData* self, int valueSize);
void QCPColorMapData_SetRange(QCPColorMapData* self, const QCPRange* keyRange, const QCPRange* valueRange);
void QCPColorMapData_SetKeyRange(QCPColorMapData* self, const QCPRange* keyRange);
void QCPColorMapData_SetValueRange(QCPColorMapData* self, const QCPRange* valueRange);
void QCPColorMapData_SetData(QCPColorMapData* self, double key, double value, double z);
void QCPColorMapData_SetCell(QCPColorMapData* self, int keyIndex, int valueIndex, double z);
void QCPColorMapData_SetAlpha(QCPColorMapData* self, int keyIndex, int valueIndex, unsigned char alpha);
void QCPColorMapData_RecalculateDataBounds(QCPColorMapData* self);
void QCPColorMapData_Clear(QCPColorMapData* self);
void QCPColorMapData_ClearAlpha(QCPColorMapData* self);
void QCPColorMapData_Fill(QCPColorMapData* self, double z);
void QCPColorMapData_FillAlpha(QCPColorMapData* self, unsigned char alpha);
bool QCPColorMapData_IsEmpty(const QCPColorMapData* self);
void QCPColorMapData_CoordToCell(const QCPColorMapData* self, double key, double value, int* keyIndex, int* valueIndex);
void QCPColorMapData_CellToCoord(const QCPColorMapData* self, int keyIndex, int valueIndex, double* key, double* value);
void QCPColorMapData_Delete(QCPColorMapData* self);

QCPColorMap* QCPColorMap_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPColorMap_MetaObject(const QCPColorMap* self);
void* QCPColorMap_Metacast(QCPColorMap* self, const char* param1);
int QCPColorMap_Metacall(QCPColorMap* self, int param1, int param2, void** param3);
libqt_string QCPColorMap_Tr(const char* s);
QCPColorMapData* QCPColorMap_Data(const QCPColorMap* self);
QCPRange* QCPColorMap_DataRange(const QCPColorMap* self);
int QCPColorMap_DataScaleType(const QCPColorMap* self);
bool QCPColorMap_Interpolate(const QCPColorMap* self);
bool QCPColorMap_TightBoundary(const QCPColorMap* self);
QCPColorGradient* QCPColorMap_Gradient(const QCPColorMap* self);
QCPColorScale* QCPColorMap_ColorScale(const QCPColorMap* self);
void QCPColorMap_SetData(QCPColorMap* self, QCPColorMapData* data);
void QCPColorMap_SetDataRange(QCPColorMap* self, const QCPRange* dataRange);
void QCPColorMap_SetDataScaleType(QCPColorMap* self, int scaleType);
void QCPColorMap_SetGradient(QCPColorMap* self, const QCPColorGradient* gradient);
void QCPColorMap_SetInterpolate(QCPColorMap* self, bool enabled);
void QCPColorMap_SetTightBoundary(QCPColorMap* self, bool enabled);
void QCPColorMap_SetColorScale(QCPColorMap* self, QCPColorScale* colorScale);
void QCPColorMap_RescaleDataRange(QCPColorMap* self);
void QCPColorMap_UpdateLegendIcon(QCPColorMap* self);
double QCPColorMap_SelectTest(const QCPColorMap* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPColorMap_GetKeyRange(const QCPColorMap* self, bool* foundRange, int inSignDomain);
QCPRange* QCPColorMap_GetValueRange(const QCPColorMap* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPColorMap_DataRangeChanged(QCPColorMap* self, const QCPRange* newRange);
void QCPColorMap_Connect_DataRangeChanged(QCPColorMap* self, intptr_t slot);
void QCPColorMap_DataScaleTypeChanged(QCPColorMap* self, int scaleType);
void QCPColorMap_Connect_DataScaleTypeChanged(QCPColorMap* self, intptr_t slot);
void QCPColorMap_GradientChanged(QCPColorMap* self, const QCPColorGradient* newGradient);
void QCPColorMap_Connect_GradientChanged(QCPColorMap* self, intptr_t slot);
void QCPColorMap_UpdateMapImage(QCPColorMap* self);
void QCPColorMap_Draw(QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_DrawLegendIcon(const QCPColorMap* self, QCPPainter* painter, const QRectF* rect);
libqt_string QCPColorMap_Tr2(const char* s, const char* c);
libqt_string QCPColorMap_Tr3(const char* s, const char* c, int n);
void QCPColorMap_SetData2(QCPColorMap* self, QCPColorMapData* data, bool copyVal);
void QCPColorMap_RescaleDataRange1(QCPColorMap* self, bool recalculateDataBounds);
void QCPColorMap_UpdateLegendIcon1(QCPColorMap* self, int transformMode);
void QCPColorMap_UpdateLegendIcon2(QCPColorMap* self, int transformMode, const QSize* thumbSize);
void QCPColorMap_OnMetacall(QCPColorMap* self, intptr_t slot);
int QCPColorMap_QBaseMetacall(QCPColorMap* self, int param1, int param2, void** param3);
void QCPColorMap_OnSelectTest(const QCPColorMap* self, intptr_t slot);
double QCPColorMap_QBaseSelectTest(const QCPColorMap* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPColorMap_OnGetKeyRange(const QCPColorMap* self, intptr_t slot);
QCPRange* QCPColorMap_QBaseGetKeyRange(const QCPColorMap* self, bool* foundRange, int inSignDomain);
void QCPColorMap_OnGetValueRange(const QCPColorMap* self, intptr_t slot);
QCPRange* QCPColorMap_QBaseGetValueRange(const QCPColorMap* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPColorMap_OnUpdateMapImage(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseUpdateMapImage(QCPColorMap* self);
void QCPColorMap_OnDraw(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseDraw(QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_OnDrawLegendIcon(const QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseDrawLegendIcon(const QCPColorMap* self, QCPPainter* painter, const QRectF* rect);
QCPPlottableInterface1D* QCPColorMap_Interface1D(QCPColorMap* self);
void QCPColorMap_OnInterface1D(QCPColorMap* self, intptr_t slot);
QCPPlottableInterface1D* QCPColorMap_QBaseInterface1D(QCPColorMap* self);
QRect* QCPColorMap_ClipRect(const QCPColorMap* self);
void QCPColorMap_OnClipRect(const QCPColorMap* self, intptr_t slot);
QRect* QCPColorMap_QBaseClipRect(const QCPColorMap* self);
int QCPColorMap_SelectionCategory(const QCPColorMap* self);
void QCPColorMap_OnSelectionCategory(const QCPColorMap* self, intptr_t slot);
int QCPColorMap_QBaseSelectionCategory(const QCPColorMap* self);
void QCPColorMap_ApplyDefaultAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_OnApplyDefaultAntialiasingHint(const QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseApplyDefaultAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_SelectEvent(QCPColorMap* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPColorMap_OnSelectEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseSelectEvent(QCPColorMap* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPColorMap_DeselectEvent(QCPColorMap* self, bool* selectionStateChanged);
void QCPColorMap_OnDeselectEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseDeselectEvent(QCPColorMap* self, bool* selectionStateChanged);
void QCPColorMap_ParentPlotInitialized(QCPColorMap* self, QCustomPlot* parentPlot);
void QCPColorMap_OnParentPlotInitialized(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseParentPlotInitialized(QCPColorMap* self, QCustomPlot* parentPlot);
void QCPColorMap_MousePressEvent(QCPColorMap* self, QMouseEvent* event, const QVariant* details);
void QCPColorMap_OnMousePressEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseMousePressEvent(QCPColorMap* self, QMouseEvent* event, const QVariant* details);
void QCPColorMap_MouseMoveEvent(QCPColorMap* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorMap_OnMouseMoveEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseMouseMoveEvent(QCPColorMap* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorMap_MouseReleaseEvent(QCPColorMap* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorMap_OnMouseReleaseEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseMouseReleaseEvent(QCPColorMap* self, QMouseEvent* event, const QPointF* startPos);
void QCPColorMap_MouseDoubleClickEvent(QCPColorMap* self, QMouseEvent* event, const QVariant* details);
void QCPColorMap_OnMouseDoubleClickEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseMouseDoubleClickEvent(QCPColorMap* self, QMouseEvent* event, const QVariant* details);
void QCPColorMap_WheelEvent(QCPColorMap* self, QWheelEvent* event);
void QCPColorMap_OnWheelEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseWheelEvent(QCPColorMap* self, QWheelEvent* event);
bool QCPColorMap_Event(QCPColorMap* self, QEvent* event);
void QCPColorMap_OnEvent(QCPColorMap* self, intptr_t slot);
bool QCPColorMap_QBaseEvent(QCPColorMap* self, QEvent* event);
bool QCPColorMap_EventFilter(QCPColorMap* self, QObject* watched, QEvent* event);
void QCPColorMap_OnEventFilter(QCPColorMap* self, intptr_t slot);
bool QCPColorMap_QBaseEventFilter(QCPColorMap* self, QObject* watched, QEvent* event);
void QCPColorMap_TimerEvent(QCPColorMap* self, QTimerEvent* event);
void QCPColorMap_OnTimerEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseTimerEvent(QCPColorMap* self, QTimerEvent* event);
void QCPColorMap_ChildEvent(QCPColorMap* self, QChildEvent* event);
void QCPColorMap_OnChildEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseChildEvent(QCPColorMap* self, QChildEvent* event);
void QCPColorMap_CustomEvent(QCPColorMap* self, QEvent* event);
void QCPColorMap_OnCustomEvent(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseCustomEvent(QCPColorMap* self, QEvent* event);
void QCPColorMap_ConnectNotify(QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_OnConnectNotify(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseConnectNotify(QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_DisconnectNotify(QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_OnDisconnectNotify(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseDisconnectNotify(QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_ApplyFillAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_OnApplyFillAntialiasingHint(const QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseApplyFillAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_ApplyScattersAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_OnApplyScattersAntialiasingHint(const QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseApplyScattersAntialiasingHint(const QCPColorMap* self, QCPPainter* painter);
void QCPColorMap_InitializeParentPlot(QCPColorMap* self, QCustomPlot* parentPlot);
void QCPColorMap_OnInitializeParentPlot(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseInitializeParentPlot(QCPColorMap* self, QCustomPlot* parentPlot);
void QCPColorMap_SetParentLayerable(QCPColorMap* self, QCPLayerable* parentLayerable);
void QCPColorMap_OnSetParentLayerable(QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseSetParentLayerable(QCPColorMap* self, QCPLayerable* parentLayerable);
bool QCPColorMap_MoveToLayer(QCPColorMap* self, QCPLayer* layer, bool prepend);
void QCPColorMap_OnMoveToLayer(QCPColorMap* self, intptr_t slot);
bool QCPColorMap_QBaseMoveToLayer(QCPColorMap* self, QCPLayer* layer, bool prepend);
void QCPColorMap_ApplyAntialiasingHint(const QCPColorMap* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPColorMap_OnApplyAntialiasingHint(const QCPColorMap* self, intptr_t slot);
void QCPColorMap_QBaseApplyAntialiasingHint(const QCPColorMap* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPColorMap_Sender(const QCPColorMap* self);
void QCPColorMap_OnSender(const QCPColorMap* self, intptr_t slot);
QObject* QCPColorMap_QBaseSender(const QCPColorMap* self);
int QCPColorMap_SenderSignalIndex(const QCPColorMap* self);
void QCPColorMap_OnSenderSignalIndex(const QCPColorMap* self, intptr_t slot);
int QCPColorMap_QBaseSenderSignalIndex(const QCPColorMap* self);
int QCPColorMap_Receivers(const QCPColorMap* self, const char* signal);
void QCPColorMap_OnReceivers(const QCPColorMap* self, intptr_t slot);
int QCPColorMap_QBaseReceivers(const QCPColorMap* self, const char* signal);
bool QCPColorMap_IsSignalConnected(const QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_OnIsSignalConnected(const QCPColorMap* self, intptr_t slot);
bool QCPColorMap_QBaseIsSignalConnected(const QCPColorMap* self, const QMetaMethod* signal);
void QCPColorMap_Delete(QCPColorMap* self);

QCPFinancialData* QCPFinancialData_new(const QCPFinancialData* other);
QCPFinancialData* QCPFinancialData_new2(QCPFinancialData* other);
QCPFinancialData* QCPFinancialData_new3();
QCPFinancialData* QCPFinancialData_new4(double key, double open, double high, double low, double close);
QCPFinancialData* QCPFinancialData_new5(const QCPFinancialData* param1);
void QCPFinancialData_CopyAssign(QCPFinancialData* self, QCPFinancialData* other);
void QCPFinancialData_MoveAssign(QCPFinancialData* self, QCPFinancialData* other);
double QCPFinancialData_SortKey(const QCPFinancialData* self);
QCPFinancialData* QCPFinancialData_FromSortKey(double sortKey);
bool QCPFinancialData_SortKeyIsMainKey();
double QCPFinancialData_MainKey(const QCPFinancialData* self);
double QCPFinancialData_MainValue(const QCPFinancialData* self);
QCPRange* QCPFinancialData_ValueRange(const QCPFinancialData* self);
double QCPFinancialData_Key(const QCPFinancialData* self);
void QCPFinancialData_SetKey(QCPFinancialData* self, double key);
double QCPFinancialData_Open(const QCPFinancialData* self);
void QCPFinancialData_SetOpen(QCPFinancialData* self, double open);
double QCPFinancialData_High(const QCPFinancialData* self);
void QCPFinancialData_SetHigh(QCPFinancialData* self, double high);
double QCPFinancialData_Low(const QCPFinancialData* self);
void QCPFinancialData_SetLow(QCPFinancialData* self, double low);
double QCPFinancialData_Close(const QCPFinancialData* self);
void QCPFinancialData_SetClose(QCPFinancialData* self, double close);
void QCPFinancialData_Delete(QCPFinancialData* self);

QCPFinancial* QCPFinancial_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPFinancial_MetaObject(const QCPFinancial* self);
void* QCPFinancial_Metacast(QCPFinancial* self, const char* param1);
int QCPFinancial_Metacall(QCPFinancial* self, int param1, int param2, void** param3);
libqt_string QCPFinancial_Tr(const char* s);
int QCPFinancial_ChartStyle(const QCPFinancial* self);
double QCPFinancial_Width(const QCPFinancial* self);
int QCPFinancial_WidthType(const QCPFinancial* self);
bool QCPFinancial_TwoColored(const QCPFinancial* self);
QBrush* QCPFinancial_BrushPositive(const QCPFinancial* self);
QBrush* QCPFinancial_BrushNegative(const QCPFinancial* self);
QPen* QCPFinancial_PenPositive(const QCPFinancial* self);
QPen* QCPFinancial_PenNegative(const QCPFinancial* self);
void QCPFinancial_SetData2(QCPFinancial* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ open, const libqt_list /* of double */ high, const libqt_list /* of double */ low, const libqt_list /* of double */ close);
void QCPFinancial_SetChartStyle(QCPFinancial* self, int style);
void QCPFinancial_SetWidth(QCPFinancial* self, double width);
void QCPFinancial_SetWidthType(QCPFinancial* self, int widthType);
void QCPFinancial_SetTwoColored(QCPFinancial* self, bool twoColored);
void QCPFinancial_SetBrushPositive(QCPFinancial* self, const QBrush* brush);
void QCPFinancial_SetBrushNegative(QCPFinancial* self, const QBrush* brush);
void QCPFinancial_SetPenPositive(QCPFinancial* self, const QPen* pen);
void QCPFinancial_SetPenNegative(QCPFinancial* self, const QPen* pen);
void QCPFinancial_AddData(QCPFinancial* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ open, const libqt_list /* of double */ high, const libqt_list /* of double */ low, const libqt_list /* of double */ close);
void QCPFinancial_AddData2(QCPFinancial* self, double key, double open, double high, double low, double close);
QCPDataSelection* QCPFinancial_SelectTestRect(const QCPFinancial* self, const QRectF* rect, bool onlySelectable);
double QCPFinancial_SelectTest(const QCPFinancial* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPRange* QCPFinancial_GetKeyRange(const QCPFinancial* self, bool* foundRange, int inSignDomain);
QCPRange* QCPFinancial_GetValueRange(const QCPFinancial* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPFinancial_Draw(QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_DrawLegendIcon(const QCPFinancial* self, QCPPainter* painter, const QRectF* rect);
libqt_string QCPFinancial_Tr2(const char* s, const char* c);
libqt_string QCPFinancial_Tr3(const char* s, const char* c, int n);
void QCPFinancial_SetData6(QCPFinancial* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ open, const libqt_list /* of double */ high, const libqt_list /* of double */ low, const libqt_list /* of double */ close, bool alreadySorted);
void QCPFinancial_AddData6(QCPFinancial* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ open, const libqt_list /* of double */ high, const libqt_list /* of double */ low, const libqt_list /* of double */ close, bool alreadySorted);
void QCPFinancial_OnMetacall(QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseMetacall(QCPFinancial* self, int param1, int param2, void** param3);
void QCPFinancial_OnSelectTestRect(const QCPFinancial* self, intptr_t slot);
QCPDataSelection* QCPFinancial_QBaseSelectTestRect(const QCPFinancial* self, const QRectF* rect, bool onlySelectable);
void QCPFinancial_OnSelectTest(const QCPFinancial* self, intptr_t slot);
double QCPFinancial_QBaseSelectTest(const QCPFinancial* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPFinancial_OnGetKeyRange(const QCPFinancial* self, intptr_t slot);
QCPRange* QCPFinancial_QBaseGetKeyRange(const QCPFinancial* self, bool* foundRange, int inSignDomain);
void QCPFinancial_OnGetValueRange(const QCPFinancial* self, intptr_t slot);
QCPRange* QCPFinancial_QBaseGetValueRange(const QCPFinancial* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPFinancial_OnDraw(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseDraw(QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_OnDrawLegendIcon(const QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseDrawLegendIcon(const QCPFinancial* self, QCPPainter* painter, const QRectF* rect);
int QCPFinancial_DataCount(const QCPFinancial* self);
void QCPFinancial_OnDataCount(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseDataCount(const QCPFinancial* self);
double QCPFinancial_DataMainKey(const QCPFinancial* self, int index);
void QCPFinancial_OnDataMainKey(const QCPFinancial* self, intptr_t slot);
double QCPFinancial_QBaseDataMainKey(const QCPFinancial* self, int index);
double QCPFinancial_DataSortKey(const QCPFinancial* self, int index);
void QCPFinancial_OnDataSortKey(const QCPFinancial* self, intptr_t slot);
double QCPFinancial_QBaseDataSortKey(const QCPFinancial* self, int index);
double QCPFinancial_DataMainValue(const QCPFinancial* self, int index);
void QCPFinancial_OnDataMainValue(const QCPFinancial* self, intptr_t slot);
double QCPFinancial_QBaseDataMainValue(const QCPFinancial* self, int index);
QCPRange* QCPFinancial_DataValueRange(const QCPFinancial* self, int index);
void QCPFinancial_OnDataValueRange(const QCPFinancial* self, intptr_t slot);
QCPRange* QCPFinancial_QBaseDataValueRange(const QCPFinancial* self, int index);
QPointF* QCPFinancial_DataPixelPosition(const QCPFinancial* self, int index);
void QCPFinancial_OnDataPixelPosition(const QCPFinancial* self, intptr_t slot);
QPointF* QCPFinancial_QBaseDataPixelPosition(const QCPFinancial* self, int index);
bool QCPFinancial_SortKeyIsMainKey(const QCPFinancial* self);
void QCPFinancial_OnSortKeyIsMainKey(const QCPFinancial* self, intptr_t slot);
bool QCPFinancial_QBaseSortKeyIsMainKey(const QCPFinancial* self);
int QCPFinancial_FindBegin(const QCPFinancial* self, double sortKey, bool expandedRange);
void QCPFinancial_OnFindBegin(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseFindBegin(const QCPFinancial* self, double sortKey, bool expandedRange);
int QCPFinancial_FindEnd(const QCPFinancial* self, double sortKey, bool expandedRange);
void QCPFinancial_OnFindEnd(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseFindEnd(const QCPFinancial* self, double sortKey, bool expandedRange);
QCPPlottableInterface1D* QCPFinancial_Interface1D(QCPFinancial* self);
void QCPFinancial_OnInterface1D(QCPFinancial* self, intptr_t slot);
QCPPlottableInterface1D* QCPFinancial_QBaseInterface1D(QCPFinancial* self);
QRect* QCPFinancial_ClipRect(const QCPFinancial* self);
void QCPFinancial_OnClipRect(const QCPFinancial* self, intptr_t slot);
QRect* QCPFinancial_QBaseClipRect(const QCPFinancial* self);
int QCPFinancial_SelectionCategory(const QCPFinancial* self);
void QCPFinancial_OnSelectionCategory(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseSelectionCategory(const QCPFinancial* self);
void QCPFinancial_ApplyDefaultAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_OnApplyDefaultAntialiasingHint(const QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseApplyDefaultAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_SelectEvent(QCPFinancial* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPFinancial_OnSelectEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseSelectEvent(QCPFinancial* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPFinancial_DeselectEvent(QCPFinancial* self, bool* selectionStateChanged);
void QCPFinancial_OnDeselectEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseDeselectEvent(QCPFinancial* self, bool* selectionStateChanged);
void QCPFinancial_ParentPlotInitialized(QCPFinancial* self, QCustomPlot* parentPlot);
void QCPFinancial_OnParentPlotInitialized(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseParentPlotInitialized(QCPFinancial* self, QCustomPlot* parentPlot);
void QCPFinancial_MousePressEvent(QCPFinancial* self, QMouseEvent* event, const QVariant* details);
void QCPFinancial_OnMousePressEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseMousePressEvent(QCPFinancial* self, QMouseEvent* event, const QVariant* details);
void QCPFinancial_MouseMoveEvent(QCPFinancial* self, QMouseEvent* event, const QPointF* startPos);
void QCPFinancial_OnMouseMoveEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseMouseMoveEvent(QCPFinancial* self, QMouseEvent* event, const QPointF* startPos);
void QCPFinancial_MouseReleaseEvent(QCPFinancial* self, QMouseEvent* event, const QPointF* startPos);
void QCPFinancial_OnMouseReleaseEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseMouseReleaseEvent(QCPFinancial* self, QMouseEvent* event, const QPointF* startPos);
void QCPFinancial_MouseDoubleClickEvent(QCPFinancial* self, QMouseEvent* event, const QVariant* details);
void QCPFinancial_OnMouseDoubleClickEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseMouseDoubleClickEvent(QCPFinancial* self, QMouseEvent* event, const QVariant* details);
void QCPFinancial_WheelEvent(QCPFinancial* self, QWheelEvent* event);
void QCPFinancial_OnWheelEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseWheelEvent(QCPFinancial* self, QWheelEvent* event);
bool QCPFinancial_Event(QCPFinancial* self, QEvent* event);
void QCPFinancial_OnEvent(QCPFinancial* self, intptr_t slot);
bool QCPFinancial_QBaseEvent(QCPFinancial* self, QEvent* event);
bool QCPFinancial_EventFilter(QCPFinancial* self, QObject* watched, QEvent* event);
void QCPFinancial_OnEventFilter(QCPFinancial* self, intptr_t slot);
bool QCPFinancial_QBaseEventFilter(QCPFinancial* self, QObject* watched, QEvent* event);
void QCPFinancial_TimerEvent(QCPFinancial* self, QTimerEvent* event);
void QCPFinancial_OnTimerEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseTimerEvent(QCPFinancial* self, QTimerEvent* event);
void QCPFinancial_ChildEvent(QCPFinancial* self, QChildEvent* event);
void QCPFinancial_OnChildEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseChildEvent(QCPFinancial* self, QChildEvent* event);
void QCPFinancial_CustomEvent(QCPFinancial* self, QEvent* event);
void QCPFinancial_OnCustomEvent(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseCustomEvent(QCPFinancial* self, QEvent* event);
void QCPFinancial_ConnectNotify(QCPFinancial* self, const QMetaMethod* signal);
void QCPFinancial_OnConnectNotify(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseConnectNotify(QCPFinancial* self, const QMetaMethod* signal);
void QCPFinancial_DisconnectNotify(QCPFinancial* self, const QMetaMethod* signal);
void QCPFinancial_OnDisconnectNotify(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseDisconnectNotify(QCPFinancial* self, const QMetaMethod* signal);
double QCPFinancial_GetPixelWidth(const QCPFinancial* self, double key, double keyPixel);
void QCPFinancial_OnGetPixelWidth(const QCPFinancial* self, intptr_t slot);
double QCPFinancial_QBaseGetPixelWidth(const QCPFinancial* self, double key, double keyPixel);
void QCPFinancial_ApplyFillAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_OnApplyFillAntialiasingHint(const QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseApplyFillAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_ApplyScattersAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_OnApplyScattersAntialiasingHint(const QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseApplyScattersAntialiasingHint(const QCPFinancial* self, QCPPainter* painter);
void QCPFinancial_InitializeParentPlot(QCPFinancial* self, QCustomPlot* parentPlot);
void QCPFinancial_OnInitializeParentPlot(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseInitializeParentPlot(QCPFinancial* self, QCustomPlot* parentPlot);
void QCPFinancial_SetParentLayerable(QCPFinancial* self, QCPLayerable* parentLayerable);
void QCPFinancial_OnSetParentLayerable(QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseSetParentLayerable(QCPFinancial* self, QCPLayerable* parentLayerable);
bool QCPFinancial_MoveToLayer(QCPFinancial* self, QCPLayer* layer, bool prepend);
void QCPFinancial_OnMoveToLayer(QCPFinancial* self, intptr_t slot);
bool QCPFinancial_QBaseMoveToLayer(QCPFinancial* self, QCPLayer* layer, bool prepend);
void QCPFinancial_ApplyAntialiasingHint(const QCPFinancial* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPFinancial_OnApplyAntialiasingHint(const QCPFinancial* self, intptr_t slot);
void QCPFinancial_QBaseApplyAntialiasingHint(const QCPFinancial* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPFinancial_Sender(const QCPFinancial* self);
void QCPFinancial_OnSender(const QCPFinancial* self, intptr_t slot);
QObject* QCPFinancial_QBaseSender(const QCPFinancial* self);
int QCPFinancial_SenderSignalIndex(const QCPFinancial* self);
void QCPFinancial_OnSenderSignalIndex(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseSenderSignalIndex(const QCPFinancial* self);
int QCPFinancial_Receivers(const QCPFinancial* self, const char* signal);
void QCPFinancial_OnReceivers(const QCPFinancial* self, intptr_t slot);
int QCPFinancial_QBaseReceivers(const QCPFinancial* self, const char* signal);
bool QCPFinancial_IsSignalConnected(const QCPFinancial* self, const QMetaMethod* signal);
void QCPFinancial_OnIsSignalConnected(const QCPFinancial* self, intptr_t slot);
bool QCPFinancial_QBaseIsSignalConnected(const QCPFinancial* self, const QMetaMethod* signal);
void QCPFinancial_Delete(QCPFinancial* self);

QCPErrorBarsData* QCPErrorBarsData_new(const QCPErrorBarsData* other);
QCPErrorBarsData* QCPErrorBarsData_new2(QCPErrorBarsData* other);
QCPErrorBarsData* QCPErrorBarsData_new3();
QCPErrorBarsData* QCPErrorBarsData_new4(double errorVal);
QCPErrorBarsData* QCPErrorBarsData_new5(double errorMinus, double errorPlus);
QCPErrorBarsData* QCPErrorBarsData_new6(const QCPErrorBarsData* param1);
void QCPErrorBarsData_CopyAssign(QCPErrorBarsData* self, QCPErrorBarsData* other);
void QCPErrorBarsData_MoveAssign(QCPErrorBarsData* self, QCPErrorBarsData* other);
double QCPErrorBarsData_ErrorMinus(const QCPErrorBarsData* self);
void QCPErrorBarsData_SetErrorMinus(QCPErrorBarsData* self, double errorMinus);
double QCPErrorBarsData_ErrorPlus(const QCPErrorBarsData* self);
void QCPErrorBarsData_SetErrorPlus(QCPErrorBarsData* self, double errorPlus);
void QCPErrorBarsData_Delete(QCPErrorBarsData* self);

QCPErrorBars* QCPErrorBars_new(QCPAxis* keyAxis, QCPAxis* valueAxis);
QMetaObject* QCPErrorBars_MetaObject(const QCPErrorBars* self);
void* QCPErrorBars_Metacast(QCPErrorBars* self, const char* param1);
int QCPErrorBars_Metacall(QCPErrorBars* self, int param1, int param2, void** param3);
libqt_string QCPErrorBars_Tr(const char* s);
QCPAbstractPlottable* QCPErrorBars_DataPlottable(const QCPErrorBars* self);
int QCPErrorBars_ErrorType(const QCPErrorBars* self);
double QCPErrorBars_WhiskerWidth(const QCPErrorBars* self);
double QCPErrorBars_SymbolGap(const QCPErrorBars* self);
void QCPErrorBars_SetData2(QCPErrorBars* self, const libqt_list /* of double */ errorVal);
void QCPErrorBars_SetData3(QCPErrorBars* self, const libqt_list /* of double */ errorMinus, const libqt_list /* of double */ errorPlus);
void QCPErrorBars_SetDataPlottable(QCPErrorBars* self, QCPAbstractPlottable* plottable);
void QCPErrorBars_SetErrorType(QCPErrorBars* self, int typeVal);
void QCPErrorBars_SetWhiskerWidth(QCPErrorBars* self, double pixels);
void QCPErrorBars_SetSymbolGap(QCPErrorBars* self, double pixels);
void QCPErrorBars_AddData(QCPErrorBars* self, const libqt_list /* of double */ errorVal);
void QCPErrorBars_AddData2(QCPErrorBars* self, const libqt_list /* of double */ errorMinus, const libqt_list /* of double */ errorPlus);
void QCPErrorBars_AddData3(QCPErrorBars* self, double errorVal);
void QCPErrorBars_AddData4(QCPErrorBars* self, double errorMinus, double errorPlus);
int QCPErrorBars_DataCount(const QCPErrorBars* self);
double QCPErrorBars_DataMainKey(const QCPErrorBars* self, int index);
double QCPErrorBars_DataSortKey(const QCPErrorBars* self, int index);
double QCPErrorBars_DataMainValue(const QCPErrorBars* self, int index);
QCPRange* QCPErrorBars_DataValueRange(const QCPErrorBars* self, int index);
QPointF* QCPErrorBars_DataPixelPosition(const QCPErrorBars* self, int index);
bool QCPErrorBars_SortKeyIsMainKey(const QCPErrorBars* self);
QCPDataSelection* QCPErrorBars_SelectTestRect(const QCPErrorBars* self, const QRectF* rect, bool onlySelectable);
int QCPErrorBars_FindBegin(const QCPErrorBars* self, double sortKey, bool expandedRange);
int QCPErrorBars_FindEnd(const QCPErrorBars* self, double sortKey, bool expandedRange);
double QCPErrorBars_SelectTest(const QCPErrorBars* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPPlottableInterface1D* QCPErrorBars_Interface1D(QCPErrorBars* self);
void QCPErrorBars_Draw(QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_DrawLegendIcon(const QCPErrorBars* self, QCPPainter* painter, const QRectF* rect);
QCPRange* QCPErrorBars_GetKeyRange(const QCPErrorBars* self, bool* foundRange, int inSignDomain);
QCPRange* QCPErrorBars_GetValueRange(const QCPErrorBars* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
libqt_string QCPErrorBars_Tr2(const char* s, const char* c);
libqt_string QCPErrorBars_Tr3(const char* s, const char* c, int n);
void QCPErrorBars_OnMetacall(QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseMetacall(QCPErrorBars* self, int param1, int param2, void** param3);
void QCPErrorBars_OnDataCount(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseDataCount(const QCPErrorBars* self);
void QCPErrorBars_OnDataMainKey(const QCPErrorBars* self, intptr_t slot);
double QCPErrorBars_QBaseDataMainKey(const QCPErrorBars* self, int index);
void QCPErrorBars_OnDataSortKey(const QCPErrorBars* self, intptr_t slot);
double QCPErrorBars_QBaseDataSortKey(const QCPErrorBars* self, int index);
void QCPErrorBars_OnDataMainValue(const QCPErrorBars* self, intptr_t slot);
double QCPErrorBars_QBaseDataMainValue(const QCPErrorBars* self, int index);
void QCPErrorBars_OnDataValueRange(const QCPErrorBars* self, intptr_t slot);
QCPRange* QCPErrorBars_QBaseDataValueRange(const QCPErrorBars* self, int index);
void QCPErrorBars_OnDataPixelPosition(const QCPErrorBars* self, intptr_t slot);
QPointF* QCPErrorBars_QBaseDataPixelPosition(const QCPErrorBars* self, int index);
void QCPErrorBars_OnSortKeyIsMainKey(const QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseSortKeyIsMainKey(const QCPErrorBars* self);
void QCPErrorBars_OnSelectTestRect(const QCPErrorBars* self, intptr_t slot);
QCPDataSelection* QCPErrorBars_QBaseSelectTestRect(const QCPErrorBars* self, const QRectF* rect, bool onlySelectable);
void QCPErrorBars_OnFindBegin(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseFindBegin(const QCPErrorBars* self, double sortKey, bool expandedRange);
void QCPErrorBars_OnFindEnd(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseFindEnd(const QCPErrorBars* self, double sortKey, bool expandedRange);
void QCPErrorBars_OnSelectTest(const QCPErrorBars* self, intptr_t slot);
double QCPErrorBars_QBaseSelectTest(const QCPErrorBars* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPErrorBars_OnInterface1D(QCPErrorBars* self, intptr_t slot);
QCPPlottableInterface1D* QCPErrorBars_QBaseInterface1D(QCPErrorBars* self);
void QCPErrorBars_OnDraw(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseDraw(QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_OnDrawLegendIcon(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseDrawLegendIcon(const QCPErrorBars* self, QCPPainter* painter, const QRectF* rect);
void QCPErrorBars_OnGetKeyRange(const QCPErrorBars* self, intptr_t slot);
QCPRange* QCPErrorBars_QBaseGetKeyRange(const QCPErrorBars* self, bool* foundRange, int inSignDomain);
void QCPErrorBars_OnGetValueRange(const QCPErrorBars* self, intptr_t slot);
QCPRange* QCPErrorBars_QBaseGetValueRange(const QCPErrorBars* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
QRect* QCPErrorBars_ClipRect(const QCPErrorBars* self);
void QCPErrorBars_OnClipRect(const QCPErrorBars* self, intptr_t slot);
QRect* QCPErrorBars_QBaseClipRect(const QCPErrorBars* self);
int QCPErrorBars_SelectionCategory(const QCPErrorBars* self);
void QCPErrorBars_OnSelectionCategory(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseSelectionCategory(const QCPErrorBars* self);
void QCPErrorBars_ApplyDefaultAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_OnApplyDefaultAntialiasingHint(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseApplyDefaultAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_SelectEvent(QCPErrorBars* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPErrorBars_OnSelectEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseSelectEvent(QCPErrorBars* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPErrorBars_DeselectEvent(QCPErrorBars* self, bool* selectionStateChanged);
void QCPErrorBars_OnDeselectEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseDeselectEvent(QCPErrorBars* self, bool* selectionStateChanged);
void QCPErrorBars_ParentPlotInitialized(QCPErrorBars* self, QCustomPlot* parentPlot);
void QCPErrorBars_OnParentPlotInitialized(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseParentPlotInitialized(QCPErrorBars* self, QCustomPlot* parentPlot);
void QCPErrorBars_MousePressEvent(QCPErrorBars* self, QMouseEvent* event, const QVariant* details);
void QCPErrorBars_OnMousePressEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseMousePressEvent(QCPErrorBars* self, QMouseEvent* event, const QVariant* details);
void QCPErrorBars_MouseMoveEvent(QCPErrorBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPErrorBars_OnMouseMoveEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseMouseMoveEvent(QCPErrorBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPErrorBars_MouseReleaseEvent(QCPErrorBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPErrorBars_OnMouseReleaseEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseMouseReleaseEvent(QCPErrorBars* self, QMouseEvent* event, const QPointF* startPos);
void QCPErrorBars_MouseDoubleClickEvent(QCPErrorBars* self, QMouseEvent* event, const QVariant* details);
void QCPErrorBars_OnMouseDoubleClickEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseMouseDoubleClickEvent(QCPErrorBars* self, QMouseEvent* event, const QVariant* details);
void QCPErrorBars_WheelEvent(QCPErrorBars* self, QWheelEvent* event);
void QCPErrorBars_OnWheelEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseWheelEvent(QCPErrorBars* self, QWheelEvent* event);
bool QCPErrorBars_Event(QCPErrorBars* self, QEvent* event);
void QCPErrorBars_OnEvent(QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseEvent(QCPErrorBars* self, QEvent* event);
bool QCPErrorBars_EventFilter(QCPErrorBars* self, QObject* watched, QEvent* event);
void QCPErrorBars_OnEventFilter(QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseEventFilter(QCPErrorBars* self, QObject* watched, QEvent* event);
void QCPErrorBars_TimerEvent(QCPErrorBars* self, QTimerEvent* event);
void QCPErrorBars_OnTimerEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseTimerEvent(QCPErrorBars* self, QTimerEvent* event);
void QCPErrorBars_ChildEvent(QCPErrorBars* self, QChildEvent* event);
void QCPErrorBars_OnChildEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseChildEvent(QCPErrorBars* self, QChildEvent* event);
void QCPErrorBars_CustomEvent(QCPErrorBars* self, QEvent* event);
void QCPErrorBars_OnCustomEvent(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseCustomEvent(QCPErrorBars* self, QEvent* event);
void QCPErrorBars_ConnectNotify(QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_OnConnectNotify(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseConnectNotify(QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_DisconnectNotify(QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_OnDisconnectNotify(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseDisconnectNotify(QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_GetDataSegments(const QCPErrorBars* self, libqt_list /* of QCPDataRange* */ selectedSegments, libqt_list /* of QCPDataRange* */ unselectedSegments);
void QCPErrorBars_OnGetDataSegments(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseGetDataSegments(const QCPErrorBars* self, libqt_list /* of QCPDataRange* */ selectedSegments, libqt_list /* of QCPDataRange* */ unselectedSegments);
bool QCPErrorBars_ErrorBarVisible(const QCPErrorBars* self, int index);
void QCPErrorBars_OnErrorBarVisible(const QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseErrorBarVisible(const QCPErrorBars* self, int index);
bool QCPErrorBars_RectIntersectsLine(const QCPErrorBars* self, const QRectF* pixelRect, const QLineF* line);
void QCPErrorBars_OnRectIntersectsLine(const QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseRectIntersectsLine(const QCPErrorBars* self, const QRectF* pixelRect, const QLineF* line);
void QCPErrorBars_ApplyFillAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_OnApplyFillAntialiasingHint(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseApplyFillAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_ApplyScattersAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_OnApplyScattersAntialiasingHint(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseApplyScattersAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter);
void QCPErrorBars_InitializeParentPlot(QCPErrorBars* self, QCustomPlot* parentPlot);
void QCPErrorBars_OnInitializeParentPlot(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseInitializeParentPlot(QCPErrorBars* self, QCustomPlot* parentPlot);
void QCPErrorBars_SetParentLayerable(QCPErrorBars* self, QCPLayerable* parentLayerable);
void QCPErrorBars_OnSetParentLayerable(QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseSetParentLayerable(QCPErrorBars* self, QCPLayerable* parentLayerable);
bool QCPErrorBars_MoveToLayer(QCPErrorBars* self, QCPLayer* layer, bool prepend);
void QCPErrorBars_OnMoveToLayer(QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseMoveToLayer(QCPErrorBars* self, QCPLayer* layer, bool prepend);
void QCPErrorBars_ApplyAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPErrorBars_OnApplyAntialiasingHint(const QCPErrorBars* self, intptr_t slot);
void QCPErrorBars_QBaseApplyAntialiasingHint(const QCPErrorBars* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPErrorBars_Sender(const QCPErrorBars* self);
void QCPErrorBars_OnSender(const QCPErrorBars* self, intptr_t slot);
QObject* QCPErrorBars_QBaseSender(const QCPErrorBars* self);
int QCPErrorBars_SenderSignalIndex(const QCPErrorBars* self);
void QCPErrorBars_OnSenderSignalIndex(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseSenderSignalIndex(const QCPErrorBars* self);
int QCPErrorBars_Receivers(const QCPErrorBars* self, const char* signal);
void QCPErrorBars_OnReceivers(const QCPErrorBars* self, intptr_t slot);
int QCPErrorBars_QBaseReceivers(const QCPErrorBars* self, const char* signal);
bool QCPErrorBars_IsSignalConnected(const QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_OnIsSignalConnected(const QCPErrorBars* self, intptr_t slot);
bool QCPErrorBars_QBaseIsSignalConnected(const QCPErrorBars* self, const QMetaMethod* signal);
void QCPErrorBars_Delete(QCPErrorBars* self);

QCPItemStraightLine* QCPItemStraightLine_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemStraightLine_MetaObject(const QCPItemStraightLine* self);
void* QCPItemStraightLine_Metacast(QCPItemStraightLine* self, const char* param1);
int QCPItemStraightLine_Metacall(QCPItemStraightLine* self, int param1, int param2, void** param3);
libqt_string QCPItemStraightLine_Tr(const char* s);
QPen* QCPItemStraightLine_Pen(const QCPItemStraightLine* self);
QPen* QCPItemStraightLine_SelectedPen(const QCPItemStraightLine* self);
void QCPItemStraightLine_SetPen(QCPItemStraightLine* self, const QPen* pen);
void QCPItemStraightLine_SetSelectedPen(QCPItemStraightLine* self, const QPen* pen);
double QCPItemStraightLine_SelectTest(const QCPItemStraightLine* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemStraightLine_Point1(const QCPItemStraightLine* self);
QCPItemPosition* QCPItemStraightLine_Point2(const QCPItemStraightLine* self);
void QCPItemStraightLine_Draw(QCPItemStraightLine* self, QCPPainter* painter);
libqt_string QCPItemStraightLine_Tr2(const char* s, const char* c);
libqt_string QCPItemStraightLine_Tr3(const char* s, const char* c, int n);
void QCPItemStraightLine_OnMetacall(QCPItemStraightLine* self, intptr_t slot);
int QCPItemStraightLine_QBaseMetacall(QCPItemStraightLine* self, int param1, int param2, void** param3);
void QCPItemStraightLine_OnSelectTest(const QCPItemStraightLine* self, intptr_t slot);
double QCPItemStraightLine_QBaseSelectTest(const QCPItemStraightLine* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemStraightLine_OnDraw(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseDraw(QCPItemStraightLine* self, QCPPainter* painter);
int QCPItemStraightLine_SelectionCategory(const QCPItemStraightLine* self);
void QCPItemStraightLine_OnSelectionCategory(const QCPItemStraightLine* self, intptr_t slot);
int QCPItemStraightLine_QBaseSelectionCategory(const QCPItemStraightLine* self);
QRect* QCPItemStraightLine_ClipRect(const QCPItemStraightLine* self);
void QCPItemStraightLine_OnClipRect(const QCPItemStraightLine* self, intptr_t slot);
QRect* QCPItemStraightLine_QBaseClipRect(const QCPItemStraightLine* self);
void QCPItemStraightLine_ApplyDefaultAntialiasingHint(const QCPItemStraightLine* self, QCPPainter* painter);
void QCPItemStraightLine_OnApplyDefaultAntialiasingHint(const QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseApplyDefaultAntialiasingHint(const QCPItemStraightLine* self, QCPPainter* painter);
void QCPItemStraightLine_SelectEvent(QCPItemStraightLine* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemStraightLine_OnSelectEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseSelectEvent(QCPItemStraightLine* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemStraightLine_DeselectEvent(QCPItemStraightLine* self, bool* selectionStateChanged);
void QCPItemStraightLine_OnDeselectEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseDeselectEvent(QCPItemStraightLine* self, bool* selectionStateChanged);
QPointF* QCPItemStraightLine_AnchorPixelPosition(const QCPItemStraightLine* self, int anchorId);
void QCPItemStraightLine_OnAnchorPixelPosition(const QCPItemStraightLine* self, intptr_t slot);
QPointF* QCPItemStraightLine_QBaseAnchorPixelPosition(const QCPItemStraightLine* self, int anchorId);
void QCPItemStraightLine_ParentPlotInitialized(QCPItemStraightLine* self, QCustomPlot* parentPlot);
void QCPItemStraightLine_OnParentPlotInitialized(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseParentPlotInitialized(QCPItemStraightLine* self, QCustomPlot* parentPlot);
void QCPItemStraightLine_MousePressEvent(QCPItemStraightLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemStraightLine_OnMousePressEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseMousePressEvent(QCPItemStraightLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemStraightLine_MouseMoveEvent(QCPItemStraightLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemStraightLine_OnMouseMoveEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseMouseMoveEvent(QCPItemStraightLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemStraightLine_MouseReleaseEvent(QCPItemStraightLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemStraightLine_OnMouseReleaseEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseMouseReleaseEvent(QCPItemStraightLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemStraightLine_MouseDoubleClickEvent(QCPItemStraightLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemStraightLine_OnMouseDoubleClickEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseMouseDoubleClickEvent(QCPItemStraightLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemStraightLine_WheelEvent(QCPItemStraightLine* self, QWheelEvent* event);
void QCPItemStraightLine_OnWheelEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseWheelEvent(QCPItemStraightLine* self, QWheelEvent* event);
bool QCPItemStraightLine_Event(QCPItemStraightLine* self, QEvent* event);
void QCPItemStraightLine_OnEvent(QCPItemStraightLine* self, intptr_t slot);
bool QCPItemStraightLine_QBaseEvent(QCPItemStraightLine* self, QEvent* event);
bool QCPItemStraightLine_EventFilter(QCPItemStraightLine* self, QObject* watched, QEvent* event);
void QCPItemStraightLine_OnEventFilter(QCPItemStraightLine* self, intptr_t slot);
bool QCPItemStraightLine_QBaseEventFilter(QCPItemStraightLine* self, QObject* watched, QEvent* event);
void QCPItemStraightLine_TimerEvent(QCPItemStraightLine* self, QTimerEvent* event);
void QCPItemStraightLine_OnTimerEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseTimerEvent(QCPItemStraightLine* self, QTimerEvent* event);
void QCPItemStraightLine_ChildEvent(QCPItemStraightLine* self, QChildEvent* event);
void QCPItemStraightLine_OnChildEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseChildEvent(QCPItemStraightLine* self, QChildEvent* event);
void QCPItemStraightLine_CustomEvent(QCPItemStraightLine* self, QEvent* event);
void QCPItemStraightLine_OnCustomEvent(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseCustomEvent(QCPItemStraightLine* self, QEvent* event);
void QCPItemStraightLine_ConnectNotify(QCPItemStraightLine* self, const QMetaMethod* signal);
void QCPItemStraightLine_OnConnectNotify(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseConnectNotify(QCPItemStraightLine* self, const QMetaMethod* signal);
void QCPItemStraightLine_DisconnectNotify(QCPItemStraightLine* self, const QMetaMethod* signal);
void QCPItemStraightLine_OnDisconnectNotify(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseDisconnectNotify(QCPItemStraightLine* self, const QMetaMethod* signal);
QLineF* QCPItemStraightLine_GetRectClippedStraightLine(const QCPItemStraightLine* self, const QCPVector2D* base, const QCPVector2D* vec, const QRect* rect);
void QCPItemStraightLine_OnGetRectClippedStraightLine(const QCPItemStraightLine* self, intptr_t slot);
QLineF* QCPItemStraightLine_QBaseGetRectClippedStraightLine(const QCPItemStraightLine* self, const QCPVector2D* base, const QCPVector2D* vec, const QRect* rect);
QPen* QCPItemStraightLine_MainPen(const QCPItemStraightLine* self);
void QCPItemStraightLine_OnMainPen(const QCPItemStraightLine* self, intptr_t slot);
QPen* QCPItemStraightLine_QBaseMainPen(const QCPItemStraightLine* self);
double QCPItemStraightLine_RectDistance(const QCPItemStraightLine* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemStraightLine_OnRectDistance(const QCPItemStraightLine* self, intptr_t slot);
double QCPItemStraightLine_QBaseRectDistance(const QCPItemStraightLine* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemStraightLine_CreatePosition(QCPItemStraightLine* self, const libqt_string name);
void QCPItemStraightLine_OnCreatePosition(QCPItemStraightLine* self, intptr_t slot);
QCPItemPosition* QCPItemStraightLine_QBaseCreatePosition(QCPItemStraightLine* self, const libqt_string name);
QCPItemAnchor* QCPItemStraightLine_CreateAnchor(QCPItemStraightLine* self, const libqt_string name, int anchorId);
void QCPItemStraightLine_OnCreateAnchor(QCPItemStraightLine* self, intptr_t slot);
QCPItemAnchor* QCPItemStraightLine_QBaseCreateAnchor(QCPItemStraightLine* self, const libqt_string name, int anchorId);
void QCPItemStraightLine_InitializeParentPlot(QCPItemStraightLine* self, QCustomPlot* parentPlot);
void QCPItemStraightLine_OnInitializeParentPlot(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseInitializeParentPlot(QCPItemStraightLine* self, QCustomPlot* parentPlot);
void QCPItemStraightLine_SetParentLayerable(QCPItemStraightLine* self, QCPLayerable* parentLayerable);
void QCPItemStraightLine_OnSetParentLayerable(QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseSetParentLayerable(QCPItemStraightLine* self, QCPLayerable* parentLayerable);
bool QCPItemStraightLine_MoveToLayer(QCPItemStraightLine* self, QCPLayer* layer, bool prepend);
void QCPItemStraightLine_OnMoveToLayer(QCPItemStraightLine* self, intptr_t slot);
bool QCPItemStraightLine_QBaseMoveToLayer(QCPItemStraightLine* self, QCPLayer* layer, bool prepend);
void QCPItemStraightLine_ApplyAntialiasingHint(const QCPItemStraightLine* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemStraightLine_OnApplyAntialiasingHint(const QCPItemStraightLine* self, intptr_t slot);
void QCPItemStraightLine_QBaseApplyAntialiasingHint(const QCPItemStraightLine* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemStraightLine_Sender(const QCPItemStraightLine* self);
void QCPItemStraightLine_OnSender(const QCPItemStraightLine* self, intptr_t slot);
QObject* QCPItemStraightLine_QBaseSender(const QCPItemStraightLine* self);
int QCPItemStraightLine_SenderSignalIndex(const QCPItemStraightLine* self);
void QCPItemStraightLine_OnSenderSignalIndex(const QCPItemStraightLine* self, intptr_t slot);
int QCPItemStraightLine_QBaseSenderSignalIndex(const QCPItemStraightLine* self);
int QCPItemStraightLine_Receivers(const QCPItemStraightLine* self, const char* signal);
void QCPItemStraightLine_OnReceivers(const QCPItemStraightLine* self, intptr_t slot);
int QCPItemStraightLine_QBaseReceivers(const QCPItemStraightLine* self, const char* signal);
bool QCPItemStraightLine_IsSignalConnected(const QCPItemStraightLine* self, const QMetaMethod* signal);
void QCPItemStraightLine_OnIsSignalConnected(const QCPItemStraightLine* self, intptr_t slot);
bool QCPItemStraightLine_QBaseIsSignalConnected(const QCPItemStraightLine* self, const QMetaMethod* signal);
void QCPItemStraightLine_Delete(QCPItemStraightLine* self);

QCPItemLine* QCPItemLine_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemLine_MetaObject(const QCPItemLine* self);
void* QCPItemLine_Metacast(QCPItemLine* self, const char* param1);
int QCPItemLine_Metacall(QCPItemLine* self, int param1, int param2, void** param3);
libqt_string QCPItemLine_Tr(const char* s);
QPen* QCPItemLine_Pen(const QCPItemLine* self);
QPen* QCPItemLine_SelectedPen(const QCPItemLine* self);
QCPLineEnding* QCPItemLine_Head(const QCPItemLine* self);
QCPLineEnding* QCPItemLine_Tail(const QCPItemLine* self);
void QCPItemLine_SetPen(QCPItemLine* self, const QPen* pen);
void QCPItemLine_SetSelectedPen(QCPItemLine* self, const QPen* pen);
void QCPItemLine_SetHead(QCPItemLine* self, const QCPLineEnding* head);
void QCPItemLine_SetTail(QCPItemLine* self, const QCPLineEnding* tail);
double QCPItemLine_SelectTest(const QCPItemLine* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemLine_Start(const QCPItemLine* self);
QCPItemPosition* QCPItemLine_End(const QCPItemLine* self);
void QCPItemLine_Draw(QCPItemLine* self, QCPPainter* painter);
libqt_string QCPItemLine_Tr2(const char* s, const char* c);
libqt_string QCPItemLine_Tr3(const char* s, const char* c, int n);
void QCPItemLine_OnMetacall(QCPItemLine* self, intptr_t slot);
int QCPItemLine_QBaseMetacall(QCPItemLine* self, int param1, int param2, void** param3);
void QCPItemLine_OnSelectTest(const QCPItemLine* self, intptr_t slot);
double QCPItemLine_QBaseSelectTest(const QCPItemLine* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemLine_OnDraw(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseDraw(QCPItemLine* self, QCPPainter* painter);
int QCPItemLine_SelectionCategory(const QCPItemLine* self);
void QCPItemLine_OnSelectionCategory(const QCPItemLine* self, intptr_t slot);
int QCPItemLine_QBaseSelectionCategory(const QCPItemLine* self);
QRect* QCPItemLine_ClipRect(const QCPItemLine* self);
void QCPItemLine_OnClipRect(const QCPItemLine* self, intptr_t slot);
QRect* QCPItemLine_QBaseClipRect(const QCPItemLine* self);
void QCPItemLine_ApplyDefaultAntialiasingHint(const QCPItemLine* self, QCPPainter* painter);
void QCPItemLine_OnApplyDefaultAntialiasingHint(const QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseApplyDefaultAntialiasingHint(const QCPItemLine* self, QCPPainter* painter);
void QCPItemLine_SelectEvent(QCPItemLine* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemLine_OnSelectEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseSelectEvent(QCPItemLine* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemLine_DeselectEvent(QCPItemLine* self, bool* selectionStateChanged);
void QCPItemLine_OnDeselectEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseDeselectEvent(QCPItemLine* self, bool* selectionStateChanged);
QPointF* QCPItemLine_AnchorPixelPosition(const QCPItemLine* self, int anchorId);
void QCPItemLine_OnAnchorPixelPosition(const QCPItemLine* self, intptr_t slot);
QPointF* QCPItemLine_QBaseAnchorPixelPosition(const QCPItemLine* self, int anchorId);
void QCPItemLine_ParentPlotInitialized(QCPItemLine* self, QCustomPlot* parentPlot);
void QCPItemLine_OnParentPlotInitialized(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseParentPlotInitialized(QCPItemLine* self, QCustomPlot* parentPlot);
void QCPItemLine_MousePressEvent(QCPItemLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemLine_OnMousePressEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseMousePressEvent(QCPItemLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemLine_MouseMoveEvent(QCPItemLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemLine_OnMouseMoveEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseMouseMoveEvent(QCPItemLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemLine_MouseReleaseEvent(QCPItemLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemLine_OnMouseReleaseEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseMouseReleaseEvent(QCPItemLine* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemLine_MouseDoubleClickEvent(QCPItemLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemLine_OnMouseDoubleClickEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseMouseDoubleClickEvent(QCPItemLine* self, QMouseEvent* event, const QVariant* details);
void QCPItemLine_WheelEvent(QCPItemLine* self, QWheelEvent* event);
void QCPItemLine_OnWheelEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseWheelEvent(QCPItemLine* self, QWheelEvent* event);
bool QCPItemLine_Event(QCPItemLine* self, QEvent* event);
void QCPItemLine_OnEvent(QCPItemLine* self, intptr_t slot);
bool QCPItemLine_QBaseEvent(QCPItemLine* self, QEvent* event);
bool QCPItemLine_EventFilter(QCPItemLine* self, QObject* watched, QEvent* event);
void QCPItemLine_OnEventFilter(QCPItemLine* self, intptr_t slot);
bool QCPItemLine_QBaseEventFilter(QCPItemLine* self, QObject* watched, QEvent* event);
void QCPItemLine_TimerEvent(QCPItemLine* self, QTimerEvent* event);
void QCPItemLine_OnTimerEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseTimerEvent(QCPItemLine* self, QTimerEvent* event);
void QCPItemLine_ChildEvent(QCPItemLine* self, QChildEvent* event);
void QCPItemLine_OnChildEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseChildEvent(QCPItemLine* self, QChildEvent* event);
void QCPItemLine_CustomEvent(QCPItemLine* self, QEvent* event);
void QCPItemLine_OnCustomEvent(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseCustomEvent(QCPItemLine* self, QEvent* event);
void QCPItemLine_ConnectNotify(QCPItemLine* self, const QMetaMethod* signal);
void QCPItemLine_OnConnectNotify(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseConnectNotify(QCPItemLine* self, const QMetaMethod* signal);
void QCPItemLine_DisconnectNotify(QCPItemLine* self, const QMetaMethod* signal);
void QCPItemLine_OnDisconnectNotify(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseDisconnectNotify(QCPItemLine* self, const QMetaMethod* signal);
QLineF* QCPItemLine_GetRectClippedLine(const QCPItemLine* self, const QCPVector2D* start, const QCPVector2D* end, const QRect* rect);
void QCPItemLine_OnGetRectClippedLine(const QCPItemLine* self, intptr_t slot);
QLineF* QCPItemLine_QBaseGetRectClippedLine(const QCPItemLine* self, const QCPVector2D* start, const QCPVector2D* end, const QRect* rect);
QPen* QCPItemLine_MainPen(const QCPItemLine* self);
void QCPItemLine_OnMainPen(const QCPItemLine* self, intptr_t slot);
QPen* QCPItemLine_QBaseMainPen(const QCPItemLine* self);
double QCPItemLine_RectDistance(const QCPItemLine* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemLine_OnRectDistance(const QCPItemLine* self, intptr_t slot);
double QCPItemLine_QBaseRectDistance(const QCPItemLine* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemLine_CreatePosition(QCPItemLine* self, const libqt_string name);
void QCPItemLine_OnCreatePosition(QCPItemLine* self, intptr_t slot);
QCPItemPosition* QCPItemLine_QBaseCreatePosition(QCPItemLine* self, const libqt_string name);
QCPItemAnchor* QCPItemLine_CreateAnchor(QCPItemLine* self, const libqt_string name, int anchorId);
void QCPItemLine_OnCreateAnchor(QCPItemLine* self, intptr_t slot);
QCPItemAnchor* QCPItemLine_QBaseCreateAnchor(QCPItemLine* self, const libqt_string name, int anchorId);
void QCPItemLine_InitializeParentPlot(QCPItemLine* self, QCustomPlot* parentPlot);
void QCPItemLine_OnInitializeParentPlot(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseInitializeParentPlot(QCPItemLine* self, QCustomPlot* parentPlot);
void QCPItemLine_SetParentLayerable(QCPItemLine* self, QCPLayerable* parentLayerable);
void QCPItemLine_OnSetParentLayerable(QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseSetParentLayerable(QCPItemLine* self, QCPLayerable* parentLayerable);
bool QCPItemLine_MoveToLayer(QCPItemLine* self, QCPLayer* layer, bool prepend);
void QCPItemLine_OnMoveToLayer(QCPItemLine* self, intptr_t slot);
bool QCPItemLine_QBaseMoveToLayer(QCPItemLine* self, QCPLayer* layer, bool prepend);
void QCPItemLine_ApplyAntialiasingHint(const QCPItemLine* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemLine_OnApplyAntialiasingHint(const QCPItemLine* self, intptr_t slot);
void QCPItemLine_QBaseApplyAntialiasingHint(const QCPItemLine* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemLine_Sender(const QCPItemLine* self);
void QCPItemLine_OnSender(const QCPItemLine* self, intptr_t slot);
QObject* QCPItemLine_QBaseSender(const QCPItemLine* self);
int QCPItemLine_SenderSignalIndex(const QCPItemLine* self);
void QCPItemLine_OnSenderSignalIndex(const QCPItemLine* self, intptr_t slot);
int QCPItemLine_QBaseSenderSignalIndex(const QCPItemLine* self);
int QCPItemLine_Receivers(const QCPItemLine* self, const char* signal);
void QCPItemLine_OnReceivers(const QCPItemLine* self, intptr_t slot);
int QCPItemLine_QBaseReceivers(const QCPItemLine* self, const char* signal);
bool QCPItemLine_IsSignalConnected(const QCPItemLine* self, const QMetaMethod* signal);
void QCPItemLine_OnIsSignalConnected(const QCPItemLine* self, intptr_t slot);
bool QCPItemLine_QBaseIsSignalConnected(const QCPItemLine* self, const QMetaMethod* signal);
void QCPItemLine_Delete(QCPItemLine* self);

QCPItemCurve* QCPItemCurve_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemCurve_MetaObject(const QCPItemCurve* self);
void* QCPItemCurve_Metacast(QCPItemCurve* self, const char* param1);
int QCPItemCurve_Metacall(QCPItemCurve* self, int param1, int param2, void** param3);
libqt_string QCPItemCurve_Tr(const char* s);
QPen* QCPItemCurve_Pen(const QCPItemCurve* self);
QPen* QCPItemCurve_SelectedPen(const QCPItemCurve* self);
QCPLineEnding* QCPItemCurve_Head(const QCPItemCurve* self);
QCPLineEnding* QCPItemCurve_Tail(const QCPItemCurve* self);
void QCPItemCurve_SetPen(QCPItemCurve* self, const QPen* pen);
void QCPItemCurve_SetSelectedPen(QCPItemCurve* self, const QPen* pen);
void QCPItemCurve_SetHead(QCPItemCurve* self, const QCPLineEnding* head);
void QCPItemCurve_SetTail(QCPItemCurve* self, const QCPLineEnding* tail);
double QCPItemCurve_SelectTest(const QCPItemCurve* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemCurve_Start(const QCPItemCurve* self);
QCPItemPosition* QCPItemCurve_StartDir(const QCPItemCurve* self);
QCPItemPosition* QCPItemCurve_EndDir(const QCPItemCurve* self);
QCPItemPosition* QCPItemCurve_End(const QCPItemCurve* self);
void QCPItemCurve_Draw(QCPItemCurve* self, QCPPainter* painter);
libqt_string QCPItemCurve_Tr2(const char* s, const char* c);
libqt_string QCPItemCurve_Tr3(const char* s, const char* c, int n);
void QCPItemCurve_OnMetacall(QCPItemCurve* self, intptr_t slot);
int QCPItemCurve_QBaseMetacall(QCPItemCurve* self, int param1, int param2, void** param3);
void QCPItemCurve_OnSelectTest(const QCPItemCurve* self, intptr_t slot);
double QCPItemCurve_QBaseSelectTest(const QCPItemCurve* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemCurve_OnDraw(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseDraw(QCPItemCurve* self, QCPPainter* painter);
int QCPItemCurve_SelectionCategory(const QCPItemCurve* self);
void QCPItemCurve_OnSelectionCategory(const QCPItemCurve* self, intptr_t slot);
int QCPItemCurve_QBaseSelectionCategory(const QCPItemCurve* self);
QRect* QCPItemCurve_ClipRect(const QCPItemCurve* self);
void QCPItemCurve_OnClipRect(const QCPItemCurve* self, intptr_t slot);
QRect* QCPItemCurve_QBaseClipRect(const QCPItemCurve* self);
void QCPItemCurve_ApplyDefaultAntialiasingHint(const QCPItemCurve* self, QCPPainter* painter);
void QCPItemCurve_OnApplyDefaultAntialiasingHint(const QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseApplyDefaultAntialiasingHint(const QCPItemCurve* self, QCPPainter* painter);
void QCPItemCurve_SelectEvent(QCPItemCurve* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemCurve_OnSelectEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseSelectEvent(QCPItemCurve* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemCurve_DeselectEvent(QCPItemCurve* self, bool* selectionStateChanged);
void QCPItemCurve_OnDeselectEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseDeselectEvent(QCPItemCurve* self, bool* selectionStateChanged);
QPointF* QCPItemCurve_AnchorPixelPosition(const QCPItemCurve* self, int anchorId);
void QCPItemCurve_OnAnchorPixelPosition(const QCPItemCurve* self, intptr_t slot);
QPointF* QCPItemCurve_QBaseAnchorPixelPosition(const QCPItemCurve* self, int anchorId);
void QCPItemCurve_ParentPlotInitialized(QCPItemCurve* self, QCustomPlot* parentPlot);
void QCPItemCurve_OnParentPlotInitialized(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseParentPlotInitialized(QCPItemCurve* self, QCustomPlot* parentPlot);
void QCPItemCurve_MousePressEvent(QCPItemCurve* self, QMouseEvent* event, const QVariant* details);
void QCPItemCurve_OnMousePressEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseMousePressEvent(QCPItemCurve* self, QMouseEvent* event, const QVariant* details);
void QCPItemCurve_MouseMoveEvent(QCPItemCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemCurve_OnMouseMoveEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseMouseMoveEvent(QCPItemCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemCurve_MouseReleaseEvent(QCPItemCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemCurve_OnMouseReleaseEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseMouseReleaseEvent(QCPItemCurve* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemCurve_MouseDoubleClickEvent(QCPItemCurve* self, QMouseEvent* event, const QVariant* details);
void QCPItemCurve_OnMouseDoubleClickEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseMouseDoubleClickEvent(QCPItemCurve* self, QMouseEvent* event, const QVariant* details);
void QCPItemCurve_WheelEvent(QCPItemCurve* self, QWheelEvent* event);
void QCPItemCurve_OnWheelEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseWheelEvent(QCPItemCurve* self, QWheelEvent* event);
bool QCPItemCurve_Event(QCPItemCurve* self, QEvent* event);
void QCPItemCurve_OnEvent(QCPItemCurve* self, intptr_t slot);
bool QCPItemCurve_QBaseEvent(QCPItemCurve* self, QEvent* event);
bool QCPItemCurve_EventFilter(QCPItemCurve* self, QObject* watched, QEvent* event);
void QCPItemCurve_OnEventFilter(QCPItemCurve* self, intptr_t slot);
bool QCPItemCurve_QBaseEventFilter(QCPItemCurve* self, QObject* watched, QEvent* event);
void QCPItemCurve_TimerEvent(QCPItemCurve* self, QTimerEvent* event);
void QCPItemCurve_OnTimerEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseTimerEvent(QCPItemCurve* self, QTimerEvent* event);
void QCPItemCurve_ChildEvent(QCPItemCurve* self, QChildEvent* event);
void QCPItemCurve_OnChildEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseChildEvent(QCPItemCurve* self, QChildEvent* event);
void QCPItemCurve_CustomEvent(QCPItemCurve* self, QEvent* event);
void QCPItemCurve_OnCustomEvent(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseCustomEvent(QCPItemCurve* self, QEvent* event);
void QCPItemCurve_ConnectNotify(QCPItemCurve* self, const QMetaMethod* signal);
void QCPItemCurve_OnConnectNotify(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseConnectNotify(QCPItemCurve* self, const QMetaMethod* signal);
void QCPItemCurve_DisconnectNotify(QCPItemCurve* self, const QMetaMethod* signal);
void QCPItemCurve_OnDisconnectNotify(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseDisconnectNotify(QCPItemCurve* self, const QMetaMethod* signal);
QPen* QCPItemCurve_MainPen(const QCPItemCurve* self);
void QCPItemCurve_OnMainPen(const QCPItemCurve* self, intptr_t slot);
QPen* QCPItemCurve_QBaseMainPen(const QCPItemCurve* self);
double QCPItemCurve_RectDistance(const QCPItemCurve* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemCurve_OnRectDistance(const QCPItemCurve* self, intptr_t slot);
double QCPItemCurve_QBaseRectDistance(const QCPItemCurve* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemCurve_CreatePosition(QCPItemCurve* self, const libqt_string name);
void QCPItemCurve_OnCreatePosition(QCPItemCurve* self, intptr_t slot);
QCPItemPosition* QCPItemCurve_QBaseCreatePosition(QCPItemCurve* self, const libqt_string name);
QCPItemAnchor* QCPItemCurve_CreateAnchor(QCPItemCurve* self, const libqt_string name, int anchorId);
void QCPItemCurve_OnCreateAnchor(QCPItemCurve* self, intptr_t slot);
QCPItemAnchor* QCPItemCurve_QBaseCreateAnchor(QCPItemCurve* self, const libqt_string name, int anchorId);
void QCPItemCurve_InitializeParentPlot(QCPItemCurve* self, QCustomPlot* parentPlot);
void QCPItemCurve_OnInitializeParentPlot(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseInitializeParentPlot(QCPItemCurve* self, QCustomPlot* parentPlot);
void QCPItemCurve_SetParentLayerable(QCPItemCurve* self, QCPLayerable* parentLayerable);
void QCPItemCurve_OnSetParentLayerable(QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseSetParentLayerable(QCPItemCurve* self, QCPLayerable* parentLayerable);
bool QCPItemCurve_MoveToLayer(QCPItemCurve* self, QCPLayer* layer, bool prepend);
void QCPItemCurve_OnMoveToLayer(QCPItemCurve* self, intptr_t slot);
bool QCPItemCurve_QBaseMoveToLayer(QCPItemCurve* self, QCPLayer* layer, bool prepend);
void QCPItemCurve_ApplyAntialiasingHint(const QCPItemCurve* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemCurve_OnApplyAntialiasingHint(const QCPItemCurve* self, intptr_t slot);
void QCPItemCurve_QBaseApplyAntialiasingHint(const QCPItemCurve* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemCurve_Sender(const QCPItemCurve* self);
void QCPItemCurve_OnSender(const QCPItemCurve* self, intptr_t slot);
QObject* QCPItemCurve_QBaseSender(const QCPItemCurve* self);
int QCPItemCurve_SenderSignalIndex(const QCPItemCurve* self);
void QCPItemCurve_OnSenderSignalIndex(const QCPItemCurve* self, intptr_t slot);
int QCPItemCurve_QBaseSenderSignalIndex(const QCPItemCurve* self);
int QCPItemCurve_Receivers(const QCPItemCurve* self, const char* signal);
void QCPItemCurve_OnReceivers(const QCPItemCurve* self, intptr_t slot);
int QCPItemCurve_QBaseReceivers(const QCPItemCurve* self, const char* signal);
bool QCPItemCurve_IsSignalConnected(const QCPItemCurve* self, const QMetaMethod* signal);
void QCPItemCurve_OnIsSignalConnected(const QCPItemCurve* self, intptr_t slot);
bool QCPItemCurve_QBaseIsSignalConnected(const QCPItemCurve* self, const QMetaMethod* signal);
void QCPItemCurve_Delete(QCPItemCurve* self);

QCPItemRect* QCPItemRect_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemRect_MetaObject(const QCPItemRect* self);
void* QCPItemRect_Metacast(QCPItemRect* self, const char* param1);
int QCPItemRect_Metacall(QCPItemRect* self, int param1, int param2, void** param3);
libqt_string QCPItemRect_Tr(const char* s);
QPen* QCPItemRect_Pen(const QCPItemRect* self);
QPen* QCPItemRect_SelectedPen(const QCPItemRect* self);
QBrush* QCPItemRect_Brush(const QCPItemRect* self);
QBrush* QCPItemRect_SelectedBrush(const QCPItemRect* self);
void QCPItemRect_SetPen(QCPItemRect* self, const QPen* pen);
void QCPItemRect_SetSelectedPen(QCPItemRect* self, const QPen* pen);
void QCPItemRect_SetBrush(QCPItemRect* self, const QBrush* brush);
void QCPItemRect_SetSelectedBrush(QCPItemRect* self, const QBrush* brush);
double QCPItemRect_SelectTest(const QCPItemRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemRect_TopLeft(const QCPItemRect* self);
QCPItemPosition* QCPItemRect_BottomRight(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_Top(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_TopRight(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_Right(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_Bottom(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_BottomLeft(const QCPItemRect* self);
QCPItemAnchor* QCPItemRect_Left(const QCPItemRect* self);
void QCPItemRect_Draw(QCPItemRect* self, QCPPainter* painter);
QPointF* QCPItemRect_AnchorPixelPosition(const QCPItemRect* self, int anchorId);
libqt_string QCPItemRect_Tr2(const char* s, const char* c);
libqt_string QCPItemRect_Tr3(const char* s, const char* c, int n);
void QCPItemRect_OnMetacall(QCPItemRect* self, intptr_t slot);
int QCPItemRect_QBaseMetacall(QCPItemRect* self, int param1, int param2, void** param3);
void QCPItemRect_OnSelectTest(const QCPItemRect* self, intptr_t slot);
double QCPItemRect_QBaseSelectTest(const QCPItemRect* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemRect_OnDraw(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseDraw(QCPItemRect* self, QCPPainter* painter);
void QCPItemRect_OnAnchorPixelPosition(const QCPItemRect* self, intptr_t slot);
QPointF* QCPItemRect_QBaseAnchorPixelPosition(const QCPItemRect* self, int anchorId);
int QCPItemRect_SelectionCategory(const QCPItemRect* self);
void QCPItemRect_OnSelectionCategory(const QCPItemRect* self, intptr_t slot);
int QCPItemRect_QBaseSelectionCategory(const QCPItemRect* self);
QRect* QCPItemRect_ClipRect(const QCPItemRect* self);
void QCPItemRect_OnClipRect(const QCPItemRect* self, intptr_t slot);
QRect* QCPItemRect_QBaseClipRect(const QCPItemRect* self);
void QCPItemRect_ApplyDefaultAntialiasingHint(const QCPItemRect* self, QCPPainter* painter);
void QCPItemRect_OnApplyDefaultAntialiasingHint(const QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseApplyDefaultAntialiasingHint(const QCPItemRect* self, QCPPainter* painter);
void QCPItemRect_SelectEvent(QCPItemRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemRect_OnSelectEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseSelectEvent(QCPItemRect* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemRect_DeselectEvent(QCPItemRect* self, bool* selectionStateChanged);
void QCPItemRect_OnDeselectEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseDeselectEvent(QCPItemRect* self, bool* selectionStateChanged);
void QCPItemRect_ParentPlotInitialized(QCPItemRect* self, QCustomPlot* parentPlot);
void QCPItemRect_OnParentPlotInitialized(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseParentPlotInitialized(QCPItemRect* self, QCustomPlot* parentPlot);
void QCPItemRect_MousePressEvent(QCPItemRect* self, QMouseEvent* event, const QVariant* details);
void QCPItemRect_OnMousePressEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseMousePressEvent(QCPItemRect* self, QMouseEvent* event, const QVariant* details);
void QCPItemRect_MouseMoveEvent(QCPItemRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemRect_OnMouseMoveEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseMouseMoveEvent(QCPItemRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemRect_MouseReleaseEvent(QCPItemRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemRect_OnMouseReleaseEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseMouseReleaseEvent(QCPItemRect* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemRect_MouseDoubleClickEvent(QCPItemRect* self, QMouseEvent* event, const QVariant* details);
void QCPItemRect_OnMouseDoubleClickEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseMouseDoubleClickEvent(QCPItemRect* self, QMouseEvent* event, const QVariant* details);
void QCPItemRect_WheelEvent(QCPItemRect* self, QWheelEvent* event);
void QCPItemRect_OnWheelEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseWheelEvent(QCPItemRect* self, QWheelEvent* event);
bool QCPItemRect_Event(QCPItemRect* self, QEvent* event);
void QCPItemRect_OnEvent(QCPItemRect* self, intptr_t slot);
bool QCPItemRect_QBaseEvent(QCPItemRect* self, QEvent* event);
bool QCPItemRect_EventFilter(QCPItemRect* self, QObject* watched, QEvent* event);
void QCPItemRect_OnEventFilter(QCPItemRect* self, intptr_t slot);
bool QCPItemRect_QBaseEventFilter(QCPItemRect* self, QObject* watched, QEvent* event);
void QCPItemRect_TimerEvent(QCPItemRect* self, QTimerEvent* event);
void QCPItemRect_OnTimerEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseTimerEvent(QCPItemRect* self, QTimerEvent* event);
void QCPItemRect_ChildEvent(QCPItemRect* self, QChildEvent* event);
void QCPItemRect_OnChildEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseChildEvent(QCPItemRect* self, QChildEvent* event);
void QCPItemRect_CustomEvent(QCPItemRect* self, QEvent* event);
void QCPItemRect_OnCustomEvent(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseCustomEvent(QCPItemRect* self, QEvent* event);
void QCPItemRect_ConnectNotify(QCPItemRect* self, const QMetaMethod* signal);
void QCPItemRect_OnConnectNotify(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseConnectNotify(QCPItemRect* self, const QMetaMethod* signal);
void QCPItemRect_DisconnectNotify(QCPItemRect* self, const QMetaMethod* signal);
void QCPItemRect_OnDisconnectNotify(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseDisconnectNotify(QCPItemRect* self, const QMetaMethod* signal);
QPen* QCPItemRect_MainPen(const QCPItemRect* self);
void QCPItemRect_OnMainPen(const QCPItemRect* self, intptr_t slot);
QPen* QCPItemRect_QBaseMainPen(const QCPItemRect* self);
QBrush* QCPItemRect_MainBrush(const QCPItemRect* self);
void QCPItemRect_OnMainBrush(const QCPItemRect* self, intptr_t slot);
QBrush* QCPItemRect_QBaseMainBrush(const QCPItemRect* self);
double QCPItemRect_RectDistance(const QCPItemRect* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemRect_OnRectDistance(const QCPItemRect* self, intptr_t slot);
double QCPItemRect_QBaseRectDistance(const QCPItemRect* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemRect_CreatePosition(QCPItemRect* self, const libqt_string name);
void QCPItemRect_OnCreatePosition(QCPItemRect* self, intptr_t slot);
QCPItemPosition* QCPItemRect_QBaseCreatePosition(QCPItemRect* self, const libqt_string name);
QCPItemAnchor* QCPItemRect_CreateAnchor(QCPItemRect* self, const libqt_string name, int anchorId);
void QCPItemRect_OnCreateAnchor(QCPItemRect* self, intptr_t slot);
QCPItemAnchor* QCPItemRect_QBaseCreateAnchor(QCPItemRect* self, const libqt_string name, int anchorId);
void QCPItemRect_InitializeParentPlot(QCPItemRect* self, QCustomPlot* parentPlot);
void QCPItemRect_OnInitializeParentPlot(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseInitializeParentPlot(QCPItemRect* self, QCustomPlot* parentPlot);
void QCPItemRect_SetParentLayerable(QCPItemRect* self, QCPLayerable* parentLayerable);
void QCPItemRect_OnSetParentLayerable(QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseSetParentLayerable(QCPItemRect* self, QCPLayerable* parentLayerable);
bool QCPItemRect_MoveToLayer(QCPItemRect* self, QCPLayer* layer, bool prepend);
void QCPItemRect_OnMoveToLayer(QCPItemRect* self, intptr_t slot);
bool QCPItemRect_QBaseMoveToLayer(QCPItemRect* self, QCPLayer* layer, bool prepend);
void QCPItemRect_ApplyAntialiasingHint(const QCPItemRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemRect_OnApplyAntialiasingHint(const QCPItemRect* self, intptr_t slot);
void QCPItemRect_QBaseApplyAntialiasingHint(const QCPItemRect* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemRect_Sender(const QCPItemRect* self);
void QCPItemRect_OnSender(const QCPItemRect* self, intptr_t slot);
QObject* QCPItemRect_QBaseSender(const QCPItemRect* self);
int QCPItemRect_SenderSignalIndex(const QCPItemRect* self);
void QCPItemRect_OnSenderSignalIndex(const QCPItemRect* self, intptr_t slot);
int QCPItemRect_QBaseSenderSignalIndex(const QCPItemRect* self);
int QCPItemRect_Receivers(const QCPItemRect* self, const char* signal);
void QCPItemRect_OnReceivers(const QCPItemRect* self, intptr_t slot);
int QCPItemRect_QBaseReceivers(const QCPItemRect* self, const char* signal);
bool QCPItemRect_IsSignalConnected(const QCPItemRect* self, const QMetaMethod* signal);
void QCPItemRect_OnIsSignalConnected(const QCPItemRect* self, intptr_t slot);
bool QCPItemRect_QBaseIsSignalConnected(const QCPItemRect* self, const QMetaMethod* signal);
void QCPItemRect_Delete(QCPItemRect* self);

QCPItemText* QCPItemText_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemText_MetaObject(const QCPItemText* self);
void* QCPItemText_Metacast(QCPItemText* self, const char* param1);
int QCPItemText_Metacall(QCPItemText* self, int param1, int param2, void** param3);
libqt_string QCPItemText_Tr(const char* s);
QColor* QCPItemText_Color(const QCPItemText* self);
QColor* QCPItemText_SelectedColor(const QCPItemText* self);
QPen* QCPItemText_Pen(const QCPItemText* self);
QPen* QCPItemText_SelectedPen(const QCPItemText* self);
QBrush* QCPItemText_Brush(const QCPItemText* self);
QBrush* QCPItemText_SelectedBrush(const QCPItemText* self);
QFont* QCPItemText_Font(const QCPItemText* self);
QFont* QCPItemText_SelectedFont(const QCPItemText* self);
libqt_string QCPItemText_Text(const QCPItemText* self);
int QCPItemText_PositionAlignment(const QCPItemText* self);
int QCPItemText_TextAlignment(const QCPItemText* self);
double QCPItemText_Rotation(const QCPItemText* self);
QMargins* QCPItemText_Padding(const QCPItemText* self);
void QCPItemText_SetColor(QCPItemText* self, const QColor* color);
void QCPItemText_SetSelectedColor(QCPItemText* self, const QColor* color);
void QCPItemText_SetPen(QCPItemText* self, const QPen* pen);
void QCPItemText_SetSelectedPen(QCPItemText* self, const QPen* pen);
void QCPItemText_SetBrush(QCPItemText* self, const QBrush* brush);
void QCPItemText_SetSelectedBrush(QCPItemText* self, const QBrush* brush);
void QCPItemText_SetFont(QCPItemText* self, const QFont* font);
void QCPItemText_SetSelectedFont(QCPItemText* self, const QFont* font);
void QCPItemText_SetText(QCPItemText* self, const libqt_string text);
void QCPItemText_SetPositionAlignment(QCPItemText* self, int alignment);
void QCPItemText_SetTextAlignment(QCPItemText* self, int alignment);
void QCPItemText_SetRotation(QCPItemText* self, double degrees);
void QCPItemText_SetPadding(QCPItemText* self, const QMargins* padding);
double QCPItemText_SelectTest(const QCPItemText* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemText_Position(const QCPItemText* self);
QCPItemAnchor* QCPItemText_TopLeft(const QCPItemText* self);
QCPItemAnchor* QCPItemText_Top(const QCPItemText* self);
QCPItemAnchor* QCPItemText_TopRight(const QCPItemText* self);
QCPItemAnchor* QCPItemText_Right(const QCPItemText* self);
QCPItemAnchor* QCPItemText_BottomRight(const QCPItemText* self);
QCPItemAnchor* QCPItemText_Bottom(const QCPItemText* self);
QCPItemAnchor* QCPItemText_BottomLeft(const QCPItemText* self);
QCPItemAnchor* QCPItemText_Left(const QCPItemText* self);
void QCPItemText_Draw(QCPItemText* self, QCPPainter* painter);
QPointF* QCPItemText_AnchorPixelPosition(const QCPItemText* self, int anchorId);
libqt_string QCPItemText_Tr2(const char* s, const char* c);
libqt_string QCPItemText_Tr3(const char* s, const char* c, int n);
void QCPItemText_OnMetacall(QCPItemText* self, intptr_t slot);
int QCPItemText_QBaseMetacall(QCPItemText* self, int param1, int param2, void** param3);
void QCPItemText_OnSelectTest(const QCPItemText* self, intptr_t slot);
double QCPItemText_QBaseSelectTest(const QCPItemText* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemText_OnDraw(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseDraw(QCPItemText* self, QCPPainter* painter);
void QCPItemText_OnAnchorPixelPosition(const QCPItemText* self, intptr_t slot);
QPointF* QCPItemText_QBaseAnchorPixelPosition(const QCPItemText* self, int anchorId);
int QCPItemText_SelectionCategory(const QCPItemText* self);
void QCPItemText_OnSelectionCategory(const QCPItemText* self, intptr_t slot);
int QCPItemText_QBaseSelectionCategory(const QCPItemText* self);
QRect* QCPItemText_ClipRect(const QCPItemText* self);
void QCPItemText_OnClipRect(const QCPItemText* self, intptr_t slot);
QRect* QCPItemText_QBaseClipRect(const QCPItemText* self);
void QCPItemText_ApplyDefaultAntialiasingHint(const QCPItemText* self, QCPPainter* painter);
void QCPItemText_OnApplyDefaultAntialiasingHint(const QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseApplyDefaultAntialiasingHint(const QCPItemText* self, QCPPainter* painter);
void QCPItemText_SelectEvent(QCPItemText* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemText_OnSelectEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseSelectEvent(QCPItemText* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemText_DeselectEvent(QCPItemText* self, bool* selectionStateChanged);
void QCPItemText_OnDeselectEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseDeselectEvent(QCPItemText* self, bool* selectionStateChanged);
void QCPItemText_ParentPlotInitialized(QCPItemText* self, QCustomPlot* parentPlot);
void QCPItemText_OnParentPlotInitialized(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseParentPlotInitialized(QCPItemText* self, QCustomPlot* parentPlot);
void QCPItemText_MousePressEvent(QCPItemText* self, QMouseEvent* event, const QVariant* details);
void QCPItemText_OnMousePressEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseMousePressEvent(QCPItemText* self, QMouseEvent* event, const QVariant* details);
void QCPItemText_MouseMoveEvent(QCPItemText* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemText_OnMouseMoveEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseMouseMoveEvent(QCPItemText* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemText_MouseReleaseEvent(QCPItemText* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemText_OnMouseReleaseEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseMouseReleaseEvent(QCPItemText* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemText_MouseDoubleClickEvent(QCPItemText* self, QMouseEvent* event, const QVariant* details);
void QCPItemText_OnMouseDoubleClickEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseMouseDoubleClickEvent(QCPItemText* self, QMouseEvent* event, const QVariant* details);
void QCPItemText_WheelEvent(QCPItemText* self, QWheelEvent* event);
void QCPItemText_OnWheelEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseWheelEvent(QCPItemText* self, QWheelEvent* event);
bool QCPItemText_Event(QCPItemText* self, QEvent* event);
void QCPItemText_OnEvent(QCPItemText* self, intptr_t slot);
bool QCPItemText_QBaseEvent(QCPItemText* self, QEvent* event);
bool QCPItemText_EventFilter(QCPItemText* self, QObject* watched, QEvent* event);
void QCPItemText_OnEventFilter(QCPItemText* self, intptr_t slot);
bool QCPItemText_QBaseEventFilter(QCPItemText* self, QObject* watched, QEvent* event);
void QCPItemText_TimerEvent(QCPItemText* self, QTimerEvent* event);
void QCPItemText_OnTimerEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseTimerEvent(QCPItemText* self, QTimerEvent* event);
void QCPItemText_ChildEvent(QCPItemText* self, QChildEvent* event);
void QCPItemText_OnChildEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseChildEvent(QCPItemText* self, QChildEvent* event);
void QCPItemText_CustomEvent(QCPItemText* self, QEvent* event);
void QCPItemText_OnCustomEvent(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseCustomEvent(QCPItemText* self, QEvent* event);
void QCPItemText_ConnectNotify(QCPItemText* self, const QMetaMethod* signal);
void QCPItemText_OnConnectNotify(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseConnectNotify(QCPItemText* self, const QMetaMethod* signal);
void QCPItemText_DisconnectNotify(QCPItemText* self, const QMetaMethod* signal);
void QCPItemText_OnDisconnectNotify(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseDisconnectNotify(QCPItemText* self, const QMetaMethod* signal);
QPointF* QCPItemText_GetTextDrawPoint(const QCPItemText* self, const QPointF* pos, const QRectF* rect, int positionAlignment);
void QCPItemText_OnGetTextDrawPoint(const QCPItemText* self, intptr_t slot);
QPointF* QCPItemText_QBaseGetTextDrawPoint(const QCPItemText* self, const QPointF* pos, const QRectF* rect, int positionAlignment);
QFont* QCPItemText_MainFont(const QCPItemText* self);
void QCPItemText_OnMainFont(const QCPItemText* self, intptr_t slot);
QFont* QCPItemText_QBaseMainFont(const QCPItemText* self);
QColor* QCPItemText_MainColor(const QCPItemText* self);
void QCPItemText_OnMainColor(const QCPItemText* self, intptr_t slot);
QColor* QCPItemText_QBaseMainColor(const QCPItemText* self);
QPen* QCPItemText_MainPen(const QCPItemText* self);
void QCPItemText_OnMainPen(const QCPItemText* self, intptr_t slot);
QPen* QCPItemText_QBaseMainPen(const QCPItemText* self);
QBrush* QCPItemText_MainBrush(const QCPItemText* self);
void QCPItemText_OnMainBrush(const QCPItemText* self, intptr_t slot);
QBrush* QCPItemText_QBaseMainBrush(const QCPItemText* self);
double QCPItemText_RectDistance(const QCPItemText* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemText_OnRectDistance(const QCPItemText* self, intptr_t slot);
double QCPItemText_QBaseRectDistance(const QCPItemText* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemText_CreatePosition(QCPItemText* self, const libqt_string name);
void QCPItemText_OnCreatePosition(QCPItemText* self, intptr_t slot);
QCPItemPosition* QCPItemText_QBaseCreatePosition(QCPItemText* self, const libqt_string name);
QCPItemAnchor* QCPItemText_CreateAnchor(QCPItemText* self, const libqt_string name, int anchorId);
void QCPItemText_OnCreateAnchor(QCPItemText* self, intptr_t slot);
QCPItemAnchor* QCPItemText_QBaseCreateAnchor(QCPItemText* self, const libqt_string name, int anchorId);
void QCPItemText_InitializeParentPlot(QCPItemText* self, QCustomPlot* parentPlot);
void QCPItemText_OnInitializeParentPlot(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseInitializeParentPlot(QCPItemText* self, QCustomPlot* parentPlot);
void QCPItemText_SetParentLayerable(QCPItemText* self, QCPLayerable* parentLayerable);
void QCPItemText_OnSetParentLayerable(QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseSetParentLayerable(QCPItemText* self, QCPLayerable* parentLayerable);
bool QCPItemText_MoveToLayer(QCPItemText* self, QCPLayer* layer, bool prepend);
void QCPItemText_OnMoveToLayer(QCPItemText* self, intptr_t slot);
bool QCPItemText_QBaseMoveToLayer(QCPItemText* self, QCPLayer* layer, bool prepend);
void QCPItemText_ApplyAntialiasingHint(const QCPItemText* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemText_OnApplyAntialiasingHint(const QCPItemText* self, intptr_t slot);
void QCPItemText_QBaseApplyAntialiasingHint(const QCPItemText* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemText_Sender(const QCPItemText* self);
void QCPItemText_OnSender(const QCPItemText* self, intptr_t slot);
QObject* QCPItemText_QBaseSender(const QCPItemText* self);
int QCPItemText_SenderSignalIndex(const QCPItemText* self);
void QCPItemText_OnSenderSignalIndex(const QCPItemText* self, intptr_t slot);
int QCPItemText_QBaseSenderSignalIndex(const QCPItemText* self);
int QCPItemText_Receivers(const QCPItemText* self, const char* signal);
void QCPItemText_OnReceivers(const QCPItemText* self, intptr_t slot);
int QCPItemText_QBaseReceivers(const QCPItemText* self, const char* signal);
bool QCPItemText_IsSignalConnected(const QCPItemText* self, const QMetaMethod* signal);
void QCPItemText_OnIsSignalConnected(const QCPItemText* self, intptr_t slot);
bool QCPItemText_QBaseIsSignalConnected(const QCPItemText* self, const QMetaMethod* signal);
void QCPItemText_Delete(QCPItemText* self);

QCPItemEllipse* QCPItemEllipse_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemEllipse_MetaObject(const QCPItemEllipse* self);
void* QCPItemEllipse_Metacast(QCPItemEllipse* self, const char* param1);
int QCPItemEllipse_Metacall(QCPItemEllipse* self, int param1, int param2, void** param3);
libqt_string QCPItemEllipse_Tr(const char* s);
QPen* QCPItemEllipse_Pen(const QCPItemEllipse* self);
QPen* QCPItemEllipse_SelectedPen(const QCPItemEllipse* self);
QBrush* QCPItemEllipse_Brush(const QCPItemEllipse* self);
QBrush* QCPItemEllipse_SelectedBrush(const QCPItemEllipse* self);
void QCPItemEllipse_SetPen(QCPItemEllipse* self, const QPen* pen);
void QCPItemEllipse_SetSelectedPen(QCPItemEllipse* self, const QPen* pen);
void QCPItemEllipse_SetBrush(QCPItemEllipse* self, const QBrush* brush);
void QCPItemEllipse_SetSelectedBrush(QCPItemEllipse* self, const QBrush* brush);
double QCPItemEllipse_SelectTest(const QCPItemEllipse* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemEllipse_TopLeft(const QCPItemEllipse* self);
QCPItemPosition* QCPItemEllipse_BottomRight(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_TopLeftRim(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_Top(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_TopRightRim(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_Right(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_BottomRightRim(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_Bottom(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_BottomLeftRim(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_Left(const QCPItemEllipse* self);
QCPItemAnchor* QCPItemEllipse_Center(const QCPItemEllipse* self);
void QCPItemEllipse_Draw(QCPItemEllipse* self, QCPPainter* painter);
QPointF* QCPItemEllipse_AnchorPixelPosition(const QCPItemEllipse* self, int anchorId);
libqt_string QCPItemEllipse_Tr2(const char* s, const char* c);
libqt_string QCPItemEllipse_Tr3(const char* s, const char* c, int n);
void QCPItemEllipse_OnMetacall(QCPItemEllipse* self, intptr_t slot);
int QCPItemEllipse_QBaseMetacall(QCPItemEllipse* self, int param1, int param2, void** param3);
void QCPItemEllipse_OnSelectTest(const QCPItemEllipse* self, intptr_t slot);
double QCPItemEllipse_QBaseSelectTest(const QCPItemEllipse* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemEllipse_OnDraw(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseDraw(QCPItemEllipse* self, QCPPainter* painter);
void QCPItemEllipse_OnAnchorPixelPosition(const QCPItemEllipse* self, intptr_t slot);
QPointF* QCPItemEllipse_QBaseAnchorPixelPosition(const QCPItemEllipse* self, int anchorId);
int QCPItemEllipse_SelectionCategory(const QCPItemEllipse* self);
void QCPItemEllipse_OnSelectionCategory(const QCPItemEllipse* self, intptr_t slot);
int QCPItemEllipse_QBaseSelectionCategory(const QCPItemEllipse* self);
QRect* QCPItemEllipse_ClipRect(const QCPItemEllipse* self);
void QCPItemEllipse_OnClipRect(const QCPItemEllipse* self, intptr_t slot);
QRect* QCPItemEllipse_QBaseClipRect(const QCPItemEllipse* self);
void QCPItemEllipse_ApplyDefaultAntialiasingHint(const QCPItemEllipse* self, QCPPainter* painter);
void QCPItemEllipse_OnApplyDefaultAntialiasingHint(const QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseApplyDefaultAntialiasingHint(const QCPItemEllipse* self, QCPPainter* painter);
void QCPItemEllipse_SelectEvent(QCPItemEllipse* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemEllipse_OnSelectEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseSelectEvent(QCPItemEllipse* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemEllipse_DeselectEvent(QCPItemEllipse* self, bool* selectionStateChanged);
void QCPItemEllipse_OnDeselectEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseDeselectEvent(QCPItemEllipse* self, bool* selectionStateChanged);
void QCPItemEllipse_ParentPlotInitialized(QCPItemEllipse* self, QCustomPlot* parentPlot);
void QCPItemEllipse_OnParentPlotInitialized(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseParentPlotInitialized(QCPItemEllipse* self, QCustomPlot* parentPlot);
void QCPItemEllipse_MousePressEvent(QCPItemEllipse* self, QMouseEvent* event, const QVariant* details);
void QCPItemEllipse_OnMousePressEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseMousePressEvent(QCPItemEllipse* self, QMouseEvent* event, const QVariant* details);
void QCPItemEllipse_MouseMoveEvent(QCPItemEllipse* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemEllipse_OnMouseMoveEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseMouseMoveEvent(QCPItemEllipse* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemEllipse_MouseReleaseEvent(QCPItemEllipse* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemEllipse_OnMouseReleaseEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseMouseReleaseEvent(QCPItemEllipse* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemEllipse_MouseDoubleClickEvent(QCPItemEllipse* self, QMouseEvent* event, const QVariant* details);
void QCPItemEllipse_OnMouseDoubleClickEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseMouseDoubleClickEvent(QCPItemEllipse* self, QMouseEvent* event, const QVariant* details);
void QCPItemEllipse_WheelEvent(QCPItemEllipse* self, QWheelEvent* event);
void QCPItemEllipse_OnWheelEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseWheelEvent(QCPItemEllipse* self, QWheelEvent* event);
bool QCPItemEllipse_Event(QCPItemEllipse* self, QEvent* event);
void QCPItemEllipse_OnEvent(QCPItemEllipse* self, intptr_t slot);
bool QCPItemEllipse_QBaseEvent(QCPItemEllipse* self, QEvent* event);
bool QCPItemEllipse_EventFilter(QCPItemEllipse* self, QObject* watched, QEvent* event);
void QCPItemEllipse_OnEventFilter(QCPItemEllipse* self, intptr_t slot);
bool QCPItemEllipse_QBaseEventFilter(QCPItemEllipse* self, QObject* watched, QEvent* event);
void QCPItemEllipse_TimerEvent(QCPItemEllipse* self, QTimerEvent* event);
void QCPItemEllipse_OnTimerEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseTimerEvent(QCPItemEllipse* self, QTimerEvent* event);
void QCPItemEllipse_ChildEvent(QCPItemEllipse* self, QChildEvent* event);
void QCPItemEllipse_OnChildEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseChildEvent(QCPItemEllipse* self, QChildEvent* event);
void QCPItemEllipse_CustomEvent(QCPItemEllipse* self, QEvent* event);
void QCPItemEllipse_OnCustomEvent(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseCustomEvent(QCPItemEllipse* self, QEvent* event);
void QCPItemEllipse_ConnectNotify(QCPItemEllipse* self, const QMetaMethod* signal);
void QCPItemEllipse_OnConnectNotify(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseConnectNotify(QCPItemEllipse* self, const QMetaMethod* signal);
void QCPItemEllipse_DisconnectNotify(QCPItemEllipse* self, const QMetaMethod* signal);
void QCPItemEllipse_OnDisconnectNotify(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseDisconnectNotify(QCPItemEllipse* self, const QMetaMethod* signal);
QPen* QCPItemEllipse_MainPen(const QCPItemEllipse* self);
void QCPItemEllipse_OnMainPen(const QCPItemEllipse* self, intptr_t slot);
QPen* QCPItemEllipse_QBaseMainPen(const QCPItemEllipse* self);
QBrush* QCPItemEllipse_MainBrush(const QCPItemEllipse* self);
void QCPItemEllipse_OnMainBrush(const QCPItemEllipse* self, intptr_t slot);
QBrush* QCPItemEllipse_QBaseMainBrush(const QCPItemEllipse* self);
double QCPItemEllipse_RectDistance(const QCPItemEllipse* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemEllipse_OnRectDistance(const QCPItemEllipse* self, intptr_t slot);
double QCPItemEllipse_QBaseRectDistance(const QCPItemEllipse* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemEllipse_CreatePosition(QCPItemEllipse* self, const libqt_string name);
void QCPItemEllipse_OnCreatePosition(QCPItemEllipse* self, intptr_t slot);
QCPItemPosition* QCPItemEllipse_QBaseCreatePosition(QCPItemEllipse* self, const libqt_string name);
QCPItemAnchor* QCPItemEllipse_CreateAnchor(QCPItemEllipse* self, const libqt_string name, int anchorId);
void QCPItemEllipse_OnCreateAnchor(QCPItemEllipse* self, intptr_t slot);
QCPItemAnchor* QCPItemEllipse_QBaseCreateAnchor(QCPItemEllipse* self, const libqt_string name, int anchorId);
void QCPItemEllipse_InitializeParentPlot(QCPItemEllipse* self, QCustomPlot* parentPlot);
void QCPItemEllipse_OnInitializeParentPlot(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseInitializeParentPlot(QCPItemEllipse* self, QCustomPlot* parentPlot);
void QCPItemEllipse_SetParentLayerable(QCPItemEllipse* self, QCPLayerable* parentLayerable);
void QCPItemEllipse_OnSetParentLayerable(QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseSetParentLayerable(QCPItemEllipse* self, QCPLayerable* parentLayerable);
bool QCPItemEllipse_MoveToLayer(QCPItemEllipse* self, QCPLayer* layer, bool prepend);
void QCPItemEllipse_OnMoveToLayer(QCPItemEllipse* self, intptr_t slot);
bool QCPItemEllipse_QBaseMoveToLayer(QCPItemEllipse* self, QCPLayer* layer, bool prepend);
void QCPItemEllipse_ApplyAntialiasingHint(const QCPItemEllipse* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemEllipse_OnApplyAntialiasingHint(const QCPItemEllipse* self, intptr_t slot);
void QCPItemEllipse_QBaseApplyAntialiasingHint(const QCPItemEllipse* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemEllipse_Sender(const QCPItemEllipse* self);
void QCPItemEllipse_OnSender(const QCPItemEllipse* self, intptr_t slot);
QObject* QCPItemEllipse_QBaseSender(const QCPItemEllipse* self);
int QCPItemEllipse_SenderSignalIndex(const QCPItemEllipse* self);
void QCPItemEllipse_OnSenderSignalIndex(const QCPItemEllipse* self, intptr_t slot);
int QCPItemEllipse_QBaseSenderSignalIndex(const QCPItemEllipse* self);
int QCPItemEllipse_Receivers(const QCPItemEllipse* self, const char* signal);
void QCPItemEllipse_OnReceivers(const QCPItemEllipse* self, intptr_t slot);
int QCPItemEllipse_QBaseReceivers(const QCPItemEllipse* self, const char* signal);
bool QCPItemEllipse_IsSignalConnected(const QCPItemEllipse* self, const QMetaMethod* signal);
void QCPItemEllipse_OnIsSignalConnected(const QCPItemEllipse* self, intptr_t slot);
bool QCPItemEllipse_QBaseIsSignalConnected(const QCPItemEllipse* self, const QMetaMethod* signal);
void QCPItemEllipse_Delete(QCPItemEllipse* self);

QCPItemPixmap* QCPItemPixmap_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemPixmap_MetaObject(const QCPItemPixmap* self);
void* QCPItemPixmap_Metacast(QCPItemPixmap* self, const char* param1);
int QCPItemPixmap_Metacall(QCPItemPixmap* self, int param1, int param2, void** param3);
libqt_string QCPItemPixmap_Tr(const char* s);
QPixmap* QCPItemPixmap_Pixmap(const QCPItemPixmap* self);
bool QCPItemPixmap_Scaled(const QCPItemPixmap* self);
int QCPItemPixmap_AspectRatioMode(const QCPItemPixmap* self);
int QCPItemPixmap_TransformationMode(const QCPItemPixmap* self);
QPen* QCPItemPixmap_Pen(const QCPItemPixmap* self);
QPen* QCPItemPixmap_SelectedPen(const QCPItemPixmap* self);
void QCPItemPixmap_SetPixmap(QCPItemPixmap* self, const QPixmap* pixmap);
void QCPItemPixmap_SetScaled(QCPItemPixmap* self, bool scaled);
void QCPItemPixmap_SetPen(QCPItemPixmap* self, const QPen* pen);
void QCPItemPixmap_SetSelectedPen(QCPItemPixmap* self, const QPen* pen);
double QCPItemPixmap_SelectTest(const QCPItemPixmap* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemPixmap_TopLeft(const QCPItemPixmap* self);
QCPItemPosition* QCPItemPixmap_BottomRight(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_Top(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_TopRight(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_Right(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_Bottom(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_BottomLeft(const QCPItemPixmap* self);
QCPItemAnchor* QCPItemPixmap_Left(const QCPItemPixmap* self);
void QCPItemPixmap_Draw(QCPItemPixmap* self, QCPPainter* painter);
QPointF* QCPItemPixmap_AnchorPixelPosition(const QCPItemPixmap* self, int anchorId);
libqt_string QCPItemPixmap_Tr2(const char* s, const char* c);
libqt_string QCPItemPixmap_Tr3(const char* s, const char* c, int n);
void QCPItemPixmap_SetScaled2(QCPItemPixmap* self, bool scaled, int aspectRatioMode);
void QCPItemPixmap_SetScaled3(QCPItemPixmap* self, bool scaled, int aspectRatioMode, int transformationMode);
void QCPItemPixmap_OnMetacall(QCPItemPixmap* self, intptr_t slot);
int QCPItemPixmap_QBaseMetacall(QCPItemPixmap* self, int param1, int param2, void** param3);
void QCPItemPixmap_OnSelectTest(const QCPItemPixmap* self, intptr_t slot);
double QCPItemPixmap_QBaseSelectTest(const QCPItemPixmap* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemPixmap_OnDraw(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseDraw(QCPItemPixmap* self, QCPPainter* painter);
void QCPItemPixmap_OnAnchorPixelPosition(const QCPItemPixmap* self, intptr_t slot);
QPointF* QCPItemPixmap_QBaseAnchorPixelPosition(const QCPItemPixmap* self, int anchorId);
int QCPItemPixmap_SelectionCategory(const QCPItemPixmap* self);
void QCPItemPixmap_OnSelectionCategory(const QCPItemPixmap* self, intptr_t slot);
int QCPItemPixmap_QBaseSelectionCategory(const QCPItemPixmap* self);
QRect* QCPItemPixmap_ClipRect(const QCPItemPixmap* self);
void QCPItemPixmap_OnClipRect(const QCPItemPixmap* self, intptr_t slot);
QRect* QCPItemPixmap_QBaseClipRect(const QCPItemPixmap* self);
void QCPItemPixmap_ApplyDefaultAntialiasingHint(const QCPItemPixmap* self, QCPPainter* painter);
void QCPItemPixmap_OnApplyDefaultAntialiasingHint(const QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseApplyDefaultAntialiasingHint(const QCPItemPixmap* self, QCPPainter* painter);
void QCPItemPixmap_SelectEvent(QCPItemPixmap* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemPixmap_OnSelectEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseSelectEvent(QCPItemPixmap* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemPixmap_DeselectEvent(QCPItemPixmap* self, bool* selectionStateChanged);
void QCPItemPixmap_OnDeselectEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseDeselectEvent(QCPItemPixmap* self, bool* selectionStateChanged);
void QCPItemPixmap_ParentPlotInitialized(QCPItemPixmap* self, QCustomPlot* parentPlot);
void QCPItemPixmap_OnParentPlotInitialized(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseParentPlotInitialized(QCPItemPixmap* self, QCustomPlot* parentPlot);
void QCPItemPixmap_MousePressEvent(QCPItemPixmap* self, QMouseEvent* event, const QVariant* details);
void QCPItemPixmap_OnMousePressEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseMousePressEvent(QCPItemPixmap* self, QMouseEvent* event, const QVariant* details);
void QCPItemPixmap_MouseMoveEvent(QCPItemPixmap* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemPixmap_OnMouseMoveEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseMouseMoveEvent(QCPItemPixmap* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemPixmap_MouseReleaseEvent(QCPItemPixmap* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemPixmap_OnMouseReleaseEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseMouseReleaseEvent(QCPItemPixmap* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemPixmap_MouseDoubleClickEvent(QCPItemPixmap* self, QMouseEvent* event, const QVariant* details);
void QCPItemPixmap_OnMouseDoubleClickEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseMouseDoubleClickEvent(QCPItemPixmap* self, QMouseEvent* event, const QVariant* details);
void QCPItemPixmap_WheelEvent(QCPItemPixmap* self, QWheelEvent* event);
void QCPItemPixmap_OnWheelEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseWheelEvent(QCPItemPixmap* self, QWheelEvent* event);
bool QCPItemPixmap_Event(QCPItemPixmap* self, QEvent* event);
void QCPItemPixmap_OnEvent(QCPItemPixmap* self, intptr_t slot);
bool QCPItemPixmap_QBaseEvent(QCPItemPixmap* self, QEvent* event);
bool QCPItemPixmap_EventFilter(QCPItemPixmap* self, QObject* watched, QEvent* event);
void QCPItemPixmap_OnEventFilter(QCPItemPixmap* self, intptr_t slot);
bool QCPItemPixmap_QBaseEventFilter(QCPItemPixmap* self, QObject* watched, QEvent* event);
void QCPItemPixmap_TimerEvent(QCPItemPixmap* self, QTimerEvent* event);
void QCPItemPixmap_OnTimerEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseTimerEvent(QCPItemPixmap* self, QTimerEvent* event);
void QCPItemPixmap_ChildEvent(QCPItemPixmap* self, QChildEvent* event);
void QCPItemPixmap_OnChildEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseChildEvent(QCPItemPixmap* self, QChildEvent* event);
void QCPItemPixmap_CustomEvent(QCPItemPixmap* self, QEvent* event);
void QCPItemPixmap_OnCustomEvent(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseCustomEvent(QCPItemPixmap* self, QEvent* event);
void QCPItemPixmap_ConnectNotify(QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_OnConnectNotify(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseConnectNotify(QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_DisconnectNotify(QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_OnDisconnectNotify(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseDisconnectNotify(QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_UpdateScaledPixmap(QCPItemPixmap* self);
void QCPItemPixmap_OnUpdateScaledPixmap(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseUpdateScaledPixmap(QCPItemPixmap* self);
QRect* QCPItemPixmap_GetFinalRect(const QCPItemPixmap* self);
void QCPItemPixmap_OnGetFinalRect(const QCPItemPixmap* self, intptr_t slot);
QRect* QCPItemPixmap_QBaseGetFinalRect(const QCPItemPixmap* self);
QPen* QCPItemPixmap_MainPen(const QCPItemPixmap* self);
void QCPItemPixmap_OnMainPen(const QCPItemPixmap* self, intptr_t slot);
QPen* QCPItemPixmap_QBaseMainPen(const QCPItemPixmap* self);
void QCPItemPixmap_UpdateScaledPixmap1(QCPItemPixmap* self, QRect* finalRect);
void QCPItemPixmap_OnUpdateScaledPixmap1(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseUpdateScaledPixmap1(QCPItemPixmap* self, QRect* finalRect);
void QCPItemPixmap_UpdateScaledPixmap2(QCPItemPixmap* self, QRect* finalRect, bool flipHorz);
void QCPItemPixmap_OnUpdateScaledPixmap2(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseUpdateScaledPixmap2(QCPItemPixmap* self, QRect* finalRect, bool flipHorz);
void QCPItemPixmap_UpdateScaledPixmap3(QCPItemPixmap* self, QRect* finalRect, bool flipHorz, bool flipVert);
void QCPItemPixmap_OnUpdateScaledPixmap3(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseUpdateScaledPixmap3(QCPItemPixmap* self, QRect* finalRect, bool flipHorz, bool flipVert);
QRect* QCPItemPixmap_GetFinalRect1(const QCPItemPixmap* self, bool* flippedHorz);
void QCPItemPixmap_OnGetFinalRect1(const QCPItemPixmap* self, intptr_t slot);
QRect* QCPItemPixmap_QBaseGetFinalRect1(const QCPItemPixmap* self, bool* flippedHorz);
QRect* QCPItemPixmap_GetFinalRect2(const QCPItemPixmap* self, bool* flippedHorz, bool* flippedVert);
void QCPItemPixmap_OnGetFinalRect2(const QCPItemPixmap* self, intptr_t slot);
QRect* QCPItemPixmap_QBaseGetFinalRect2(const QCPItemPixmap* self, bool* flippedHorz, bool* flippedVert);
double QCPItemPixmap_RectDistance(const QCPItemPixmap* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemPixmap_OnRectDistance(const QCPItemPixmap* self, intptr_t slot);
double QCPItemPixmap_QBaseRectDistance(const QCPItemPixmap* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemPixmap_CreatePosition(QCPItemPixmap* self, const libqt_string name);
void QCPItemPixmap_OnCreatePosition(QCPItemPixmap* self, intptr_t slot);
QCPItemPosition* QCPItemPixmap_QBaseCreatePosition(QCPItemPixmap* self, const libqt_string name);
QCPItemAnchor* QCPItemPixmap_CreateAnchor(QCPItemPixmap* self, const libqt_string name, int anchorId);
void QCPItemPixmap_OnCreateAnchor(QCPItemPixmap* self, intptr_t slot);
QCPItemAnchor* QCPItemPixmap_QBaseCreateAnchor(QCPItemPixmap* self, const libqt_string name, int anchorId);
void QCPItemPixmap_InitializeParentPlot(QCPItemPixmap* self, QCustomPlot* parentPlot);
void QCPItemPixmap_OnInitializeParentPlot(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseInitializeParentPlot(QCPItemPixmap* self, QCustomPlot* parentPlot);
void QCPItemPixmap_SetParentLayerable(QCPItemPixmap* self, QCPLayerable* parentLayerable);
void QCPItemPixmap_OnSetParentLayerable(QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseSetParentLayerable(QCPItemPixmap* self, QCPLayerable* parentLayerable);
bool QCPItemPixmap_MoveToLayer(QCPItemPixmap* self, QCPLayer* layer, bool prepend);
void QCPItemPixmap_OnMoveToLayer(QCPItemPixmap* self, intptr_t slot);
bool QCPItemPixmap_QBaseMoveToLayer(QCPItemPixmap* self, QCPLayer* layer, bool prepend);
void QCPItemPixmap_ApplyAntialiasingHint(const QCPItemPixmap* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemPixmap_OnApplyAntialiasingHint(const QCPItemPixmap* self, intptr_t slot);
void QCPItemPixmap_QBaseApplyAntialiasingHint(const QCPItemPixmap* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemPixmap_Sender(const QCPItemPixmap* self);
void QCPItemPixmap_OnSender(const QCPItemPixmap* self, intptr_t slot);
QObject* QCPItemPixmap_QBaseSender(const QCPItemPixmap* self);
int QCPItemPixmap_SenderSignalIndex(const QCPItemPixmap* self);
void QCPItemPixmap_OnSenderSignalIndex(const QCPItemPixmap* self, intptr_t slot);
int QCPItemPixmap_QBaseSenderSignalIndex(const QCPItemPixmap* self);
int QCPItemPixmap_Receivers(const QCPItemPixmap* self, const char* signal);
void QCPItemPixmap_OnReceivers(const QCPItemPixmap* self, intptr_t slot);
int QCPItemPixmap_QBaseReceivers(const QCPItemPixmap* self, const char* signal);
bool QCPItemPixmap_IsSignalConnected(const QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_OnIsSignalConnected(const QCPItemPixmap* self, intptr_t slot);
bool QCPItemPixmap_QBaseIsSignalConnected(const QCPItemPixmap* self, const QMetaMethod* signal);
void QCPItemPixmap_Delete(QCPItemPixmap* self);

QCPItemTracer* QCPItemTracer_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemTracer_MetaObject(const QCPItemTracer* self);
void* QCPItemTracer_Metacast(QCPItemTracer* self, const char* param1);
int QCPItemTracer_Metacall(QCPItemTracer* self, int param1, int param2, void** param3);
libqt_string QCPItemTracer_Tr(const char* s);
QPen* QCPItemTracer_Pen(const QCPItemTracer* self);
QPen* QCPItemTracer_SelectedPen(const QCPItemTracer* self);
QBrush* QCPItemTracer_Brush(const QCPItemTracer* self);
QBrush* QCPItemTracer_SelectedBrush(const QCPItemTracer* self);
double QCPItemTracer_Size(const QCPItemTracer* self);
int QCPItemTracer_Style(const QCPItemTracer* self);
QCPGraph* QCPItemTracer_Graph(const QCPItemTracer* self);
double QCPItemTracer_GraphKey(const QCPItemTracer* self);
bool QCPItemTracer_Interpolating(const QCPItemTracer* self);
void QCPItemTracer_SetPen(QCPItemTracer* self, const QPen* pen);
void QCPItemTracer_SetSelectedPen(QCPItemTracer* self, const QPen* pen);
void QCPItemTracer_SetBrush(QCPItemTracer* self, const QBrush* brush);
void QCPItemTracer_SetSelectedBrush(QCPItemTracer* self, const QBrush* brush);
void QCPItemTracer_SetSize(QCPItemTracer* self, double size);
void QCPItemTracer_SetStyle(QCPItemTracer* self, int style);
void QCPItemTracer_SetGraph(QCPItemTracer* self, QCPGraph* graph);
void QCPItemTracer_SetGraphKey(QCPItemTracer* self, double key);
void QCPItemTracer_SetInterpolating(QCPItemTracer* self, bool enabled);
double QCPItemTracer_SelectTest(const QCPItemTracer* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemTracer_UpdatePosition(QCPItemTracer* self);
QCPItemPosition* QCPItemTracer_Position(const QCPItemTracer* self);
void QCPItemTracer_Draw(QCPItemTracer* self, QCPPainter* painter);
libqt_string QCPItemTracer_Tr2(const char* s, const char* c);
libqt_string QCPItemTracer_Tr3(const char* s, const char* c, int n);
void QCPItemTracer_OnMetacall(QCPItemTracer* self, intptr_t slot);
int QCPItemTracer_QBaseMetacall(QCPItemTracer* self, int param1, int param2, void** param3);
void QCPItemTracer_OnSelectTest(const QCPItemTracer* self, intptr_t slot);
double QCPItemTracer_QBaseSelectTest(const QCPItemTracer* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemTracer_OnDraw(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseDraw(QCPItemTracer* self, QCPPainter* painter);
int QCPItemTracer_SelectionCategory(const QCPItemTracer* self);
void QCPItemTracer_OnSelectionCategory(const QCPItemTracer* self, intptr_t slot);
int QCPItemTracer_QBaseSelectionCategory(const QCPItemTracer* self);
QRect* QCPItemTracer_ClipRect(const QCPItemTracer* self);
void QCPItemTracer_OnClipRect(const QCPItemTracer* self, intptr_t slot);
QRect* QCPItemTracer_QBaseClipRect(const QCPItemTracer* self);
void QCPItemTracer_ApplyDefaultAntialiasingHint(const QCPItemTracer* self, QCPPainter* painter);
void QCPItemTracer_OnApplyDefaultAntialiasingHint(const QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseApplyDefaultAntialiasingHint(const QCPItemTracer* self, QCPPainter* painter);
void QCPItemTracer_SelectEvent(QCPItemTracer* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemTracer_OnSelectEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseSelectEvent(QCPItemTracer* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemTracer_DeselectEvent(QCPItemTracer* self, bool* selectionStateChanged);
void QCPItemTracer_OnDeselectEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseDeselectEvent(QCPItemTracer* self, bool* selectionStateChanged);
QPointF* QCPItemTracer_AnchorPixelPosition(const QCPItemTracer* self, int anchorId);
void QCPItemTracer_OnAnchorPixelPosition(const QCPItemTracer* self, intptr_t slot);
QPointF* QCPItemTracer_QBaseAnchorPixelPosition(const QCPItemTracer* self, int anchorId);
void QCPItemTracer_ParentPlotInitialized(QCPItemTracer* self, QCustomPlot* parentPlot);
void QCPItemTracer_OnParentPlotInitialized(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseParentPlotInitialized(QCPItemTracer* self, QCustomPlot* parentPlot);
void QCPItemTracer_MousePressEvent(QCPItemTracer* self, QMouseEvent* event, const QVariant* details);
void QCPItemTracer_OnMousePressEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseMousePressEvent(QCPItemTracer* self, QMouseEvent* event, const QVariant* details);
void QCPItemTracer_MouseMoveEvent(QCPItemTracer* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemTracer_OnMouseMoveEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseMouseMoveEvent(QCPItemTracer* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemTracer_MouseReleaseEvent(QCPItemTracer* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemTracer_OnMouseReleaseEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseMouseReleaseEvent(QCPItemTracer* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemTracer_MouseDoubleClickEvent(QCPItemTracer* self, QMouseEvent* event, const QVariant* details);
void QCPItemTracer_OnMouseDoubleClickEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseMouseDoubleClickEvent(QCPItemTracer* self, QMouseEvent* event, const QVariant* details);
void QCPItemTracer_WheelEvent(QCPItemTracer* self, QWheelEvent* event);
void QCPItemTracer_OnWheelEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseWheelEvent(QCPItemTracer* self, QWheelEvent* event);
bool QCPItemTracer_Event(QCPItemTracer* self, QEvent* event);
void QCPItemTracer_OnEvent(QCPItemTracer* self, intptr_t slot);
bool QCPItemTracer_QBaseEvent(QCPItemTracer* self, QEvent* event);
bool QCPItemTracer_EventFilter(QCPItemTracer* self, QObject* watched, QEvent* event);
void QCPItemTracer_OnEventFilter(QCPItemTracer* self, intptr_t slot);
bool QCPItemTracer_QBaseEventFilter(QCPItemTracer* self, QObject* watched, QEvent* event);
void QCPItemTracer_TimerEvent(QCPItemTracer* self, QTimerEvent* event);
void QCPItemTracer_OnTimerEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseTimerEvent(QCPItemTracer* self, QTimerEvent* event);
void QCPItemTracer_ChildEvent(QCPItemTracer* self, QChildEvent* event);
void QCPItemTracer_OnChildEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseChildEvent(QCPItemTracer* self, QChildEvent* event);
void QCPItemTracer_CustomEvent(QCPItemTracer* self, QEvent* event);
void QCPItemTracer_OnCustomEvent(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseCustomEvent(QCPItemTracer* self, QEvent* event);
void QCPItemTracer_ConnectNotify(QCPItemTracer* self, const QMetaMethod* signal);
void QCPItemTracer_OnConnectNotify(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseConnectNotify(QCPItemTracer* self, const QMetaMethod* signal);
void QCPItemTracer_DisconnectNotify(QCPItemTracer* self, const QMetaMethod* signal);
void QCPItemTracer_OnDisconnectNotify(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseDisconnectNotify(QCPItemTracer* self, const QMetaMethod* signal);
QPen* QCPItemTracer_MainPen(const QCPItemTracer* self);
void QCPItemTracer_OnMainPen(const QCPItemTracer* self, intptr_t slot);
QPen* QCPItemTracer_QBaseMainPen(const QCPItemTracer* self);
QBrush* QCPItemTracer_MainBrush(const QCPItemTracer* self);
void QCPItemTracer_OnMainBrush(const QCPItemTracer* self, intptr_t slot);
QBrush* QCPItemTracer_QBaseMainBrush(const QCPItemTracer* self);
double QCPItemTracer_RectDistance(const QCPItemTracer* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemTracer_OnRectDistance(const QCPItemTracer* self, intptr_t slot);
double QCPItemTracer_QBaseRectDistance(const QCPItemTracer* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemTracer_CreatePosition(QCPItemTracer* self, const libqt_string name);
void QCPItemTracer_OnCreatePosition(QCPItemTracer* self, intptr_t slot);
QCPItemPosition* QCPItemTracer_QBaseCreatePosition(QCPItemTracer* self, const libqt_string name);
QCPItemAnchor* QCPItemTracer_CreateAnchor(QCPItemTracer* self, const libqt_string name, int anchorId);
void QCPItemTracer_OnCreateAnchor(QCPItemTracer* self, intptr_t slot);
QCPItemAnchor* QCPItemTracer_QBaseCreateAnchor(QCPItemTracer* self, const libqt_string name, int anchorId);
void QCPItemTracer_InitializeParentPlot(QCPItemTracer* self, QCustomPlot* parentPlot);
void QCPItemTracer_OnInitializeParentPlot(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseInitializeParentPlot(QCPItemTracer* self, QCustomPlot* parentPlot);
void QCPItemTracer_SetParentLayerable(QCPItemTracer* self, QCPLayerable* parentLayerable);
void QCPItemTracer_OnSetParentLayerable(QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseSetParentLayerable(QCPItemTracer* self, QCPLayerable* parentLayerable);
bool QCPItemTracer_MoveToLayer(QCPItemTracer* self, QCPLayer* layer, bool prepend);
void QCPItemTracer_OnMoveToLayer(QCPItemTracer* self, intptr_t slot);
bool QCPItemTracer_QBaseMoveToLayer(QCPItemTracer* self, QCPLayer* layer, bool prepend);
void QCPItemTracer_ApplyAntialiasingHint(const QCPItemTracer* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemTracer_OnApplyAntialiasingHint(const QCPItemTracer* self, intptr_t slot);
void QCPItemTracer_QBaseApplyAntialiasingHint(const QCPItemTracer* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemTracer_Sender(const QCPItemTracer* self);
void QCPItemTracer_OnSender(const QCPItemTracer* self, intptr_t slot);
QObject* QCPItemTracer_QBaseSender(const QCPItemTracer* self);
int QCPItemTracer_SenderSignalIndex(const QCPItemTracer* self);
void QCPItemTracer_OnSenderSignalIndex(const QCPItemTracer* self, intptr_t slot);
int QCPItemTracer_QBaseSenderSignalIndex(const QCPItemTracer* self);
int QCPItemTracer_Receivers(const QCPItemTracer* self, const char* signal);
void QCPItemTracer_OnReceivers(const QCPItemTracer* self, intptr_t slot);
int QCPItemTracer_QBaseReceivers(const QCPItemTracer* self, const char* signal);
bool QCPItemTracer_IsSignalConnected(const QCPItemTracer* self, const QMetaMethod* signal);
void QCPItemTracer_OnIsSignalConnected(const QCPItemTracer* self, intptr_t slot);
bool QCPItemTracer_QBaseIsSignalConnected(const QCPItemTracer* self, const QMetaMethod* signal);
void QCPItemTracer_Delete(QCPItemTracer* self);

QCPItemBracket* QCPItemBracket_new(QCustomPlot* parentPlot);
QMetaObject* QCPItemBracket_MetaObject(const QCPItemBracket* self);
void* QCPItemBracket_Metacast(QCPItemBracket* self, const char* param1);
int QCPItemBracket_Metacall(QCPItemBracket* self, int param1, int param2, void** param3);
libqt_string QCPItemBracket_Tr(const char* s);
QPen* QCPItemBracket_Pen(const QCPItemBracket* self);
QPen* QCPItemBracket_SelectedPen(const QCPItemBracket* self);
double QCPItemBracket_Length(const QCPItemBracket* self);
int QCPItemBracket_Style(const QCPItemBracket* self);
void QCPItemBracket_SetPen(QCPItemBracket* self, const QPen* pen);
void QCPItemBracket_SetSelectedPen(QCPItemBracket* self, const QPen* pen);
void QCPItemBracket_SetLength(QCPItemBracket* self, double length);
void QCPItemBracket_SetStyle(QCPItemBracket* self, int style);
double QCPItemBracket_SelectTest(const QCPItemBracket* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPItemPosition* QCPItemBracket_Left(const QCPItemBracket* self);
QCPItemPosition* QCPItemBracket_Right(const QCPItemBracket* self);
QCPItemAnchor* QCPItemBracket_Center(const QCPItemBracket* self);
void QCPItemBracket_Draw(QCPItemBracket* self, QCPPainter* painter);
QPointF* QCPItemBracket_AnchorPixelPosition(const QCPItemBracket* self, int anchorId);
libqt_string QCPItemBracket_Tr2(const char* s, const char* c);
libqt_string QCPItemBracket_Tr3(const char* s, const char* c, int n);
void QCPItemBracket_OnMetacall(QCPItemBracket* self, intptr_t slot);
int QCPItemBracket_QBaseMetacall(QCPItemBracket* self, int param1, int param2, void** param3);
void QCPItemBracket_OnSelectTest(const QCPItemBracket* self, intptr_t slot);
double QCPItemBracket_QBaseSelectTest(const QCPItemBracket* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPItemBracket_OnDraw(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseDraw(QCPItemBracket* self, QCPPainter* painter);
void QCPItemBracket_OnAnchorPixelPosition(const QCPItemBracket* self, intptr_t slot);
QPointF* QCPItemBracket_QBaseAnchorPixelPosition(const QCPItemBracket* self, int anchorId);
int QCPItemBracket_SelectionCategory(const QCPItemBracket* self);
void QCPItemBracket_OnSelectionCategory(const QCPItemBracket* self, intptr_t slot);
int QCPItemBracket_QBaseSelectionCategory(const QCPItemBracket* self);
QRect* QCPItemBracket_ClipRect(const QCPItemBracket* self);
void QCPItemBracket_OnClipRect(const QCPItemBracket* self, intptr_t slot);
QRect* QCPItemBracket_QBaseClipRect(const QCPItemBracket* self);
void QCPItemBracket_ApplyDefaultAntialiasingHint(const QCPItemBracket* self, QCPPainter* painter);
void QCPItemBracket_OnApplyDefaultAntialiasingHint(const QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseApplyDefaultAntialiasingHint(const QCPItemBracket* self, QCPPainter* painter);
void QCPItemBracket_SelectEvent(QCPItemBracket* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemBracket_OnSelectEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseSelectEvent(QCPItemBracket* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPItemBracket_DeselectEvent(QCPItemBracket* self, bool* selectionStateChanged);
void QCPItemBracket_OnDeselectEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseDeselectEvent(QCPItemBracket* self, bool* selectionStateChanged);
void QCPItemBracket_ParentPlotInitialized(QCPItemBracket* self, QCustomPlot* parentPlot);
void QCPItemBracket_OnParentPlotInitialized(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseParentPlotInitialized(QCPItemBracket* self, QCustomPlot* parentPlot);
void QCPItemBracket_MousePressEvent(QCPItemBracket* self, QMouseEvent* event, const QVariant* details);
void QCPItemBracket_OnMousePressEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseMousePressEvent(QCPItemBracket* self, QMouseEvent* event, const QVariant* details);
void QCPItemBracket_MouseMoveEvent(QCPItemBracket* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemBracket_OnMouseMoveEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseMouseMoveEvent(QCPItemBracket* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemBracket_MouseReleaseEvent(QCPItemBracket* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemBracket_OnMouseReleaseEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseMouseReleaseEvent(QCPItemBracket* self, QMouseEvent* event, const QPointF* startPos);
void QCPItemBracket_MouseDoubleClickEvent(QCPItemBracket* self, QMouseEvent* event, const QVariant* details);
void QCPItemBracket_OnMouseDoubleClickEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseMouseDoubleClickEvent(QCPItemBracket* self, QMouseEvent* event, const QVariant* details);
void QCPItemBracket_WheelEvent(QCPItemBracket* self, QWheelEvent* event);
void QCPItemBracket_OnWheelEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseWheelEvent(QCPItemBracket* self, QWheelEvent* event);
bool QCPItemBracket_Event(QCPItemBracket* self, QEvent* event);
void QCPItemBracket_OnEvent(QCPItemBracket* self, intptr_t slot);
bool QCPItemBracket_QBaseEvent(QCPItemBracket* self, QEvent* event);
bool QCPItemBracket_EventFilter(QCPItemBracket* self, QObject* watched, QEvent* event);
void QCPItemBracket_OnEventFilter(QCPItemBracket* self, intptr_t slot);
bool QCPItemBracket_QBaseEventFilter(QCPItemBracket* self, QObject* watched, QEvent* event);
void QCPItemBracket_TimerEvent(QCPItemBracket* self, QTimerEvent* event);
void QCPItemBracket_OnTimerEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseTimerEvent(QCPItemBracket* self, QTimerEvent* event);
void QCPItemBracket_ChildEvent(QCPItemBracket* self, QChildEvent* event);
void QCPItemBracket_OnChildEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseChildEvent(QCPItemBracket* self, QChildEvent* event);
void QCPItemBracket_CustomEvent(QCPItemBracket* self, QEvent* event);
void QCPItemBracket_OnCustomEvent(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseCustomEvent(QCPItemBracket* self, QEvent* event);
void QCPItemBracket_ConnectNotify(QCPItemBracket* self, const QMetaMethod* signal);
void QCPItemBracket_OnConnectNotify(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseConnectNotify(QCPItemBracket* self, const QMetaMethod* signal);
void QCPItemBracket_DisconnectNotify(QCPItemBracket* self, const QMetaMethod* signal);
void QCPItemBracket_OnDisconnectNotify(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseDisconnectNotify(QCPItemBracket* self, const QMetaMethod* signal);
QPen* QCPItemBracket_MainPen(const QCPItemBracket* self);
void QCPItemBracket_OnMainPen(const QCPItemBracket* self, intptr_t slot);
QPen* QCPItemBracket_QBaseMainPen(const QCPItemBracket* self);
double QCPItemBracket_RectDistance(const QCPItemBracket* self, const QRectF* rect, const QPointF* pos, bool filledRect);
void QCPItemBracket_OnRectDistance(const QCPItemBracket* self, intptr_t slot);
double QCPItemBracket_QBaseRectDistance(const QCPItemBracket* self, const QRectF* rect, const QPointF* pos, bool filledRect);
QCPItemPosition* QCPItemBracket_CreatePosition(QCPItemBracket* self, const libqt_string name);
void QCPItemBracket_OnCreatePosition(QCPItemBracket* self, intptr_t slot);
QCPItemPosition* QCPItemBracket_QBaseCreatePosition(QCPItemBracket* self, const libqt_string name);
QCPItemAnchor* QCPItemBracket_CreateAnchor(QCPItemBracket* self, const libqt_string name, int anchorId);
void QCPItemBracket_OnCreateAnchor(QCPItemBracket* self, intptr_t slot);
QCPItemAnchor* QCPItemBracket_QBaseCreateAnchor(QCPItemBracket* self, const libqt_string name, int anchorId);
void QCPItemBracket_InitializeParentPlot(QCPItemBracket* self, QCustomPlot* parentPlot);
void QCPItemBracket_OnInitializeParentPlot(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseInitializeParentPlot(QCPItemBracket* self, QCustomPlot* parentPlot);
void QCPItemBracket_SetParentLayerable(QCPItemBracket* self, QCPLayerable* parentLayerable);
void QCPItemBracket_OnSetParentLayerable(QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseSetParentLayerable(QCPItemBracket* self, QCPLayerable* parentLayerable);
bool QCPItemBracket_MoveToLayer(QCPItemBracket* self, QCPLayer* layer, bool prepend);
void QCPItemBracket_OnMoveToLayer(QCPItemBracket* self, intptr_t slot);
bool QCPItemBracket_QBaseMoveToLayer(QCPItemBracket* self, QCPLayer* layer, bool prepend);
void QCPItemBracket_ApplyAntialiasingHint(const QCPItemBracket* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPItemBracket_OnApplyAntialiasingHint(const QCPItemBracket* self, intptr_t slot);
void QCPItemBracket_QBaseApplyAntialiasingHint(const QCPItemBracket* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPItemBracket_Sender(const QCPItemBracket* self);
void QCPItemBracket_OnSender(const QCPItemBracket* self, intptr_t slot);
QObject* QCPItemBracket_QBaseSender(const QCPItemBracket* self);
int QCPItemBracket_SenderSignalIndex(const QCPItemBracket* self);
void QCPItemBracket_OnSenderSignalIndex(const QCPItemBracket* self, intptr_t slot);
int QCPItemBracket_QBaseSenderSignalIndex(const QCPItemBracket* self);
int QCPItemBracket_Receivers(const QCPItemBracket* self, const char* signal);
void QCPItemBracket_OnReceivers(const QCPItemBracket* self, intptr_t slot);
int QCPItemBracket_QBaseReceivers(const QCPItemBracket* self, const char* signal);
bool QCPItemBracket_IsSignalConnected(const QCPItemBracket* self, const QMetaMethod* signal);
void QCPItemBracket_OnIsSignalConnected(const QCPItemBracket* self, intptr_t slot);
bool QCPItemBracket_QBaseIsSignalConnected(const QCPItemBracket* self, const QMetaMethod* signal);
void QCPItemBracket_Delete(QCPItemBracket* self);

QCPPolarAxisRadial* QCPPolarAxisRadial_new(QCPPolarAxisAngular* parent);
QMetaObject* QCPPolarAxisRadial_MetaObject(const QCPPolarAxisRadial* self);
void* QCPPolarAxisRadial_Metacast(QCPPolarAxisRadial* self, const char* param1);
int QCPPolarAxisRadial_Metacall(QCPPolarAxisRadial* self, int param1, int param2, void** param3);
libqt_string QCPPolarAxisRadial_Tr(const char* s);
bool QCPPolarAxisRadial_RangeDrag(const QCPPolarAxisRadial* self);
bool QCPPolarAxisRadial_RangeZoom(const QCPPolarAxisRadial* self);
double QCPPolarAxisRadial_RangeZoomFactor(const QCPPolarAxisRadial* self);
QCPPolarAxisAngular* QCPPolarAxisRadial_AngularAxis(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_ScaleType(const QCPPolarAxisRadial* self);
QCPRange* QCPPolarAxisRadial_Range(const QCPPolarAxisRadial* self);
bool QCPPolarAxisRadial_RangeReversed(const QCPPolarAxisRadial* self);
double QCPPolarAxisRadial_Angle(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_AngleReference(const QCPPolarAxisRadial* self);
bool QCPPolarAxisRadial_Ticks(const QCPPolarAxisRadial* self);
bool QCPPolarAxisRadial_TickLabels(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_TickLabelPadding(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_TickLabelFont(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_TickLabelColor(const QCPPolarAxisRadial* self);
double QCPPolarAxisRadial_TickLabelRotation(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_TickLabelMode(const QCPPolarAxisRadial* self);
libqt_string QCPPolarAxisRadial_NumberFormat(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_NumberPrecision(const QCPPolarAxisRadial* self);
libqt_list /* of double */ QCPPolarAxisRadial_TickVector(const QCPPolarAxisRadial* self);
libqt_list /* of double */ QCPPolarAxisRadial_SubTickVector(const QCPPolarAxisRadial* self);
libqt_list /* of libqt_string */ QCPPolarAxisRadial_TickVectorLabels(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_TickLengthIn(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_TickLengthOut(const QCPPolarAxisRadial* self);
bool QCPPolarAxisRadial_SubTicks(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_SubTickLengthIn(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_SubTickLengthOut(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_BasePen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_TickPen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_SubTickPen(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_LabelFont(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_LabelColor(const QCPPolarAxisRadial* self);
libqt_string QCPPolarAxisRadial_Label(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_LabelPadding(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_SelectedParts(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_SelectableParts(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_SelectedTickLabelFont(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_SelectedLabelFont(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_SelectedTickLabelColor(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_SelectedLabelColor(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_SelectedBasePen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_SelectedTickPen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_SelectedSubTickPen(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_SetRangeDrag(QCPPolarAxisRadial* self, bool enabled);
void QCPPolarAxisRadial_SetRangeZoom(QCPPolarAxisRadial* self, bool enabled);
void QCPPolarAxisRadial_SetRangeZoomFactor(QCPPolarAxisRadial* self, double factor);
void QCPPolarAxisRadial_SetScaleType(QCPPolarAxisRadial* self, int typeVal);
void QCPPolarAxisRadial_SetRange(QCPPolarAxisRadial* self, const QCPRange* range);
void QCPPolarAxisRadial_SetRange2(QCPPolarAxisRadial* self, double lower, double upper);
void QCPPolarAxisRadial_SetRange3(QCPPolarAxisRadial* self, double position, double size, int alignment);
void QCPPolarAxisRadial_SetRangeLower(QCPPolarAxisRadial* self, double lower);
void QCPPolarAxisRadial_SetRangeUpper(QCPPolarAxisRadial* self, double upper);
void QCPPolarAxisRadial_SetRangeReversed(QCPPolarAxisRadial* self, bool reversed);
void QCPPolarAxisRadial_SetAngle(QCPPolarAxisRadial* self, double degrees);
void QCPPolarAxisRadial_SetAngleReference(QCPPolarAxisRadial* self, int reference);
void QCPPolarAxisRadial_SetTicks(QCPPolarAxisRadial* self, bool show);
void QCPPolarAxisRadial_SetTickLabels(QCPPolarAxisRadial* self, bool show);
void QCPPolarAxisRadial_SetTickLabelPadding(QCPPolarAxisRadial* self, int padding);
void QCPPolarAxisRadial_SetTickLabelFont(QCPPolarAxisRadial* self, const QFont* font);
void QCPPolarAxisRadial_SetTickLabelColor(QCPPolarAxisRadial* self, const QColor* color);
void QCPPolarAxisRadial_SetTickLabelRotation(QCPPolarAxisRadial* self, double degrees);
void QCPPolarAxisRadial_SetTickLabelMode(QCPPolarAxisRadial* self, int mode);
void QCPPolarAxisRadial_SetNumberFormat(QCPPolarAxisRadial* self, const libqt_string formatCode);
void QCPPolarAxisRadial_SetNumberPrecision(QCPPolarAxisRadial* self, int precision);
void QCPPolarAxisRadial_SetTickLength(QCPPolarAxisRadial* self, int inside);
void QCPPolarAxisRadial_SetTickLengthIn(QCPPolarAxisRadial* self, int inside);
void QCPPolarAxisRadial_SetTickLengthOut(QCPPolarAxisRadial* self, int outside);
void QCPPolarAxisRadial_SetSubTicks(QCPPolarAxisRadial* self, bool show);
void QCPPolarAxisRadial_SetSubTickLength(QCPPolarAxisRadial* self, int inside);
void QCPPolarAxisRadial_SetSubTickLengthIn(QCPPolarAxisRadial* self, int inside);
void QCPPolarAxisRadial_SetSubTickLengthOut(QCPPolarAxisRadial* self, int outside);
void QCPPolarAxisRadial_SetBasePen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetTickPen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetSubTickPen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetLabelFont(QCPPolarAxisRadial* self, const QFont* font);
void QCPPolarAxisRadial_SetLabelColor(QCPPolarAxisRadial* self, const QColor* color);
void QCPPolarAxisRadial_SetLabel(QCPPolarAxisRadial* self, const libqt_string str);
void QCPPolarAxisRadial_SetLabelPadding(QCPPolarAxisRadial* self, int padding);
void QCPPolarAxisRadial_SetSelectedTickLabelFont(QCPPolarAxisRadial* self, const QFont* font);
void QCPPolarAxisRadial_SetSelectedLabelFont(QCPPolarAxisRadial* self, const QFont* font);
void QCPPolarAxisRadial_SetSelectedTickLabelColor(QCPPolarAxisRadial* self, const QColor* color);
void QCPPolarAxisRadial_SetSelectedLabelColor(QCPPolarAxisRadial* self, const QColor* color);
void QCPPolarAxisRadial_SetSelectedBasePen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetSelectedTickPen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetSelectedSubTickPen(QCPPolarAxisRadial* self, const QPen* pen);
void QCPPolarAxisRadial_SetSelectableParts(QCPPolarAxisRadial* self, const int* selectableParts);
void QCPPolarAxisRadial_SetSelectedParts(QCPPolarAxisRadial* self, const int* selectedParts);
double QCPPolarAxisRadial_SelectTest(const QCPPolarAxisRadial* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarAxisRadial_MoveRange(QCPPolarAxisRadial* self, double diff);
void QCPPolarAxisRadial_ScaleRange(QCPPolarAxisRadial* self, double factor);
void QCPPolarAxisRadial_ScaleRange2(QCPPolarAxisRadial* self, double factor, double center);
void QCPPolarAxisRadial_Rescale(QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_PixelToCoord(const QCPPolarAxisRadial* self, QPointF* pixelPos, double* angleCoord, double* radiusCoord);
QPointF* QCPPolarAxisRadial_CoordToPixel(const QCPPolarAxisRadial* self, double angleCoord, double radiusCoord);
double QCPPolarAxisRadial_CoordToRadius(const QCPPolarAxisRadial* self, double coord);
double QCPPolarAxisRadial_RadiusToCoord(const QCPPolarAxisRadial* self, double radius);
int QCPPolarAxisRadial_GetPartAt(const QCPPolarAxisRadial* self, const QPointF* pos);
void QCPPolarAxisRadial_RangeChanged(QCPPolarAxisRadial* self, const QCPRange* newRange);
void QCPPolarAxisRadial_RangeChanged2(QCPPolarAxisRadial* self, const QCPRange* newRange, const QCPRange* oldRange);
void QCPPolarAxisRadial_ScaleTypeChanged(QCPPolarAxisRadial* self, int scaleType);
void QCPPolarAxisRadial_SelectionChanged(QCPPolarAxisRadial* self, const int* parts);
void QCPPolarAxisRadial_SelectableChanged(QCPPolarAxisRadial* self, const int* parts);
void QCPPolarAxisRadial_ApplyDefaultAntialiasingHint(const QCPPolarAxisRadial* self, QCPPainter* painter);
void QCPPolarAxisRadial_Draw(QCPPolarAxisRadial* self, QCPPainter* painter);
int QCPPolarAxisRadial_SelectionCategory(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_SelectEvent(QCPPolarAxisRadial* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarAxisRadial_DeselectEvent(QCPPolarAxisRadial* self, bool* selectionStateChanged);
void QCPPolarAxisRadial_MousePressEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisRadial_MouseMoveEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisRadial_MouseReleaseEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisRadial_WheelEvent(QCPPolarAxisRadial* self, QWheelEvent* event);
libqt_string QCPPolarAxisRadial_Tr2(const char* s, const char* c);
libqt_string QCPPolarAxisRadial_Tr3(const char* s, const char* c, int n);
void QCPPolarAxisRadial_SetTickLength2(QCPPolarAxisRadial* self, int inside, int outside);
void QCPPolarAxisRadial_SetSubTickLength2(QCPPolarAxisRadial* self, int inside, int outside);
void QCPPolarAxisRadial_Rescale1(QCPPolarAxisRadial* self, bool onlyVisiblePlottables);
void QCPPolarAxisRadial_OnMetacall(QCPPolarAxisRadial* self, intptr_t slot);
int QCPPolarAxisRadial_QBaseMetacall(QCPPolarAxisRadial* self, int param1, int param2, void** param3);
void QCPPolarAxisRadial_OnSelectTest(const QCPPolarAxisRadial* self, intptr_t slot);
double QCPPolarAxisRadial_QBaseSelectTest(const QCPPolarAxisRadial* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarAxisRadial_OnApplyDefaultAntialiasingHint(const QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseApplyDefaultAntialiasingHint(const QCPPolarAxisRadial* self, QCPPainter* painter);
void QCPPolarAxisRadial_OnDraw(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseDraw(QCPPolarAxisRadial* self, QCPPainter* painter);
void QCPPolarAxisRadial_OnSelectionCategory(const QCPPolarAxisRadial* self, intptr_t slot);
int QCPPolarAxisRadial_QBaseSelectionCategory(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnSelectEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseSelectEvent(QCPPolarAxisRadial* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarAxisRadial_OnDeselectEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseDeselectEvent(QCPPolarAxisRadial* self, bool* selectionStateChanged);
void QCPPolarAxisRadial_OnMousePressEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseMousePressEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisRadial_OnMouseMoveEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseMouseMoveEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisRadial_OnMouseReleaseEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseMouseReleaseEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisRadial_OnWheelEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseWheelEvent(QCPPolarAxisRadial* self, QWheelEvent* event);
void QCPPolarAxisRadial_ParentPlotInitialized(QCPPolarAxisRadial* self, QCustomPlot* parentPlot);
void QCPPolarAxisRadial_OnParentPlotInitialized(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseParentPlotInitialized(QCPPolarAxisRadial* self, QCustomPlot* parentPlot);
QRect* QCPPolarAxisRadial_ClipRect(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnClipRect(const QCPPolarAxisRadial* self, intptr_t slot);
QRect* QCPPolarAxisRadial_QBaseClipRect(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_MouseDoubleClickEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisRadial_OnMouseDoubleClickEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseMouseDoubleClickEvent(QCPPolarAxisRadial* self, QMouseEvent* event, const QVariant* details);
bool QCPPolarAxisRadial_Event(QCPPolarAxisRadial* self, QEvent* event);
void QCPPolarAxisRadial_OnEvent(QCPPolarAxisRadial* self, intptr_t slot);
bool QCPPolarAxisRadial_QBaseEvent(QCPPolarAxisRadial* self, QEvent* event);
bool QCPPolarAxisRadial_EventFilter(QCPPolarAxisRadial* self, QObject* watched, QEvent* event);
void QCPPolarAxisRadial_OnEventFilter(QCPPolarAxisRadial* self, intptr_t slot);
bool QCPPolarAxisRadial_QBaseEventFilter(QCPPolarAxisRadial* self, QObject* watched, QEvent* event);
void QCPPolarAxisRadial_TimerEvent(QCPPolarAxisRadial* self, QTimerEvent* event);
void QCPPolarAxisRadial_OnTimerEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseTimerEvent(QCPPolarAxisRadial* self, QTimerEvent* event);
void QCPPolarAxisRadial_ChildEvent(QCPPolarAxisRadial* self, QChildEvent* event);
void QCPPolarAxisRadial_OnChildEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseChildEvent(QCPPolarAxisRadial* self, QChildEvent* event);
void QCPPolarAxisRadial_CustomEvent(QCPPolarAxisRadial* self, QEvent* event);
void QCPPolarAxisRadial_OnCustomEvent(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseCustomEvent(QCPPolarAxisRadial* self, QEvent* event);
void QCPPolarAxisRadial_ConnectNotify(QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_OnConnectNotify(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseConnectNotify(QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_DisconnectNotify(QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_OnDisconnectNotify(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseDisconnectNotify(QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_UpdateGeometry(QCPPolarAxisRadial* self, const QPointF* center, double radius);
void QCPPolarAxisRadial_OnUpdateGeometry(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseUpdateGeometry(QCPPolarAxisRadial* self, const QPointF* center, double radius);
void QCPPolarAxisRadial_SetupTickVectors(QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnSetupTickVectors(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseSetupTickVectors(QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_GetBasePen(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetBasePen(const QCPPolarAxisRadial* self, intptr_t slot);
QPen* QCPPolarAxisRadial_QBaseGetBasePen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_GetTickPen(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetTickPen(const QCPPolarAxisRadial* self, intptr_t slot);
QPen* QCPPolarAxisRadial_QBaseGetTickPen(const QCPPolarAxisRadial* self);
QPen* QCPPolarAxisRadial_GetSubTickPen(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetSubTickPen(const QCPPolarAxisRadial* self, intptr_t slot);
QPen* QCPPolarAxisRadial_QBaseGetSubTickPen(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_GetTickLabelFont(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetTickLabelFont(const QCPPolarAxisRadial* self, intptr_t slot);
QFont* QCPPolarAxisRadial_QBaseGetTickLabelFont(const QCPPolarAxisRadial* self);
QFont* QCPPolarAxisRadial_GetLabelFont(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetLabelFont(const QCPPolarAxisRadial* self, intptr_t slot);
QFont* QCPPolarAxisRadial_QBaseGetLabelFont(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_GetTickLabelColor(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetTickLabelColor(const QCPPolarAxisRadial* self, intptr_t slot);
QColor* QCPPolarAxisRadial_QBaseGetTickLabelColor(const QCPPolarAxisRadial* self);
QColor* QCPPolarAxisRadial_GetLabelColor(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnGetLabelColor(const QCPPolarAxisRadial* self, intptr_t slot);
QColor* QCPPolarAxisRadial_QBaseGetLabelColor(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_InitializeParentPlot(QCPPolarAxisRadial* self, QCustomPlot* parentPlot);
void QCPPolarAxisRadial_OnInitializeParentPlot(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseInitializeParentPlot(QCPPolarAxisRadial* self, QCustomPlot* parentPlot);
void QCPPolarAxisRadial_SetParentLayerable(QCPPolarAxisRadial* self, QCPLayerable* parentLayerable);
void QCPPolarAxisRadial_OnSetParentLayerable(QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseSetParentLayerable(QCPPolarAxisRadial* self, QCPLayerable* parentLayerable);
bool QCPPolarAxisRadial_MoveToLayer(QCPPolarAxisRadial* self, QCPLayer* layer, bool prepend);
void QCPPolarAxisRadial_OnMoveToLayer(QCPPolarAxisRadial* self, intptr_t slot);
bool QCPPolarAxisRadial_QBaseMoveToLayer(QCPPolarAxisRadial* self, QCPLayer* layer, bool prepend);
void QCPPolarAxisRadial_ApplyAntialiasingHint(const QCPPolarAxisRadial* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPolarAxisRadial_OnApplyAntialiasingHint(const QCPPolarAxisRadial* self, intptr_t slot);
void QCPPolarAxisRadial_QBaseApplyAntialiasingHint(const QCPPolarAxisRadial* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPolarAxisRadial_Sender(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnSender(const QCPPolarAxisRadial* self, intptr_t slot);
QObject* QCPPolarAxisRadial_QBaseSender(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_SenderSignalIndex(const QCPPolarAxisRadial* self);
void QCPPolarAxisRadial_OnSenderSignalIndex(const QCPPolarAxisRadial* self, intptr_t slot);
int QCPPolarAxisRadial_QBaseSenderSignalIndex(const QCPPolarAxisRadial* self);
int QCPPolarAxisRadial_Receivers(const QCPPolarAxisRadial* self, const char* signal);
void QCPPolarAxisRadial_OnReceivers(const QCPPolarAxisRadial* self, intptr_t slot);
int QCPPolarAxisRadial_QBaseReceivers(const QCPPolarAxisRadial* self, const char* signal);
bool QCPPolarAxisRadial_IsSignalConnected(const QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_OnIsSignalConnected(const QCPPolarAxisRadial* self, intptr_t slot);
bool QCPPolarAxisRadial_QBaseIsSignalConnected(const QCPPolarAxisRadial* self, const QMetaMethod* signal);
void QCPPolarAxisRadial_Delete(QCPPolarAxisRadial* self);

QCPPolarAxisAngular* QCPPolarAxisAngular_new(QCustomPlot* parentPlot);
QMetaObject* QCPPolarAxisAngular_MetaObject(const QCPPolarAxisAngular* self);
void* QCPPolarAxisAngular_Metacast(QCPPolarAxisAngular* self, const char* param1);
int QCPPolarAxisAngular_Metacall(QCPPolarAxisAngular* self, int param1, int param2, void** param3);
libqt_string QCPPolarAxisAngular_Tr(const char* s);
QPixmap* QCPPolarAxisAngular_Background(const QCPPolarAxisAngular* self);
QBrush* QCPPolarAxisAngular_BackgroundBrush(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_BackgroundScaled(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_BackgroundScaledMode(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_RangeDrag(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_RangeZoom(const QCPPolarAxisAngular* self);
double QCPPolarAxisAngular_RangeZoomFactor(const QCPPolarAxisAngular* self);
QCPRange* QCPPolarAxisAngular_Range(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_RangeReversed(const QCPPolarAxisAngular* self);
double QCPPolarAxisAngular_Angle(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_Ticks(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_TickLabels(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_TickLabelPadding(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_TickLabelFont(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_TickLabelColor(const QCPPolarAxisAngular* self);
double QCPPolarAxisAngular_TickLabelRotation(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_TickLabelMode(const QCPPolarAxisAngular* self);
libqt_string QCPPolarAxisAngular_NumberFormat(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_NumberPrecision(const QCPPolarAxisAngular* self);
libqt_list /* of double */ QCPPolarAxisAngular_TickVector(const QCPPolarAxisAngular* self);
libqt_list /* of libqt_string */ QCPPolarAxisAngular_TickVectorLabels(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_TickLengthIn(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_TickLengthOut(const QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_SubTicks(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_SubTickLengthIn(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_SubTickLengthOut(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_BasePen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_TickPen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_SubTickPen(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_LabelFont(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_LabelColor(const QCPPolarAxisAngular* self);
libqt_string QCPPolarAxisAngular_Label(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_LabelPadding(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_SelectedParts(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_SelectableParts(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_SelectedTickLabelFont(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_SelectedLabelFont(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_SelectedTickLabelColor(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_SelectedLabelColor(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_SelectedBasePen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_SelectedTickPen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_SelectedSubTickPen(const QCPPolarAxisAngular* self);
QCPPolarGrid* QCPPolarAxisAngular_Grid(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_SetBackground(QCPPolarAxisAngular* self, const QPixmap* pm);
void QCPPolarAxisAngular_SetBackground2(QCPPolarAxisAngular* self, const QPixmap* pm, bool scaled);
void QCPPolarAxisAngular_SetBackground3(QCPPolarAxisAngular* self, const QBrush* brush);
void QCPPolarAxisAngular_SetBackgroundScaled(QCPPolarAxisAngular* self, bool scaled);
void QCPPolarAxisAngular_SetBackgroundScaledMode(QCPPolarAxisAngular* self, int mode);
void QCPPolarAxisAngular_SetRangeDrag(QCPPolarAxisAngular* self, bool enabled);
void QCPPolarAxisAngular_SetRangeZoom(QCPPolarAxisAngular* self, bool enabled);
void QCPPolarAxisAngular_SetRangeZoomFactor(QCPPolarAxisAngular* self, double factor);
void QCPPolarAxisAngular_SetRange(QCPPolarAxisAngular* self, const QCPRange* range);
void QCPPolarAxisAngular_SetRange2(QCPPolarAxisAngular* self, double lower, double upper);
void QCPPolarAxisAngular_SetRange3(QCPPolarAxisAngular* self, double position, double size, int alignment);
void QCPPolarAxisAngular_SetRangeLower(QCPPolarAxisAngular* self, double lower);
void QCPPolarAxisAngular_SetRangeUpper(QCPPolarAxisAngular* self, double upper);
void QCPPolarAxisAngular_SetRangeReversed(QCPPolarAxisAngular* self, bool reversed);
void QCPPolarAxisAngular_SetAngle(QCPPolarAxisAngular* self, double degrees);
void QCPPolarAxisAngular_SetTicks(QCPPolarAxisAngular* self, bool show);
void QCPPolarAxisAngular_SetTickLabels(QCPPolarAxisAngular* self, bool show);
void QCPPolarAxisAngular_SetTickLabelPadding(QCPPolarAxisAngular* self, int padding);
void QCPPolarAxisAngular_SetTickLabelFont(QCPPolarAxisAngular* self, const QFont* font);
void QCPPolarAxisAngular_SetTickLabelColor(QCPPolarAxisAngular* self, const QColor* color);
void QCPPolarAxisAngular_SetTickLabelRotation(QCPPolarAxisAngular* self, double degrees);
void QCPPolarAxisAngular_SetTickLabelMode(QCPPolarAxisAngular* self, int mode);
void QCPPolarAxisAngular_SetNumberFormat(QCPPolarAxisAngular* self, const libqt_string formatCode);
void QCPPolarAxisAngular_SetNumberPrecision(QCPPolarAxisAngular* self, int precision);
void QCPPolarAxisAngular_SetTickLength(QCPPolarAxisAngular* self, int inside);
void QCPPolarAxisAngular_SetTickLengthIn(QCPPolarAxisAngular* self, int inside);
void QCPPolarAxisAngular_SetTickLengthOut(QCPPolarAxisAngular* self, int outside);
void QCPPolarAxisAngular_SetSubTicks(QCPPolarAxisAngular* self, bool show);
void QCPPolarAxisAngular_SetSubTickLength(QCPPolarAxisAngular* self, int inside);
void QCPPolarAxisAngular_SetSubTickLengthIn(QCPPolarAxisAngular* self, int inside);
void QCPPolarAxisAngular_SetSubTickLengthOut(QCPPolarAxisAngular* self, int outside);
void QCPPolarAxisAngular_SetBasePen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetTickPen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetSubTickPen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetLabelFont(QCPPolarAxisAngular* self, const QFont* font);
void QCPPolarAxisAngular_SetLabelColor(QCPPolarAxisAngular* self, const QColor* color);
void QCPPolarAxisAngular_SetLabel(QCPPolarAxisAngular* self, const libqt_string str);
void QCPPolarAxisAngular_SetLabelPadding(QCPPolarAxisAngular* self, int padding);
void QCPPolarAxisAngular_SetSelectedTickLabelFont(QCPPolarAxisAngular* self, const QFont* font);
void QCPPolarAxisAngular_SetSelectedLabelFont(QCPPolarAxisAngular* self, const QFont* font);
void QCPPolarAxisAngular_SetSelectedTickLabelColor(QCPPolarAxisAngular* self, const QColor* color);
void QCPPolarAxisAngular_SetSelectedLabelColor(QCPPolarAxisAngular* self, const QColor* color);
void QCPPolarAxisAngular_SetSelectedBasePen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetSelectedTickPen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetSelectedSubTickPen(QCPPolarAxisAngular* self, const QPen* pen);
void QCPPolarAxisAngular_SetSelectableParts(QCPPolarAxisAngular* self, const int* selectableParts);
void QCPPolarAxisAngular_SetSelectedParts(QCPPolarAxisAngular* self, const int* selectedParts);
double QCPPolarAxisAngular_SelectTest(const QCPPolarAxisAngular* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarAxisAngular_Update(QCPPolarAxisAngular* self, int phase);
libqt_list /* of QCPLayoutElement* */ QCPPolarAxisAngular_Elements(const QCPPolarAxisAngular* self, bool recursive);
bool QCPPolarAxisAngular_RemoveGraph(QCPPolarAxisAngular* self, QCPPolarGraph* graph);
int QCPPolarAxisAngular_RadialAxisCount(const QCPPolarAxisAngular* self);
QCPPolarAxisRadial* QCPPolarAxisAngular_RadialAxis(const QCPPolarAxisAngular* self);
libqt_list /* of QCPPolarAxisRadial* */ QCPPolarAxisAngular_RadialAxes(const QCPPolarAxisAngular* self);
QCPPolarAxisRadial* QCPPolarAxisAngular_AddRadialAxis(QCPPolarAxisAngular* self);
bool QCPPolarAxisAngular_RemoveRadialAxis(QCPPolarAxisAngular* self, QCPPolarAxisRadial* axis);
QCPLayoutInset* QCPPolarAxisAngular_InsetLayout(const QCPPolarAxisAngular* self);
QRegion* QCPPolarAxisAngular_ExactClipRegion(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_MoveRange(QCPPolarAxisAngular* self, double diff);
void QCPPolarAxisAngular_ScaleRange(QCPPolarAxisAngular* self, double factor);
void QCPPolarAxisAngular_ScaleRange2(QCPPolarAxisAngular* self, double factor, double center);
void QCPPolarAxisAngular_Rescale(QCPPolarAxisAngular* self);
double QCPPolarAxisAngular_CoordToAngleRad(const QCPPolarAxisAngular* self, double coord);
double QCPPolarAxisAngular_AngleRadToCoord(const QCPPolarAxisAngular* self, double angleRad);
void QCPPolarAxisAngular_PixelToCoord(const QCPPolarAxisAngular* self, QPointF* pixelPos, double* angleCoord, double* radiusCoord);
QPointF* QCPPolarAxisAngular_CoordToPixel(const QCPPolarAxisAngular* self, double angleCoord, double radiusCoord);
int QCPPolarAxisAngular_GetPartAt(const QCPPolarAxisAngular* self, const QPointF* pos);
int QCPPolarAxisAngular_Left(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Right(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Top(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Bottom(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Width(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Height(const QCPPolarAxisAngular* self);
QSize* QCPPolarAxisAngular_Size(const QCPPolarAxisAngular* self);
QPoint* QCPPolarAxisAngular_TopLeft(const QCPPolarAxisAngular* self);
QPoint* QCPPolarAxisAngular_TopRight(const QCPPolarAxisAngular* self);
QPoint* QCPPolarAxisAngular_BottomLeft(const QCPPolarAxisAngular* self);
QPoint* QCPPolarAxisAngular_BottomRight(const QCPPolarAxisAngular* self);
QPointF* QCPPolarAxisAngular_Center(const QCPPolarAxisAngular* self);
double QCPPolarAxisAngular_Radius(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_RangeChanged(QCPPolarAxisAngular* self, const QCPRange* newRange);
void QCPPolarAxisAngular_RangeChanged2(QCPPolarAxisAngular* self, const QCPRange* newRange, const QCPRange* oldRange);
void QCPPolarAxisAngular_SelectionChanged(QCPPolarAxisAngular* self, const int* parts);
void QCPPolarAxisAngular_SelectableChanged(QCPPolarAxisAngular* self, const int* parts);
void QCPPolarAxisAngular_ApplyDefaultAntialiasingHint(const QCPPolarAxisAngular* self, QCPPainter* painter);
void QCPPolarAxisAngular_Draw(QCPPolarAxisAngular* self, QCPPainter* painter);
int QCPPolarAxisAngular_SelectionCategory(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_MousePressEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisAngular_MouseMoveEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisAngular_MouseReleaseEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisAngular_WheelEvent(QCPPolarAxisAngular* self, QWheelEvent* event);
libqt_string QCPPolarAxisAngular_Tr2(const char* s, const char* c);
libqt_string QCPPolarAxisAngular_Tr3(const char* s, const char* c, int n);
void QCPPolarAxisAngular_SetBackground32(QCPPolarAxisAngular* self, const QPixmap* pm, bool scaled, int mode);
void QCPPolarAxisAngular_SetTickLength2(QCPPolarAxisAngular* self, int inside, int outside);
void QCPPolarAxisAngular_SetSubTickLength2(QCPPolarAxisAngular* self, int inside, int outside);
QCPPolarAxisRadial* QCPPolarAxisAngular_RadialAxis1(const QCPPolarAxisAngular* self, int index);
QCPPolarAxisRadial* QCPPolarAxisAngular_AddRadialAxis1(QCPPolarAxisAngular* self, QCPPolarAxisRadial* axis);
void QCPPolarAxisAngular_Rescale1(QCPPolarAxisAngular* self, bool onlyVisiblePlottables);
void QCPPolarAxisAngular_OnMetacall(QCPPolarAxisAngular* self, intptr_t slot);
int QCPPolarAxisAngular_QBaseMetacall(QCPPolarAxisAngular* self, int param1, int param2, void** param3);
void QCPPolarAxisAngular_OnSelectTest(const QCPPolarAxisAngular* self, intptr_t slot);
double QCPPolarAxisAngular_QBaseSelectTest(const QCPPolarAxisAngular* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarAxisAngular_OnUpdate(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseUpdate(QCPPolarAxisAngular* self, int phase);
void QCPPolarAxisAngular_OnElements(const QCPPolarAxisAngular* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPPolarAxisAngular_QBaseElements(const QCPPolarAxisAngular* self, bool recursive);
void QCPPolarAxisAngular_OnApplyDefaultAntialiasingHint(const QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseApplyDefaultAntialiasingHint(const QCPPolarAxisAngular* self, QCPPainter* painter);
void QCPPolarAxisAngular_OnDraw(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseDraw(QCPPolarAxisAngular* self, QCPPainter* painter);
void QCPPolarAxisAngular_OnSelectionCategory(const QCPPolarAxisAngular* self, intptr_t slot);
int QCPPolarAxisAngular_QBaseSelectionCategory(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnMousePressEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseMousePressEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisAngular_OnMouseMoveEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseMouseMoveEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisAngular_OnMouseReleaseEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseMouseReleaseEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarAxisAngular_OnWheelEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseWheelEvent(QCPPolarAxisAngular* self, QWheelEvent* event);
QSize* QCPPolarAxisAngular_MinimumOuterSizeHint(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnMinimumOuterSizeHint(const QCPPolarAxisAngular* self, intptr_t slot);
QSize* QCPPolarAxisAngular_QBaseMinimumOuterSizeHint(const QCPPolarAxisAngular* self);
QSize* QCPPolarAxisAngular_MaximumOuterSizeHint(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnMaximumOuterSizeHint(const QCPPolarAxisAngular* self, intptr_t slot);
QSize* QCPPolarAxisAngular_QBaseMaximumOuterSizeHint(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_CalculateAutoMargin(QCPPolarAxisAngular* self, int side);
void QCPPolarAxisAngular_OnCalculateAutoMargin(QCPPolarAxisAngular* self, intptr_t slot);
int QCPPolarAxisAngular_QBaseCalculateAutoMargin(QCPPolarAxisAngular* self, int side);
void QCPPolarAxisAngular_LayoutChanged(QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnLayoutChanged(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseLayoutChanged(QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_ParentPlotInitialized(QCPPolarAxisAngular* self, QCustomPlot* parentPlot);
void QCPPolarAxisAngular_OnParentPlotInitialized(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseParentPlotInitialized(QCPPolarAxisAngular* self, QCustomPlot* parentPlot);
QRect* QCPPolarAxisAngular_ClipRect(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnClipRect(const QCPPolarAxisAngular* self, intptr_t slot);
QRect* QCPPolarAxisAngular_QBaseClipRect(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_SelectEvent(QCPPolarAxisAngular* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarAxisAngular_OnSelectEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseSelectEvent(QCPPolarAxisAngular* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarAxisAngular_DeselectEvent(QCPPolarAxisAngular* self, bool* selectionStateChanged);
void QCPPolarAxisAngular_OnDeselectEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseDeselectEvent(QCPPolarAxisAngular* self, bool* selectionStateChanged);
void QCPPolarAxisAngular_MouseDoubleClickEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QVariant* details);
void QCPPolarAxisAngular_OnMouseDoubleClickEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseMouseDoubleClickEvent(QCPPolarAxisAngular* self, QMouseEvent* event, const QVariant* details);
bool QCPPolarAxisAngular_Event(QCPPolarAxisAngular* self, QEvent* event);
void QCPPolarAxisAngular_OnEvent(QCPPolarAxisAngular* self, intptr_t slot);
bool QCPPolarAxisAngular_QBaseEvent(QCPPolarAxisAngular* self, QEvent* event);
bool QCPPolarAxisAngular_EventFilter(QCPPolarAxisAngular* self, QObject* watched, QEvent* event);
void QCPPolarAxisAngular_OnEventFilter(QCPPolarAxisAngular* self, intptr_t slot);
bool QCPPolarAxisAngular_QBaseEventFilter(QCPPolarAxisAngular* self, QObject* watched, QEvent* event);
void QCPPolarAxisAngular_TimerEvent(QCPPolarAxisAngular* self, QTimerEvent* event);
void QCPPolarAxisAngular_OnTimerEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseTimerEvent(QCPPolarAxisAngular* self, QTimerEvent* event);
void QCPPolarAxisAngular_ChildEvent(QCPPolarAxisAngular* self, QChildEvent* event);
void QCPPolarAxisAngular_OnChildEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseChildEvent(QCPPolarAxisAngular* self, QChildEvent* event);
void QCPPolarAxisAngular_CustomEvent(QCPPolarAxisAngular* self, QEvent* event);
void QCPPolarAxisAngular_OnCustomEvent(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseCustomEvent(QCPPolarAxisAngular* self, QEvent* event);
void QCPPolarAxisAngular_ConnectNotify(QCPPolarAxisAngular* self, const QMetaMethod* signal);
void QCPPolarAxisAngular_OnConnectNotify(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseConnectNotify(QCPPolarAxisAngular* self, const QMetaMethod* signal);
void QCPPolarAxisAngular_DisconnectNotify(QCPPolarAxisAngular* self, const QMetaMethod* signal);
void QCPPolarAxisAngular_OnDisconnectNotify(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseDisconnectNotify(QCPPolarAxisAngular* self, const QMetaMethod* signal);
bool QCPPolarAxisAngular_RegisterPolarGraph(QCPPolarAxisAngular* self, QCPPolarGraph* graph);
void QCPPolarAxisAngular_OnRegisterPolarGraph(QCPPolarAxisAngular* self, intptr_t slot);
bool QCPPolarAxisAngular_QBaseRegisterPolarGraph(QCPPolarAxisAngular* self, QCPPolarGraph* graph);
void QCPPolarAxisAngular_DrawBackground(QCPPolarAxisAngular* self, QCPPainter* painter, const QPointF* center, double radius);
void QCPPolarAxisAngular_OnDrawBackground(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseDrawBackground(QCPPolarAxisAngular* self, QCPPainter* painter, const QPointF* center, double radius);
void QCPPolarAxisAngular_SetupTickVectors(QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnSetupTickVectors(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseSetupTickVectors(QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_GetBasePen(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetBasePen(const QCPPolarAxisAngular* self, intptr_t slot);
QPen* QCPPolarAxisAngular_QBaseGetBasePen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_GetTickPen(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetTickPen(const QCPPolarAxisAngular* self, intptr_t slot);
QPen* QCPPolarAxisAngular_QBaseGetTickPen(const QCPPolarAxisAngular* self);
QPen* QCPPolarAxisAngular_GetSubTickPen(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetSubTickPen(const QCPPolarAxisAngular* self, intptr_t slot);
QPen* QCPPolarAxisAngular_QBaseGetSubTickPen(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_GetTickLabelFont(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetTickLabelFont(const QCPPolarAxisAngular* self, intptr_t slot);
QFont* QCPPolarAxisAngular_QBaseGetTickLabelFont(const QCPPolarAxisAngular* self);
QFont* QCPPolarAxisAngular_GetLabelFont(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetLabelFont(const QCPPolarAxisAngular* self, intptr_t slot);
QFont* QCPPolarAxisAngular_QBaseGetLabelFont(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_GetTickLabelColor(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetTickLabelColor(const QCPPolarAxisAngular* self, intptr_t slot);
QColor* QCPPolarAxisAngular_QBaseGetTickLabelColor(const QCPPolarAxisAngular* self);
QColor* QCPPolarAxisAngular_GetLabelColor(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnGetLabelColor(const QCPPolarAxisAngular* self, intptr_t slot);
QColor* QCPPolarAxisAngular_QBaseGetLabelColor(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_InitializeParentPlot(QCPPolarAxisAngular* self, QCustomPlot* parentPlot);
void QCPPolarAxisAngular_OnInitializeParentPlot(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseInitializeParentPlot(QCPPolarAxisAngular* self, QCustomPlot* parentPlot);
void QCPPolarAxisAngular_SetParentLayerable(QCPPolarAxisAngular* self, QCPLayerable* parentLayerable);
void QCPPolarAxisAngular_OnSetParentLayerable(QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseSetParentLayerable(QCPPolarAxisAngular* self, QCPLayerable* parentLayerable);
bool QCPPolarAxisAngular_MoveToLayer(QCPPolarAxisAngular* self, QCPLayer* layer, bool prepend);
void QCPPolarAxisAngular_OnMoveToLayer(QCPPolarAxisAngular* self, intptr_t slot);
bool QCPPolarAxisAngular_QBaseMoveToLayer(QCPPolarAxisAngular* self, QCPLayer* layer, bool prepend);
void QCPPolarAxisAngular_ApplyAntialiasingHint(const QCPPolarAxisAngular* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPolarAxisAngular_OnApplyAntialiasingHint(const QCPPolarAxisAngular* self, intptr_t slot);
void QCPPolarAxisAngular_QBaseApplyAntialiasingHint(const QCPPolarAxisAngular* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPolarAxisAngular_Sender(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnSender(const QCPPolarAxisAngular* self, intptr_t slot);
QObject* QCPPolarAxisAngular_QBaseSender(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_SenderSignalIndex(const QCPPolarAxisAngular* self);
void QCPPolarAxisAngular_OnSenderSignalIndex(const QCPPolarAxisAngular* self, intptr_t slot);
int QCPPolarAxisAngular_QBaseSenderSignalIndex(const QCPPolarAxisAngular* self);
int QCPPolarAxisAngular_Receivers(const QCPPolarAxisAngular* self, const char* signal);
void QCPPolarAxisAngular_OnReceivers(const QCPPolarAxisAngular* self, intptr_t slot);
int QCPPolarAxisAngular_QBaseReceivers(const QCPPolarAxisAngular* self, const char* signal);
bool QCPPolarAxisAngular_IsSignalConnected(const QCPPolarAxisAngular* self, const QMetaMethod* signal);
void QCPPolarAxisAngular_OnIsSignalConnected(const QCPPolarAxisAngular* self, intptr_t slot);
bool QCPPolarAxisAngular_QBaseIsSignalConnected(const QCPPolarAxisAngular* self, const QMetaMethod* signal);
void QCPPolarAxisAngular_Delete(QCPPolarAxisAngular* self);

QCPPolarGrid* QCPPolarGrid_new(QCPPolarAxisAngular* parentAxis);
QMetaObject* QCPPolarGrid_MetaObject(const QCPPolarGrid* self);
void* QCPPolarGrid_Metacast(QCPPolarGrid* self, const char* param1);
int QCPPolarGrid_Metacall(QCPPolarGrid* self, int param1, int param2, void** param3);
libqt_string QCPPolarGrid_Tr(const char* s);
QCPPolarAxisRadial* QCPPolarGrid_RadialAxis(const QCPPolarGrid* self);
int QCPPolarGrid_Type(const QCPPolarGrid* self);
int QCPPolarGrid_SubGridType(const QCPPolarGrid* self);
bool QCPPolarGrid_AntialiasedSubGrid(const QCPPolarGrid* self);
bool QCPPolarGrid_AntialiasedZeroLine(const QCPPolarGrid* self);
QPen* QCPPolarGrid_AngularPen(const QCPPolarGrid* self);
QPen* QCPPolarGrid_AngularSubGridPen(const QCPPolarGrid* self);
QPen* QCPPolarGrid_RadialPen(const QCPPolarGrid* self);
QPen* QCPPolarGrid_RadialSubGridPen(const QCPPolarGrid* self);
QPen* QCPPolarGrid_RadialZeroLinePen(const QCPPolarGrid* self);
void QCPPolarGrid_SetRadialAxis(QCPPolarGrid* self, QCPPolarAxisRadial* axis);
void QCPPolarGrid_SetType(QCPPolarGrid* self, int typeVal);
void QCPPolarGrid_SetSubGridType(QCPPolarGrid* self, int typeVal);
void QCPPolarGrid_SetAntialiasedSubGrid(QCPPolarGrid* self, bool enabled);
void QCPPolarGrid_SetAntialiasedZeroLine(QCPPolarGrid* self, bool enabled);
void QCPPolarGrid_SetAngularPen(QCPPolarGrid* self, const QPen* pen);
void QCPPolarGrid_SetAngularSubGridPen(QCPPolarGrid* self, const QPen* pen);
void QCPPolarGrid_SetRadialPen(QCPPolarGrid* self, const QPen* pen);
void QCPPolarGrid_SetRadialSubGridPen(QCPPolarGrid* self, const QPen* pen);
void QCPPolarGrid_SetRadialZeroLinePen(QCPPolarGrid* self, const QPen* pen);
void QCPPolarGrid_ApplyDefaultAntialiasingHint(const QCPPolarGrid* self, QCPPainter* painter);
void QCPPolarGrid_Draw(QCPPolarGrid* self, QCPPainter* painter);
libqt_string QCPPolarGrid_Tr2(const char* s, const char* c);
libqt_string QCPPolarGrid_Tr3(const char* s, const char* c, int n);
void QCPPolarGrid_OnMetacall(QCPPolarGrid* self, intptr_t slot);
int QCPPolarGrid_QBaseMetacall(QCPPolarGrid* self, int param1, int param2, void** param3);
void QCPPolarGrid_OnApplyDefaultAntialiasingHint(const QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseApplyDefaultAntialiasingHint(const QCPPolarGrid* self, QCPPainter* painter);
void QCPPolarGrid_OnDraw(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDraw(QCPPolarGrid* self, QCPPainter* painter);
double QCPPolarGrid_SelectTest(const QCPPolarGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarGrid_OnSelectTest(const QCPPolarGrid* self, intptr_t slot);
double QCPPolarGrid_QBaseSelectTest(const QCPPolarGrid* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarGrid_ParentPlotInitialized(QCPPolarGrid* self, QCustomPlot* parentPlot);
void QCPPolarGrid_OnParentPlotInitialized(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseParentPlotInitialized(QCPPolarGrid* self, QCustomPlot* parentPlot);
int QCPPolarGrid_SelectionCategory(const QCPPolarGrid* self);
void QCPPolarGrid_OnSelectionCategory(const QCPPolarGrid* self, intptr_t slot);
int QCPPolarGrid_QBaseSelectionCategory(const QCPPolarGrid* self);
QRect* QCPPolarGrid_ClipRect(const QCPPolarGrid* self);
void QCPPolarGrid_OnClipRect(const QCPPolarGrid* self, intptr_t slot);
QRect* QCPPolarGrid_QBaseClipRect(const QCPPolarGrid* self);
void QCPPolarGrid_SelectEvent(QCPPolarGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarGrid_OnSelectEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseSelectEvent(QCPPolarGrid* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarGrid_DeselectEvent(QCPPolarGrid* self, bool* selectionStateChanged);
void QCPPolarGrid_OnDeselectEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDeselectEvent(QCPPolarGrid* self, bool* selectionStateChanged);
void QCPPolarGrid_MousePressEvent(QCPPolarGrid* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGrid_OnMousePressEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseMousePressEvent(QCPPolarGrid* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGrid_MouseMoveEvent(QCPPolarGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGrid_OnMouseMoveEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseMouseMoveEvent(QCPPolarGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGrid_MouseReleaseEvent(QCPPolarGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGrid_OnMouseReleaseEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseMouseReleaseEvent(QCPPolarGrid* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGrid_MouseDoubleClickEvent(QCPPolarGrid* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGrid_OnMouseDoubleClickEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseMouseDoubleClickEvent(QCPPolarGrid* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGrid_WheelEvent(QCPPolarGrid* self, QWheelEvent* event);
void QCPPolarGrid_OnWheelEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseWheelEvent(QCPPolarGrid* self, QWheelEvent* event);
bool QCPPolarGrid_Event(QCPPolarGrid* self, QEvent* event);
void QCPPolarGrid_OnEvent(QCPPolarGrid* self, intptr_t slot);
bool QCPPolarGrid_QBaseEvent(QCPPolarGrid* self, QEvent* event);
bool QCPPolarGrid_EventFilter(QCPPolarGrid* self, QObject* watched, QEvent* event);
void QCPPolarGrid_OnEventFilter(QCPPolarGrid* self, intptr_t slot);
bool QCPPolarGrid_QBaseEventFilter(QCPPolarGrid* self, QObject* watched, QEvent* event);
void QCPPolarGrid_TimerEvent(QCPPolarGrid* self, QTimerEvent* event);
void QCPPolarGrid_OnTimerEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseTimerEvent(QCPPolarGrid* self, QTimerEvent* event);
void QCPPolarGrid_ChildEvent(QCPPolarGrid* self, QChildEvent* event);
void QCPPolarGrid_OnChildEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseChildEvent(QCPPolarGrid* self, QChildEvent* event);
void QCPPolarGrid_CustomEvent(QCPPolarGrid* self, QEvent* event);
void QCPPolarGrid_OnCustomEvent(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseCustomEvent(QCPPolarGrid* self, QEvent* event);
void QCPPolarGrid_ConnectNotify(QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_OnConnectNotify(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseConnectNotify(QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_DisconnectNotify(QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_OnDisconnectNotify(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDisconnectNotify(QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_DrawRadialGrid(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, const libqt_list /* of double */ coords, const QPen* pen);
void QCPPolarGrid_OnDrawRadialGrid(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDrawRadialGrid(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, const libqt_list /* of double */ coords, const QPen* pen);
void QCPPolarGrid_DrawAngularGrid(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, double radius, const libqt_list /* of QPointF* */ ticksCosSin, const QPen* pen);
void QCPPolarGrid_OnDrawAngularGrid(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDrawAngularGrid(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, double radius, const libqt_list /* of QPointF* */ ticksCosSin, const QPen* pen);
void QCPPolarGrid_DrawRadialGrid5(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, const libqt_list /* of double */ coords, const QPen* pen, const QPen* zeroPen);
void QCPPolarGrid_OnDrawRadialGrid5(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseDrawRadialGrid5(QCPPolarGrid* self, QCPPainter* painter, const QPointF* center, const libqt_list /* of double */ coords, const QPen* pen, const QPen* zeroPen);
void QCPPolarGrid_InitializeParentPlot(QCPPolarGrid* self, QCustomPlot* parentPlot);
void QCPPolarGrid_OnInitializeParentPlot(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseInitializeParentPlot(QCPPolarGrid* self, QCustomPlot* parentPlot);
void QCPPolarGrid_SetParentLayerable(QCPPolarGrid* self, QCPLayerable* parentLayerable);
void QCPPolarGrid_OnSetParentLayerable(QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseSetParentLayerable(QCPPolarGrid* self, QCPLayerable* parentLayerable);
bool QCPPolarGrid_MoveToLayer(QCPPolarGrid* self, QCPLayer* layer, bool prepend);
void QCPPolarGrid_OnMoveToLayer(QCPPolarGrid* self, intptr_t slot);
bool QCPPolarGrid_QBaseMoveToLayer(QCPPolarGrid* self, QCPLayer* layer, bool prepend);
void QCPPolarGrid_ApplyAntialiasingHint(const QCPPolarGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPolarGrid_OnApplyAntialiasingHint(const QCPPolarGrid* self, intptr_t slot);
void QCPPolarGrid_QBaseApplyAntialiasingHint(const QCPPolarGrid* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPolarGrid_Sender(const QCPPolarGrid* self);
void QCPPolarGrid_OnSender(const QCPPolarGrid* self, intptr_t slot);
QObject* QCPPolarGrid_QBaseSender(const QCPPolarGrid* self);
int QCPPolarGrid_SenderSignalIndex(const QCPPolarGrid* self);
void QCPPolarGrid_OnSenderSignalIndex(const QCPPolarGrid* self, intptr_t slot);
int QCPPolarGrid_QBaseSenderSignalIndex(const QCPPolarGrid* self);
int QCPPolarGrid_Receivers(const QCPPolarGrid* self, const char* signal);
void QCPPolarGrid_OnReceivers(const QCPPolarGrid* self, intptr_t slot);
int QCPPolarGrid_QBaseReceivers(const QCPPolarGrid* self, const char* signal);
bool QCPPolarGrid_IsSignalConnected(const QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_OnIsSignalConnected(const QCPPolarGrid* self, intptr_t slot);
bool QCPPolarGrid_QBaseIsSignalConnected(const QCPPolarGrid* self, const QMetaMethod* signal);
void QCPPolarGrid_Delete(QCPPolarGrid* self);

QCPPolarLegendItem* QCPPolarLegendItem_new(QCPLegend* parent, QCPPolarGraph* graph);
QMetaObject* QCPPolarLegendItem_MetaObject(const QCPPolarLegendItem* self);
void* QCPPolarLegendItem_Metacast(QCPPolarLegendItem* self, const char* param1);
int QCPPolarLegendItem_Metacall(QCPPolarLegendItem* self, int param1, int param2, void** param3);
libqt_string QCPPolarLegendItem_Tr(const char* s);
QCPPolarGraph* QCPPolarLegendItem_PolarGraph(QCPPolarLegendItem* self);
void QCPPolarLegendItem_Draw(QCPPolarLegendItem* self, QCPPainter* painter);
QSize* QCPPolarLegendItem_MinimumOuterSizeHint(const QCPPolarLegendItem* self);
libqt_string QCPPolarLegendItem_Tr2(const char* s, const char* c);
libqt_string QCPPolarLegendItem_Tr3(const char* s, const char* c, int n);
void QCPPolarLegendItem_OnMetacall(QCPPolarLegendItem* self, intptr_t slot);
int QCPPolarLegendItem_QBaseMetacall(QCPPolarLegendItem* self, int param1, int param2, void** param3);
void QCPPolarLegendItem_OnDraw(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseDraw(QCPPolarLegendItem* self, QCPPainter* painter);
void QCPPolarLegendItem_OnMinimumOuterSizeHint(const QCPPolarLegendItem* self, intptr_t slot);
QSize* QCPPolarLegendItem_QBaseMinimumOuterSizeHint(const QCPPolarLegendItem* self);
double QCPPolarLegendItem_SelectTest(const QCPPolarLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarLegendItem_OnSelectTest(const QCPPolarLegendItem* self, intptr_t slot);
double QCPPolarLegendItem_QBaseSelectTest(const QCPPolarLegendItem* self, const QPointF* pos, bool onlySelectable, QVariant* details);
int QCPPolarLegendItem_SelectionCategory(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnSelectionCategory(const QCPPolarLegendItem* self, intptr_t slot);
int QCPPolarLegendItem_QBaseSelectionCategory(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_ApplyDefaultAntialiasingHint(const QCPPolarLegendItem* self, QCPPainter* painter);
void QCPPolarLegendItem_OnApplyDefaultAntialiasingHint(const QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseApplyDefaultAntialiasingHint(const QCPPolarLegendItem* self, QCPPainter* painter);
QRect* QCPPolarLegendItem_ClipRect(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnClipRect(const QCPPolarLegendItem* self, intptr_t slot);
QRect* QCPPolarLegendItem_QBaseClipRect(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_SelectEvent(QCPPolarLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarLegendItem_OnSelectEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseSelectEvent(QCPPolarLegendItem* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarLegendItem_DeselectEvent(QCPPolarLegendItem* self, bool* selectionStateChanged);
void QCPPolarLegendItem_OnDeselectEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseDeselectEvent(QCPPolarLegendItem* self, bool* selectionStateChanged);
void QCPPolarLegendItem_Update(QCPPolarLegendItem* self, int phase);
void QCPPolarLegendItem_OnUpdate(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseUpdate(QCPPolarLegendItem* self, int phase);
QSize* QCPPolarLegendItem_MaximumOuterSizeHint(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnMaximumOuterSizeHint(const QCPPolarLegendItem* self, intptr_t slot);
QSize* QCPPolarLegendItem_QBaseMaximumOuterSizeHint(const QCPPolarLegendItem* self);
libqt_list /* of QCPLayoutElement* */ QCPPolarLegendItem_Elements(const QCPPolarLegendItem* self, bool recursive);
void QCPPolarLegendItem_OnElements(const QCPPolarLegendItem* self, intptr_t slot);
libqt_list /* of QCPLayoutElement* */ QCPPolarLegendItem_QBaseElements(const QCPPolarLegendItem* self, bool recursive);
int QCPPolarLegendItem_CalculateAutoMargin(QCPPolarLegendItem* self, int side);
void QCPPolarLegendItem_OnCalculateAutoMargin(QCPPolarLegendItem* self, intptr_t slot);
int QCPPolarLegendItem_QBaseCalculateAutoMargin(QCPPolarLegendItem* self, int side);
void QCPPolarLegendItem_LayoutChanged(QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnLayoutChanged(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseLayoutChanged(QCPPolarLegendItem* self);
void QCPPolarLegendItem_ParentPlotInitialized(QCPPolarLegendItem* self, QCustomPlot* parentPlot);
void QCPPolarLegendItem_OnParentPlotInitialized(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseParentPlotInitialized(QCPPolarLegendItem* self, QCustomPlot* parentPlot);
void QCPPolarLegendItem_MousePressEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPolarLegendItem_OnMousePressEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseMousePressEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPolarLegendItem_MouseMoveEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarLegendItem_OnMouseMoveEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseMouseMoveEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarLegendItem_MouseReleaseEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarLegendItem_OnMouseReleaseEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseMouseReleaseEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarLegendItem_MouseDoubleClickEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPolarLegendItem_OnMouseDoubleClickEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseMouseDoubleClickEvent(QCPPolarLegendItem* self, QMouseEvent* event, const QVariant* details);
void QCPPolarLegendItem_WheelEvent(QCPPolarLegendItem* self, QWheelEvent* event);
void QCPPolarLegendItem_OnWheelEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseWheelEvent(QCPPolarLegendItem* self, QWheelEvent* event);
bool QCPPolarLegendItem_Event(QCPPolarLegendItem* self, QEvent* event);
void QCPPolarLegendItem_OnEvent(QCPPolarLegendItem* self, intptr_t slot);
bool QCPPolarLegendItem_QBaseEvent(QCPPolarLegendItem* self, QEvent* event);
bool QCPPolarLegendItem_EventFilter(QCPPolarLegendItem* self, QObject* watched, QEvent* event);
void QCPPolarLegendItem_OnEventFilter(QCPPolarLegendItem* self, intptr_t slot);
bool QCPPolarLegendItem_QBaseEventFilter(QCPPolarLegendItem* self, QObject* watched, QEvent* event);
void QCPPolarLegendItem_TimerEvent(QCPPolarLegendItem* self, QTimerEvent* event);
void QCPPolarLegendItem_OnTimerEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseTimerEvent(QCPPolarLegendItem* self, QTimerEvent* event);
void QCPPolarLegendItem_ChildEvent(QCPPolarLegendItem* self, QChildEvent* event);
void QCPPolarLegendItem_OnChildEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseChildEvent(QCPPolarLegendItem* self, QChildEvent* event);
void QCPPolarLegendItem_CustomEvent(QCPPolarLegendItem* self, QEvent* event);
void QCPPolarLegendItem_OnCustomEvent(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseCustomEvent(QCPPolarLegendItem* self, QEvent* event);
void QCPPolarLegendItem_ConnectNotify(QCPPolarLegendItem* self, const QMetaMethod* signal);
void QCPPolarLegendItem_OnConnectNotify(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseConnectNotify(QCPPolarLegendItem* self, const QMetaMethod* signal);
void QCPPolarLegendItem_DisconnectNotify(QCPPolarLegendItem* self, const QMetaMethod* signal);
void QCPPolarLegendItem_OnDisconnectNotify(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseDisconnectNotify(QCPPolarLegendItem* self, const QMetaMethod* signal);
QPen* QCPPolarLegendItem_GetIconBorderPen(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnGetIconBorderPen(const QCPPolarLegendItem* self, intptr_t slot);
QPen* QCPPolarLegendItem_QBaseGetIconBorderPen(const QCPPolarLegendItem* self);
QColor* QCPPolarLegendItem_GetTextColor(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnGetTextColor(const QCPPolarLegendItem* self, intptr_t slot);
QColor* QCPPolarLegendItem_QBaseGetTextColor(const QCPPolarLegendItem* self);
QFont* QCPPolarLegendItem_GetFont(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnGetFont(const QCPPolarLegendItem* self, intptr_t slot);
QFont* QCPPolarLegendItem_QBaseGetFont(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_InitializeParentPlot(QCPPolarLegendItem* self, QCustomPlot* parentPlot);
void QCPPolarLegendItem_OnInitializeParentPlot(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseInitializeParentPlot(QCPPolarLegendItem* self, QCustomPlot* parentPlot);
void QCPPolarLegendItem_SetParentLayerable(QCPPolarLegendItem* self, QCPLayerable* parentLayerable);
void QCPPolarLegendItem_OnSetParentLayerable(QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseSetParentLayerable(QCPPolarLegendItem* self, QCPLayerable* parentLayerable);
bool QCPPolarLegendItem_MoveToLayer(QCPPolarLegendItem* self, QCPLayer* layer, bool prepend);
void QCPPolarLegendItem_OnMoveToLayer(QCPPolarLegendItem* self, intptr_t slot);
bool QCPPolarLegendItem_QBaseMoveToLayer(QCPPolarLegendItem* self, QCPLayer* layer, bool prepend);
void QCPPolarLegendItem_ApplyAntialiasingHint(const QCPPolarLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPolarLegendItem_OnApplyAntialiasingHint(const QCPPolarLegendItem* self, intptr_t slot);
void QCPPolarLegendItem_QBaseApplyAntialiasingHint(const QCPPolarLegendItem* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPolarLegendItem_Sender(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnSender(const QCPPolarLegendItem* self, intptr_t slot);
QObject* QCPPolarLegendItem_QBaseSender(const QCPPolarLegendItem* self);
int QCPPolarLegendItem_SenderSignalIndex(const QCPPolarLegendItem* self);
void QCPPolarLegendItem_OnSenderSignalIndex(const QCPPolarLegendItem* self, intptr_t slot);
int QCPPolarLegendItem_QBaseSenderSignalIndex(const QCPPolarLegendItem* self);
int QCPPolarLegendItem_Receivers(const QCPPolarLegendItem* self, const char* signal);
void QCPPolarLegendItem_OnReceivers(const QCPPolarLegendItem* self, intptr_t slot);
int QCPPolarLegendItem_QBaseReceivers(const QCPPolarLegendItem* self, const char* signal);
bool QCPPolarLegendItem_IsSignalConnected(const QCPPolarLegendItem* self, const QMetaMethod* signal);
void QCPPolarLegendItem_OnIsSignalConnected(const QCPPolarLegendItem* self, intptr_t slot);
bool QCPPolarLegendItem_QBaseIsSignalConnected(const QCPPolarLegendItem* self, const QMetaMethod* signal);
void QCPPolarLegendItem_Delete(QCPPolarLegendItem* self);

QCPPolarGraph* QCPPolarGraph_new(QCPPolarAxisAngular* keyAxis, QCPPolarAxisRadial* valueAxis);
QMetaObject* QCPPolarGraph_MetaObject(const QCPPolarGraph* self);
void* QCPPolarGraph_Metacast(QCPPolarGraph* self, const char* param1);
int QCPPolarGraph_Metacall(QCPPolarGraph* self, int param1, int param2, void** param3);
libqt_string QCPPolarGraph_Tr(const char* s);
libqt_string QCPPolarGraph_Name(const QCPPolarGraph* self);
bool QCPPolarGraph_AntialiasedFill(const QCPPolarGraph* self);
bool QCPPolarGraph_AntialiasedScatters(const QCPPolarGraph* self);
QPen* QCPPolarGraph_Pen(const QCPPolarGraph* self);
QBrush* QCPPolarGraph_Brush(const QCPPolarGraph* self);
bool QCPPolarGraph_Periodic(const QCPPolarGraph* self);
QCPPolarAxisAngular* QCPPolarGraph_KeyAxis(const QCPPolarGraph* self);
QCPPolarAxisRadial* QCPPolarGraph_ValueAxis(const QCPPolarGraph* self);
int QCPPolarGraph_Selectable(const QCPPolarGraph* self);
bool QCPPolarGraph_Selected(const QCPPolarGraph* self);
QCPDataSelection* QCPPolarGraph_Selection(const QCPPolarGraph* self);
int QCPPolarGraph_LineStyle(const QCPPolarGraph* self);
QCPScatterStyle* QCPPolarGraph_ScatterStyle(const QCPPolarGraph* self);
void QCPPolarGraph_SetName(QCPPolarGraph* self, const libqt_string name);
void QCPPolarGraph_SetAntialiasedFill(QCPPolarGraph* self, bool enabled);
void QCPPolarGraph_SetAntialiasedScatters(QCPPolarGraph* self, bool enabled);
void QCPPolarGraph_SetPen(QCPPolarGraph* self, const QPen* pen);
void QCPPolarGraph_SetBrush(QCPPolarGraph* self, const QBrush* brush);
void QCPPolarGraph_SetPeriodic(QCPPolarGraph* self, bool enabled);
void QCPPolarGraph_SetKeyAxis(QCPPolarGraph* self, QCPPolarAxisAngular* axis);
void QCPPolarGraph_SetValueAxis(QCPPolarGraph* self, QCPPolarAxisRadial* axis);
void QCPPolarGraph_SetSelectable(QCPPolarGraph* self, int selectable);
void QCPPolarGraph_SetSelection(QCPPolarGraph* self, QCPDataSelection* selection);
void QCPPolarGraph_SetData2(QCPPolarGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPPolarGraph_SetLineStyle(QCPPolarGraph* self, int ls);
void QCPPolarGraph_SetScatterStyle(QCPPolarGraph* self, const QCPScatterStyle* style);
void QCPPolarGraph_AddData(QCPPolarGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values);
void QCPPolarGraph_AddData2(QCPPolarGraph* self, double key, double value);
void QCPPolarGraph_CoordsToPixels(const QCPPolarGraph* self, double key, double value, double* x, double* y);
QPointF* QCPPolarGraph_CoordsToPixels2(const QCPPolarGraph* self, double key, double value);
void QCPPolarGraph_PixelsToCoords(const QCPPolarGraph* self, double x, double y, double* key, double* value);
void QCPPolarGraph_PixelsToCoords2(const QCPPolarGraph* self, const QPointF* pixelPos, double* key, double* value);
void QCPPolarGraph_RescaleAxes(const QCPPolarGraph* self);
void QCPPolarGraph_RescaleKeyAxis(const QCPPolarGraph* self);
void QCPPolarGraph_RescaleValueAxis(const QCPPolarGraph* self);
bool QCPPolarGraph_AddToLegend(QCPPolarGraph* self, QCPLegend* legend);
bool QCPPolarGraph_AddToLegend2(QCPPolarGraph* self);
bool QCPPolarGraph_RemoveFromLegend(const QCPPolarGraph* self, QCPLegend* legend);
bool QCPPolarGraph_RemoveFromLegend2(const QCPPolarGraph* self);
double QCPPolarGraph_SelectTest(const QCPPolarGraph* self, const QPointF* pos, bool onlySelectable, QVariant* details);
QCPPlottableInterface1D* QCPPolarGraph_Interface1D(QCPPolarGraph* self);
QCPRange* QCPPolarGraph_GetKeyRange(const QCPPolarGraph* self, bool* foundRange, int inSignDomain);
QCPRange* QCPPolarGraph_GetValueRange(const QCPPolarGraph* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPPolarGraph_SelectionChanged(QCPPolarGraph* self, bool selected);
void QCPPolarGraph_SelectionChanged2(QCPPolarGraph* self, const QCPDataSelection* selection);
void QCPPolarGraph_SelectableChanged(QCPPolarGraph* self, int selectable);
QRect* QCPPolarGraph_ClipRect(const QCPPolarGraph* self);
void QCPPolarGraph_Draw(QCPPolarGraph* self, QCPPainter* painter);
int QCPPolarGraph_SelectionCategory(const QCPPolarGraph* self);
void QCPPolarGraph_SelectEvent(QCPPolarGraph* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarGraph_DeselectEvent(QCPPolarGraph* self, bool* selectionStateChanged);
void QCPPolarGraph_DrawLinePlot(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPPolarGraph_DrawFill(const QCPPolarGraph* self, QCPPainter* painter, libqt_list /* of QPointF* */ lines);
void QCPPolarGraph_DrawScatterPlot(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ scatters, const QCPScatterStyle* style);
void QCPPolarGraph_DrawLegendIcon(const QCPPolarGraph* self, QCPPainter* painter, const QRectF* rect);
int QCPPolarGraph_DataCount(const QCPPolarGraph* self);
libqt_string QCPPolarGraph_Tr2(const char* s, const char* c);
libqt_string QCPPolarGraph_Tr3(const char* s, const char* c, int n);
void QCPPolarGraph_SetData3(QCPPolarGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPPolarGraph_AddData3(QCPPolarGraph* self, const libqt_list /* of double */ keys, const libqt_list /* of double */ values, bool alreadySorted);
void QCPPolarGraph_RescaleAxes1(const QCPPolarGraph* self, bool onlyEnlarge);
void QCPPolarGraph_RescaleKeyAxis1(const QCPPolarGraph* self, bool onlyEnlarge);
void QCPPolarGraph_RescaleValueAxis1(const QCPPolarGraph* self, bool onlyEnlarge);
void QCPPolarGraph_RescaleValueAxis2(const QCPPolarGraph* self, bool onlyEnlarge, bool inKeyRange);
void QCPPolarGraph_OnMetacall(QCPPolarGraph* self, intptr_t slot);
int QCPPolarGraph_QBaseMetacall(QCPPolarGraph* self, int param1, int param2, void** param3);
void QCPPolarGraph_OnSelectTest(const QCPPolarGraph* self, intptr_t slot);
double QCPPolarGraph_QBaseSelectTest(const QCPPolarGraph* self, const QPointF* pos, bool onlySelectable, QVariant* details);
void QCPPolarGraph_OnInterface1D(QCPPolarGraph* self, intptr_t slot);
QCPPlottableInterface1D* QCPPolarGraph_QBaseInterface1D(QCPPolarGraph* self);
void QCPPolarGraph_OnGetKeyRange(const QCPPolarGraph* self, intptr_t slot);
QCPRange* QCPPolarGraph_QBaseGetKeyRange(const QCPPolarGraph* self, bool* foundRange, int inSignDomain);
void QCPPolarGraph_OnGetValueRange(const QCPPolarGraph* self, intptr_t slot);
QCPRange* QCPPolarGraph_QBaseGetValueRange(const QCPPolarGraph* self, bool* foundRange, int inSignDomain, const QCPRange* inKeyRange);
void QCPPolarGraph_OnClipRect(const QCPPolarGraph* self, intptr_t slot);
QRect* QCPPolarGraph_QBaseClipRect(const QCPPolarGraph* self);
void QCPPolarGraph_OnDraw(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDraw(QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_OnSelectionCategory(const QCPPolarGraph* self, intptr_t slot);
int QCPPolarGraph_QBaseSelectionCategory(const QCPPolarGraph* self);
void QCPPolarGraph_OnSelectEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseSelectEvent(QCPPolarGraph* self, QMouseEvent* event, bool additive, const QVariant* details, bool* selectionStateChanged);
void QCPPolarGraph_OnDeselectEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDeselectEvent(QCPPolarGraph* self, bool* selectionStateChanged);
void QCPPolarGraph_OnDrawLinePlot(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDrawLinePlot(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lines);
void QCPPolarGraph_OnDrawFill(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDrawFill(const QCPPolarGraph* self, QCPPainter* painter, libqt_list /* of QPointF* */ lines);
void QCPPolarGraph_OnDrawScatterPlot(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDrawScatterPlot(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ scatters, const QCPScatterStyle* style);
void QCPPolarGraph_OnDrawLegendIcon(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDrawLegendIcon(const QCPPolarGraph* self, QCPPainter* painter, const QRectF* rect);
void QCPPolarGraph_OnDataCount(const QCPPolarGraph* self, intptr_t slot);
int QCPPolarGraph_QBaseDataCount(const QCPPolarGraph* self);
void QCPPolarGraph_ParentPlotInitialized(QCPPolarGraph* self, QCustomPlot* parentPlot);
void QCPPolarGraph_OnParentPlotInitialized(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseParentPlotInitialized(QCPPolarGraph* self, QCustomPlot* parentPlot);
void QCPPolarGraph_ApplyDefaultAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_OnApplyDefaultAntialiasingHint(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseApplyDefaultAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_MousePressEvent(QCPPolarGraph* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGraph_OnMousePressEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseMousePressEvent(QCPPolarGraph* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGraph_MouseMoveEvent(QCPPolarGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGraph_OnMouseMoveEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseMouseMoveEvent(QCPPolarGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGraph_MouseReleaseEvent(QCPPolarGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGraph_OnMouseReleaseEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseMouseReleaseEvent(QCPPolarGraph* self, QMouseEvent* event, const QPointF* startPos);
void QCPPolarGraph_MouseDoubleClickEvent(QCPPolarGraph* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGraph_OnMouseDoubleClickEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseMouseDoubleClickEvent(QCPPolarGraph* self, QMouseEvent* event, const QVariant* details);
void QCPPolarGraph_WheelEvent(QCPPolarGraph* self, QWheelEvent* event);
void QCPPolarGraph_OnWheelEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseWheelEvent(QCPPolarGraph* self, QWheelEvent* event);
bool QCPPolarGraph_Event(QCPPolarGraph* self, QEvent* event);
void QCPPolarGraph_OnEvent(QCPPolarGraph* self, intptr_t slot);
bool QCPPolarGraph_QBaseEvent(QCPPolarGraph* self, QEvent* event);
bool QCPPolarGraph_EventFilter(QCPPolarGraph* self, QObject* watched, QEvent* event);
void QCPPolarGraph_OnEventFilter(QCPPolarGraph* self, intptr_t slot);
bool QCPPolarGraph_QBaseEventFilter(QCPPolarGraph* self, QObject* watched, QEvent* event);
void QCPPolarGraph_TimerEvent(QCPPolarGraph* self, QTimerEvent* event);
void QCPPolarGraph_OnTimerEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseTimerEvent(QCPPolarGraph* self, QTimerEvent* event);
void QCPPolarGraph_ChildEvent(QCPPolarGraph* self, QChildEvent* event);
void QCPPolarGraph_OnChildEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseChildEvent(QCPPolarGraph* self, QChildEvent* event);
void QCPPolarGraph_CustomEvent(QCPPolarGraph* self, QEvent* event);
void QCPPolarGraph_OnCustomEvent(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseCustomEvent(QCPPolarGraph* self, QEvent* event);
void QCPPolarGraph_ConnectNotify(QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_OnConnectNotify(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseConnectNotify(QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_DisconnectNotify(QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_OnDisconnectNotify(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDisconnectNotify(QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_ApplyFillAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_OnApplyFillAntialiasingHint(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseApplyFillAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_ApplyScattersAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_OnApplyScattersAntialiasingHint(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseApplyScattersAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter);
void QCPPolarGraph_GetDataSegments(const QCPPolarGraph* self, libqt_list /* of QCPDataRange* */ selectedSegments, libqt_list /* of QCPDataRange* */ unselectedSegments);
void QCPPolarGraph_OnGetDataSegments(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseGetDataSegments(const QCPPolarGraph* self, libqt_list /* of QCPDataRange* */ selectedSegments, libqt_list /* of QCPDataRange* */ unselectedSegments);
void QCPPolarGraph_DrawPolyline(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lineData);
void QCPPolarGraph_OnDrawPolyline(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseDrawPolyline(const QCPPolarGraph* self, QCPPainter* painter, const libqt_list /* of QPointF* */ lineData);
void QCPPolarGraph_GetLines(const QCPPolarGraph* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange);
void QCPPolarGraph_OnGetLines(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseGetLines(const QCPPolarGraph* self, libqt_list /* of QPointF* */ lines, const QCPDataRange* dataRange);
void QCPPolarGraph_GetScatters(const QCPPolarGraph* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange);
void QCPPolarGraph_OnGetScatters(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseGetScatters(const QCPPolarGraph* self, libqt_list /* of QPointF* */ scatters, const QCPDataRange* dataRange);
libqt_list /* of QPointF* */ QCPPolarGraph_DataToLines(const QCPPolarGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPPolarGraph_OnDataToLines(const QCPPolarGraph* self, intptr_t slot);
libqt_list /* of QPointF* */ QCPPolarGraph_QBaseDataToLines(const QCPPolarGraph* self, const libqt_list /* of QCPGraphData* */ data);
void QCPPolarGraph_InitializeParentPlot(QCPPolarGraph* self, QCustomPlot* parentPlot);
void QCPPolarGraph_OnInitializeParentPlot(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseInitializeParentPlot(QCPPolarGraph* self, QCustomPlot* parentPlot);
void QCPPolarGraph_SetParentLayerable(QCPPolarGraph* self, QCPLayerable* parentLayerable);
void QCPPolarGraph_OnSetParentLayerable(QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseSetParentLayerable(QCPPolarGraph* self, QCPLayerable* parentLayerable);
bool QCPPolarGraph_MoveToLayer(QCPPolarGraph* self, QCPLayer* layer, bool prepend);
void QCPPolarGraph_OnMoveToLayer(QCPPolarGraph* self, intptr_t slot);
bool QCPPolarGraph_QBaseMoveToLayer(QCPPolarGraph* self, QCPLayer* layer, bool prepend);
void QCPPolarGraph_ApplyAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
void QCPPolarGraph_OnApplyAntialiasingHint(const QCPPolarGraph* self, intptr_t slot);
void QCPPolarGraph_QBaseApplyAntialiasingHint(const QCPPolarGraph* self, QCPPainter* painter, bool localAntialiased, int overrideElement);
QObject* QCPPolarGraph_Sender(const QCPPolarGraph* self);
void QCPPolarGraph_OnSender(const QCPPolarGraph* self, intptr_t slot);
QObject* QCPPolarGraph_QBaseSender(const QCPPolarGraph* self);
int QCPPolarGraph_SenderSignalIndex(const QCPPolarGraph* self);
void QCPPolarGraph_OnSenderSignalIndex(const QCPPolarGraph* self, intptr_t slot);
int QCPPolarGraph_QBaseSenderSignalIndex(const QCPPolarGraph* self);
int QCPPolarGraph_Receivers(const QCPPolarGraph* self, const char* signal);
void QCPPolarGraph_OnReceivers(const QCPPolarGraph* self, intptr_t slot);
int QCPPolarGraph_QBaseReceivers(const QCPPolarGraph* self, const char* signal);
bool QCPPolarGraph_IsSignalConnected(const QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_OnIsSignalConnected(const QCPPolarGraph* self, intptr_t slot);
bool QCPPolarGraph_QBaseIsSignalConnected(const QCPPolarGraph* self, const QMetaMethod* signal);
void QCPPolarGraph_Delete(QCPPolarGraph* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
