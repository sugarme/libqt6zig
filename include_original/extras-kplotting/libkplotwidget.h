#pragma once
#ifndef SRC_EXTRAS_KPLOTTINGC_LIBKPLOTWIDGET_H
#define SRC_EXTRAS_KPLOTTINGC_LIBKPLOTWIDGET_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KPlotAxis KPlotAxis;
typedef struct KPlotObject KPlotObject;
typedef struct KPlotPoint KPlotPoint;
typedef struct KPlotWidget KPlotWidget;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QPointF QPointF;
typedef struct QRect QRect;
typedef struct QRectF QRectF;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KPlotWidget* KPlotWidget_new(QWidget* parent);
KPlotWidget* KPlotWidget_new2();
QMetaObject* KPlotWidget_MetaObject(const KPlotWidget* self);
void* KPlotWidget_Metacast(KPlotWidget* self, const char* param1);
int KPlotWidget_Metacall(KPlotWidget* self, int param1, int param2, void** param3);
libqt_string KPlotWidget_Tr(const char* s);
QSize* KPlotWidget_MinimumSizeHint(const KPlotWidget* self);
QSize* KPlotWidget_SizeHint(const KPlotWidget* self);
void KPlotWidget_SetLimits(KPlotWidget* self, double x1, double x2, double y1, double y2);
void KPlotWidget_SetSecondaryLimits(KPlotWidget* self, double x1, double x2, double y1, double y2);
void KPlotWidget_ClearSecondaryLimits(KPlotWidget* self);
QRectF* KPlotWidget_DataRect(const KPlotWidget* self);
QRectF* KPlotWidget_SecondaryDataRect(const KPlotWidget* self);
QRect* KPlotWidget_PixRect(const KPlotWidget* self);
void KPlotWidget_AddPlotObject(KPlotWidget* self, KPlotObject* object);
void KPlotWidget_AddPlotObjects(KPlotWidget* self, const libqt_list /* of KPlotObject* */ objects);
libqt_list /* of KPlotObject* */ KPlotWidget_PlotObjects(const KPlotWidget* self);
void KPlotWidget_SetAutoDeletePlotObjects(KPlotWidget* self, bool autoDelete);
void KPlotWidget_RemoveAllPlotObjects(KPlotWidget* self);
void KPlotWidget_ResetPlotMask(KPlotWidget* self);
void KPlotWidget_ResetPlot(KPlotWidget* self);
void KPlotWidget_ReplacePlotObject(KPlotWidget* self, int i, KPlotObject* o);
QColor* KPlotWidget_BackgroundColor(const KPlotWidget* self);
QColor* KPlotWidget_ForegroundColor(const KPlotWidget* self);
QColor* KPlotWidget_GridColor(const KPlotWidget* self);
void KPlotWidget_SetBackgroundColor(KPlotWidget* self, const QColor* bg);
void KPlotWidget_SetForegroundColor(KPlotWidget* self, const QColor* fg);
void KPlotWidget_SetGridColor(KPlotWidget* self, const QColor* gc);
bool KPlotWidget_IsGridShown(const KPlotWidget* self);
bool KPlotWidget_IsObjectToolTipShown(const KPlotWidget* self);
bool KPlotWidget_Antialiasing(const KPlotWidget* self);
void KPlotWidget_SetAntialiasing(KPlotWidget* self, bool b);
int KPlotWidget_LeftPadding(const KPlotWidget* self);
int KPlotWidget_RightPadding(const KPlotWidget* self);
int KPlotWidget_TopPadding(const KPlotWidget* self);
int KPlotWidget_BottomPadding(const KPlotWidget* self);
void KPlotWidget_SetLeftPadding(KPlotWidget* self, int padding);
void KPlotWidget_SetRightPadding(KPlotWidget* self, int padding);
void KPlotWidget_SetTopPadding(KPlotWidget* self, int padding);
void KPlotWidget_SetBottomPadding(KPlotWidget* self, int padding);
void KPlotWidget_SetDefaultPaddings(KPlotWidget* self);
QPointF* KPlotWidget_MapToWidget(const KPlotWidget* self, const QPointF* p);
void KPlotWidget_MaskRect(KPlotWidget* self, const QRectF* r);
void KPlotWidget_MaskAlongLine(KPlotWidget* self, const QPointF* p1, const QPointF* p2);
void KPlotWidget_PlaceLabel(KPlotWidget* self, QPainter* painter, KPlotPoint* pp);
KPlotAxis* KPlotWidget_Axis(KPlotWidget* self, int typeVal);
KPlotAxis* KPlotWidget_Axis2(const KPlotWidget* self, int typeVal);
void KPlotWidget_SetShowGrid(KPlotWidget* self, bool show);
void KPlotWidget_SetObjectToolTipShown(KPlotWidget* self, bool show);
bool KPlotWidget_Event(KPlotWidget* self, QEvent* param1);
void KPlotWidget_PaintEvent(KPlotWidget* self, QPaintEvent* param1);
void KPlotWidget_ResizeEvent(KPlotWidget* self, QResizeEvent* param1);
void KPlotWidget_DrawAxes(KPlotWidget* self, QPainter* p);
libqt_string KPlotWidget_Tr2(const char* s, const char* c);
libqt_string KPlotWidget_Tr3(const char* s, const char* c, int n);
void KPlotWidget_MaskRect2(KPlotWidget* self, const QRectF* r, float value);
void KPlotWidget_MaskAlongLine3(KPlotWidget* self, const QPointF* p1, const QPointF* p2, float value);
void KPlotWidget_OnMetacall(KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseMetacall(KPlotWidget* self, int param1, int param2, void** param3);
void KPlotWidget_OnMinimumSizeHint(const KPlotWidget* self, intptr_t slot);
QSize* KPlotWidget_QBaseMinimumSizeHint(const KPlotWidget* self);
void KPlotWidget_OnSizeHint(const KPlotWidget* self, intptr_t slot);
QSize* KPlotWidget_QBaseSizeHint(const KPlotWidget* self);
void KPlotWidget_OnEvent(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseEvent(KPlotWidget* self, QEvent* param1);
void KPlotWidget_OnPaintEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBasePaintEvent(KPlotWidget* self, QPaintEvent* param1);
void KPlotWidget_OnResizeEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseResizeEvent(KPlotWidget* self, QResizeEvent* param1);
void KPlotWidget_OnDrawAxes(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDrawAxes(KPlotWidget* self, QPainter* p);
void KPlotWidget_ChangeEvent(KPlotWidget* self, QEvent* param1);
void KPlotWidget_OnChangeEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseChangeEvent(KPlotWidget* self, QEvent* param1);
void KPlotWidget_InitStyleOption(const KPlotWidget* self, QStyleOptionFrame* option);
void KPlotWidget_OnInitStyleOption(const KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseInitStyleOption(const KPlotWidget* self, QStyleOptionFrame* option);
int KPlotWidget_DevType(const KPlotWidget* self);
void KPlotWidget_OnDevType(const KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseDevType(const KPlotWidget* self);
void KPlotWidget_SetVisible(KPlotWidget* self, bool visible);
void KPlotWidget_OnSetVisible(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseSetVisible(KPlotWidget* self, bool visible);
int KPlotWidget_HeightForWidth(const KPlotWidget* self, int param1);
void KPlotWidget_OnHeightForWidth(const KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseHeightForWidth(const KPlotWidget* self, int param1);
bool KPlotWidget_HasHeightForWidth(const KPlotWidget* self);
void KPlotWidget_OnHasHeightForWidth(const KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseHasHeightForWidth(const KPlotWidget* self);
QPaintEngine* KPlotWidget_PaintEngine(const KPlotWidget* self);
void KPlotWidget_OnPaintEngine(const KPlotWidget* self, intptr_t slot);
QPaintEngine* KPlotWidget_QBasePaintEngine(const KPlotWidget* self);
void KPlotWidget_MousePressEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_OnMousePressEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseMousePressEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_MouseReleaseEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_OnMouseReleaseEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseMouseReleaseEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_MouseDoubleClickEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_OnMouseDoubleClickEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseMouseDoubleClickEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_MouseMoveEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_OnMouseMoveEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseMouseMoveEvent(KPlotWidget* self, QMouseEvent* event);
void KPlotWidget_WheelEvent(KPlotWidget* self, QWheelEvent* event);
void KPlotWidget_OnWheelEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseWheelEvent(KPlotWidget* self, QWheelEvent* event);
void KPlotWidget_KeyPressEvent(KPlotWidget* self, QKeyEvent* event);
void KPlotWidget_OnKeyPressEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseKeyPressEvent(KPlotWidget* self, QKeyEvent* event);
void KPlotWidget_KeyReleaseEvent(KPlotWidget* self, QKeyEvent* event);
void KPlotWidget_OnKeyReleaseEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseKeyReleaseEvent(KPlotWidget* self, QKeyEvent* event);
void KPlotWidget_FocusInEvent(KPlotWidget* self, QFocusEvent* event);
void KPlotWidget_OnFocusInEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseFocusInEvent(KPlotWidget* self, QFocusEvent* event);
void KPlotWidget_FocusOutEvent(KPlotWidget* self, QFocusEvent* event);
void KPlotWidget_OnFocusOutEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseFocusOutEvent(KPlotWidget* self, QFocusEvent* event);
void KPlotWidget_EnterEvent(KPlotWidget* self, QEnterEvent* event);
void KPlotWidget_OnEnterEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseEnterEvent(KPlotWidget* self, QEnterEvent* event);
void KPlotWidget_LeaveEvent(KPlotWidget* self, QEvent* event);
void KPlotWidget_OnLeaveEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseLeaveEvent(KPlotWidget* self, QEvent* event);
void KPlotWidget_MoveEvent(KPlotWidget* self, QMoveEvent* event);
void KPlotWidget_OnMoveEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseMoveEvent(KPlotWidget* self, QMoveEvent* event);
void KPlotWidget_CloseEvent(KPlotWidget* self, QCloseEvent* event);
void KPlotWidget_OnCloseEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseCloseEvent(KPlotWidget* self, QCloseEvent* event);
void KPlotWidget_ContextMenuEvent(KPlotWidget* self, QContextMenuEvent* event);
void KPlotWidget_OnContextMenuEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseContextMenuEvent(KPlotWidget* self, QContextMenuEvent* event);
void KPlotWidget_TabletEvent(KPlotWidget* self, QTabletEvent* event);
void KPlotWidget_OnTabletEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseTabletEvent(KPlotWidget* self, QTabletEvent* event);
void KPlotWidget_ActionEvent(KPlotWidget* self, QActionEvent* event);
void KPlotWidget_OnActionEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseActionEvent(KPlotWidget* self, QActionEvent* event);
void KPlotWidget_DragEnterEvent(KPlotWidget* self, QDragEnterEvent* event);
void KPlotWidget_OnDragEnterEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDragEnterEvent(KPlotWidget* self, QDragEnterEvent* event);
void KPlotWidget_DragMoveEvent(KPlotWidget* self, QDragMoveEvent* event);
void KPlotWidget_OnDragMoveEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDragMoveEvent(KPlotWidget* self, QDragMoveEvent* event);
void KPlotWidget_DragLeaveEvent(KPlotWidget* self, QDragLeaveEvent* event);
void KPlotWidget_OnDragLeaveEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDragLeaveEvent(KPlotWidget* self, QDragLeaveEvent* event);
void KPlotWidget_DropEvent(KPlotWidget* self, QDropEvent* event);
void KPlotWidget_OnDropEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDropEvent(KPlotWidget* self, QDropEvent* event);
void KPlotWidget_ShowEvent(KPlotWidget* self, QShowEvent* event);
void KPlotWidget_OnShowEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseShowEvent(KPlotWidget* self, QShowEvent* event);
void KPlotWidget_HideEvent(KPlotWidget* self, QHideEvent* event);
void KPlotWidget_OnHideEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseHideEvent(KPlotWidget* self, QHideEvent* event);
bool KPlotWidget_NativeEvent(KPlotWidget* self, const libqt_string eventType, void* message, intptr_t* result);
void KPlotWidget_OnNativeEvent(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseNativeEvent(KPlotWidget* self, const libqt_string eventType, void* message, intptr_t* result);
int KPlotWidget_Metric(const KPlotWidget* self, int param1);
void KPlotWidget_OnMetric(const KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseMetric(const KPlotWidget* self, int param1);
void KPlotWidget_InitPainter(const KPlotWidget* self, QPainter* painter);
void KPlotWidget_OnInitPainter(const KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseInitPainter(const KPlotWidget* self, QPainter* painter);
QPaintDevice* KPlotWidget_Redirected(const KPlotWidget* self, QPoint* offset);
void KPlotWidget_OnRedirected(const KPlotWidget* self, intptr_t slot);
QPaintDevice* KPlotWidget_QBaseRedirected(const KPlotWidget* self, QPoint* offset);
QPainter* KPlotWidget_SharedPainter(const KPlotWidget* self);
void KPlotWidget_OnSharedPainter(const KPlotWidget* self, intptr_t slot);
QPainter* KPlotWidget_QBaseSharedPainter(const KPlotWidget* self);
void KPlotWidget_InputMethodEvent(KPlotWidget* self, QInputMethodEvent* param1);
void KPlotWidget_OnInputMethodEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseInputMethodEvent(KPlotWidget* self, QInputMethodEvent* param1);
QVariant* KPlotWidget_InputMethodQuery(const KPlotWidget* self, int param1);
void KPlotWidget_OnInputMethodQuery(const KPlotWidget* self, intptr_t slot);
QVariant* KPlotWidget_QBaseInputMethodQuery(const KPlotWidget* self, int param1);
bool KPlotWidget_FocusNextPrevChild(KPlotWidget* self, bool next);
void KPlotWidget_OnFocusNextPrevChild(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseFocusNextPrevChild(KPlotWidget* self, bool next);
bool KPlotWidget_EventFilter(KPlotWidget* self, QObject* watched, QEvent* event);
void KPlotWidget_OnEventFilter(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseEventFilter(KPlotWidget* self, QObject* watched, QEvent* event);
void KPlotWidget_TimerEvent(KPlotWidget* self, QTimerEvent* event);
void KPlotWidget_OnTimerEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseTimerEvent(KPlotWidget* self, QTimerEvent* event);
void KPlotWidget_ChildEvent(KPlotWidget* self, QChildEvent* event);
void KPlotWidget_OnChildEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseChildEvent(KPlotWidget* self, QChildEvent* event);
void KPlotWidget_CustomEvent(KPlotWidget* self, QEvent* event);
void KPlotWidget_OnCustomEvent(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseCustomEvent(KPlotWidget* self, QEvent* event);
void KPlotWidget_ConnectNotify(KPlotWidget* self, const QMetaMethod* signal);
void KPlotWidget_OnConnectNotify(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseConnectNotify(KPlotWidget* self, const QMetaMethod* signal);
void KPlotWidget_DisconnectNotify(KPlotWidget* self, const QMetaMethod* signal);
void KPlotWidget_OnDisconnectNotify(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDisconnectNotify(KPlotWidget* self, const QMetaMethod* signal);
void KPlotWidget_SetPixRect(KPlotWidget* self);
void KPlotWidget_OnSetPixRect(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseSetPixRect(KPlotWidget* self);
libqt_list /* of KPlotPoint* */ KPlotWidget_PointsUnderPoint(const KPlotWidget* self, const QPoint* p);
void KPlotWidget_OnPointsUnderPoint(const KPlotWidget* self, intptr_t slot);
libqt_list /* of KPlotPoint* */ KPlotWidget_QBasePointsUnderPoint(const KPlotWidget* self, const QPoint* p);
void KPlotWidget_DrawFrame(KPlotWidget* self, QPainter* param1);
void KPlotWidget_OnDrawFrame(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDrawFrame(KPlotWidget* self, QPainter* param1);
void KPlotWidget_UpdateMicroFocus(KPlotWidget* self);
void KPlotWidget_OnUpdateMicroFocus(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseUpdateMicroFocus(KPlotWidget* self);
void KPlotWidget_Create(KPlotWidget* self);
void KPlotWidget_OnCreate(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseCreate(KPlotWidget* self);
void KPlotWidget_Destroy(KPlotWidget* self);
void KPlotWidget_OnDestroy(KPlotWidget* self, intptr_t slot);
void KPlotWidget_QBaseDestroy(KPlotWidget* self);
bool KPlotWidget_FocusNextChild(KPlotWidget* self);
void KPlotWidget_OnFocusNextChild(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseFocusNextChild(KPlotWidget* self);
bool KPlotWidget_FocusPreviousChild(KPlotWidget* self);
void KPlotWidget_OnFocusPreviousChild(KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseFocusPreviousChild(KPlotWidget* self);
QObject* KPlotWidget_Sender(const KPlotWidget* self);
void KPlotWidget_OnSender(const KPlotWidget* self, intptr_t slot);
QObject* KPlotWidget_QBaseSender(const KPlotWidget* self);
int KPlotWidget_SenderSignalIndex(const KPlotWidget* self);
void KPlotWidget_OnSenderSignalIndex(const KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseSenderSignalIndex(const KPlotWidget* self);
int KPlotWidget_Receivers(const KPlotWidget* self, const char* signal);
void KPlotWidget_OnReceivers(const KPlotWidget* self, intptr_t slot);
int KPlotWidget_QBaseReceivers(const KPlotWidget* self, const char* signal);
bool KPlotWidget_IsSignalConnected(const KPlotWidget* self, const QMetaMethod* signal);
void KPlotWidget_OnIsSignalConnected(const KPlotWidget* self, intptr_t slot);
bool KPlotWidget_QBaseIsSignalConnected(const KPlotWidget* self, const QMetaMethod* signal);
double KPlotWidget_GetDecodedMetricF(const KPlotWidget* self, int metricA, int metricB);
void KPlotWidget_OnGetDecodedMetricF(const KPlotWidget* self, intptr_t slot);
double KPlotWidget_QBaseGetDecodedMetricF(const KPlotWidget* self, int metricA, int metricB);
void KPlotWidget_Delete(KPlotWidget* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
