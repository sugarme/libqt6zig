#pragma once
#ifndef SRC_EXTRAS_KTEXTEDITORC_LIBCODECOMPLETIONMODELCONTROLLERINTERFACE_H
#define SRC_EXTRAS_KTEXTEDITORC_LIBCODECOMPLETIONMODELCONTROLLERINTERFACE_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KTextEditor__CodeCompletionModelControllerInterface)
typedef KTextEditor::CodeCompletionModelControllerInterface KTextEditor__CodeCompletionModelControllerInterface;
#endif
typedef KTextEditor::Cursor KTextEditor__Cursor;
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KTextEditor__Range)
typedef KTextEditor::Range KTextEditor__Range;
#endif
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KTextEditor__View)
typedef KTextEditor::View KTextEditor__View;
#endif
#else
typedef struct KTextEditor__CodeCompletionModelControllerInterface KTextEditor__CodeCompletionModelControllerInterface;
typedef struct KTextEditor__Cursor KTextEditor__Cursor;
typedef struct KTextEditor__Range KTextEditor__Range;
typedef struct KTextEditor__View KTextEditor__View;
typedef struct QChar QChar;
typedef struct QModelIndex QModelIndex;
#endif

KTextEditor__CodeCompletionModelControllerInterface* KTextEditor__CodeCompletionModelControllerInterface_new();
bool KTextEditor__CodeCompletionModelControllerInterface_ShouldStartCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const libqt_string insertedText, bool userInsertion, const KTextEditor__Cursor* position);
KTextEditor__Range* KTextEditor__CodeCompletionModelControllerInterface_CompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Cursor* position);
KTextEditor__Range* KTextEditor__CodeCompletionModelControllerInterface_UpdateCompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range);
libqt_string KTextEditor__CodeCompletionModelControllerInterface_FilterString(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range, const KTextEditor__Cursor* position);
bool KTextEditor__CodeCompletionModelControllerInterface_ShouldAbortCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range, const libqt_string currentCompletion);
bool KTextEditor__CodeCompletionModelControllerInterface_ShouldExecute(KTextEditor__CodeCompletionModelControllerInterface* self, const QModelIndex* selected, QChar* inserted);
void KTextEditor__CodeCompletionModelControllerInterface_Aborted(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view);
int KTextEditor__CodeCompletionModelControllerInterface_MatchingItem(KTextEditor__CodeCompletionModelControllerInterface* self, const QModelIndex* matched);
bool KTextEditor__CodeCompletionModelControllerInterface_ShouldHideItemsWithEqualNames(const KTextEditor__CodeCompletionModelControllerInterface* self);
void KTextEditor__CodeCompletionModelControllerInterface_OperatorAssign(KTextEditor__CodeCompletionModelControllerInterface* self, const KTextEditor__CodeCompletionModelControllerInterface* param1);
void KTextEditor__CodeCompletionModelControllerInterface_OnShouldStartCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
bool KTextEditor__CodeCompletionModelControllerInterface_QBaseShouldStartCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const libqt_string insertedText, bool userInsertion, const KTextEditor__Cursor* position);
void KTextEditor__CodeCompletionModelControllerInterface_OnCompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
KTextEditor__Range* KTextEditor__CodeCompletionModelControllerInterface_QBaseCompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Cursor* position);
void KTextEditor__CodeCompletionModelControllerInterface_OnUpdateCompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
KTextEditor__Range* KTextEditor__CodeCompletionModelControllerInterface_QBaseUpdateCompletionRange(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range);
void KTextEditor__CodeCompletionModelControllerInterface_OnFilterString(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
libqt_string KTextEditor__CodeCompletionModelControllerInterface_QBaseFilterString(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range, const KTextEditor__Cursor* position);
void KTextEditor__CodeCompletionModelControllerInterface_OnShouldAbortCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
bool KTextEditor__CodeCompletionModelControllerInterface_QBaseShouldAbortCompletion(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view, const KTextEditor__Range* range, const libqt_string currentCompletion);
void KTextEditor__CodeCompletionModelControllerInterface_OnShouldExecute(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
bool KTextEditor__CodeCompletionModelControllerInterface_QBaseShouldExecute(KTextEditor__CodeCompletionModelControllerInterface* self, const QModelIndex* selected, QChar* inserted);
void KTextEditor__CodeCompletionModelControllerInterface_OnAborted(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
void KTextEditor__CodeCompletionModelControllerInterface_QBaseAborted(KTextEditor__CodeCompletionModelControllerInterface* self, KTextEditor__View* view);
void KTextEditor__CodeCompletionModelControllerInterface_OnMatchingItem(KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
int KTextEditor__CodeCompletionModelControllerInterface_QBaseMatchingItem(KTextEditor__CodeCompletionModelControllerInterface* self, const QModelIndex* matched);
void KTextEditor__CodeCompletionModelControllerInterface_OnShouldHideItemsWithEqualNames(const KTextEditor__CodeCompletionModelControllerInterface* self, intptr_t slot);
bool KTextEditor__CodeCompletionModelControllerInterface_QBaseShouldHideItemsWithEqualNames(const KTextEditor__CodeCompletionModelControllerInterface* self);
void KTextEditor__CodeCompletionModelControllerInterface_Delete(KTextEditor__CodeCompletionModelControllerInterface* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
