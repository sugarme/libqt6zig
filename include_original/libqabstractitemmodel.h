#pragma once
#ifndef SRCC_LIBQABSTRACTITEMMODEL_H
#define SRCC_LIBQABSTRACTITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractListModel QAbstractListModel;
typedef struct QAbstractTableModel QAbstractTableModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleData QModelRoleData;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QModelRoleData* QModelRoleData_new(int role);
int QModelRoleData_Role(const QModelRoleData* self);
QVariant* QModelRoleData_Data(QModelRoleData* self);
QVariant* QModelRoleData_Data2(const QModelRoleData* self);
void QModelRoleData_ClearData(QModelRoleData* self);
void QModelRoleData_OperatorAssign(QModelRoleData* self, const QModelRoleData* param1);
void QModelRoleData_Delete(QModelRoleData* self);

QModelRoleDataSpan* QModelRoleDataSpan_new(const QModelRoleDataSpan* other);
QModelRoleDataSpan* QModelRoleDataSpan_new2(QModelRoleDataSpan* other);
QModelRoleDataSpan* QModelRoleDataSpan_new3();
QModelRoleDataSpan* QModelRoleDataSpan_new4(QModelRoleData* modelRoleData);
QModelRoleDataSpan* QModelRoleDataSpan_new5(QModelRoleData* modelRoleData, ptrdiff_t lenVal);
QModelRoleDataSpan* QModelRoleDataSpan_new6(const QModelRoleDataSpan* param1);
void QModelRoleDataSpan_CopyAssign(QModelRoleDataSpan* self, QModelRoleDataSpan* other);
void QModelRoleDataSpan_MoveAssign(QModelRoleDataSpan* self, QModelRoleDataSpan* other);
ptrdiff_t QModelRoleDataSpan_Size(const QModelRoleDataSpan* self);
ptrdiff_t QModelRoleDataSpan_Length(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_Data(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_Begin(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_End(const QModelRoleDataSpan* self);
QModelRoleData* QModelRoleDataSpan_OperatorSubscript(const QModelRoleDataSpan* self, ptrdiff_t index);
QVariant* QModelRoleDataSpan_DataForRole(const QModelRoleDataSpan* self, int role);
void QModelRoleDataSpan_Delete(QModelRoleDataSpan* self);

QModelIndex* QModelIndex_new(const QModelIndex* other);
QModelIndex* QModelIndex_new2(QModelIndex* other);
QModelIndex* QModelIndex_new3();
QModelIndex* QModelIndex_new4(const QModelIndex* param1);
void QModelIndex_CopyAssign(QModelIndex* self, QModelIndex* other);
void QModelIndex_MoveAssign(QModelIndex* self, QModelIndex* other);
int QModelIndex_Row(const QModelIndex* self);
int QModelIndex_Column(const QModelIndex* self);
uintptr_t QModelIndex_InternalId(const QModelIndex* self);
void* QModelIndex_InternalPointer(const QModelIndex* self);
const void* QModelIndex_ConstInternalPointer(const QModelIndex* self);
QModelIndex* QModelIndex_Parent(const QModelIndex* self);
QModelIndex* QModelIndex_Sibling(const QModelIndex* self, int row, int column);
QModelIndex* QModelIndex_SiblingAtColumn(const QModelIndex* self, int column);
QModelIndex* QModelIndex_SiblingAtRow(const QModelIndex* self, int row);
QVariant* QModelIndex_Data(const QModelIndex* self);
void QModelIndex_MultiData(const QModelIndex* self, QModelRoleDataSpan* roleDataSpan);
int QModelIndex_Flags(const QModelIndex* self);
QAbstractItemModel* QModelIndex_Model(const QModelIndex* self);
bool QModelIndex_IsValid(const QModelIndex* self);
QVariant* QModelIndex_Data1(const QModelIndex* self, int role);
void QModelIndex_Delete(QModelIndex* self);

QPersistentModelIndex* QPersistentModelIndex_new();
QPersistentModelIndex* QPersistentModelIndex_new2(const QModelIndex* index);
QPersistentModelIndex* QPersistentModelIndex_new3(const QPersistentModelIndex* other);
void QPersistentModelIndex_OperatorAssign(QPersistentModelIndex* self, const QPersistentModelIndex* other);
void QPersistentModelIndex_Swap(QPersistentModelIndex* self, QPersistentModelIndex* other);
void QPersistentModelIndex_OperatorAssign2(QPersistentModelIndex* self, const QModelIndex* other);
QModelIndex* QPersistentModelIndex_ToQModelIndex(const QPersistentModelIndex* self);
int QPersistentModelIndex_Row(const QPersistentModelIndex* self);
int QPersistentModelIndex_Column(const QPersistentModelIndex* self);
void* QPersistentModelIndex_InternalPointer(const QPersistentModelIndex* self);
const void* QPersistentModelIndex_ConstInternalPointer(const QPersistentModelIndex* self);
uintptr_t QPersistentModelIndex_InternalId(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_Parent(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_Sibling(const QPersistentModelIndex* self, int row, int column);
QVariant* QPersistentModelIndex_Data(const QPersistentModelIndex* self);
void QPersistentModelIndex_MultiData(const QPersistentModelIndex* self, QModelRoleDataSpan* roleDataSpan);
int QPersistentModelIndex_Flags(const QPersistentModelIndex* self);
QAbstractItemModel* QPersistentModelIndex_Model(const QPersistentModelIndex* self);
bool QPersistentModelIndex_IsValid(const QPersistentModelIndex* self);
QVariant* QPersistentModelIndex_Data1(const QPersistentModelIndex* self, int role);
void QPersistentModelIndex_Delete(QPersistentModelIndex* self);

QAbstractItemModel* QAbstractItemModel_new();
QAbstractItemModel* QAbstractItemModel_new2(QObject* parent);
QMetaObject* QAbstractItemModel_MetaObject(const QAbstractItemModel* self);
void* QAbstractItemModel_Metacast(QAbstractItemModel* self, const char* param1);
int QAbstractItemModel_Metacall(QAbstractItemModel* self, int param1, int param2, void** param3);
libqt_string QAbstractItemModel_Tr(const char* s);
bool QAbstractItemModel_HasIndex(const QAbstractItemModel* self, int row, int column);
QModelIndex* QAbstractItemModel_Index(const QAbstractItemModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* QAbstractItemModel_Parent(const QAbstractItemModel* self, const QModelIndex* child);
QModelIndex* QAbstractItemModel_Sibling(const QAbstractItemModel* self, int row, int column, const QModelIndex* idx);
int QAbstractItemModel_RowCount(const QAbstractItemModel* self, const QModelIndex* parent);
int QAbstractItemModel_ColumnCount(const QAbstractItemModel* self, const QModelIndex* parent);
bool QAbstractItemModel_HasChildren(const QAbstractItemModel* self, const QModelIndex* parent);
QVariant* QAbstractItemModel_Data(const QAbstractItemModel* self, const QModelIndex* index, int role);
bool QAbstractItemModel_SetData(QAbstractItemModel* self, const QModelIndex* index, const QVariant* value, int role);
QVariant* QAbstractItemModel_HeaderData(const QAbstractItemModel* self, int section, int orientation, int role);
bool QAbstractItemModel_SetHeaderData(QAbstractItemModel* self, int section, int orientation, const QVariant* value, int role);
libqt_map /* of int to QVariant* */ QAbstractItemModel_ItemData(const QAbstractItemModel* self, const QModelIndex* index);
bool QAbstractItemModel_SetItemData(QAbstractItemModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool QAbstractItemModel_ClearItemData(QAbstractItemModel* self, const QModelIndex* index);
libqt_list /* of libqt_string */ QAbstractItemModel_MimeTypes(const QAbstractItemModel* self);
QMimeData* QAbstractItemModel_MimeData(const QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool QAbstractItemModel_CanDropMimeData(const QAbstractItemModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
bool QAbstractItemModel_DropMimeData(QAbstractItemModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QAbstractItemModel_SupportedDropActions(const QAbstractItemModel* self);
int QAbstractItemModel_SupportedDragActions(const QAbstractItemModel* self);
bool QAbstractItemModel_InsertRows(QAbstractItemModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractItemModel_InsertColumns(QAbstractItemModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractItemModel_RemoveRows(QAbstractItemModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractItemModel_RemoveColumns(QAbstractItemModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractItemModel_MoveRows(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_MoveColumns(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_InsertRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_InsertColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_RemoveRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_RemoveColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_MoveRow(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceRow, const QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_MoveColumn(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceColumn, const QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_FetchMore(QAbstractItemModel* self, const QModelIndex* parent);
bool QAbstractItemModel_CanFetchMore(const QAbstractItemModel* self, const QModelIndex* parent);
int QAbstractItemModel_Flags(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_Sort(QAbstractItemModel* self, int column, int order);
QModelIndex* QAbstractItemModel_Buddy(const QAbstractItemModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ QAbstractItemModel_Match(const QAbstractItemModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* QAbstractItemModel_Span(const QAbstractItemModel* self, const QModelIndex* index);
libqt_map /* of int to libqt_string */ QAbstractItemModel_RoleNames(const QAbstractItemModel* self);
bool QAbstractItemModel_CheckIndex(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_MultiData(const QAbstractItemModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QAbstractItemModel_DataChanged(QAbstractItemModel* self, const QModelIndex* topLeft, const QModelIndex* bottomRight);
void QAbstractItemModel_Connect_DataChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_HeaderDataChanged(QAbstractItemModel* self, int orientation, int first, int last);
void QAbstractItemModel_Connect_HeaderDataChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutChanged(QAbstractItemModel* self);
void QAbstractItemModel_Connect_LayoutChanged(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutAboutToBeChanged(QAbstractItemModel* self);
void QAbstractItemModel_Connect_LayoutAboutToBeChanged(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_Submit(QAbstractItemModel* self);
void QAbstractItemModel_Revert(QAbstractItemModel* self);
void QAbstractItemModel_ResetInternalData(QAbstractItemModel* self);
libqt_string QAbstractItemModel_Tr2(const char* s, const char* c);
libqt_string QAbstractItemModel_Tr3(const char* s, const char* c, int n);
bool QAbstractItemModel_HasIndex3(const QAbstractItemModel* self, int row, int column, const QModelIndex* parent);
bool QAbstractItemModel_InsertRow2(QAbstractItemModel* self, int row, const QModelIndex* parent);
bool QAbstractItemModel_InsertColumn2(QAbstractItemModel* self, int column, const QModelIndex* parent);
bool QAbstractItemModel_RemoveRow2(QAbstractItemModel* self, int row, const QModelIndex* parent);
bool QAbstractItemModel_RemoveColumn2(QAbstractItemModel* self, int column, const QModelIndex* parent);
bool QAbstractItemModel_CheckIndex2(const QAbstractItemModel* self, const QModelIndex* index, int options);
void QAbstractItemModel_DataChanged3(QAbstractItemModel* self, const QModelIndex* topLeft, const QModelIndex* bottomRight, const libqt_list /* of int */ roles);
void QAbstractItemModel_Connect_DataChanged3(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutChanged1(QAbstractItemModel* self, const libqt_list /* of QPersistentModelIndex* */ parents);
void QAbstractItemModel_Connect_LayoutChanged1(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutChanged2(QAbstractItemModel* self, const libqt_list /* of QPersistentModelIndex* */ parents, int hint);
void QAbstractItemModel_Connect_LayoutChanged2(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutAboutToBeChanged1(QAbstractItemModel* self, const libqt_list /* of QPersistentModelIndex* */ parents);
void QAbstractItemModel_Connect_LayoutAboutToBeChanged1(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_LayoutAboutToBeChanged2(QAbstractItemModel* self, const libqt_list /* of QPersistentModelIndex* */ parents, int hint);
void QAbstractItemModel_Connect_LayoutAboutToBeChanged2(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_OnMetacall(QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseMetacall(QAbstractItemModel* self, int param1, int param2, void** param3);
void QAbstractItemModel_OnIndex(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseIndex(const QAbstractItemModel* self, int row, int column, const QModelIndex* parent);
void QAbstractItemModel_OnParent(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseParent(const QAbstractItemModel* self, const QModelIndex* child);
void QAbstractItemModel_OnSibling(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseSibling(const QAbstractItemModel* self, int row, int column, const QModelIndex* idx);
void QAbstractItemModel_OnRowCount(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseRowCount(const QAbstractItemModel* self, const QModelIndex* parent);
void QAbstractItemModel_OnColumnCount(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseColumnCount(const QAbstractItemModel* self, const QModelIndex* parent);
void QAbstractItemModel_OnHasChildren(const QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseHasChildren(const QAbstractItemModel* self, const QModelIndex* parent);
void QAbstractItemModel_OnData(const QAbstractItemModel* self, intptr_t slot);
QVariant* QAbstractItemModel_QBaseData(const QAbstractItemModel* self, const QModelIndex* index, int role);
void QAbstractItemModel_OnSetData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseSetData(QAbstractItemModel* self, const QModelIndex* index, const QVariant* value, int role);
void QAbstractItemModel_OnHeaderData(const QAbstractItemModel* self, intptr_t slot);
QVariant* QAbstractItemModel_QBaseHeaderData(const QAbstractItemModel* self, int section, int orientation, int role);
void QAbstractItemModel_OnSetHeaderData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseSetHeaderData(QAbstractItemModel* self, int section, int orientation, const QVariant* value, int role);
void QAbstractItemModel_OnItemData(const QAbstractItemModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QAbstractItemModel_QBaseItemData(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_OnSetItemData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseSetItemData(QAbstractItemModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void QAbstractItemModel_OnClearItemData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseClearItemData(QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_OnMimeTypes(const QAbstractItemModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QAbstractItemModel_QBaseMimeTypes(const QAbstractItemModel* self);
void QAbstractItemModel_OnMimeData(const QAbstractItemModel* self, intptr_t slot);
QMimeData* QAbstractItemModel_QBaseMimeData(const QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ indexes);
void QAbstractItemModel_OnCanDropMimeData(const QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseCanDropMimeData(const QAbstractItemModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractItemModel_OnDropMimeData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseDropMimeData(QAbstractItemModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractItemModel_OnSupportedDropActions(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseSupportedDropActions(const QAbstractItemModel* self);
void QAbstractItemModel_OnSupportedDragActions(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseSupportedDragActions(const QAbstractItemModel* self);
void QAbstractItemModel_OnInsertRows(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseInsertRows(QAbstractItemModel* self, int row, int count, const QModelIndex* parent);
void QAbstractItemModel_OnInsertColumns(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseInsertColumns(QAbstractItemModel* self, int column, int count, const QModelIndex* parent);
void QAbstractItemModel_OnRemoveRows(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseRemoveRows(QAbstractItemModel* self, int row, int count, const QModelIndex* parent);
void QAbstractItemModel_OnRemoveColumns(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseRemoveColumns(QAbstractItemModel* self, int column, int count, const QModelIndex* parent);
void QAbstractItemModel_OnMoveRows(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseMoveRows(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_OnMoveColumns(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseMoveColumns(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_OnFetchMore(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseFetchMore(QAbstractItemModel* self, const QModelIndex* parent);
void QAbstractItemModel_OnCanFetchMore(const QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseCanFetchMore(const QAbstractItemModel* self, const QModelIndex* parent);
void QAbstractItemModel_OnFlags(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseFlags(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_OnSort(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseSort(QAbstractItemModel* self, int column, int order);
void QAbstractItemModel_OnBuddy(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseBuddy(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_OnMatch(const QAbstractItemModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractItemModel_QBaseMatch(const QAbstractItemModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void QAbstractItemModel_OnSpan(const QAbstractItemModel* self, intptr_t slot);
QSize* QAbstractItemModel_QBaseSpan(const QAbstractItemModel* self, const QModelIndex* index);
void QAbstractItemModel_OnRoleNames(const QAbstractItemModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QAbstractItemModel_QBaseRoleNames(const QAbstractItemModel* self);
void QAbstractItemModel_OnMultiData(const QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseMultiData(const QAbstractItemModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QAbstractItemModel_OnSubmit(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseSubmit(QAbstractItemModel* self);
void QAbstractItemModel_OnRevert(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseRevert(QAbstractItemModel* self);
void QAbstractItemModel_OnResetInternalData(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseResetInternalData(QAbstractItemModel* self);
bool QAbstractItemModel_Event(QAbstractItemModel* self, QEvent* event);
void QAbstractItemModel_OnEvent(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseEvent(QAbstractItemModel* self, QEvent* event);
bool QAbstractItemModel_EventFilter(QAbstractItemModel* self, QObject* watched, QEvent* event);
void QAbstractItemModel_OnEventFilter(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseEventFilter(QAbstractItemModel* self, QObject* watched, QEvent* event);
void QAbstractItemModel_TimerEvent(QAbstractItemModel* self, QTimerEvent* event);
void QAbstractItemModel_OnTimerEvent(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseTimerEvent(QAbstractItemModel* self, QTimerEvent* event);
void QAbstractItemModel_ChildEvent(QAbstractItemModel* self, QChildEvent* event);
void QAbstractItemModel_OnChildEvent(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseChildEvent(QAbstractItemModel* self, QChildEvent* event);
void QAbstractItemModel_CustomEvent(QAbstractItemModel* self, QEvent* event);
void QAbstractItemModel_OnCustomEvent(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseCustomEvent(QAbstractItemModel* self, QEvent* event);
void QAbstractItemModel_ConnectNotify(QAbstractItemModel* self, const QMetaMethod* signal);
void QAbstractItemModel_OnConnectNotify(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseConnectNotify(QAbstractItemModel* self, const QMetaMethod* signal);
void QAbstractItemModel_DisconnectNotify(QAbstractItemModel* self, const QMetaMethod* signal);
void QAbstractItemModel_OnDisconnectNotify(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseDisconnectNotify(QAbstractItemModel* self, const QMetaMethod* signal);
QModelIndex* QAbstractItemModel_CreateIndex(const QAbstractItemModel* self, int row, int column);
void QAbstractItemModel_OnCreateIndex(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseCreateIndex(const QAbstractItemModel* self, int row, int column);
QModelIndex* QAbstractItemModel_CreateIndex2(const QAbstractItemModel* self, int row, int column, uintptr_t id);
void QAbstractItemModel_OnCreateIndex2(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseCreateIndex2(const QAbstractItemModel* self, int row, int column, uintptr_t id);
void QAbstractItemModel_EncodeData(const QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QAbstractItemModel_OnEncodeData(const QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEncodeData(const QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QAbstractItemModel_DecodeData(QAbstractItemModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractItemModel_OnDecodeData(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseDecodeData(QAbstractItemModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractItemModel_BeginInsertRows(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_OnBeginInsertRows(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseBeginInsertRows(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_EndInsertRows(QAbstractItemModel* self);
void QAbstractItemModel_OnEndInsertRows(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndInsertRows(QAbstractItemModel* self);
void QAbstractItemModel_BeginRemoveRows(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_OnBeginRemoveRows(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseBeginRemoveRows(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_EndRemoveRows(QAbstractItemModel* self);
void QAbstractItemModel_OnEndRemoveRows(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndRemoveRows(QAbstractItemModel* self);
bool QAbstractItemModel_BeginMoveRows(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractItemModel_OnBeginMoveRows(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseBeginMoveRows(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractItemModel_EndMoveRows(QAbstractItemModel* self);
void QAbstractItemModel_OnEndMoveRows(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndMoveRows(QAbstractItemModel* self);
void QAbstractItemModel_BeginInsertColumns(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_OnBeginInsertColumns(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseBeginInsertColumns(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_EndInsertColumns(QAbstractItemModel* self);
void QAbstractItemModel_OnEndInsertColumns(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndInsertColumns(QAbstractItemModel* self);
void QAbstractItemModel_BeginRemoveColumns(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_OnBeginRemoveColumns(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseBeginRemoveColumns(QAbstractItemModel* self, const QModelIndex* parent, int first, int last);
void QAbstractItemModel_EndRemoveColumns(QAbstractItemModel* self);
void QAbstractItemModel_OnEndRemoveColumns(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndRemoveColumns(QAbstractItemModel* self);
bool QAbstractItemModel_BeginMoveColumns(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractItemModel_OnBeginMoveColumns(QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseBeginMoveColumns(QAbstractItemModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractItemModel_EndMoveColumns(QAbstractItemModel* self);
void QAbstractItemModel_OnEndMoveColumns(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndMoveColumns(QAbstractItemModel* self);
void QAbstractItemModel_BeginResetModel(QAbstractItemModel* self);
void QAbstractItemModel_OnBeginResetModel(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseBeginResetModel(QAbstractItemModel* self);
void QAbstractItemModel_EndResetModel(QAbstractItemModel* self);
void QAbstractItemModel_OnEndResetModel(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseEndResetModel(QAbstractItemModel* self);
void QAbstractItemModel_ChangePersistentIndex(QAbstractItemModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractItemModel_OnChangePersistentIndex(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseChangePersistentIndex(QAbstractItemModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractItemModel_ChangePersistentIndexList(QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void QAbstractItemModel_OnChangePersistentIndexList(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_QBaseChangePersistentIndexList(QAbstractItemModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QAbstractItemModel_PersistentIndexList(const QAbstractItemModel* self);
void QAbstractItemModel_OnPersistentIndexList(const QAbstractItemModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractItemModel_QBasePersistentIndexList(const QAbstractItemModel* self);
QModelIndex* QAbstractItemModel_CreateIndex3(const QAbstractItemModel* self, int row, int column, const void* data);
void QAbstractItemModel_OnCreateIndex3(const QAbstractItemModel* self, intptr_t slot);
QModelIndex* QAbstractItemModel_QBaseCreateIndex3(const QAbstractItemModel* self, int row, int column, const void* data);
QObject* QAbstractItemModel_Sender(const QAbstractItemModel* self);
void QAbstractItemModel_OnSender(const QAbstractItemModel* self, intptr_t slot);
QObject* QAbstractItemModel_QBaseSender(const QAbstractItemModel* self);
int QAbstractItemModel_SenderSignalIndex(const QAbstractItemModel* self);
void QAbstractItemModel_OnSenderSignalIndex(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseSenderSignalIndex(const QAbstractItemModel* self);
int QAbstractItemModel_Receivers(const QAbstractItemModel* self, const char* signal);
void QAbstractItemModel_OnReceivers(const QAbstractItemModel* self, intptr_t slot);
int QAbstractItemModel_QBaseReceivers(const QAbstractItemModel* self, const char* signal);
bool QAbstractItemModel_IsSignalConnected(const QAbstractItemModel* self, const QMetaMethod* signal);
void QAbstractItemModel_OnIsSignalConnected(const QAbstractItemModel* self, intptr_t slot);
bool QAbstractItemModel_QBaseIsSignalConnected(const QAbstractItemModel* self, const QMetaMethod* signal);
void QAbstractItemModel_Connect_RowsAboutToBeInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_RowsInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_RowsAboutToBeRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_RowsRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsAboutToBeInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsInserted(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsAboutToBeRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsRemoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ModelAboutToBeReset(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ModelReset(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_RowsAboutToBeMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_RowsMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsAboutToBeMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Connect_ColumnsMoved(QAbstractItemModel* self, intptr_t slot);
void QAbstractItemModel_Delete(QAbstractItemModel* self);

QAbstractTableModel* QAbstractTableModel_new();
QAbstractTableModel* QAbstractTableModel_new2(QObject* parent);
QMetaObject* QAbstractTableModel_MetaObject(const QAbstractTableModel* self);
void* QAbstractTableModel_Metacast(QAbstractTableModel* self, const char* param1);
int QAbstractTableModel_Metacall(QAbstractTableModel* self, int param1, int param2, void** param3);
libqt_string QAbstractTableModel_Tr(const char* s);
QModelIndex* QAbstractTableModel_Index(const QAbstractTableModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* QAbstractTableModel_Sibling(const QAbstractTableModel* self, int row, int column, const QModelIndex* idx);
bool QAbstractTableModel_DropMimeData(QAbstractTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QAbstractTableModel_Flags(const QAbstractTableModel* self, const QModelIndex* index);
libqt_string QAbstractTableModel_Tr2(const char* s, const char* c);
libqt_string QAbstractTableModel_Tr3(const char* s, const char* c, int n);
void QAbstractTableModel_OnMetacall(QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseMetacall(QAbstractTableModel* self, int param1, int param2, void** param3);
void QAbstractTableModel_OnIndex(const QAbstractTableModel* self, intptr_t slot);
QModelIndex* QAbstractTableModel_QBaseIndex(const QAbstractTableModel* self, int row, int column, const QModelIndex* parent);
void QAbstractTableModel_OnSibling(const QAbstractTableModel* self, intptr_t slot);
QModelIndex* QAbstractTableModel_QBaseSibling(const QAbstractTableModel* self, int row, int column, const QModelIndex* idx);
void QAbstractTableModel_OnDropMimeData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseDropMimeData(QAbstractTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractTableModel_OnFlags(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseFlags(const QAbstractTableModel* self, const QModelIndex* index);
int QAbstractTableModel_RowCount(const QAbstractTableModel* self, const QModelIndex* parent);
void QAbstractTableModel_OnRowCount(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseRowCount(const QAbstractTableModel* self, const QModelIndex* parent);
int QAbstractTableModel_ColumnCount(const QAbstractTableModel* self, const QModelIndex* parent);
void QAbstractTableModel_OnColumnCount(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseColumnCount(const QAbstractTableModel* self, const QModelIndex* parent);
QVariant* QAbstractTableModel_Data(const QAbstractTableModel* self, const QModelIndex* index, int role);
void QAbstractTableModel_OnData(const QAbstractTableModel* self, intptr_t slot);
QVariant* QAbstractTableModel_QBaseData(const QAbstractTableModel* self, const QModelIndex* index, int role);
bool QAbstractTableModel_SetData(QAbstractTableModel* self, const QModelIndex* index, const QVariant* value, int role);
void QAbstractTableModel_OnSetData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseSetData(QAbstractTableModel* self, const QModelIndex* index, const QVariant* value, int role);
QVariant* QAbstractTableModel_HeaderData(const QAbstractTableModel* self, int section, int orientation, int role);
void QAbstractTableModel_OnHeaderData(const QAbstractTableModel* self, intptr_t slot);
QVariant* QAbstractTableModel_QBaseHeaderData(const QAbstractTableModel* self, int section, int orientation, int role);
bool QAbstractTableModel_SetHeaderData(QAbstractTableModel* self, int section, int orientation, const QVariant* value, int role);
void QAbstractTableModel_OnSetHeaderData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseSetHeaderData(QAbstractTableModel* self, int section, int orientation, const QVariant* value, int role);
libqt_map /* of int to QVariant* */ QAbstractTableModel_ItemData(const QAbstractTableModel* self, const QModelIndex* index);
void QAbstractTableModel_OnItemData(const QAbstractTableModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QAbstractTableModel_QBaseItemData(const QAbstractTableModel* self, const QModelIndex* index);
bool QAbstractTableModel_SetItemData(QAbstractTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void QAbstractTableModel_OnSetItemData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseSetItemData(QAbstractTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool QAbstractTableModel_ClearItemData(QAbstractTableModel* self, const QModelIndex* index);
void QAbstractTableModel_OnClearItemData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseClearItemData(QAbstractTableModel* self, const QModelIndex* index);
libqt_list /* of libqt_string */ QAbstractTableModel_MimeTypes(const QAbstractTableModel* self);
void QAbstractTableModel_OnMimeTypes(const QAbstractTableModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QAbstractTableModel_QBaseMimeTypes(const QAbstractTableModel* self);
QMimeData* QAbstractTableModel_MimeData(const QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
void QAbstractTableModel_OnMimeData(const QAbstractTableModel* self, intptr_t slot);
QMimeData* QAbstractTableModel_QBaseMimeData(const QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool QAbstractTableModel_CanDropMimeData(const QAbstractTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractTableModel_OnCanDropMimeData(const QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseCanDropMimeData(const QAbstractTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QAbstractTableModel_SupportedDropActions(const QAbstractTableModel* self);
void QAbstractTableModel_OnSupportedDropActions(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseSupportedDropActions(const QAbstractTableModel* self);
int QAbstractTableModel_SupportedDragActions(const QAbstractTableModel* self);
void QAbstractTableModel_OnSupportedDragActions(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseSupportedDragActions(const QAbstractTableModel* self);
bool QAbstractTableModel_InsertRows(QAbstractTableModel* self, int row, int count, const QModelIndex* parent);
void QAbstractTableModel_OnInsertRows(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseInsertRows(QAbstractTableModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractTableModel_InsertColumns(QAbstractTableModel* self, int column, int count, const QModelIndex* parent);
void QAbstractTableModel_OnInsertColumns(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseInsertColumns(QAbstractTableModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractTableModel_RemoveRows(QAbstractTableModel* self, int row, int count, const QModelIndex* parent);
void QAbstractTableModel_OnRemoveRows(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseRemoveRows(QAbstractTableModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractTableModel_RemoveColumns(QAbstractTableModel* self, int column, int count, const QModelIndex* parent);
void QAbstractTableModel_OnRemoveColumns(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseRemoveColumns(QAbstractTableModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractTableModel_MoveRows(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractTableModel_OnMoveRows(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseMoveRows(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool QAbstractTableModel_MoveColumns(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractTableModel_OnMoveColumns(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseMoveColumns(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractTableModel_FetchMore(QAbstractTableModel* self, const QModelIndex* parent);
void QAbstractTableModel_OnFetchMore(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseFetchMore(QAbstractTableModel* self, const QModelIndex* parent);
bool QAbstractTableModel_CanFetchMore(const QAbstractTableModel* self, const QModelIndex* parent);
void QAbstractTableModel_OnCanFetchMore(const QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseCanFetchMore(const QAbstractTableModel* self, const QModelIndex* parent);
void QAbstractTableModel_Sort(QAbstractTableModel* self, int column, int order);
void QAbstractTableModel_OnSort(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseSort(QAbstractTableModel* self, int column, int order);
QModelIndex* QAbstractTableModel_Buddy(const QAbstractTableModel* self, const QModelIndex* index);
void QAbstractTableModel_OnBuddy(const QAbstractTableModel* self, intptr_t slot);
QModelIndex* QAbstractTableModel_QBaseBuddy(const QAbstractTableModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ QAbstractTableModel_Match(const QAbstractTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void QAbstractTableModel_OnMatch(const QAbstractTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractTableModel_QBaseMatch(const QAbstractTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* QAbstractTableModel_Span(const QAbstractTableModel* self, const QModelIndex* index);
void QAbstractTableModel_OnSpan(const QAbstractTableModel* self, intptr_t slot);
QSize* QAbstractTableModel_QBaseSpan(const QAbstractTableModel* self, const QModelIndex* index);
libqt_map /* of int to libqt_string */ QAbstractTableModel_RoleNames(const QAbstractTableModel* self);
void QAbstractTableModel_OnRoleNames(const QAbstractTableModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QAbstractTableModel_QBaseRoleNames(const QAbstractTableModel* self);
void QAbstractTableModel_MultiData(const QAbstractTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QAbstractTableModel_OnMultiData(const QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseMultiData(const QAbstractTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QAbstractTableModel_Submit(QAbstractTableModel* self);
void QAbstractTableModel_OnSubmit(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseSubmit(QAbstractTableModel* self);
void QAbstractTableModel_Revert(QAbstractTableModel* self);
void QAbstractTableModel_OnRevert(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseRevert(QAbstractTableModel* self);
void QAbstractTableModel_ResetInternalData(QAbstractTableModel* self);
void QAbstractTableModel_OnResetInternalData(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseResetInternalData(QAbstractTableModel* self);
bool QAbstractTableModel_Event(QAbstractTableModel* self, QEvent* event);
void QAbstractTableModel_OnEvent(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseEvent(QAbstractTableModel* self, QEvent* event);
bool QAbstractTableModel_EventFilter(QAbstractTableModel* self, QObject* watched, QEvent* event);
void QAbstractTableModel_OnEventFilter(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseEventFilter(QAbstractTableModel* self, QObject* watched, QEvent* event);
void QAbstractTableModel_TimerEvent(QAbstractTableModel* self, QTimerEvent* event);
void QAbstractTableModel_OnTimerEvent(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseTimerEvent(QAbstractTableModel* self, QTimerEvent* event);
void QAbstractTableModel_ChildEvent(QAbstractTableModel* self, QChildEvent* event);
void QAbstractTableModel_OnChildEvent(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseChildEvent(QAbstractTableModel* self, QChildEvent* event);
void QAbstractTableModel_CustomEvent(QAbstractTableModel* self, QEvent* event);
void QAbstractTableModel_OnCustomEvent(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseCustomEvent(QAbstractTableModel* self, QEvent* event);
void QAbstractTableModel_ConnectNotify(QAbstractTableModel* self, const QMetaMethod* signal);
void QAbstractTableModel_OnConnectNotify(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseConnectNotify(QAbstractTableModel* self, const QMetaMethod* signal);
void QAbstractTableModel_DisconnectNotify(QAbstractTableModel* self, const QMetaMethod* signal);
void QAbstractTableModel_OnDisconnectNotify(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseDisconnectNotify(QAbstractTableModel* self, const QMetaMethod* signal);
QModelIndex* QAbstractTableModel_CreateIndex(const QAbstractTableModel* self, int row, int column);
void QAbstractTableModel_OnCreateIndex(const QAbstractTableModel* self, intptr_t slot);
QModelIndex* QAbstractTableModel_QBaseCreateIndex(const QAbstractTableModel* self, int row, int column);
void QAbstractTableModel_EncodeData(const QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QAbstractTableModel_OnEncodeData(const QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEncodeData(const QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QAbstractTableModel_DecodeData(QAbstractTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractTableModel_OnDecodeData(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseDecodeData(QAbstractTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractTableModel_BeginInsertRows(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_OnBeginInsertRows(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseBeginInsertRows(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_EndInsertRows(QAbstractTableModel* self);
void QAbstractTableModel_OnEndInsertRows(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndInsertRows(QAbstractTableModel* self);
void QAbstractTableModel_BeginRemoveRows(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_OnBeginRemoveRows(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseBeginRemoveRows(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_EndRemoveRows(QAbstractTableModel* self);
void QAbstractTableModel_OnEndRemoveRows(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndRemoveRows(QAbstractTableModel* self);
bool QAbstractTableModel_BeginMoveRows(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractTableModel_OnBeginMoveRows(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseBeginMoveRows(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractTableModel_EndMoveRows(QAbstractTableModel* self);
void QAbstractTableModel_OnEndMoveRows(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndMoveRows(QAbstractTableModel* self);
void QAbstractTableModel_BeginInsertColumns(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_OnBeginInsertColumns(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseBeginInsertColumns(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_EndInsertColumns(QAbstractTableModel* self);
void QAbstractTableModel_OnEndInsertColumns(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndInsertColumns(QAbstractTableModel* self);
void QAbstractTableModel_BeginRemoveColumns(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_OnBeginRemoveColumns(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseBeginRemoveColumns(QAbstractTableModel* self, const QModelIndex* parent, int first, int last);
void QAbstractTableModel_EndRemoveColumns(QAbstractTableModel* self);
void QAbstractTableModel_OnEndRemoveColumns(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndRemoveColumns(QAbstractTableModel* self);
bool QAbstractTableModel_BeginMoveColumns(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractTableModel_OnBeginMoveColumns(QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseBeginMoveColumns(QAbstractTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractTableModel_EndMoveColumns(QAbstractTableModel* self);
void QAbstractTableModel_OnEndMoveColumns(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndMoveColumns(QAbstractTableModel* self);
void QAbstractTableModel_BeginResetModel(QAbstractTableModel* self);
void QAbstractTableModel_OnBeginResetModel(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseBeginResetModel(QAbstractTableModel* self);
void QAbstractTableModel_EndResetModel(QAbstractTableModel* self);
void QAbstractTableModel_OnEndResetModel(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseEndResetModel(QAbstractTableModel* self);
void QAbstractTableModel_ChangePersistentIndex(QAbstractTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractTableModel_OnChangePersistentIndex(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseChangePersistentIndex(QAbstractTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractTableModel_ChangePersistentIndexList(QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void QAbstractTableModel_OnChangePersistentIndexList(QAbstractTableModel* self, intptr_t slot);
void QAbstractTableModel_QBaseChangePersistentIndexList(QAbstractTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QAbstractTableModel_PersistentIndexList(const QAbstractTableModel* self);
void QAbstractTableModel_OnPersistentIndexList(const QAbstractTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractTableModel_QBasePersistentIndexList(const QAbstractTableModel* self);
QObject* QAbstractTableModel_Sender(const QAbstractTableModel* self);
void QAbstractTableModel_OnSender(const QAbstractTableModel* self, intptr_t slot);
QObject* QAbstractTableModel_QBaseSender(const QAbstractTableModel* self);
int QAbstractTableModel_SenderSignalIndex(const QAbstractTableModel* self);
void QAbstractTableModel_OnSenderSignalIndex(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseSenderSignalIndex(const QAbstractTableModel* self);
int QAbstractTableModel_Receivers(const QAbstractTableModel* self, const char* signal);
void QAbstractTableModel_OnReceivers(const QAbstractTableModel* self, intptr_t slot);
int QAbstractTableModel_QBaseReceivers(const QAbstractTableModel* self, const char* signal);
bool QAbstractTableModel_IsSignalConnected(const QAbstractTableModel* self, const QMetaMethod* signal);
void QAbstractTableModel_OnIsSignalConnected(const QAbstractTableModel* self, intptr_t slot);
bool QAbstractTableModel_QBaseIsSignalConnected(const QAbstractTableModel* self, const QMetaMethod* signal);
void QAbstractTableModel_Delete(QAbstractTableModel* self);

QAbstractListModel* QAbstractListModel_new();
QAbstractListModel* QAbstractListModel_new2(QObject* parent);
QMetaObject* QAbstractListModel_MetaObject(const QAbstractListModel* self);
void* QAbstractListModel_Metacast(QAbstractListModel* self, const char* param1);
int QAbstractListModel_Metacall(QAbstractListModel* self, int param1, int param2, void** param3);
libqt_string QAbstractListModel_Tr(const char* s);
QModelIndex* QAbstractListModel_Index(const QAbstractListModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* QAbstractListModel_Sibling(const QAbstractListModel* self, int row, int column, const QModelIndex* idx);
bool QAbstractListModel_DropMimeData(QAbstractListModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QAbstractListModel_Flags(const QAbstractListModel* self, const QModelIndex* index);
libqt_string QAbstractListModel_Tr2(const char* s, const char* c);
libqt_string QAbstractListModel_Tr3(const char* s, const char* c, int n);
void QAbstractListModel_OnMetacall(QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseMetacall(QAbstractListModel* self, int param1, int param2, void** param3);
void QAbstractListModel_OnIndex(const QAbstractListModel* self, intptr_t slot);
QModelIndex* QAbstractListModel_QBaseIndex(const QAbstractListModel* self, int row, int column, const QModelIndex* parent);
void QAbstractListModel_OnSibling(const QAbstractListModel* self, intptr_t slot);
QModelIndex* QAbstractListModel_QBaseSibling(const QAbstractListModel* self, int row, int column, const QModelIndex* idx);
void QAbstractListModel_OnDropMimeData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseDropMimeData(QAbstractListModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractListModel_OnFlags(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseFlags(const QAbstractListModel* self, const QModelIndex* index);
int QAbstractListModel_RowCount(const QAbstractListModel* self, const QModelIndex* parent);
void QAbstractListModel_OnRowCount(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseRowCount(const QAbstractListModel* self, const QModelIndex* parent);
QVariant* QAbstractListModel_Data(const QAbstractListModel* self, const QModelIndex* index, int role);
void QAbstractListModel_OnData(const QAbstractListModel* self, intptr_t slot);
QVariant* QAbstractListModel_QBaseData(const QAbstractListModel* self, const QModelIndex* index, int role);
bool QAbstractListModel_SetData(QAbstractListModel* self, const QModelIndex* index, const QVariant* value, int role);
void QAbstractListModel_OnSetData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseSetData(QAbstractListModel* self, const QModelIndex* index, const QVariant* value, int role);
QVariant* QAbstractListModel_HeaderData(const QAbstractListModel* self, int section, int orientation, int role);
void QAbstractListModel_OnHeaderData(const QAbstractListModel* self, intptr_t slot);
QVariant* QAbstractListModel_QBaseHeaderData(const QAbstractListModel* self, int section, int orientation, int role);
bool QAbstractListModel_SetHeaderData(QAbstractListModel* self, int section, int orientation, const QVariant* value, int role);
void QAbstractListModel_OnSetHeaderData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseSetHeaderData(QAbstractListModel* self, int section, int orientation, const QVariant* value, int role);
libqt_map /* of int to QVariant* */ QAbstractListModel_ItemData(const QAbstractListModel* self, const QModelIndex* index);
void QAbstractListModel_OnItemData(const QAbstractListModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QAbstractListModel_QBaseItemData(const QAbstractListModel* self, const QModelIndex* index);
bool QAbstractListModel_SetItemData(QAbstractListModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void QAbstractListModel_OnSetItemData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseSetItemData(QAbstractListModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool QAbstractListModel_ClearItemData(QAbstractListModel* self, const QModelIndex* index);
void QAbstractListModel_OnClearItemData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseClearItemData(QAbstractListModel* self, const QModelIndex* index);
libqt_list /* of libqt_string */ QAbstractListModel_MimeTypes(const QAbstractListModel* self);
void QAbstractListModel_OnMimeTypes(const QAbstractListModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QAbstractListModel_QBaseMimeTypes(const QAbstractListModel* self);
QMimeData* QAbstractListModel_MimeData(const QAbstractListModel* self, const libqt_list /* of QModelIndex* */ indexes);
void QAbstractListModel_OnMimeData(const QAbstractListModel* self, intptr_t slot);
QMimeData* QAbstractListModel_QBaseMimeData(const QAbstractListModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool QAbstractListModel_CanDropMimeData(const QAbstractListModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QAbstractListModel_OnCanDropMimeData(const QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseCanDropMimeData(const QAbstractListModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QAbstractListModel_SupportedDropActions(const QAbstractListModel* self);
void QAbstractListModel_OnSupportedDropActions(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseSupportedDropActions(const QAbstractListModel* self);
int QAbstractListModel_SupportedDragActions(const QAbstractListModel* self);
void QAbstractListModel_OnSupportedDragActions(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseSupportedDragActions(const QAbstractListModel* self);
bool QAbstractListModel_InsertRows(QAbstractListModel* self, int row, int count, const QModelIndex* parent);
void QAbstractListModel_OnInsertRows(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseInsertRows(QAbstractListModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractListModel_InsertColumns(QAbstractListModel* self, int column, int count, const QModelIndex* parent);
void QAbstractListModel_OnInsertColumns(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseInsertColumns(QAbstractListModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractListModel_RemoveRows(QAbstractListModel* self, int row, int count, const QModelIndex* parent);
void QAbstractListModel_OnRemoveRows(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseRemoveRows(QAbstractListModel* self, int row, int count, const QModelIndex* parent);
bool QAbstractListModel_RemoveColumns(QAbstractListModel* self, int column, int count, const QModelIndex* parent);
void QAbstractListModel_OnRemoveColumns(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseRemoveColumns(QAbstractListModel* self, int column, int count, const QModelIndex* parent);
bool QAbstractListModel_MoveRows(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractListModel_OnMoveRows(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseMoveRows(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool QAbstractListModel_MoveColumns(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractListModel_OnMoveColumns(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseMoveColumns(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QAbstractListModel_FetchMore(QAbstractListModel* self, const QModelIndex* parent);
void QAbstractListModel_OnFetchMore(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseFetchMore(QAbstractListModel* self, const QModelIndex* parent);
bool QAbstractListModel_CanFetchMore(const QAbstractListModel* self, const QModelIndex* parent);
void QAbstractListModel_OnCanFetchMore(const QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseCanFetchMore(const QAbstractListModel* self, const QModelIndex* parent);
void QAbstractListModel_Sort(QAbstractListModel* self, int column, int order);
void QAbstractListModel_OnSort(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseSort(QAbstractListModel* self, int column, int order);
QModelIndex* QAbstractListModel_Buddy(const QAbstractListModel* self, const QModelIndex* index);
void QAbstractListModel_OnBuddy(const QAbstractListModel* self, intptr_t slot);
QModelIndex* QAbstractListModel_QBaseBuddy(const QAbstractListModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ QAbstractListModel_Match(const QAbstractListModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void QAbstractListModel_OnMatch(const QAbstractListModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractListModel_QBaseMatch(const QAbstractListModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* QAbstractListModel_Span(const QAbstractListModel* self, const QModelIndex* index);
void QAbstractListModel_OnSpan(const QAbstractListModel* self, intptr_t slot);
QSize* QAbstractListModel_QBaseSpan(const QAbstractListModel* self, const QModelIndex* index);
libqt_map /* of int to libqt_string */ QAbstractListModel_RoleNames(const QAbstractListModel* self);
void QAbstractListModel_OnRoleNames(const QAbstractListModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QAbstractListModel_QBaseRoleNames(const QAbstractListModel* self);
void QAbstractListModel_MultiData(const QAbstractListModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QAbstractListModel_OnMultiData(const QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseMultiData(const QAbstractListModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool QAbstractListModel_Submit(QAbstractListModel* self);
void QAbstractListModel_OnSubmit(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseSubmit(QAbstractListModel* self);
void QAbstractListModel_Revert(QAbstractListModel* self);
void QAbstractListModel_OnRevert(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseRevert(QAbstractListModel* self);
void QAbstractListModel_ResetInternalData(QAbstractListModel* self);
void QAbstractListModel_OnResetInternalData(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseResetInternalData(QAbstractListModel* self);
bool QAbstractListModel_Event(QAbstractListModel* self, QEvent* event);
void QAbstractListModel_OnEvent(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseEvent(QAbstractListModel* self, QEvent* event);
bool QAbstractListModel_EventFilter(QAbstractListModel* self, QObject* watched, QEvent* event);
void QAbstractListModel_OnEventFilter(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseEventFilter(QAbstractListModel* self, QObject* watched, QEvent* event);
void QAbstractListModel_TimerEvent(QAbstractListModel* self, QTimerEvent* event);
void QAbstractListModel_OnTimerEvent(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseTimerEvent(QAbstractListModel* self, QTimerEvent* event);
void QAbstractListModel_ChildEvent(QAbstractListModel* self, QChildEvent* event);
void QAbstractListModel_OnChildEvent(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseChildEvent(QAbstractListModel* self, QChildEvent* event);
void QAbstractListModel_CustomEvent(QAbstractListModel* self, QEvent* event);
void QAbstractListModel_OnCustomEvent(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseCustomEvent(QAbstractListModel* self, QEvent* event);
void QAbstractListModel_ConnectNotify(QAbstractListModel* self, const QMetaMethod* signal);
void QAbstractListModel_OnConnectNotify(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseConnectNotify(QAbstractListModel* self, const QMetaMethod* signal);
void QAbstractListModel_DisconnectNotify(QAbstractListModel* self, const QMetaMethod* signal);
void QAbstractListModel_OnDisconnectNotify(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseDisconnectNotify(QAbstractListModel* self, const QMetaMethod* signal);
QModelIndex* QAbstractListModel_CreateIndex(const QAbstractListModel* self, int row, int column);
void QAbstractListModel_OnCreateIndex(const QAbstractListModel* self, intptr_t slot);
QModelIndex* QAbstractListModel_QBaseCreateIndex(const QAbstractListModel* self, int row, int column);
void QAbstractListModel_EncodeData(const QAbstractListModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QAbstractListModel_OnEncodeData(const QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEncodeData(const QAbstractListModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QAbstractListModel_DecodeData(QAbstractListModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractListModel_OnDecodeData(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseDecodeData(QAbstractListModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QAbstractListModel_BeginInsertRows(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_OnBeginInsertRows(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseBeginInsertRows(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_EndInsertRows(QAbstractListModel* self);
void QAbstractListModel_OnEndInsertRows(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndInsertRows(QAbstractListModel* self);
void QAbstractListModel_BeginRemoveRows(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_OnBeginRemoveRows(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseBeginRemoveRows(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_EndRemoveRows(QAbstractListModel* self);
void QAbstractListModel_OnEndRemoveRows(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndRemoveRows(QAbstractListModel* self);
bool QAbstractListModel_BeginMoveRows(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractListModel_OnBeginMoveRows(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseBeginMoveRows(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QAbstractListModel_EndMoveRows(QAbstractListModel* self);
void QAbstractListModel_OnEndMoveRows(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndMoveRows(QAbstractListModel* self);
void QAbstractListModel_BeginInsertColumns(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_OnBeginInsertColumns(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseBeginInsertColumns(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_EndInsertColumns(QAbstractListModel* self);
void QAbstractListModel_OnEndInsertColumns(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndInsertColumns(QAbstractListModel* self);
void QAbstractListModel_BeginRemoveColumns(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_OnBeginRemoveColumns(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseBeginRemoveColumns(QAbstractListModel* self, const QModelIndex* parent, int first, int last);
void QAbstractListModel_EndRemoveColumns(QAbstractListModel* self);
void QAbstractListModel_OnEndRemoveColumns(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndRemoveColumns(QAbstractListModel* self);
bool QAbstractListModel_BeginMoveColumns(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractListModel_OnBeginMoveColumns(QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseBeginMoveColumns(QAbstractListModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QAbstractListModel_EndMoveColumns(QAbstractListModel* self);
void QAbstractListModel_OnEndMoveColumns(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndMoveColumns(QAbstractListModel* self);
void QAbstractListModel_BeginResetModel(QAbstractListModel* self);
void QAbstractListModel_OnBeginResetModel(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseBeginResetModel(QAbstractListModel* self);
void QAbstractListModel_EndResetModel(QAbstractListModel* self);
void QAbstractListModel_OnEndResetModel(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseEndResetModel(QAbstractListModel* self);
void QAbstractListModel_ChangePersistentIndex(QAbstractListModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractListModel_OnChangePersistentIndex(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseChangePersistentIndex(QAbstractListModel* self, const QModelIndex* from, const QModelIndex* to);
void QAbstractListModel_ChangePersistentIndexList(QAbstractListModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void QAbstractListModel_OnChangePersistentIndexList(QAbstractListModel* self, intptr_t slot);
void QAbstractListModel_QBaseChangePersistentIndexList(QAbstractListModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QAbstractListModel_PersistentIndexList(const QAbstractListModel* self);
void QAbstractListModel_OnPersistentIndexList(const QAbstractListModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QAbstractListModel_QBasePersistentIndexList(const QAbstractListModel* self);
QObject* QAbstractListModel_Sender(const QAbstractListModel* self);
void QAbstractListModel_OnSender(const QAbstractListModel* self, intptr_t slot);
QObject* QAbstractListModel_QBaseSender(const QAbstractListModel* self);
int QAbstractListModel_SenderSignalIndex(const QAbstractListModel* self);
void QAbstractListModel_OnSenderSignalIndex(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseSenderSignalIndex(const QAbstractListModel* self);
int QAbstractListModel_Receivers(const QAbstractListModel* self, const char* signal);
void QAbstractListModel_OnReceivers(const QAbstractListModel* self, intptr_t slot);
int QAbstractListModel_QBaseReceivers(const QAbstractListModel* self, const char* signal);
bool QAbstractListModel_IsSignalConnected(const QAbstractListModel* self, const QMetaMethod* signal);
void QAbstractListModel_OnIsSignalConnected(const QAbstractListModel* self, intptr_t slot);
bool QAbstractListModel_QBaseIsSignalConnected(const QAbstractListModel* self, const QMetaMethod* signal);
void QAbstractListModel_Delete(QAbstractListModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
