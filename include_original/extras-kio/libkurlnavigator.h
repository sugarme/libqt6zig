#pragma once
#ifndef SRC_EXTRAS_KIOC_LIBKURLNAVIGATOR_H
#define SRC_EXTRAS_KIOC_LIBKURLNAVIGATOR_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KFilePlacesModel KFilePlacesModel;
typedef struct KUrlComboBox KUrlComboBox;
typedef struct KUrlNavigator KUrlNavigator;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KUrlNavigator* KUrlNavigator_new(QWidget* parent);
KUrlNavigator* KUrlNavigator_new2();
KUrlNavigator* KUrlNavigator_new3(KFilePlacesModel* placesModel, const QUrl* url, QWidget* parent);
QMetaObject* KUrlNavigator_MetaObject(const KUrlNavigator* self);
void* KUrlNavigator_Metacast(KUrlNavigator* self, const char* param1);
int KUrlNavigator_Metacall(KUrlNavigator* self, int param1, int param2, void** param3);
libqt_string KUrlNavigator_Tr(const char* s);
QUrl* KUrlNavigator_LocationUrl(const KUrlNavigator* self);
void KUrlNavigator_SaveLocationState(KUrlNavigator* self, const libqt_string state);
libqt_string KUrlNavigator_LocationState(const KUrlNavigator* self);
bool KUrlNavigator_GoBack(KUrlNavigator* self);
bool KUrlNavigator_GoForward(KUrlNavigator* self);
bool KUrlNavigator_GoUp(KUrlNavigator* self);
void KUrlNavigator_GoHome(KUrlNavigator* self);
void KUrlNavigator_SetHomeUrl(KUrlNavigator* self, const QUrl* url);
QUrl* KUrlNavigator_HomeUrl(const KUrlNavigator* self);
void KUrlNavigator_SetUrlEditable(KUrlNavigator* self, bool editable);
bool KUrlNavigator_IsUrlEditable(const KUrlNavigator* self);
void KUrlNavigator_SetShowFullPath(KUrlNavigator* self, bool show);
bool KUrlNavigator_ShowFullPath(const KUrlNavigator* self);
void KUrlNavigator_SetActive(KUrlNavigator* self, bool active);
bool KUrlNavigator_IsActive(const KUrlNavigator* self);
void KUrlNavigator_SetPlacesSelectorVisible(KUrlNavigator* self, bool visible);
bool KUrlNavigator_IsPlacesSelectorVisible(const KUrlNavigator* self);
QUrl* KUrlNavigator_UncommittedUrl(const KUrlNavigator* self);
int KUrlNavigator_HistorySize(const KUrlNavigator* self);
int KUrlNavigator_HistoryIndex(const KUrlNavigator* self);
KUrlComboBox* KUrlNavigator_Editor(const KUrlNavigator* self);
void KUrlNavigator_SetSupportedSchemes(KUrlNavigator* self, const libqt_list /* of libqt_string */ schemes);
libqt_list /* of libqt_string */ KUrlNavigator_SupportedSchemes(const KUrlNavigator* self);
QWidget* KUrlNavigator_DropWidget(const KUrlNavigator* self);
void KUrlNavigator_SetShowHiddenFolders(KUrlNavigator* self, bool showHiddenFolders);
bool KUrlNavigator_ShowHiddenFolders(const KUrlNavigator* self);
void KUrlNavigator_SetSortHiddenFoldersLast(KUrlNavigator* self, bool sortHiddenFoldersLast);
bool KUrlNavigator_SortHiddenFoldersLast(const KUrlNavigator* self);
void KUrlNavigator_SetBadgeWidget(KUrlNavigator* self, QWidget* widget);
QWidget* KUrlNavigator_BadgeWidget(const KUrlNavigator* self);
void KUrlNavigator_SetBackgroundEnabled(KUrlNavigator* self, bool enabled);
bool KUrlNavigator_IsBackgroundEnabled(const KUrlNavigator* self);
void KUrlNavigator_SetLocationUrl(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_RequestActivation(KUrlNavigator* self);
void KUrlNavigator_SetFocus(KUrlNavigator* self);
void KUrlNavigator_Activated(KUrlNavigator* self);
void KUrlNavigator_Connect_Activated(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_UrlChanged(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_Connect_UrlChanged(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_UrlAboutToBeChanged(KUrlNavigator* self, const QUrl* newUrl);
void KUrlNavigator_Connect_UrlAboutToBeChanged(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_EditableStateChanged(KUrlNavigator* self, bool editable);
void KUrlNavigator_Connect_EditableStateChanged(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_HistoryChanged(KUrlNavigator* self);
void KUrlNavigator_Connect_HistoryChanged(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_UrlsDropped(KUrlNavigator* self, const QUrl* destination, QDropEvent* event);
void KUrlNavigator_Connect_UrlsDropped(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_ReturnPressed(KUrlNavigator* self);
void KUrlNavigator_Connect_ReturnPressed(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_TabRequested(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_Connect_TabRequested(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_ActiveTabRequested(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_Connect_ActiveTabRequested(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_NewWindowRequested(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_Connect_NewWindowRequested(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_UrlSelectionRequested(KUrlNavigator* self, const QUrl* url);
void KUrlNavigator_Connect_UrlSelectionRequested(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_LayoutChanged(KUrlNavigator* self);
void KUrlNavigator_Connect_LayoutChanged(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_KeyPressEvent(KUrlNavigator* self, QKeyEvent* event);
void KUrlNavigator_KeyReleaseEvent(KUrlNavigator* self, QKeyEvent* event);
void KUrlNavigator_MouseReleaseEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_MousePressEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_ResizeEvent(KUrlNavigator* self, QResizeEvent* event);
void KUrlNavigator_WheelEvent(KUrlNavigator* self, QWheelEvent* event);
void KUrlNavigator_ShowEvent(KUrlNavigator* self, QShowEvent* event);
bool KUrlNavigator_EventFilter(KUrlNavigator* self, QObject* watched, QEvent* event);
void KUrlNavigator_PaintEvent(KUrlNavigator* self, QPaintEvent* event);
libqt_string KUrlNavigator_Tr2(const char* s, const char* c);
libqt_string KUrlNavigator_Tr3(const char* s, const char* c, int n);
QUrl* KUrlNavigator_LocationUrl1(const KUrlNavigator* self, int historyIndex);
libqt_string KUrlNavigator_LocationState1(const KUrlNavigator* self, int historyIndex);
void KUrlNavigator_OnMetacall(KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseMetacall(KUrlNavigator* self, int param1, int param2, void** param3);
void KUrlNavigator_OnKeyPressEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseKeyPressEvent(KUrlNavigator* self, QKeyEvent* event);
void KUrlNavigator_OnKeyReleaseEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseKeyReleaseEvent(KUrlNavigator* self, QKeyEvent* event);
void KUrlNavigator_OnMouseReleaseEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseMouseReleaseEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_OnMousePressEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseMousePressEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_OnResizeEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseResizeEvent(KUrlNavigator* self, QResizeEvent* event);
void KUrlNavigator_OnWheelEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseWheelEvent(KUrlNavigator* self, QWheelEvent* event);
void KUrlNavigator_OnShowEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseShowEvent(KUrlNavigator* self, QShowEvent* event);
void KUrlNavigator_OnEventFilter(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseEventFilter(KUrlNavigator* self, QObject* watched, QEvent* event);
void KUrlNavigator_OnPaintEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBasePaintEvent(KUrlNavigator* self, QPaintEvent* event);
int KUrlNavigator_DevType(const KUrlNavigator* self);
void KUrlNavigator_OnDevType(const KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseDevType(const KUrlNavigator* self);
void KUrlNavigator_SetVisible(KUrlNavigator* self, bool visible);
void KUrlNavigator_OnSetVisible(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseSetVisible(KUrlNavigator* self, bool visible);
QSize* KUrlNavigator_SizeHint(const KUrlNavigator* self);
void KUrlNavigator_OnSizeHint(const KUrlNavigator* self, intptr_t slot);
QSize* KUrlNavigator_QBaseSizeHint(const KUrlNavigator* self);
QSize* KUrlNavigator_MinimumSizeHint(const KUrlNavigator* self);
void KUrlNavigator_OnMinimumSizeHint(const KUrlNavigator* self, intptr_t slot);
QSize* KUrlNavigator_QBaseMinimumSizeHint(const KUrlNavigator* self);
int KUrlNavigator_HeightForWidth(const KUrlNavigator* self, int param1);
void KUrlNavigator_OnHeightForWidth(const KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseHeightForWidth(const KUrlNavigator* self, int param1);
bool KUrlNavigator_HasHeightForWidth(const KUrlNavigator* self);
void KUrlNavigator_OnHasHeightForWidth(const KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseHasHeightForWidth(const KUrlNavigator* self);
QPaintEngine* KUrlNavigator_PaintEngine(const KUrlNavigator* self);
void KUrlNavigator_OnPaintEngine(const KUrlNavigator* self, intptr_t slot);
QPaintEngine* KUrlNavigator_QBasePaintEngine(const KUrlNavigator* self);
bool KUrlNavigator_Event(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_OnEvent(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseEvent(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_MouseDoubleClickEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_OnMouseDoubleClickEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseMouseDoubleClickEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_MouseMoveEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_OnMouseMoveEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseMouseMoveEvent(KUrlNavigator* self, QMouseEvent* event);
void KUrlNavigator_FocusInEvent(KUrlNavigator* self, QFocusEvent* event);
void KUrlNavigator_OnFocusInEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseFocusInEvent(KUrlNavigator* self, QFocusEvent* event);
void KUrlNavigator_FocusOutEvent(KUrlNavigator* self, QFocusEvent* event);
void KUrlNavigator_OnFocusOutEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseFocusOutEvent(KUrlNavigator* self, QFocusEvent* event);
void KUrlNavigator_EnterEvent(KUrlNavigator* self, QEnterEvent* event);
void KUrlNavigator_OnEnterEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseEnterEvent(KUrlNavigator* self, QEnterEvent* event);
void KUrlNavigator_LeaveEvent(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_OnLeaveEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseLeaveEvent(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_MoveEvent(KUrlNavigator* self, QMoveEvent* event);
void KUrlNavigator_OnMoveEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseMoveEvent(KUrlNavigator* self, QMoveEvent* event);
void KUrlNavigator_CloseEvent(KUrlNavigator* self, QCloseEvent* event);
void KUrlNavigator_OnCloseEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseCloseEvent(KUrlNavigator* self, QCloseEvent* event);
void KUrlNavigator_ContextMenuEvent(KUrlNavigator* self, QContextMenuEvent* event);
void KUrlNavigator_OnContextMenuEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseContextMenuEvent(KUrlNavigator* self, QContextMenuEvent* event);
void KUrlNavigator_TabletEvent(KUrlNavigator* self, QTabletEvent* event);
void KUrlNavigator_OnTabletEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseTabletEvent(KUrlNavigator* self, QTabletEvent* event);
void KUrlNavigator_ActionEvent(KUrlNavigator* self, QActionEvent* event);
void KUrlNavigator_OnActionEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseActionEvent(KUrlNavigator* self, QActionEvent* event);
void KUrlNavigator_DragEnterEvent(KUrlNavigator* self, QDragEnterEvent* event);
void KUrlNavigator_OnDragEnterEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDragEnterEvent(KUrlNavigator* self, QDragEnterEvent* event);
void KUrlNavigator_DragMoveEvent(KUrlNavigator* self, QDragMoveEvent* event);
void KUrlNavigator_OnDragMoveEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDragMoveEvent(KUrlNavigator* self, QDragMoveEvent* event);
void KUrlNavigator_DragLeaveEvent(KUrlNavigator* self, QDragLeaveEvent* event);
void KUrlNavigator_OnDragLeaveEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDragLeaveEvent(KUrlNavigator* self, QDragLeaveEvent* event);
void KUrlNavigator_DropEvent(KUrlNavigator* self, QDropEvent* event);
void KUrlNavigator_OnDropEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDropEvent(KUrlNavigator* self, QDropEvent* event);
void KUrlNavigator_HideEvent(KUrlNavigator* self, QHideEvent* event);
void KUrlNavigator_OnHideEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseHideEvent(KUrlNavigator* self, QHideEvent* event);
bool KUrlNavigator_NativeEvent(KUrlNavigator* self, const libqt_string eventType, void* message, intptr_t* result);
void KUrlNavigator_OnNativeEvent(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseNativeEvent(KUrlNavigator* self, const libqt_string eventType, void* message, intptr_t* result);
void KUrlNavigator_ChangeEvent(KUrlNavigator* self, QEvent* param1);
void KUrlNavigator_OnChangeEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseChangeEvent(KUrlNavigator* self, QEvent* param1);
int KUrlNavigator_Metric(const KUrlNavigator* self, int param1);
void KUrlNavigator_OnMetric(const KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseMetric(const KUrlNavigator* self, int param1);
void KUrlNavigator_InitPainter(const KUrlNavigator* self, QPainter* painter);
void KUrlNavigator_OnInitPainter(const KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseInitPainter(const KUrlNavigator* self, QPainter* painter);
QPaintDevice* KUrlNavigator_Redirected(const KUrlNavigator* self, QPoint* offset);
void KUrlNavigator_OnRedirected(const KUrlNavigator* self, intptr_t slot);
QPaintDevice* KUrlNavigator_QBaseRedirected(const KUrlNavigator* self, QPoint* offset);
QPainter* KUrlNavigator_SharedPainter(const KUrlNavigator* self);
void KUrlNavigator_OnSharedPainter(const KUrlNavigator* self, intptr_t slot);
QPainter* KUrlNavigator_QBaseSharedPainter(const KUrlNavigator* self);
void KUrlNavigator_InputMethodEvent(KUrlNavigator* self, QInputMethodEvent* param1);
void KUrlNavigator_OnInputMethodEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseInputMethodEvent(KUrlNavigator* self, QInputMethodEvent* param1);
QVariant* KUrlNavigator_InputMethodQuery(const KUrlNavigator* self, int param1);
void KUrlNavigator_OnInputMethodQuery(const KUrlNavigator* self, intptr_t slot);
QVariant* KUrlNavigator_QBaseInputMethodQuery(const KUrlNavigator* self, int param1);
bool KUrlNavigator_FocusNextPrevChild(KUrlNavigator* self, bool next);
void KUrlNavigator_OnFocusNextPrevChild(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseFocusNextPrevChild(KUrlNavigator* self, bool next);
void KUrlNavigator_TimerEvent(KUrlNavigator* self, QTimerEvent* event);
void KUrlNavigator_OnTimerEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseTimerEvent(KUrlNavigator* self, QTimerEvent* event);
void KUrlNavigator_ChildEvent(KUrlNavigator* self, QChildEvent* event);
void KUrlNavigator_OnChildEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseChildEvent(KUrlNavigator* self, QChildEvent* event);
void KUrlNavigator_CustomEvent(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_OnCustomEvent(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseCustomEvent(KUrlNavigator* self, QEvent* event);
void KUrlNavigator_ConnectNotify(KUrlNavigator* self, const QMetaMethod* signal);
void KUrlNavigator_OnConnectNotify(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseConnectNotify(KUrlNavigator* self, const QMetaMethod* signal);
void KUrlNavigator_DisconnectNotify(KUrlNavigator* self, const QMetaMethod* signal);
void KUrlNavigator_OnDisconnectNotify(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDisconnectNotify(KUrlNavigator* self, const QMetaMethod* signal);
void KUrlNavigator_UpdateMicroFocus(KUrlNavigator* self);
void KUrlNavigator_OnUpdateMicroFocus(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseUpdateMicroFocus(KUrlNavigator* self);
void KUrlNavigator_Create(KUrlNavigator* self);
void KUrlNavigator_OnCreate(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseCreate(KUrlNavigator* self);
void KUrlNavigator_Destroy(KUrlNavigator* self);
void KUrlNavigator_OnDestroy(KUrlNavigator* self, intptr_t slot);
void KUrlNavigator_QBaseDestroy(KUrlNavigator* self);
bool KUrlNavigator_FocusNextChild(KUrlNavigator* self);
void KUrlNavigator_OnFocusNextChild(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseFocusNextChild(KUrlNavigator* self);
bool KUrlNavigator_FocusPreviousChild(KUrlNavigator* self);
void KUrlNavigator_OnFocusPreviousChild(KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseFocusPreviousChild(KUrlNavigator* self);
QObject* KUrlNavigator_Sender(const KUrlNavigator* self);
void KUrlNavigator_OnSender(const KUrlNavigator* self, intptr_t slot);
QObject* KUrlNavigator_QBaseSender(const KUrlNavigator* self);
int KUrlNavigator_SenderSignalIndex(const KUrlNavigator* self);
void KUrlNavigator_OnSenderSignalIndex(const KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseSenderSignalIndex(const KUrlNavigator* self);
int KUrlNavigator_Receivers(const KUrlNavigator* self, const char* signal);
void KUrlNavigator_OnReceivers(const KUrlNavigator* self, intptr_t slot);
int KUrlNavigator_QBaseReceivers(const KUrlNavigator* self, const char* signal);
bool KUrlNavigator_IsSignalConnected(const KUrlNavigator* self, const QMetaMethod* signal);
void KUrlNavigator_OnIsSignalConnected(const KUrlNavigator* self, intptr_t slot);
bool KUrlNavigator_QBaseIsSignalConnected(const KUrlNavigator* self, const QMetaMethod* signal);
double KUrlNavigator_GetDecodedMetricF(const KUrlNavigator* self, int metricA, int metricB);
void KUrlNavigator_OnGetDecodedMetricF(const KUrlNavigator* self, intptr_t slot);
double KUrlNavigator_QBaseGetDecodedMetricF(const KUrlNavigator* self, int metricA, int metricB);
void KUrlNavigator_Delete(KUrlNavigator* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
