#pragma once
#ifndef SRC_EXTRAS_KIOC_LIBKFILEWIDGET_H
#define SRC_EXTRAS_KIOC_LIBKFILEWIDGET_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KConfigGroup KConfigGroup;
typedef struct KDirOperator KDirOperator;
typedef struct KFileFilter KFileFilter;
typedef struct KFileFilterCombo KFileFilterCombo;
typedef struct KFileWidget KFileWidget;
typedef struct KPreviewWidgetBase KPreviewWidgetBase;
typedef struct KUrlComboBox KUrlComboBox;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QPushButton QPushButton;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KFileWidget* KFileWidget_new(const QUrl* startDir);
KFileWidget* KFileWidget_new2(const QUrl* startDir, QWidget* parent);
QMetaObject* KFileWidget_MetaObject(const KFileWidget* self);
void* KFileWidget_Metacast(KFileWidget* self, const char* param1);
int KFileWidget_Metacall(KFileWidget* self, int param1, int param2, void** param3);
libqt_string KFileWidget_Tr(const char* s);
QUrl* KFileWidget_SelectedUrl(const KFileWidget* self);
libqt_list /* of QUrl* */ KFileWidget_SelectedUrls(const KFileWidget* self);
QUrl* KFileWidget_BaseUrl(const KFileWidget* self);
libqt_string KFileWidget_SelectedFile(const KFileWidget* self);
libqt_list /* of libqt_string */ KFileWidget_SelectedFiles(const KFileWidget* self);
void KFileWidget_SetUrl(KFileWidget* self, const QUrl* url);
void KFileWidget_SetSelectedUrl(KFileWidget* self, const QUrl* url);
void KFileWidget_SetSelectedUrls(KFileWidget* self, const libqt_list /* of QUrl* */ urls);
void KFileWidget_SetOperationMode(KFileWidget* self, int operationMode);
int KFileWidget_OperationMode(const KFileWidget* self);
void KFileWidget_SetKeepLocation(KFileWidget* self, bool keep);
bool KFileWidget_KeepsLocation(const KFileWidget* self);
void KFileWidget_SetFilters(KFileWidget* self, const libqt_list /* of KFileFilter* */ filters);
KFileFilter* KFileWidget_CurrentFilter(const KFileWidget* self);
void KFileWidget_ClearFilter(KFileWidget* self);
void KFileWidget_SetPreviewWidget(KFileWidget* self, KPreviewWidgetBase* w);
void KFileWidget_SetMode(KFileWidget* self, int m);
int KFileWidget_Mode(const KFileWidget* self);
void KFileWidget_SetLocationLabel(KFileWidget* self, const libqt_string text);
QPushButton* KFileWidget_OkButton(const KFileWidget* self);
QPushButton* KFileWidget_CancelButton(const KFileWidget* self);
KUrlComboBox* KFileWidget_LocationEdit(const KFileWidget* self);
KFileFilterCombo* KFileWidget_FilterWidget(const KFileWidget* self);
QUrl* KFileWidget_GetStartUrl(const QUrl* startDir, libqt_string recentDirClass);
QUrl* KFileWidget_GetStartUrl2(const QUrl* startDir, libqt_string recentDirClass, libqt_string fileName);
void KFileWidget_SetStartDir(const QUrl* directory);
void KFileWidget_SetCustomWidget(KFileWidget* self, QWidget* widget);
void KFileWidget_SetCustomWidget2(KFileWidget* self, const libqt_string text, QWidget* widget);
void KFileWidget_SetConfirmOverwrite(KFileWidget* self, bool enable);
void KFileWidget_SetInlinePreviewShown(KFileWidget* self, bool show);
QSize* KFileWidget_DialogSizeHint(const KFileWidget* self);
void KFileWidget_SetViewMode(KFileWidget* self, int mode);
QSize* KFileWidget_SizeHint(const KFileWidget* self);
void KFileWidget_SetSupportedSchemes(KFileWidget* self, const libqt_list /* of libqt_string */ schemes);
libqt_list /* of libqt_string */ KFileWidget_SupportedSchemes(const KFileWidget* self);
void KFileWidget_SlotOk(KFileWidget* self);
void KFileWidget_Accept(KFileWidget* self);
void KFileWidget_SlotCancel(KFileWidget* self);
void KFileWidget_ResizeEvent(KFileWidget* self, QResizeEvent* event);
void KFileWidget_ShowEvent(KFileWidget* self, QShowEvent* event);
bool KFileWidget_EventFilter(KFileWidget* self, QObject* watched, QEvent* event);
void KFileWidget_FileSelected(KFileWidget* self, const QUrl* param1);
void KFileWidget_Connect_FileSelected(KFileWidget* self, intptr_t slot);
void KFileWidget_FileHighlighted(KFileWidget* self, const QUrl* param1);
void KFileWidget_Connect_FileHighlighted(KFileWidget* self, intptr_t slot);
void KFileWidget_SelectionChanged(KFileWidget* self);
void KFileWidget_Connect_SelectionChanged(KFileWidget* self, intptr_t slot);
void KFileWidget_FilterChanged(KFileWidget* self, const KFileFilter* filter);
void KFileWidget_Connect_FilterChanged(KFileWidget* self, intptr_t slot);
void KFileWidget_Accepted(KFileWidget* self);
void KFileWidget_Connect_Accepted(KFileWidget* self, intptr_t slot);
KDirOperator* KFileWidget_DirOperator(KFileWidget* self);
void KFileWidget_ReadConfig(KFileWidget* self, KConfigGroup* group);
libqt_string KFileWidget_Tr2(const char* s, const char* c);
libqt_string KFileWidget_Tr3(const char* s, const char* c, int n);
void KFileWidget_SetUrl2(KFileWidget* self, const QUrl* url, bool clearforward);
void KFileWidget_SetFilters2(KFileWidget* self, const libqt_list /* of KFileFilter* */ filters, const KFileFilter* activeFilter);
void KFileWidget_OnMetacall(KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseMetacall(KFileWidget* self, int param1, int param2, void** param3);
void KFileWidget_OnSizeHint(const KFileWidget* self, intptr_t slot);
QSize* KFileWidget_QBaseSizeHint(const KFileWidget* self);
void KFileWidget_OnResizeEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseResizeEvent(KFileWidget* self, QResizeEvent* event);
void KFileWidget_OnShowEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseShowEvent(KFileWidget* self, QShowEvent* event);
void KFileWidget_OnEventFilter(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseEventFilter(KFileWidget* self, QObject* watched, QEvent* event);
int KFileWidget_DevType(const KFileWidget* self);
void KFileWidget_OnDevType(const KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseDevType(const KFileWidget* self);
void KFileWidget_SetVisible(KFileWidget* self, bool visible);
void KFileWidget_OnSetVisible(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseSetVisible(KFileWidget* self, bool visible);
QSize* KFileWidget_MinimumSizeHint(const KFileWidget* self);
void KFileWidget_OnMinimumSizeHint(const KFileWidget* self, intptr_t slot);
QSize* KFileWidget_QBaseMinimumSizeHint(const KFileWidget* self);
int KFileWidget_HeightForWidth(const KFileWidget* self, int param1);
void KFileWidget_OnHeightForWidth(const KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseHeightForWidth(const KFileWidget* self, int param1);
bool KFileWidget_HasHeightForWidth(const KFileWidget* self);
void KFileWidget_OnHasHeightForWidth(const KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseHasHeightForWidth(const KFileWidget* self);
QPaintEngine* KFileWidget_PaintEngine(const KFileWidget* self);
void KFileWidget_OnPaintEngine(const KFileWidget* self, intptr_t slot);
QPaintEngine* KFileWidget_QBasePaintEngine(const KFileWidget* self);
bool KFileWidget_Event(KFileWidget* self, QEvent* event);
void KFileWidget_OnEvent(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseEvent(KFileWidget* self, QEvent* event);
void KFileWidget_MousePressEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_OnMousePressEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseMousePressEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_MouseReleaseEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_OnMouseReleaseEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseMouseReleaseEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_MouseDoubleClickEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_OnMouseDoubleClickEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseMouseDoubleClickEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_MouseMoveEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_OnMouseMoveEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseMouseMoveEvent(KFileWidget* self, QMouseEvent* event);
void KFileWidget_WheelEvent(KFileWidget* self, QWheelEvent* event);
void KFileWidget_OnWheelEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseWheelEvent(KFileWidget* self, QWheelEvent* event);
void KFileWidget_KeyPressEvent(KFileWidget* self, QKeyEvent* event);
void KFileWidget_OnKeyPressEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseKeyPressEvent(KFileWidget* self, QKeyEvent* event);
void KFileWidget_KeyReleaseEvent(KFileWidget* self, QKeyEvent* event);
void KFileWidget_OnKeyReleaseEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseKeyReleaseEvent(KFileWidget* self, QKeyEvent* event);
void KFileWidget_FocusInEvent(KFileWidget* self, QFocusEvent* event);
void KFileWidget_OnFocusInEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseFocusInEvent(KFileWidget* self, QFocusEvent* event);
void KFileWidget_FocusOutEvent(KFileWidget* self, QFocusEvent* event);
void KFileWidget_OnFocusOutEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseFocusOutEvent(KFileWidget* self, QFocusEvent* event);
void KFileWidget_EnterEvent(KFileWidget* self, QEnterEvent* event);
void KFileWidget_OnEnterEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseEnterEvent(KFileWidget* self, QEnterEvent* event);
void KFileWidget_LeaveEvent(KFileWidget* self, QEvent* event);
void KFileWidget_OnLeaveEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseLeaveEvent(KFileWidget* self, QEvent* event);
void KFileWidget_PaintEvent(KFileWidget* self, QPaintEvent* event);
void KFileWidget_OnPaintEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBasePaintEvent(KFileWidget* self, QPaintEvent* event);
void KFileWidget_MoveEvent(KFileWidget* self, QMoveEvent* event);
void KFileWidget_OnMoveEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseMoveEvent(KFileWidget* self, QMoveEvent* event);
void KFileWidget_CloseEvent(KFileWidget* self, QCloseEvent* event);
void KFileWidget_OnCloseEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseCloseEvent(KFileWidget* self, QCloseEvent* event);
void KFileWidget_ContextMenuEvent(KFileWidget* self, QContextMenuEvent* event);
void KFileWidget_OnContextMenuEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseContextMenuEvent(KFileWidget* self, QContextMenuEvent* event);
void KFileWidget_TabletEvent(KFileWidget* self, QTabletEvent* event);
void KFileWidget_OnTabletEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseTabletEvent(KFileWidget* self, QTabletEvent* event);
void KFileWidget_ActionEvent(KFileWidget* self, QActionEvent* event);
void KFileWidget_OnActionEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseActionEvent(KFileWidget* self, QActionEvent* event);
void KFileWidget_DragEnterEvent(KFileWidget* self, QDragEnterEvent* event);
void KFileWidget_OnDragEnterEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDragEnterEvent(KFileWidget* self, QDragEnterEvent* event);
void KFileWidget_DragMoveEvent(KFileWidget* self, QDragMoveEvent* event);
void KFileWidget_OnDragMoveEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDragMoveEvent(KFileWidget* self, QDragMoveEvent* event);
void KFileWidget_DragLeaveEvent(KFileWidget* self, QDragLeaveEvent* event);
void KFileWidget_OnDragLeaveEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDragLeaveEvent(KFileWidget* self, QDragLeaveEvent* event);
void KFileWidget_DropEvent(KFileWidget* self, QDropEvent* event);
void KFileWidget_OnDropEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDropEvent(KFileWidget* self, QDropEvent* event);
void KFileWidget_HideEvent(KFileWidget* self, QHideEvent* event);
void KFileWidget_OnHideEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseHideEvent(KFileWidget* self, QHideEvent* event);
bool KFileWidget_NativeEvent(KFileWidget* self, const libqt_string eventType, void* message, intptr_t* result);
void KFileWidget_OnNativeEvent(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseNativeEvent(KFileWidget* self, const libqt_string eventType, void* message, intptr_t* result);
void KFileWidget_ChangeEvent(KFileWidget* self, QEvent* param1);
void KFileWidget_OnChangeEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseChangeEvent(KFileWidget* self, QEvent* param1);
int KFileWidget_Metric(const KFileWidget* self, int param1);
void KFileWidget_OnMetric(const KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseMetric(const KFileWidget* self, int param1);
void KFileWidget_InitPainter(const KFileWidget* self, QPainter* painter);
void KFileWidget_OnInitPainter(const KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseInitPainter(const KFileWidget* self, QPainter* painter);
QPaintDevice* KFileWidget_Redirected(const KFileWidget* self, QPoint* offset);
void KFileWidget_OnRedirected(const KFileWidget* self, intptr_t slot);
QPaintDevice* KFileWidget_QBaseRedirected(const KFileWidget* self, QPoint* offset);
QPainter* KFileWidget_SharedPainter(const KFileWidget* self);
void KFileWidget_OnSharedPainter(const KFileWidget* self, intptr_t slot);
QPainter* KFileWidget_QBaseSharedPainter(const KFileWidget* self);
void KFileWidget_InputMethodEvent(KFileWidget* self, QInputMethodEvent* param1);
void KFileWidget_OnInputMethodEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseInputMethodEvent(KFileWidget* self, QInputMethodEvent* param1);
QVariant* KFileWidget_InputMethodQuery(const KFileWidget* self, int param1);
void KFileWidget_OnInputMethodQuery(const KFileWidget* self, intptr_t slot);
QVariant* KFileWidget_QBaseInputMethodQuery(const KFileWidget* self, int param1);
bool KFileWidget_FocusNextPrevChild(KFileWidget* self, bool next);
void KFileWidget_OnFocusNextPrevChild(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseFocusNextPrevChild(KFileWidget* self, bool next);
void KFileWidget_TimerEvent(KFileWidget* self, QTimerEvent* event);
void KFileWidget_OnTimerEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseTimerEvent(KFileWidget* self, QTimerEvent* event);
void KFileWidget_ChildEvent(KFileWidget* self, QChildEvent* event);
void KFileWidget_OnChildEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseChildEvent(KFileWidget* self, QChildEvent* event);
void KFileWidget_CustomEvent(KFileWidget* self, QEvent* event);
void KFileWidget_OnCustomEvent(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseCustomEvent(KFileWidget* self, QEvent* event);
void KFileWidget_ConnectNotify(KFileWidget* self, const QMetaMethod* signal);
void KFileWidget_OnConnectNotify(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseConnectNotify(KFileWidget* self, const QMetaMethod* signal);
void KFileWidget_DisconnectNotify(KFileWidget* self, const QMetaMethod* signal);
void KFileWidget_OnDisconnectNotify(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDisconnectNotify(KFileWidget* self, const QMetaMethod* signal);
void KFileWidget_UpdateMicroFocus(KFileWidget* self);
void KFileWidget_OnUpdateMicroFocus(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseUpdateMicroFocus(KFileWidget* self);
void KFileWidget_Create(KFileWidget* self);
void KFileWidget_OnCreate(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseCreate(KFileWidget* self);
void KFileWidget_Destroy(KFileWidget* self);
void KFileWidget_OnDestroy(KFileWidget* self, intptr_t slot);
void KFileWidget_QBaseDestroy(KFileWidget* self);
bool KFileWidget_FocusNextChild(KFileWidget* self);
void KFileWidget_OnFocusNextChild(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseFocusNextChild(KFileWidget* self);
bool KFileWidget_FocusPreviousChild(KFileWidget* self);
void KFileWidget_OnFocusPreviousChild(KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseFocusPreviousChild(KFileWidget* self);
QObject* KFileWidget_Sender(const KFileWidget* self);
void KFileWidget_OnSender(const KFileWidget* self, intptr_t slot);
QObject* KFileWidget_QBaseSender(const KFileWidget* self);
int KFileWidget_SenderSignalIndex(const KFileWidget* self);
void KFileWidget_OnSenderSignalIndex(const KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseSenderSignalIndex(const KFileWidget* self);
int KFileWidget_Receivers(const KFileWidget* self, const char* signal);
void KFileWidget_OnReceivers(const KFileWidget* self, intptr_t slot);
int KFileWidget_QBaseReceivers(const KFileWidget* self, const char* signal);
bool KFileWidget_IsSignalConnected(const KFileWidget* self, const QMetaMethod* signal);
void KFileWidget_OnIsSignalConnected(const KFileWidget* self, intptr_t slot);
bool KFileWidget_QBaseIsSignalConnected(const KFileWidget* self, const QMetaMethod* signal);
double KFileWidget_GetDecodedMetricF(const KFileWidget* self, int metricA, int metricB);
void KFileWidget_OnGetDecodedMetricF(const KFileWidget* self, intptr_t slot);
double KFileWidget_QBaseGetDecodedMetricF(const KFileWidget* self, int metricA, int metricB);
void KFileWidget_Delete(KFileWidget* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
