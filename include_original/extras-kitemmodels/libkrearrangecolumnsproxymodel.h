#pragma once
#ifndef SRC_EXTRAS_KITEMMODELSC_LIBKREARRANGECOLUMNSPROXYMODEL_H
#define SRC_EXTRAS_KITEMMODELSC_LIBKREARRANGECOLUMNSPROXYMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KRearrangeColumnsProxyModel KRearrangeColumnsProxyModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractProxyModel QAbstractProxyModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QIdentityProxyModel QIdentityProxyModel;
typedef struct QItemSelection QItemSelection;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

KRearrangeColumnsProxyModel* KRearrangeColumnsProxyModel_new();
KRearrangeColumnsProxyModel* KRearrangeColumnsProxyModel_new2(QObject* parent);
QMetaObject* KRearrangeColumnsProxyModel_MetaObject(const KRearrangeColumnsProxyModel* self);
void* KRearrangeColumnsProxyModel_Metacast(KRearrangeColumnsProxyModel* self, const char* param1);
int KRearrangeColumnsProxyModel_Metacall(KRearrangeColumnsProxyModel* self, int param1, int param2, void** param3);
libqt_string KRearrangeColumnsProxyModel_Tr(const char* s);
void KRearrangeColumnsProxyModel_SetSourceColumns(KRearrangeColumnsProxyModel* self, const libqt_list /* of int */ columns);
int KRearrangeColumnsProxyModel_ColumnCount(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
int KRearrangeColumnsProxyModel_RowCount(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
QModelIndex* KRearrangeColumnsProxyModel_Index(const KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* KRearrangeColumnsProxyModel_Parent(const KRearrangeColumnsProxyModel* self, const QModelIndex* child);
QModelIndex* KRearrangeColumnsProxyModel_MapFromSource(const KRearrangeColumnsProxyModel* self, const QModelIndex* sourceIndex);
QModelIndex* KRearrangeColumnsProxyModel_MapToSource(const KRearrangeColumnsProxyModel* self, const QModelIndex* proxyIndex);
QVariant* KRearrangeColumnsProxyModel_HeaderData(const KRearrangeColumnsProxyModel* self, int section, int orientation, int role);
bool KRearrangeColumnsProxyModel_HasChildren(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
QModelIndex* KRearrangeColumnsProxyModel_Sibling(const KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* idx);
int KRearrangeColumnsProxyModel_ProxyColumnForSourceColumn(const KRearrangeColumnsProxyModel* self, int sourceColumn);
int KRearrangeColumnsProxyModel_SourceColumnForProxyColumn(const KRearrangeColumnsProxyModel* self, int proxyColumn);
libqt_string KRearrangeColumnsProxyModel_Tr2(const char* s, const char* c);
libqt_string KRearrangeColumnsProxyModel_Tr3(const char* s, const char* c, int n);
void KRearrangeColumnsProxyModel_OnMetacall(KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseMetacall(KRearrangeColumnsProxyModel* self, int param1, int param2, void** param3);
void KRearrangeColumnsProxyModel_OnColumnCount(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseColumnCount(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnRowCount(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseRowCount(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnIndex(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseIndex(const KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnParent(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseParent(const KRearrangeColumnsProxyModel* self, const QModelIndex* child);
void KRearrangeColumnsProxyModel_OnMapFromSource(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseMapFromSource(const KRearrangeColumnsProxyModel* self, const QModelIndex* sourceIndex);
void KRearrangeColumnsProxyModel_OnMapToSource(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseMapToSource(const KRearrangeColumnsProxyModel* self, const QModelIndex* proxyIndex);
void KRearrangeColumnsProxyModel_OnHeaderData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QVariant* KRearrangeColumnsProxyModel_QBaseHeaderData(const KRearrangeColumnsProxyModel* self, int section, int orientation, int role);
void KRearrangeColumnsProxyModel_OnHasChildren(const KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseHasChildren(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnSibling(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseSibling(const KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* idx);
bool KRearrangeColumnsProxyModel_DropMimeData(KRearrangeColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnDropMimeData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseDropMimeData(KRearrangeColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
QItemSelection* KRearrangeColumnsProxyModel_MapSelectionFromSource(const KRearrangeColumnsProxyModel* self, const QItemSelection* selection);
void KRearrangeColumnsProxyModel_OnMapSelectionFromSource(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QItemSelection* KRearrangeColumnsProxyModel_QBaseMapSelectionFromSource(const KRearrangeColumnsProxyModel* self, const QItemSelection* selection);
QItemSelection* KRearrangeColumnsProxyModel_MapSelectionToSource(const KRearrangeColumnsProxyModel* self, const QItemSelection* selection);
void KRearrangeColumnsProxyModel_OnMapSelectionToSource(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QItemSelection* KRearrangeColumnsProxyModel_QBaseMapSelectionToSource(const KRearrangeColumnsProxyModel* self, const QItemSelection* selection);
libqt_list /* of QModelIndex* */ KRearrangeColumnsProxyModel_Match(const KRearrangeColumnsProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KRearrangeColumnsProxyModel_OnMatch(const KRearrangeColumnsProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KRearrangeColumnsProxyModel_QBaseMatch(const KRearrangeColumnsProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KRearrangeColumnsProxyModel_SetSourceModel(KRearrangeColumnsProxyModel* self, QAbstractItemModel* sourceModel);
void KRearrangeColumnsProxyModel_OnSetSourceModel(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseSetSourceModel(KRearrangeColumnsProxyModel* self, QAbstractItemModel* sourceModel);
bool KRearrangeColumnsProxyModel_InsertColumns(KRearrangeColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnInsertColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseInsertColumns(KRearrangeColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
bool KRearrangeColumnsProxyModel_InsertRows(KRearrangeColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnInsertRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseInsertRows(KRearrangeColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
bool KRearrangeColumnsProxyModel_RemoveColumns(KRearrangeColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnRemoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseRemoveColumns(KRearrangeColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
bool KRearrangeColumnsProxyModel_RemoveRows(KRearrangeColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnRemoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseRemoveRows(KRearrangeColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
bool KRearrangeColumnsProxyModel_MoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KRearrangeColumnsProxyModel_OnMoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseMoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KRearrangeColumnsProxyModel_MoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KRearrangeColumnsProxyModel_OnMoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseMoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
bool KRearrangeColumnsProxyModel_Submit(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnSubmit(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseSubmit(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_Revert(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnRevert(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseRevert(KRearrangeColumnsProxyModel* self);
QVariant* KRearrangeColumnsProxyModel_Data(const KRearrangeColumnsProxyModel* self, const QModelIndex* proxyIndex, int role);
void KRearrangeColumnsProxyModel_OnData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QVariant* KRearrangeColumnsProxyModel_QBaseData(const KRearrangeColumnsProxyModel* self, const QModelIndex* proxyIndex, int role);
libqt_map /* of int to QVariant* */ KRearrangeColumnsProxyModel_ItemData(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
void KRearrangeColumnsProxyModel_OnItemData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KRearrangeColumnsProxyModel_QBaseItemData(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
int KRearrangeColumnsProxyModel_Flags(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
void KRearrangeColumnsProxyModel_OnFlags(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseFlags(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
bool KRearrangeColumnsProxyModel_SetData(KRearrangeColumnsProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
void KRearrangeColumnsProxyModel_OnSetData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseSetData(KRearrangeColumnsProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
bool KRearrangeColumnsProxyModel_SetItemData(KRearrangeColumnsProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KRearrangeColumnsProxyModel_OnSetItemData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseSetItemData(KRearrangeColumnsProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KRearrangeColumnsProxyModel_SetHeaderData(KRearrangeColumnsProxyModel* self, int section, int orientation, const QVariant* value, int role);
void KRearrangeColumnsProxyModel_OnSetHeaderData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseSetHeaderData(KRearrangeColumnsProxyModel* self, int section, int orientation, const QVariant* value, int role);
bool KRearrangeColumnsProxyModel_ClearItemData(KRearrangeColumnsProxyModel* self, const QModelIndex* index);
void KRearrangeColumnsProxyModel_OnClearItemData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseClearItemData(KRearrangeColumnsProxyModel* self, const QModelIndex* index);
QModelIndex* KRearrangeColumnsProxyModel_Buddy(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
void KRearrangeColumnsProxyModel_OnBuddy(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseBuddy(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
bool KRearrangeColumnsProxyModel_CanFetchMore(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnCanFetchMore(const KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseCanFetchMore(const KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_FetchMore(KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnFetchMore(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseFetchMore(KRearrangeColumnsProxyModel* self, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_Sort(KRearrangeColumnsProxyModel* self, int column, int order);
void KRearrangeColumnsProxyModel_OnSort(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseSort(KRearrangeColumnsProxyModel* self, int column, int order);
QSize* KRearrangeColumnsProxyModel_Span(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
void KRearrangeColumnsProxyModel_OnSpan(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QSize* KRearrangeColumnsProxyModel_QBaseSpan(const KRearrangeColumnsProxyModel* self, const QModelIndex* index);
QMimeData* KRearrangeColumnsProxyModel_MimeData(const KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KRearrangeColumnsProxyModel_OnMimeData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QMimeData* KRearrangeColumnsProxyModel_QBaseMimeData(const KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool KRearrangeColumnsProxyModel_CanDropMimeData(const KRearrangeColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KRearrangeColumnsProxyModel_OnCanDropMimeData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseCanDropMimeData(const KRearrangeColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
libqt_list /* of libqt_string */ KRearrangeColumnsProxyModel_MimeTypes(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnMimeTypes(const KRearrangeColumnsProxyModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KRearrangeColumnsProxyModel_QBaseMimeTypes(const KRearrangeColumnsProxyModel* self);
int KRearrangeColumnsProxyModel_SupportedDragActions(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnSupportedDragActions(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseSupportedDragActions(const KRearrangeColumnsProxyModel* self);
int KRearrangeColumnsProxyModel_SupportedDropActions(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnSupportedDropActions(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseSupportedDropActions(const KRearrangeColumnsProxyModel* self);
libqt_map /* of int to libqt_string */ KRearrangeColumnsProxyModel_RoleNames(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnRoleNames(const KRearrangeColumnsProxyModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KRearrangeColumnsProxyModel_QBaseRoleNames(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_MultiData(const KRearrangeColumnsProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KRearrangeColumnsProxyModel_OnMultiData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseMultiData(const KRearrangeColumnsProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KRearrangeColumnsProxyModel_ResetInternalData(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnResetInternalData(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseResetInternalData(KRearrangeColumnsProxyModel* self);
bool KRearrangeColumnsProxyModel_Event(KRearrangeColumnsProxyModel* self, QEvent* event);
void KRearrangeColumnsProxyModel_OnEvent(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseEvent(KRearrangeColumnsProxyModel* self, QEvent* event);
bool KRearrangeColumnsProxyModel_EventFilter(KRearrangeColumnsProxyModel* self, QObject* watched, QEvent* event);
void KRearrangeColumnsProxyModel_OnEventFilter(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseEventFilter(KRearrangeColumnsProxyModel* self, QObject* watched, QEvent* event);
void KRearrangeColumnsProxyModel_TimerEvent(KRearrangeColumnsProxyModel* self, QTimerEvent* event);
void KRearrangeColumnsProxyModel_OnTimerEvent(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseTimerEvent(KRearrangeColumnsProxyModel* self, QTimerEvent* event);
void KRearrangeColumnsProxyModel_ChildEvent(KRearrangeColumnsProxyModel* self, QChildEvent* event);
void KRearrangeColumnsProxyModel_OnChildEvent(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseChildEvent(KRearrangeColumnsProxyModel* self, QChildEvent* event);
void KRearrangeColumnsProxyModel_CustomEvent(KRearrangeColumnsProxyModel* self, QEvent* event);
void KRearrangeColumnsProxyModel_OnCustomEvent(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseCustomEvent(KRearrangeColumnsProxyModel* self, QEvent* event);
void KRearrangeColumnsProxyModel_ConnectNotify(KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_OnConnectNotify(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseConnectNotify(KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_DisconnectNotify(KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_OnDisconnectNotify(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseDisconnectNotify(KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_SetHandleSourceLayoutChanges(KRearrangeColumnsProxyModel* self, bool handleSourceLayoutChanges);
void KRearrangeColumnsProxyModel_OnSetHandleSourceLayoutChanges(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseSetHandleSourceLayoutChanges(KRearrangeColumnsProxyModel* self, bool handleSourceLayoutChanges);
void KRearrangeColumnsProxyModel_SetHandleSourceDataChanges(KRearrangeColumnsProxyModel* self, bool handleSourceDataChanges);
void KRearrangeColumnsProxyModel_OnSetHandleSourceDataChanges(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseSetHandleSourceDataChanges(KRearrangeColumnsProxyModel* self, bool handleSourceDataChanges);
QModelIndex* KRearrangeColumnsProxyModel_CreateSourceIndex(const KRearrangeColumnsProxyModel* self, int row, int col, void* internalPtr);
void KRearrangeColumnsProxyModel_OnCreateSourceIndex(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseCreateSourceIndex(const KRearrangeColumnsProxyModel* self, int row, int col, void* internalPtr);
QModelIndex* KRearrangeColumnsProxyModel_CreateIndex(const KRearrangeColumnsProxyModel* self, int row, int column);
void KRearrangeColumnsProxyModel_OnCreateIndex(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QModelIndex* KRearrangeColumnsProxyModel_QBaseCreateIndex(const KRearrangeColumnsProxyModel* self, int row, int column);
void KRearrangeColumnsProxyModel_EncodeData(const KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KRearrangeColumnsProxyModel_OnEncodeData(const KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEncodeData(const KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KRearrangeColumnsProxyModel_DecodeData(KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KRearrangeColumnsProxyModel_OnDecodeData(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseDecodeData(KRearrangeColumnsProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KRearrangeColumnsProxyModel_BeginInsertRows(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_OnBeginInsertRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseBeginInsertRows(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_EndInsertRows(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndInsertRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndInsertRows(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_BeginRemoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_OnBeginRemoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseBeginRemoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_EndRemoveRows(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndRemoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndRemoveRows(KRearrangeColumnsProxyModel* self);
bool KRearrangeColumnsProxyModel_BeginMoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KRearrangeColumnsProxyModel_OnBeginMoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseBeginMoveRows(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KRearrangeColumnsProxyModel_EndMoveRows(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndMoveRows(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndMoveRows(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_BeginInsertColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_OnBeginInsertColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseBeginInsertColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_EndInsertColumns(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndInsertColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndInsertColumns(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_BeginRemoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_OnBeginRemoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseBeginRemoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KRearrangeColumnsProxyModel_EndRemoveColumns(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndRemoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndRemoveColumns(KRearrangeColumnsProxyModel* self);
bool KRearrangeColumnsProxyModel_BeginMoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KRearrangeColumnsProxyModel_OnBeginMoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseBeginMoveColumns(KRearrangeColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KRearrangeColumnsProxyModel_EndMoveColumns(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndMoveColumns(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndMoveColumns(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_BeginResetModel(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnBeginResetModel(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseBeginResetModel(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_EndResetModel(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnEndResetModel(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseEndResetModel(KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_ChangePersistentIndex(KRearrangeColumnsProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KRearrangeColumnsProxyModel_OnChangePersistentIndex(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseChangePersistentIndex(KRearrangeColumnsProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KRearrangeColumnsProxyModel_ChangePersistentIndexList(KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KRearrangeColumnsProxyModel_OnChangePersistentIndexList(KRearrangeColumnsProxyModel* self, intptr_t slot);
void KRearrangeColumnsProxyModel_QBaseChangePersistentIndexList(KRearrangeColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KRearrangeColumnsProxyModel_PersistentIndexList(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnPersistentIndexList(const KRearrangeColumnsProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KRearrangeColumnsProxyModel_QBasePersistentIndexList(const KRearrangeColumnsProxyModel* self);
QObject* KRearrangeColumnsProxyModel_Sender(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnSender(const KRearrangeColumnsProxyModel* self, intptr_t slot);
QObject* KRearrangeColumnsProxyModel_QBaseSender(const KRearrangeColumnsProxyModel* self);
int KRearrangeColumnsProxyModel_SenderSignalIndex(const KRearrangeColumnsProxyModel* self);
void KRearrangeColumnsProxyModel_OnSenderSignalIndex(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseSenderSignalIndex(const KRearrangeColumnsProxyModel* self);
int KRearrangeColumnsProxyModel_Receivers(const KRearrangeColumnsProxyModel* self, const char* signal);
void KRearrangeColumnsProxyModel_OnReceivers(const KRearrangeColumnsProxyModel* self, intptr_t slot);
int KRearrangeColumnsProxyModel_QBaseReceivers(const KRearrangeColumnsProxyModel* self, const char* signal);
bool KRearrangeColumnsProxyModel_IsSignalConnected(const KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_OnIsSignalConnected(const KRearrangeColumnsProxyModel* self, intptr_t slot);
bool KRearrangeColumnsProxyModel_QBaseIsSignalConnected(const KRearrangeColumnsProxyModel* self, const QMetaMethod* signal);
void KRearrangeColumnsProxyModel_Delete(KRearrangeColumnsProxyModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
