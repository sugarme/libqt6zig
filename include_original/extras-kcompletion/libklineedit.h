#pragma once
#ifndef SRC_EXTRAS_KCOMPLETIONC_LIBKLINEEDIT_H
#define SRC_EXTRAS_KCOMPLETIONC_LIBKLINEEDIT_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KCompletion KCompletion;
typedef struct KCompletionBase KCompletionBase;
typedef struct KCompletionBox KCompletionBox;
typedef struct KLineEdit KLineEdit;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QKeySequence QKeySequence;
typedef struct QLineEdit QLineEdit;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KLineEdit* KLineEdit_new(QWidget* parent);
KLineEdit* KLineEdit_new2(const libqt_string stringVal);
KLineEdit* KLineEdit_new3();
KLineEdit* KLineEdit_new4(const libqt_string stringVal, QWidget* parent);
QMetaObject* KLineEdit_MetaObject(const KLineEdit* self);
void* KLineEdit_Metacast(KLineEdit* self, const char* param1);
int KLineEdit_Metacall(KLineEdit* self, int param1, int param2, void** param3);
libqt_string KLineEdit_Tr(const char* s);
void KLineEdit_SetUrl(KLineEdit* self, const QUrl* url);
void KLineEdit_SetCompletionMode(KLineEdit* self, int mode);
void KLineEdit_SetCompletionModeDisabled(KLineEdit* self, int mode);
bool KLineEdit_UrlDropsEnabled(const KLineEdit* self);
void KLineEdit_SetTrapReturnKey(KLineEdit* self, bool trap);
bool KLineEdit_TrapReturnKey(const KLineEdit* self);
KCompletionBox* KLineEdit_CompletionBox(KLineEdit* self, bool create);
void KLineEdit_SetCompletionObject(KLineEdit* self, KCompletion* param1, bool handle);
void KLineEdit_Copy(const KLineEdit* self);
void KLineEdit_SetSqueezedTextEnabled(KLineEdit* self, bool enable);
bool KLineEdit_IsSqueezedTextEnabled(const KLineEdit* self);
libqt_string KLineEdit_OriginalText(const KLineEdit* self);
libqt_string KLineEdit_UserText(const KLineEdit* self);
void KLineEdit_SetCompletionBox(KLineEdit* self, KCompletionBox* box);
QSize* KLineEdit_ClearButtonUsedSize(const KLineEdit* self);
void KLineEdit_DoCompletion(KLineEdit* self, const libqt_string text);
void KLineEdit_CompletionBoxActivated(KLineEdit* self, const libqt_string param1);
void KLineEdit_Connect_CompletionBoxActivated(KLineEdit* self, intptr_t slot);
void KLineEdit_ReturnKeyPressed(KLineEdit* self, const libqt_string text);
void KLineEdit_Connect_ReturnKeyPressed(KLineEdit* self, intptr_t slot);
void KLineEdit_Completion(KLineEdit* self, const libqt_string param1);
void KLineEdit_Connect_Completion(KLineEdit* self, intptr_t slot);
void KLineEdit_SubstringCompletion(KLineEdit* self, const libqt_string param1);
void KLineEdit_Connect_SubstringCompletion(KLineEdit* self, intptr_t slot);
void KLineEdit_TextRotation(KLineEdit* self, int param1);
void KLineEdit_Connect_TextRotation(KLineEdit* self, intptr_t slot);
void KLineEdit_CompletionModeChanged(KLineEdit* self, int param1);
void KLineEdit_Connect_CompletionModeChanged(KLineEdit* self, intptr_t slot);
void KLineEdit_AboutToShowContextMenu(KLineEdit* self, QMenu* contextMenu);
void KLineEdit_Connect_AboutToShowContextMenu(KLineEdit* self, intptr_t slot);
void KLineEdit_ClearButtonClicked(KLineEdit* self);
void KLineEdit_Connect_ClearButtonClicked(KLineEdit* self, intptr_t slot);
void KLineEdit_SetReadOnly(KLineEdit* self, bool readOnly);
void KLineEdit_RotateText(KLineEdit* self, int typeVal);
void KLineEdit_SetCompletedText(KLineEdit* self, const libqt_string completedText);
void KLineEdit_SetCompletedItems(KLineEdit* self, const libqt_list /* of libqt_string */ items, bool autoSuggest);
void KLineEdit_SetSqueezedText(KLineEdit* self, const libqt_string text);
void KLineEdit_SetText(KLineEdit* self, const libqt_string text);
void KLineEdit_MakeCompletion(KLineEdit* self, const libqt_string param1);
bool KLineEdit_Event(KLineEdit* self, QEvent* param1);
void KLineEdit_ResizeEvent(KLineEdit* self, QResizeEvent* param1);
void KLineEdit_KeyPressEvent(KLineEdit* self, QKeyEvent* param1);
void KLineEdit_MousePressEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_MouseReleaseEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_MouseDoubleClickEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_ContextMenuEvent(KLineEdit* self, QContextMenuEvent* param1);
void KLineEdit_SetCompletedText2(KLineEdit* self, const libqt_string param1, bool param2);
void KLineEdit_PaintEvent(KLineEdit* self, QPaintEvent* ev);
libqt_string KLineEdit_Tr2(const char* s, const char* c);
libqt_string KLineEdit_Tr3(const char* s, const char* c, int n);
void KLineEdit_SetCompletionModeDisabled2(KLineEdit* self, int mode, bool disable);
void KLineEdit_OnMetacall(KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseMetacall(KLineEdit* self, int param1, int param2, void** param3);
void KLineEdit_OnSetCompletionMode(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetCompletionMode(KLineEdit* self, int mode);
void KLineEdit_OnCompletionBox(KLineEdit* self, intptr_t slot);
KCompletionBox* KLineEdit_QBaseCompletionBox(KLineEdit* self, bool create);
void KLineEdit_OnSetCompletionObject(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetCompletionObject(KLineEdit* self, KCompletion* param1, bool handle);
void KLineEdit_OnCopy(const KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseCopy(const KLineEdit* self);
void KLineEdit_OnSetReadOnly(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetReadOnly(KLineEdit* self, bool readOnly);
void KLineEdit_OnSetCompletedText(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetCompletedText(KLineEdit* self, const libqt_string completedText);
void KLineEdit_OnSetCompletedItems(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetCompletedItems(KLineEdit* self, const libqt_list /* of libqt_string */ items, bool autoSuggest);
void KLineEdit_OnSetText(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetText(KLineEdit* self, const libqt_string text);
void KLineEdit_OnMakeCompletion(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMakeCompletion(KLineEdit* self, const libqt_string param1);
void KLineEdit_OnEvent(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseEvent(KLineEdit* self, QEvent* param1);
void KLineEdit_OnResizeEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseResizeEvent(KLineEdit* self, QResizeEvent* param1);
void KLineEdit_OnKeyPressEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseKeyPressEvent(KLineEdit* self, QKeyEvent* param1);
void KLineEdit_OnMousePressEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMousePressEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_OnMouseReleaseEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMouseReleaseEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_OnMouseDoubleClickEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMouseDoubleClickEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_OnContextMenuEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseContextMenuEvent(KLineEdit* self, QContextMenuEvent* param1);
void KLineEdit_OnSetCompletedText2(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetCompletedText2(KLineEdit* self, const libqt_string param1, bool param2);
void KLineEdit_OnPaintEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBasePaintEvent(KLineEdit* self, QPaintEvent* ev);
QSize* KLineEdit_SizeHint(const KLineEdit* self);
void KLineEdit_OnSizeHint(const KLineEdit* self, intptr_t slot);
QSize* KLineEdit_QBaseSizeHint(const KLineEdit* self);
QSize* KLineEdit_MinimumSizeHint(const KLineEdit* self);
void KLineEdit_OnMinimumSizeHint(const KLineEdit* self, intptr_t slot);
QSize* KLineEdit_QBaseMinimumSizeHint(const KLineEdit* self);
void KLineEdit_MouseMoveEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_OnMouseMoveEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMouseMoveEvent(KLineEdit* self, QMouseEvent* param1);
void KLineEdit_KeyReleaseEvent(KLineEdit* self, QKeyEvent* param1);
void KLineEdit_OnKeyReleaseEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseKeyReleaseEvent(KLineEdit* self, QKeyEvent* param1);
void KLineEdit_FocusInEvent(KLineEdit* self, QFocusEvent* param1);
void KLineEdit_OnFocusInEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseFocusInEvent(KLineEdit* self, QFocusEvent* param1);
void KLineEdit_FocusOutEvent(KLineEdit* self, QFocusEvent* param1);
void KLineEdit_OnFocusOutEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseFocusOutEvent(KLineEdit* self, QFocusEvent* param1);
void KLineEdit_DragEnterEvent(KLineEdit* self, QDragEnterEvent* param1);
void KLineEdit_OnDragEnterEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDragEnterEvent(KLineEdit* self, QDragEnterEvent* param1);
void KLineEdit_DragMoveEvent(KLineEdit* self, QDragMoveEvent* e);
void KLineEdit_OnDragMoveEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDragMoveEvent(KLineEdit* self, QDragMoveEvent* e);
void KLineEdit_DragLeaveEvent(KLineEdit* self, QDragLeaveEvent* e);
void KLineEdit_OnDragLeaveEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDragLeaveEvent(KLineEdit* self, QDragLeaveEvent* e);
void KLineEdit_DropEvent(KLineEdit* self, QDropEvent* param1);
void KLineEdit_OnDropEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDropEvent(KLineEdit* self, QDropEvent* param1);
void KLineEdit_ChangeEvent(KLineEdit* self, QEvent* param1);
void KLineEdit_OnChangeEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseChangeEvent(KLineEdit* self, QEvent* param1);
void KLineEdit_InputMethodEvent(KLineEdit* self, QInputMethodEvent* param1);
void KLineEdit_OnInputMethodEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseInputMethodEvent(KLineEdit* self, QInputMethodEvent* param1);
void KLineEdit_InitStyleOption(const KLineEdit* self, QStyleOptionFrame* option);
void KLineEdit_OnInitStyleOption(const KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseInitStyleOption(const KLineEdit* self, QStyleOptionFrame* option);
QVariant* KLineEdit_InputMethodQuery(const KLineEdit* self, int param1);
void KLineEdit_OnInputMethodQuery(const KLineEdit* self, intptr_t slot);
QVariant* KLineEdit_QBaseInputMethodQuery(const KLineEdit* self, int param1);
void KLineEdit_TimerEvent(KLineEdit* self, QTimerEvent* param1);
void KLineEdit_OnTimerEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseTimerEvent(KLineEdit* self, QTimerEvent* param1);
int KLineEdit_DevType(const KLineEdit* self);
void KLineEdit_OnDevType(const KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseDevType(const KLineEdit* self);
void KLineEdit_SetVisible(KLineEdit* self, bool visible);
void KLineEdit_OnSetVisible(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetVisible(KLineEdit* self, bool visible);
int KLineEdit_HeightForWidth(const KLineEdit* self, int param1);
void KLineEdit_OnHeightForWidth(const KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseHeightForWidth(const KLineEdit* self, int param1);
bool KLineEdit_HasHeightForWidth(const KLineEdit* self);
void KLineEdit_OnHasHeightForWidth(const KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseHasHeightForWidth(const KLineEdit* self);
QPaintEngine* KLineEdit_PaintEngine(const KLineEdit* self);
void KLineEdit_OnPaintEngine(const KLineEdit* self, intptr_t slot);
QPaintEngine* KLineEdit_QBasePaintEngine(const KLineEdit* self);
void KLineEdit_WheelEvent(KLineEdit* self, QWheelEvent* event);
void KLineEdit_OnWheelEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseWheelEvent(KLineEdit* self, QWheelEvent* event);
void KLineEdit_EnterEvent(KLineEdit* self, QEnterEvent* event);
void KLineEdit_OnEnterEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseEnterEvent(KLineEdit* self, QEnterEvent* event);
void KLineEdit_LeaveEvent(KLineEdit* self, QEvent* event);
void KLineEdit_OnLeaveEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseLeaveEvent(KLineEdit* self, QEvent* event);
void KLineEdit_MoveEvent(KLineEdit* self, QMoveEvent* event);
void KLineEdit_OnMoveEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseMoveEvent(KLineEdit* self, QMoveEvent* event);
void KLineEdit_CloseEvent(KLineEdit* self, QCloseEvent* event);
void KLineEdit_OnCloseEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseCloseEvent(KLineEdit* self, QCloseEvent* event);
void KLineEdit_TabletEvent(KLineEdit* self, QTabletEvent* event);
void KLineEdit_OnTabletEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseTabletEvent(KLineEdit* self, QTabletEvent* event);
void KLineEdit_ActionEvent(KLineEdit* self, QActionEvent* event);
void KLineEdit_OnActionEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseActionEvent(KLineEdit* self, QActionEvent* event);
void KLineEdit_ShowEvent(KLineEdit* self, QShowEvent* event);
void KLineEdit_OnShowEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseShowEvent(KLineEdit* self, QShowEvent* event);
void KLineEdit_HideEvent(KLineEdit* self, QHideEvent* event);
void KLineEdit_OnHideEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseHideEvent(KLineEdit* self, QHideEvent* event);
bool KLineEdit_NativeEvent(KLineEdit* self, const libqt_string eventType, void* message, intptr_t* result);
void KLineEdit_OnNativeEvent(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseNativeEvent(KLineEdit* self, const libqt_string eventType, void* message, intptr_t* result);
int KLineEdit_Metric(const KLineEdit* self, int param1);
void KLineEdit_OnMetric(const KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseMetric(const KLineEdit* self, int param1);
void KLineEdit_InitPainter(const KLineEdit* self, QPainter* painter);
void KLineEdit_OnInitPainter(const KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseInitPainter(const KLineEdit* self, QPainter* painter);
QPaintDevice* KLineEdit_Redirected(const KLineEdit* self, QPoint* offset);
void KLineEdit_OnRedirected(const KLineEdit* self, intptr_t slot);
QPaintDevice* KLineEdit_QBaseRedirected(const KLineEdit* self, QPoint* offset);
QPainter* KLineEdit_SharedPainter(const KLineEdit* self);
void KLineEdit_OnSharedPainter(const KLineEdit* self, intptr_t slot);
QPainter* KLineEdit_QBaseSharedPainter(const KLineEdit* self);
bool KLineEdit_FocusNextPrevChild(KLineEdit* self, bool next);
void KLineEdit_OnFocusNextPrevChild(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseFocusNextPrevChild(KLineEdit* self, bool next);
bool KLineEdit_EventFilter(KLineEdit* self, QObject* watched, QEvent* event);
void KLineEdit_OnEventFilter(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseEventFilter(KLineEdit* self, QObject* watched, QEvent* event);
void KLineEdit_ChildEvent(KLineEdit* self, QChildEvent* event);
void KLineEdit_OnChildEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseChildEvent(KLineEdit* self, QChildEvent* event);
void KLineEdit_CustomEvent(KLineEdit* self, QEvent* event);
void KLineEdit_OnCustomEvent(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseCustomEvent(KLineEdit* self, QEvent* event);
void KLineEdit_ConnectNotify(KLineEdit* self, const QMetaMethod* signal);
void KLineEdit_OnConnectNotify(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseConnectNotify(KLineEdit* self, const QMetaMethod* signal);
void KLineEdit_DisconnectNotify(KLineEdit* self, const QMetaMethod* signal);
void KLineEdit_OnDisconnectNotify(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDisconnectNotify(KLineEdit* self, const QMetaMethod* signal);
void KLineEdit_SetHandleSignals(KLineEdit* self, bool handle);
void KLineEdit_OnSetHandleSignals(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetHandleSignals(KLineEdit* self, bool handle);
void KLineEdit_VirtualHook(KLineEdit* self, int id, void* data);
void KLineEdit_OnVirtualHook(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseVirtualHook(KLineEdit* self, int id, void* data);
void KLineEdit_UserCancelled(KLineEdit* self, const libqt_string cancelText);
void KLineEdit_OnUserCancelled(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseUserCancelled(KLineEdit* self, const libqt_string cancelText);
QMenu* KLineEdit_CreateStandardContextMenu(KLineEdit* self);
void KLineEdit_OnCreateStandardContextMenu(KLineEdit* self, intptr_t slot);
QMenu* KLineEdit_QBaseCreateStandardContextMenu(KLineEdit* self);
void KLineEdit_SetUserSelection(KLineEdit* self, bool userSelection);
void KLineEdit_OnSetUserSelection(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetUserSelection(KLineEdit* self, bool userSelection);
bool KLineEdit_AutoSuggest(const KLineEdit* self);
void KLineEdit_OnAutoSuggest(const KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseAutoSuggest(const KLineEdit* self);
QRect* KLineEdit_CursorRect(const KLineEdit* self);
void KLineEdit_OnCursorRect(const KLineEdit* self, intptr_t slot);
QRect* KLineEdit_QBaseCursorRect(const KLineEdit* self);
void KLineEdit_UpdateMicroFocus(KLineEdit* self);
void KLineEdit_OnUpdateMicroFocus(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseUpdateMicroFocus(KLineEdit* self);
void KLineEdit_Create(KLineEdit* self);
void KLineEdit_OnCreate(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseCreate(KLineEdit* self);
void KLineEdit_Destroy(KLineEdit* self);
void KLineEdit_OnDestroy(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseDestroy(KLineEdit* self);
bool KLineEdit_FocusNextChild(KLineEdit* self);
void KLineEdit_OnFocusNextChild(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseFocusNextChild(KLineEdit* self);
bool KLineEdit_FocusPreviousChild(KLineEdit* self);
void KLineEdit_OnFocusPreviousChild(KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseFocusPreviousChild(KLineEdit* self);
QObject* KLineEdit_Sender(const KLineEdit* self);
void KLineEdit_OnSender(const KLineEdit* self, intptr_t slot);
QObject* KLineEdit_QBaseSender(const KLineEdit* self);
int KLineEdit_SenderSignalIndex(const KLineEdit* self);
void KLineEdit_OnSenderSignalIndex(const KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseSenderSignalIndex(const KLineEdit* self);
int KLineEdit_Receivers(const KLineEdit* self, const char* signal);
void KLineEdit_OnReceivers(const KLineEdit* self, intptr_t slot);
int KLineEdit_QBaseReceivers(const KLineEdit* self, const char* signal);
bool KLineEdit_IsSignalConnected(const KLineEdit* self, const QMetaMethod* signal);
void KLineEdit_OnIsSignalConnected(const KLineEdit* self, intptr_t slot);
bool KLineEdit_QBaseIsSignalConnected(const KLineEdit* self, const QMetaMethod* signal);
double KLineEdit_GetDecodedMetricF(const KLineEdit* self, int metricA, int metricB);
void KLineEdit_OnGetDecodedMetricF(const KLineEdit* self, intptr_t slot);
double KLineEdit_QBaseGetDecodedMetricF(const KLineEdit* self, int metricA, int metricB);
libqt_map /* of int to libqt_list  of QKeySequence*  */ KLineEdit_KeyBindingMap(const KLineEdit* self);
void KLineEdit_OnKeyBindingMap(const KLineEdit* self, intptr_t slot);
libqt_map /* of int to libqt_list  of QKeySequence*  */ KLineEdit_QBaseKeyBindingMap(const KLineEdit* self);
void KLineEdit_SetKeyBindingMap(KLineEdit* self, libqt_map /* of int to libqt_list  of QKeySequence*  */ keyBindingMap);
void KLineEdit_OnSetKeyBindingMap(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetKeyBindingMap(KLineEdit* self, libqt_map /* of int to libqt_list  of QKeySequence*  */ keyBindingMap);
void KLineEdit_SetDelegate(KLineEdit* self, KCompletionBase* delegate);
void KLineEdit_OnSetDelegate(KLineEdit* self, intptr_t slot);
void KLineEdit_QBaseSetDelegate(KLineEdit* self, KCompletionBase* delegate);
KCompletionBase* KLineEdit_Delegate(const KLineEdit* self);
void KLineEdit_OnDelegate(const KLineEdit* self, intptr_t slot);
KCompletionBase* KLineEdit_QBaseDelegate(const KLineEdit* self);
void KLineEdit_Delete(KLineEdit* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
