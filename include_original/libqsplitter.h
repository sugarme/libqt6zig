#pragma once
#ifndef SRCC_LIBQSPLITTER_H
#define SRCC_LIBQSPLITTER_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QSplitter QSplitter;
typedef struct QSplitterHandle QSplitterHandle;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

QSplitter* QSplitter_new(QWidget* parent);
QSplitter* QSplitter_new2();
QSplitter* QSplitter_new3(int param1);
QSplitter* QSplitter_new4(int param1, QWidget* parent);
QMetaObject* QSplitter_MetaObject(const QSplitter* self);
void* QSplitter_Metacast(QSplitter* self, const char* param1);
int QSplitter_Metacall(QSplitter* self, int param1, int param2, void** param3);
libqt_string QSplitter_Tr(const char* s);
void QSplitter_AddWidget(QSplitter* self, QWidget* widget);
void QSplitter_InsertWidget(QSplitter* self, int index, QWidget* widget);
QWidget* QSplitter_ReplaceWidget(QSplitter* self, int index, QWidget* widget);
void QSplitter_SetOrientation(QSplitter* self, int orientation);
int QSplitter_Orientation(const QSplitter* self);
void QSplitter_SetChildrenCollapsible(QSplitter* self, bool childrenCollapsible);
bool QSplitter_ChildrenCollapsible(const QSplitter* self);
void QSplitter_SetCollapsible(QSplitter* self, int index, bool param2);
bool QSplitter_IsCollapsible(const QSplitter* self, int index);
void QSplitter_SetOpaqueResize(QSplitter* self);
bool QSplitter_OpaqueResize(const QSplitter* self);
void QSplitter_Refresh(QSplitter* self);
QSize* QSplitter_SizeHint(const QSplitter* self);
QSize* QSplitter_MinimumSizeHint(const QSplitter* self);
libqt_list /* of int */ QSplitter_Sizes(const QSplitter* self);
void QSplitter_SetSizes(QSplitter* self, const libqt_list /* of int */ list);
libqt_string QSplitter_SaveState(const QSplitter* self);
bool QSplitter_RestoreState(QSplitter* self, const libqt_string state);
int QSplitter_HandleWidth(const QSplitter* self);
void QSplitter_SetHandleWidth(QSplitter* self, int handleWidth);
int QSplitter_IndexOf(const QSplitter* self, QWidget* w);
QWidget* QSplitter_Widget(const QSplitter* self, int index);
int QSplitter_Count(const QSplitter* self);
void QSplitter_GetRange(const QSplitter* self, int index, int* param2, int* param3);
QSplitterHandle* QSplitter_Handle(const QSplitter* self, int index);
void QSplitter_SetStretchFactor(QSplitter* self, int index, int stretch);
void QSplitter_SplitterMoved(QSplitter* self, int pos, int index);
void QSplitter_Connect_SplitterMoved(QSplitter* self, intptr_t slot);
QSplitterHandle* QSplitter_CreateHandle(QSplitter* self);
void QSplitter_ChildEvent(QSplitter* self, QChildEvent* param1);
bool QSplitter_Event(QSplitter* self, QEvent* param1);
void QSplitter_ResizeEvent(QSplitter* self, QResizeEvent* param1);
void QSplitter_ChangeEvent(QSplitter* self, QEvent* param1);
libqt_string QSplitter_Tr2(const char* s, const char* c);
libqt_string QSplitter_Tr3(const char* s, const char* c, int n);
void QSplitter_SetOpaqueResize1(QSplitter* self, bool opaqueVal);
void QSplitter_OnMetacall(QSplitter* self, intptr_t slot);
int QSplitter_QBaseMetacall(QSplitter* self, int param1, int param2, void** param3);
void QSplitter_OnSizeHint(const QSplitter* self, intptr_t slot);
QSize* QSplitter_QBaseSizeHint(const QSplitter* self);
void QSplitter_OnMinimumSizeHint(const QSplitter* self, intptr_t slot);
QSize* QSplitter_QBaseMinimumSizeHint(const QSplitter* self);
void QSplitter_OnCreateHandle(QSplitter* self, intptr_t slot);
QSplitterHandle* QSplitter_QBaseCreateHandle(QSplitter* self);
void QSplitter_OnChildEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseChildEvent(QSplitter* self, QChildEvent* param1);
void QSplitter_OnEvent(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseEvent(QSplitter* self, QEvent* param1);
void QSplitter_OnResizeEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseResizeEvent(QSplitter* self, QResizeEvent* param1);
void QSplitter_OnChangeEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseChangeEvent(QSplitter* self, QEvent* param1);
void QSplitter_PaintEvent(QSplitter* self, QPaintEvent* param1);
void QSplitter_OnPaintEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBasePaintEvent(QSplitter* self, QPaintEvent* param1);
void QSplitter_InitStyleOption(const QSplitter* self, QStyleOptionFrame* option);
void QSplitter_OnInitStyleOption(const QSplitter* self, intptr_t slot);
void QSplitter_QBaseInitStyleOption(const QSplitter* self, QStyleOptionFrame* option);
int QSplitter_DevType(const QSplitter* self);
void QSplitter_OnDevType(const QSplitter* self, intptr_t slot);
int QSplitter_QBaseDevType(const QSplitter* self);
void QSplitter_SetVisible(QSplitter* self, bool visible);
void QSplitter_OnSetVisible(QSplitter* self, intptr_t slot);
void QSplitter_QBaseSetVisible(QSplitter* self, bool visible);
int QSplitter_HeightForWidth(const QSplitter* self, int param1);
void QSplitter_OnHeightForWidth(const QSplitter* self, intptr_t slot);
int QSplitter_QBaseHeightForWidth(const QSplitter* self, int param1);
bool QSplitter_HasHeightForWidth(const QSplitter* self);
void QSplitter_OnHasHeightForWidth(const QSplitter* self, intptr_t slot);
bool QSplitter_QBaseHasHeightForWidth(const QSplitter* self);
QPaintEngine* QSplitter_PaintEngine(const QSplitter* self);
void QSplitter_OnPaintEngine(const QSplitter* self, intptr_t slot);
QPaintEngine* QSplitter_QBasePaintEngine(const QSplitter* self);
void QSplitter_MousePressEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_OnMousePressEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMousePressEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_MouseReleaseEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_OnMouseReleaseEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMouseReleaseEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_MouseDoubleClickEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_OnMouseDoubleClickEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMouseDoubleClickEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_MouseMoveEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_OnMouseMoveEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMouseMoveEvent(QSplitter* self, QMouseEvent* event);
void QSplitter_WheelEvent(QSplitter* self, QWheelEvent* event);
void QSplitter_OnWheelEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseWheelEvent(QSplitter* self, QWheelEvent* event);
void QSplitter_KeyPressEvent(QSplitter* self, QKeyEvent* event);
void QSplitter_OnKeyPressEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseKeyPressEvent(QSplitter* self, QKeyEvent* event);
void QSplitter_KeyReleaseEvent(QSplitter* self, QKeyEvent* event);
void QSplitter_OnKeyReleaseEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseKeyReleaseEvent(QSplitter* self, QKeyEvent* event);
void QSplitter_FocusInEvent(QSplitter* self, QFocusEvent* event);
void QSplitter_OnFocusInEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseFocusInEvent(QSplitter* self, QFocusEvent* event);
void QSplitter_FocusOutEvent(QSplitter* self, QFocusEvent* event);
void QSplitter_OnFocusOutEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseFocusOutEvent(QSplitter* self, QFocusEvent* event);
void QSplitter_EnterEvent(QSplitter* self, QEnterEvent* event);
void QSplitter_OnEnterEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseEnterEvent(QSplitter* self, QEnterEvent* event);
void QSplitter_LeaveEvent(QSplitter* self, QEvent* event);
void QSplitter_OnLeaveEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseLeaveEvent(QSplitter* self, QEvent* event);
void QSplitter_MoveEvent(QSplitter* self, QMoveEvent* event);
void QSplitter_OnMoveEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMoveEvent(QSplitter* self, QMoveEvent* event);
void QSplitter_CloseEvent(QSplitter* self, QCloseEvent* event);
void QSplitter_OnCloseEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseCloseEvent(QSplitter* self, QCloseEvent* event);
void QSplitter_ContextMenuEvent(QSplitter* self, QContextMenuEvent* event);
void QSplitter_OnContextMenuEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseContextMenuEvent(QSplitter* self, QContextMenuEvent* event);
void QSplitter_TabletEvent(QSplitter* self, QTabletEvent* event);
void QSplitter_OnTabletEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseTabletEvent(QSplitter* self, QTabletEvent* event);
void QSplitter_ActionEvent(QSplitter* self, QActionEvent* event);
void QSplitter_OnActionEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseActionEvent(QSplitter* self, QActionEvent* event);
void QSplitter_DragEnterEvent(QSplitter* self, QDragEnterEvent* event);
void QSplitter_OnDragEnterEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDragEnterEvent(QSplitter* self, QDragEnterEvent* event);
void QSplitter_DragMoveEvent(QSplitter* self, QDragMoveEvent* event);
void QSplitter_OnDragMoveEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDragMoveEvent(QSplitter* self, QDragMoveEvent* event);
void QSplitter_DragLeaveEvent(QSplitter* self, QDragLeaveEvent* event);
void QSplitter_OnDragLeaveEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDragLeaveEvent(QSplitter* self, QDragLeaveEvent* event);
void QSplitter_DropEvent(QSplitter* self, QDropEvent* event);
void QSplitter_OnDropEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDropEvent(QSplitter* self, QDropEvent* event);
void QSplitter_ShowEvent(QSplitter* self, QShowEvent* event);
void QSplitter_OnShowEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseShowEvent(QSplitter* self, QShowEvent* event);
void QSplitter_HideEvent(QSplitter* self, QHideEvent* event);
void QSplitter_OnHideEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseHideEvent(QSplitter* self, QHideEvent* event);
bool QSplitter_NativeEvent(QSplitter* self, const libqt_string eventType, void* message, intptr_t* result);
void QSplitter_OnNativeEvent(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseNativeEvent(QSplitter* self, const libqt_string eventType, void* message, intptr_t* result);
int QSplitter_Metric(const QSplitter* self, int param1);
void QSplitter_OnMetric(const QSplitter* self, intptr_t slot);
int QSplitter_QBaseMetric(const QSplitter* self, int param1);
void QSplitter_InitPainter(const QSplitter* self, QPainter* painter);
void QSplitter_OnInitPainter(const QSplitter* self, intptr_t slot);
void QSplitter_QBaseInitPainter(const QSplitter* self, QPainter* painter);
QPaintDevice* QSplitter_Redirected(const QSplitter* self, QPoint* offset);
void QSplitter_OnRedirected(const QSplitter* self, intptr_t slot);
QPaintDevice* QSplitter_QBaseRedirected(const QSplitter* self, QPoint* offset);
QPainter* QSplitter_SharedPainter(const QSplitter* self);
void QSplitter_OnSharedPainter(const QSplitter* self, intptr_t slot);
QPainter* QSplitter_QBaseSharedPainter(const QSplitter* self);
void QSplitter_InputMethodEvent(QSplitter* self, QInputMethodEvent* param1);
void QSplitter_OnInputMethodEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseInputMethodEvent(QSplitter* self, QInputMethodEvent* param1);
QVariant* QSplitter_InputMethodQuery(const QSplitter* self, int param1);
void QSplitter_OnInputMethodQuery(const QSplitter* self, intptr_t slot);
QVariant* QSplitter_QBaseInputMethodQuery(const QSplitter* self, int param1);
bool QSplitter_FocusNextPrevChild(QSplitter* self, bool next);
void QSplitter_OnFocusNextPrevChild(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseFocusNextPrevChild(QSplitter* self, bool next);
bool QSplitter_EventFilter(QSplitter* self, QObject* watched, QEvent* event);
void QSplitter_OnEventFilter(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseEventFilter(QSplitter* self, QObject* watched, QEvent* event);
void QSplitter_TimerEvent(QSplitter* self, QTimerEvent* event);
void QSplitter_OnTimerEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseTimerEvent(QSplitter* self, QTimerEvent* event);
void QSplitter_CustomEvent(QSplitter* self, QEvent* event);
void QSplitter_OnCustomEvent(QSplitter* self, intptr_t slot);
void QSplitter_QBaseCustomEvent(QSplitter* self, QEvent* event);
void QSplitter_ConnectNotify(QSplitter* self, const QMetaMethod* signal);
void QSplitter_OnConnectNotify(QSplitter* self, intptr_t slot);
void QSplitter_QBaseConnectNotify(QSplitter* self, const QMetaMethod* signal);
void QSplitter_DisconnectNotify(QSplitter* self, const QMetaMethod* signal);
void QSplitter_OnDisconnectNotify(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDisconnectNotify(QSplitter* self, const QMetaMethod* signal);
void QSplitter_MoveSplitter(QSplitter* self, int pos, int index);
void QSplitter_OnMoveSplitter(QSplitter* self, intptr_t slot);
void QSplitter_QBaseMoveSplitter(QSplitter* self, int pos, int index);
void QSplitter_SetRubberBand(QSplitter* self, int position);
void QSplitter_OnSetRubberBand(QSplitter* self, intptr_t slot);
void QSplitter_QBaseSetRubberBand(QSplitter* self, int position);
int QSplitter_ClosestLegalPosition(QSplitter* self, int param1, int param2);
void QSplitter_OnClosestLegalPosition(QSplitter* self, intptr_t slot);
int QSplitter_QBaseClosestLegalPosition(QSplitter* self, int param1, int param2);
void QSplitter_DrawFrame(QSplitter* self, QPainter* param1);
void QSplitter_OnDrawFrame(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDrawFrame(QSplitter* self, QPainter* param1);
void QSplitter_UpdateMicroFocus(QSplitter* self);
void QSplitter_OnUpdateMicroFocus(QSplitter* self, intptr_t slot);
void QSplitter_QBaseUpdateMicroFocus(QSplitter* self);
void QSplitter_Create(QSplitter* self);
void QSplitter_OnCreate(QSplitter* self, intptr_t slot);
void QSplitter_QBaseCreate(QSplitter* self);
void QSplitter_Destroy(QSplitter* self);
void QSplitter_OnDestroy(QSplitter* self, intptr_t slot);
void QSplitter_QBaseDestroy(QSplitter* self);
bool QSplitter_FocusNextChild(QSplitter* self);
void QSplitter_OnFocusNextChild(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseFocusNextChild(QSplitter* self);
bool QSplitter_FocusPreviousChild(QSplitter* self);
void QSplitter_OnFocusPreviousChild(QSplitter* self, intptr_t slot);
bool QSplitter_QBaseFocusPreviousChild(QSplitter* self);
QObject* QSplitter_Sender(const QSplitter* self);
void QSplitter_OnSender(const QSplitter* self, intptr_t slot);
QObject* QSplitter_QBaseSender(const QSplitter* self);
int QSplitter_SenderSignalIndex(const QSplitter* self);
void QSplitter_OnSenderSignalIndex(const QSplitter* self, intptr_t slot);
int QSplitter_QBaseSenderSignalIndex(const QSplitter* self);
int QSplitter_Receivers(const QSplitter* self, const char* signal);
void QSplitter_OnReceivers(const QSplitter* self, intptr_t slot);
int QSplitter_QBaseReceivers(const QSplitter* self, const char* signal);
bool QSplitter_IsSignalConnected(const QSplitter* self, const QMetaMethod* signal);
void QSplitter_OnIsSignalConnected(const QSplitter* self, intptr_t slot);
bool QSplitter_QBaseIsSignalConnected(const QSplitter* self, const QMetaMethod* signal);
double QSplitter_GetDecodedMetricF(const QSplitter* self, int metricA, int metricB);
void QSplitter_OnGetDecodedMetricF(const QSplitter* self, intptr_t slot);
double QSplitter_QBaseGetDecodedMetricF(const QSplitter* self, int metricA, int metricB);
void QSplitter_Delete(QSplitter* self);

QSplitterHandle* QSplitterHandle_new(int o, QSplitter* parent);
QMetaObject* QSplitterHandle_MetaObject(const QSplitterHandle* self);
void* QSplitterHandle_Metacast(QSplitterHandle* self, const char* param1);
int QSplitterHandle_Metacall(QSplitterHandle* self, int param1, int param2, void** param3);
libqt_string QSplitterHandle_Tr(const char* s);
void QSplitterHandle_SetOrientation(QSplitterHandle* self, int o);
int QSplitterHandle_Orientation(const QSplitterHandle* self);
bool QSplitterHandle_OpaqueResize(const QSplitterHandle* self);
QSplitter* QSplitterHandle_Splitter(const QSplitterHandle* self);
QSize* QSplitterHandle_SizeHint(const QSplitterHandle* self);
void QSplitterHandle_PaintEvent(QSplitterHandle* self, QPaintEvent* param1);
void QSplitterHandle_MouseMoveEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_MousePressEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_MouseReleaseEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_ResizeEvent(QSplitterHandle* self, QResizeEvent* param1);
bool QSplitterHandle_Event(QSplitterHandle* self, QEvent* param1);
libqt_string QSplitterHandle_Tr2(const char* s, const char* c);
libqt_string QSplitterHandle_Tr3(const char* s, const char* c, int n);
void QSplitterHandle_OnMetacall(QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseMetacall(QSplitterHandle* self, int param1, int param2, void** param3);
void QSplitterHandle_OnSizeHint(const QSplitterHandle* self, intptr_t slot);
QSize* QSplitterHandle_QBaseSizeHint(const QSplitterHandle* self);
void QSplitterHandle_OnPaintEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBasePaintEvent(QSplitterHandle* self, QPaintEvent* param1);
void QSplitterHandle_OnMouseMoveEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMouseMoveEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_OnMousePressEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMousePressEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_OnMouseReleaseEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMouseReleaseEvent(QSplitterHandle* self, QMouseEvent* param1);
void QSplitterHandle_OnResizeEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseResizeEvent(QSplitterHandle* self, QResizeEvent* param1);
void QSplitterHandle_OnEvent(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseEvent(QSplitterHandle* self, QEvent* param1);
int QSplitterHandle_DevType(const QSplitterHandle* self);
void QSplitterHandle_OnDevType(const QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseDevType(const QSplitterHandle* self);
void QSplitterHandle_SetVisible(QSplitterHandle* self, bool visible);
void QSplitterHandle_OnSetVisible(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseSetVisible(QSplitterHandle* self, bool visible);
QSize* QSplitterHandle_MinimumSizeHint(const QSplitterHandle* self);
void QSplitterHandle_OnMinimumSizeHint(const QSplitterHandle* self, intptr_t slot);
QSize* QSplitterHandle_QBaseMinimumSizeHint(const QSplitterHandle* self);
int QSplitterHandle_HeightForWidth(const QSplitterHandle* self, int param1);
void QSplitterHandle_OnHeightForWidth(const QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseHeightForWidth(const QSplitterHandle* self, int param1);
bool QSplitterHandle_HasHeightForWidth(const QSplitterHandle* self);
void QSplitterHandle_OnHasHeightForWidth(const QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseHasHeightForWidth(const QSplitterHandle* self);
QPaintEngine* QSplitterHandle_PaintEngine(const QSplitterHandle* self);
void QSplitterHandle_OnPaintEngine(const QSplitterHandle* self, intptr_t slot);
QPaintEngine* QSplitterHandle_QBasePaintEngine(const QSplitterHandle* self);
void QSplitterHandle_MouseDoubleClickEvent(QSplitterHandle* self, QMouseEvent* event);
void QSplitterHandle_OnMouseDoubleClickEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMouseDoubleClickEvent(QSplitterHandle* self, QMouseEvent* event);
void QSplitterHandle_WheelEvent(QSplitterHandle* self, QWheelEvent* event);
void QSplitterHandle_OnWheelEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseWheelEvent(QSplitterHandle* self, QWheelEvent* event);
void QSplitterHandle_KeyPressEvent(QSplitterHandle* self, QKeyEvent* event);
void QSplitterHandle_OnKeyPressEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseKeyPressEvent(QSplitterHandle* self, QKeyEvent* event);
void QSplitterHandle_KeyReleaseEvent(QSplitterHandle* self, QKeyEvent* event);
void QSplitterHandle_OnKeyReleaseEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseKeyReleaseEvent(QSplitterHandle* self, QKeyEvent* event);
void QSplitterHandle_FocusInEvent(QSplitterHandle* self, QFocusEvent* event);
void QSplitterHandle_OnFocusInEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseFocusInEvent(QSplitterHandle* self, QFocusEvent* event);
void QSplitterHandle_FocusOutEvent(QSplitterHandle* self, QFocusEvent* event);
void QSplitterHandle_OnFocusOutEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseFocusOutEvent(QSplitterHandle* self, QFocusEvent* event);
void QSplitterHandle_EnterEvent(QSplitterHandle* self, QEnterEvent* event);
void QSplitterHandle_OnEnterEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseEnterEvent(QSplitterHandle* self, QEnterEvent* event);
void QSplitterHandle_LeaveEvent(QSplitterHandle* self, QEvent* event);
void QSplitterHandle_OnLeaveEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseLeaveEvent(QSplitterHandle* self, QEvent* event);
void QSplitterHandle_MoveEvent(QSplitterHandle* self, QMoveEvent* event);
void QSplitterHandle_OnMoveEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMoveEvent(QSplitterHandle* self, QMoveEvent* event);
void QSplitterHandle_CloseEvent(QSplitterHandle* self, QCloseEvent* event);
void QSplitterHandle_OnCloseEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseCloseEvent(QSplitterHandle* self, QCloseEvent* event);
void QSplitterHandle_ContextMenuEvent(QSplitterHandle* self, QContextMenuEvent* event);
void QSplitterHandle_OnContextMenuEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseContextMenuEvent(QSplitterHandle* self, QContextMenuEvent* event);
void QSplitterHandle_TabletEvent(QSplitterHandle* self, QTabletEvent* event);
void QSplitterHandle_OnTabletEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseTabletEvent(QSplitterHandle* self, QTabletEvent* event);
void QSplitterHandle_ActionEvent(QSplitterHandle* self, QActionEvent* event);
void QSplitterHandle_OnActionEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseActionEvent(QSplitterHandle* self, QActionEvent* event);
void QSplitterHandle_DragEnterEvent(QSplitterHandle* self, QDragEnterEvent* event);
void QSplitterHandle_OnDragEnterEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDragEnterEvent(QSplitterHandle* self, QDragEnterEvent* event);
void QSplitterHandle_DragMoveEvent(QSplitterHandle* self, QDragMoveEvent* event);
void QSplitterHandle_OnDragMoveEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDragMoveEvent(QSplitterHandle* self, QDragMoveEvent* event);
void QSplitterHandle_DragLeaveEvent(QSplitterHandle* self, QDragLeaveEvent* event);
void QSplitterHandle_OnDragLeaveEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDragLeaveEvent(QSplitterHandle* self, QDragLeaveEvent* event);
void QSplitterHandle_DropEvent(QSplitterHandle* self, QDropEvent* event);
void QSplitterHandle_OnDropEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDropEvent(QSplitterHandle* self, QDropEvent* event);
void QSplitterHandle_ShowEvent(QSplitterHandle* self, QShowEvent* event);
void QSplitterHandle_OnShowEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseShowEvent(QSplitterHandle* self, QShowEvent* event);
void QSplitterHandle_HideEvent(QSplitterHandle* self, QHideEvent* event);
void QSplitterHandle_OnHideEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseHideEvent(QSplitterHandle* self, QHideEvent* event);
bool QSplitterHandle_NativeEvent(QSplitterHandle* self, const libqt_string eventType, void* message, intptr_t* result);
void QSplitterHandle_OnNativeEvent(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseNativeEvent(QSplitterHandle* self, const libqt_string eventType, void* message, intptr_t* result);
void QSplitterHandle_ChangeEvent(QSplitterHandle* self, QEvent* param1);
void QSplitterHandle_OnChangeEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseChangeEvent(QSplitterHandle* self, QEvent* param1);
int QSplitterHandle_Metric(const QSplitterHandle* self, int param1);
void QSplitterHandle_OnMetric(const QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseMetric(const QSplitterHandle* self, int param1);
void QSplitterHandle_InitPainter(const QSplitterHandle* self, QPainter* painter);
void QSplitterHandle_OnInitPainter(const QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseInitPainter(const QSplitterHandle* self, QPainter* painter);
QPaintDevice* QSplitterHandle_Redirected(const QSplitterHandle* self, QPoint* offset);
void QSplitterHandle_OnRedirected(const QSplitterHandle* self, intptr_t slot);
QPaintDevice* QSplitterHandle_QBaseRedirected(const QSplitterHandle* self, QPoint* offset);
QPainter* QSplitterHandle_SharedPainter(const QSplitterHandle* self);
void QSplitterHandle_OnSharedPainter(const QSplitterHandle* self, intptr_t slot);
QPainter* QSplitterHandle_QBaseSharedPainter(const QSplitterHandle* self);
void QSplitterHandle_InputMethodEvent(QSplitterHandle* self, QInputMethodEvent* param1);
void QSplitterHandle_OnInputMethodEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseInputMethodEvent(QSplitterHandle* self, QInputMethodEvent* param1);
QVariant* QSplitterHandle_InputMethodQuery(const QSplitterHandle* self, int param1);
void QSplitterHandle_OnInputMethodQuery(const QSplitterHandle* self, intptr_t slot);
QVariant* QSplitterHandle_QBaseInputMethodQuery(const QSplitterHandle* self, int param1);
bool QSplitterHandle_FocusNextPrevChild(QSplitterHandle* self, bool next);
void QSplitterHandle_OnFocusNextPrevChild(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseFocusNextPrevChild(QSplitterHandle* self, bool next);
bool QSplitterHandle_EventFilter(QSplitterHandle* self, QObject* watched, QEvent* event);
void QSplitterHandle_OnEventFilter(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseEventFilter(QSplitterHandle* self, QObject* watched, QEvent* event);
void QSplitterHandle_TimerEvent(QSplitterHandle* self, QTimerEvent* event);
void QSplitterHandle_OnTimerEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseTimerEvent(QSplitterHandle* self, QTimerEvent* event);
void QSplitterHandle_ChildEvent(QSplitterHandle* self, QChildEvent* event);
void QSplitterHandle_OnChildEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseChildEvent(QSplitterHandle* self, QChildEvent* event);
void QSplitterHandle_CustomEvent(QSplitterHandle* self, QEvent* event);
void QSplitterHandle_OnCustomEvent(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseCustomEvent(QSplitterHandle* self, QEvent* event);
void QSplitterHandle_ConnectNotify(QSplitterHandle* self, const QMetaMethod* signal);
void QSplitterHandle_OnConnectNotify(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseConnectNotify(QSplitterHandle* self, const QMetaMethod* signal);
void QSplitterHandle_DisconnectNotify(QSplitterHandle* self, const QMetaMethod* signal);
void QSplitterHandle_OnDisconnectNotify(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDisconnectNotify(QSplitterHandle* self, const QMetaMethod* signal);
void QSplitterHandle_MoveSplitter(QSplitterHandle* self, int p);
void QSplitterHandle_OnMoveSplitter(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseMoveSplitter(QSplitterHandle* self, int p);
int QSplitterHandle_ClosestLegalPosition(QSplitterHandle* self, int p);
void QSplitterHandle_OnClosestLegalPosition(QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseClosestLegalPosition(QSplitterHandle* self, int p);
void QSplitterHandle_UpdateMicroFocus(QSplitterHandle* self);
void QSplitterHandle_OnUpdateMicroFocus(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseUpdateMicroFocus(QSplitterHandle* self);
void QSplitterHandle_Create(QSplitterHandle* self);
void QSplitterHandle_OnCreate(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseCreate(QSplitterHandle* self);
void QSplitterHandle_Destroy(QSplitterHandle* self);
void QSplitterHandle_OnDestroy(QSplitterHandle* self, intptr_t slot);
void QSplitterHandle_QBaseDestroy(QSplitterHandle* self);
bool QSplitterHandle_FocusNextChild(QSplitterHandle* self);
void QSplitterHandle_OnFocusNextChild(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseFocusNextChild(QSplitterHandle* self);
bool QSplitterHandle_FocusPreviousChild(QSplitterHandle* self);
void QSplitterHandle_OnFocusPreviousChild(QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseFocusPreviousChild(QSplitterHandle* self);
QObject* QSplitterHandle_Sender(const QSplitterHandle* self);
void QSplitterHandle_OnSender(const QSplitterHandle* self, intptr_t slot);
QObject* QSplitterHandle_QBaseSender(const QSplitterHandle* self);
int QSplitterHandle_SenderSignalIndex(const QSplitterHandle* self);
void QSplitterHandle_OnSenderSignalIndex(const QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseSenderSignalIndex(const QSplitterHandle* self);
int QSplitterHandle_Receivers(const QSplitterHandle* self, const char* signal);
void QSplitterHandle_OnReceivers(const QSplitterHandle* self, intptr_t slot);
int QSplitterHandle_QBaseReceivers(const QSplitterHandle* self, const char* signal);
bool QSplitterHandle_IsSignalConnected(const QSplitterHandle* self, const QMetaMethod* signal);
void QSplitterHandle_OnIsSignalConnected(const QSplitterHandle* self, intptr_t slot);
bool QSplitterHandle_QBaseIsSignalConnected(const QSplitterHandle* self, const QMetaMethod* signal);
double QSplitterHandle_GetDecodedMetricF(const QSplitterHandle* self, int metricA, int metricB);
void QSplitterHandle_OnGetDecodedMetricF(const QSplitterHandle* self, intptr_t slot);
double QSplitterHandle_QBaseGetDecodedMetricF(const QSplitterHandle* self, int metricA, int metricB);
void QSplitterHandle_Delete(QSplitterHandle* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
