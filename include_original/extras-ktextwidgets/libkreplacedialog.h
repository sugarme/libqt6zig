#pragma once
#ifndef SRC_EXTRAS_KTEXTWIDGETSC_LIBKREPLACEDIALOG_H
#define SRC_EXTRAS_KTEXTWIDGETSC_LIBKREPLACEDIALOG_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KFindDialog KFindDialog;
typedef struct KReplaceDialog KReplaceDialog;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDialog QDialog;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KReplaceDialog* KReplaceDialog_new(QWidget* parent);
KReplaceDialog* KReplaceDialog_new2();
KReplaceDialog* KReplaceDialog_new3(QWidget* parent, long options);
KReplaceDialog* KReplaceDialog_new4(QWidget* parent, long options, const libqt_list /* of libqt_string */ findStrings);
KReplaceDialog* KReplaceDialog_new5(QWidget* parent, long options, const libqt_list /* of libqt_string */ findStrings, const libqt_list /* of libqt_string */ replaceStrings);
KReplaceDialog* KReplaceDialog_new6(QWidget* parent, long options, const libqt_list /* of libqt_string */ findStrings, const libqt_list /* of libqt_string */ replaceStrings, bool hasSelection);
QMetaObject* KReplaceDialog_MetaObject(const KReplaceDialog* self);
void* KReplaceDialog_Metacast(KReplaceDialog* self, const char* param1);
int KReplaceDialog_Metacall(KReplaceDialog* self, int param1, int param2, void** param3);
libqt_string KReplaceDialog_Tr(const char* s);
void KReplaceDialog_SetReplacementHistory(KReplaceDialog* self, const libqt_list /* of libqt_string */ history);
libqt_list /* of libqt_string */ KReplaceDialog_ReplacementHistory(const KReplaceDialog* self);
void KReplaceDialog_SetOptions(KReplaceDialog* self, long options);
long KReplaceDialog_Options(const KReplaceDialog* self);
libqt_string KReplaceDialog_Replacement(const KReplaceDialog* self);
QWidget* KReplaceDialog_ReplaceExtension(const KReplaceDialog* self);
void KReplaceDialog_ShowEvent(KReplaceDialog* self, QShowEvent* param1);
libqt_string KReplaceDialog_Tr2(const char* s, const char* c);
libqt_string KReplaceDialog_Tr3(const char* s, const char* c, int n);
void KReplaceDialog_OnMetacall(KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseMetacall(KReplaceDialog* self, int param1, int param2, void** param3);
void KReplaceDialog_OnShowEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseShowEvent(KReplaceDialog* self, QShowEvent* param1);
void KReplaceDialog_SetVisible(KReplaceDialog* self, bool visible);
void KReplaceDialog_OnSetVisible(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseSetVisible(KReplaceDialog* self, bool visible);
QSize* KReplaceDialog_SizeHint(const KReplaceDialog* self);
void KReplaceDialog_OnSizeHint(const KReplaceDialog* self, intptr_t slot);
QSize* KReplaceDialog_QBaseSizeHint(const KReplaceDialog* self);
QSize* KReplaceDialog_MinimumSizeHint(const KReplaceDialog* self);
void KReplaceDialog_OnMinimumSizeHint(const KReplaceDialog* self, intptr_t slot);
QSize* KReplaceDialog_QBaseMinimumSizeHint(const KReplaceDialog* self);
void KReplaceDialog_Open(KReplaceDialog* self);
void KReplaceDialog_OnOpen(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseOpen(KReplaceDialog* self);
int KReplaceDialog_Exec(KReplaceDialog* self);
void KReplaceDialog_OnExec(KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseExec(KReplaceDialog* self);
void KReplaceDialog_Done(KReplaceDialog* self, int param1);
void KReplaceDialog_OnDone(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDone(KReplaceDialog* self, int param1);
void KReplaceDialog_Accept(KReplaceDialog* self);
void KReplaceDialog_OnAccept(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseAccept(KReplaceDialog* self);
void KReplaceDialog_Reject(KReplaceDialog* self);
void KReplaceDialog_OnReject(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseReject(KReplaceDialog* self);
void KReplaceDialog_KeyPressEvent(KReplaceDialog* self, QKeyEvent* param1);
void KReplaceDialog_OnKeyPressEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseKeyPressEvent(KReplaceDialog* self, QKeyEvent* param1);
void KReplaceDialog_CloseEvent(KReplaceDialog* self, QCloseEvent* param1);
void KReplaceDialog_OnCloseEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseCloseEvent(KReplaceDialog* self, QCloseEvent* param1);
void KReplaceDialog_ResizeEvent(KReplaceDialog* self, QResizeEvent* param1);
void KReplaceDialog_OnResizeEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseResizeEvent(KReplaceDialog* self, QResizeEvent* param1);
void KReplaceDialog_ContextMenuEvent(KReplaceDialog* self, QContextMenuEvent* param1);
void KReplaceDialog_OnContextMenuEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseContextMenuEvent(KReplaceDialog* self, QContextMenuEvent* param1);
bool KReplaceDialog_EventFilter(KReplaceDialog* self, QObject* param1, QEvent* param2);
void KReplaceDialog_OnEventFilter(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseEventFilter(KReplaceDialog* self, QObject* param1, QEvent* param2);
int KReplaceDialog_DevType(const KReplaceDialog* self);
void KReplaceDialog_OnDevType(const KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseDevType(const KReplaceDialog* self);
int KReplaceDialog_HeightForWidth(const KReplaceDialog* self, int param1);
void KReplaceDialog_OnHeightForWidth(const KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseHeightForWidth(const KReplaceDialog* self, int param1);
bool KReplaceDialog_HasHeightForWidth(const KReplaceDialog* self);
void KReplaceDialog_OnHasHeightForWidth(const KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseHasHeightForWidth(const KReplaceDialog* self);
QPaintEngine* KReplaceDialog_PaintEngine(const KReplaceDialog* self);
void KReplaceDialog_OnPaintEngine(const KReplaceDialog* self, intptr_t slot);
QPaintEngine* KReplaceDialog_QBasePaintEngine(const KReplaceDialog* self);
bool KReplaceDialog_Event(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_OnEvent(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseEvent(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_MousePressEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_OnMousePressEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseMousePressEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_MouseReleaseEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_OnMouseReleaseEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseMouseReleaseEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_MouseDoubleClickEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_OnMouseDoubleClickEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseMouseDoubleClickEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_MouseMoveEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_OnMouseMoveEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseMouseMoveEvent(KReplaceDialog* self, QMouseEvent* event);
void KReplaceDialog_WheelEvent(KReplaceDialog* self, QWheelEvent* event);
void KReplaceDialog_OnWheelEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseWheelEvent(KReplaceDialog* self, QWheelEvent* event);
void KReplaceDialog_KeyReleaseEvent(KReplaceDialog* self, QKeyEvent* event);
void KReplaceDialog_OnKeyReleaseEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseKeyReleaseEvent(KReplaceDialog* self, QKeyEvent* event);
void KReplaceDialog_FocusInEvent(KReplaceDialog* self, QFocusEvent* event);
void KReplaceDialog_OnFocusInEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseFocusInEvent(KReplaceDialog* self, QFocusEvent* event);
void KReplaceDialog_FocusOutEvent(KReplaceDialog* self, QFocusEvent* event);
void KReplaceDialog_OnFocusOutEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseFocusOutEvent(KReplaceDialog* self, QFocusEvent* event);
void KReplaceDialog_EnterEvent(KReplaceDialog* self, QEnterEvent* event);
void KReplaceDialog_OnEnterEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseEnterEvent(KReplaceDialog* self, QEnterEvent* event);
void KReplaceDialog_LeaveEvent(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_OnLeaveEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseLeaveEvent(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_PaintEvent(KReplaceDialog* self, QPaintEvent* event);
void KReplaceDialog_OnPaintEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBasePaintEvent(KReplaceDialog* self, QPaintEvent* event);
void KReplaceDialog_MoveEvent(KReplaceDialog* self, QMoveEvent* event);
void KReplaceDialog_OnMoveEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseMoveEvent(KReplaceDialog* self, QMoveEvent* event);
void KReplaceDialog_TabletEvent(KReplaceDialog* self, QTabletEvent* event);
void KReplaceDialog_OnTabletEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseTabletEvent(KReplaceDialog* self, QTabletEvent* event);
void KReplaceDialog_ActionEvent(KReplaceDialog* self, QActionEvent* event);
void KReplaceDialog_OnActionEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseActionEvent(KReplaceDialog* self, QActionEvent* event);
void KReplaceDialog_DragEnterEvent(KReplaceDialog* self, QDragEnterEvent* event);
void KReplaceDialog_OnDragEnterEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDragEnterEvent(KReplaceDialog* self, QDragEnterEvent* event);
void KReplaceDialog_DragMoveEvent(KReplaceDialog* self, QDragMoveEvent* event);
void KReplaceDialog_OnDragMoveEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDragMoveEvent(KReplaceDialog* self, QDragMoveEvent* event);
void KReplaceDialog_DragLeaveEvent(KReplaceDialog* self, QDragLeaveEvent* event);
void KReplaceDialog_OnDragLeaveEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDragLeaveEvent(KReplaceDialog* self, QDragLeaveEvent* event);
void KReplaceDialog_DropEvent(KReplaceDialog* self, QDropEvent* event);
void KReplaceDialog_OnDropEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDropEvent(KReplaceDialog* self, QDropEvent* event);
void KReplaceDialog_HideEvent(KReplaceDialog* self, QHideEvent* event);
void KReplaceDialog_OnHideEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseHideEvent(KReplaceDialog* self, QHideEvent* event);
bool KReplaceDialog_NativeEvent(KReplaceDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KReplaceDialog_OnNativeEvent(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseNativeEvent(KReplaceDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KReplaceDialog_ChangeEvent(KReplaceDialog* self, QEvent* param1);
void KReplaceDialog_OnChangeEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseChangeEvent(KReplaceDialog* self, QEvent* param1);
int KReplaceDialog_Metric(const KReplaceDialog* self, int param1);
void KReplaceDialog_OnMetric(const KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseMetric(const KReplaceDialog* self, int param1);
void KReplaceDialog_InitPainter(const KReplaceDialog* self, QPainter* painter);
void KReplaceDialog_OnInitPainter(const KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseInitPainter(const KReplaceDialog* self, QPainter* painter);
QPaintDevice* KReplaceDialog_Redirected(const KReplaceDialog* self, QPoint* offset);
void KReplaceDialog_OnRedirected(const KReplaceDialog* self, intptr_t slot);
QPaintDevice* KReplaceDialog_QBaseRedirected(const KReplaceDialog* self, QPoint* offset);
QPainter* KReplaceDialog_SharedPainter(const KReplaceDialog* self);
void KReplaceDialog_OnSharedPainter(const KReplaceDialog* self, intptr_t slot);
QPainter* KReplaceDialog_QBaseSharedPainter(const KReplaceDialog* self);
void KReplaceDialog_InputMethodEvent(KReplaceDialog* self, QInputMethodEvent* param1);
void KReplaceDialog_OnInputMethodEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseInputMethodEvent(KReplaceDialog* self, QInputMethodEvent* param1);
QVariant* KReplaceDialog_InputMethodQuery(const KReplaceDialog* self, int param1);
void KReplaceDialog_OnInputMethodQuery(const KReplaceDialog* self, intptr_t slot);
QVariant* KReplaceDialog_QBaseInputMethodQuery(const KReplaceDialog* self, int param1);
bool KReplaceDialog_FocusNextPrevChild(KReplaceDialog* self, bool next);
void KReplaceDialog_OnFocusNextPrevChild(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseFocusNextPrevChild(KReplaceDialog* self, bool next);
void KReplaceDialog_TimerEvent(KReplaceDialog* self, QTimerEvent* event);
void KReplaceDialog_OnTimerEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseTimerEvent(KReplaceDialog* self, QTimerEvent* event);
void KReplaceDialog_ChildEvent(KReplaceDialog* self, QChildEvent* event);
void KReplaceDialog_OnChildEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseChildEvent(KReplaceDialog* self, QChildEvent* event);
void KReplaceDialog_CustomEvent(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_OnCustomEvent(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseCustomEvent(KReplaceDialog* self, QEvent* event);
void KReplaceDialog_ConnectNotify(KReplaceDialog* self, const QMetaMethod* signal);
void KReplaceDialog_OnConnectNotify(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseConnectNotify(KReplaceDialog* self, const QMetaMethod* signal);
void KReplaceDialog_DisconnectNotify(KReplaceDialog* self, const QMetaMethod* signal);
void KReplaceDialog_OnDisconnectNotify(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDisconnectNotify(KReplaceDialog* self, const QMetaMethod* signal);
void KReplaceDialog_AdjustPosition(KReplaceDialog* self, QWidget* param1);
void KReplaceDialog_OnAdjustPosition(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseAdjustPosition(KReplaceDialog* self, QWidget* param1);
void KReplaceDialog_UpdateMicroFocus(KReplaceDialog* self);
void KReplaceDialog_OnUpdateMicroFocus(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseUpdateMicroFocus(KReplaceDialog* self);
void KReplaceDialog_Create(KReplaceDialog* self);
void KReplaceDialog_OnCreate(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseCreate(KReplaceDialog* self);
void KReplaceDialog_Destroy(KReplaceDialog* self);
void KReplaceDialog_OnDestroy(KReplaceDialog* self, intptr_t slot);
void KReplaceDialog_QBaseDestroy(KReplaceDialog* self);
bool KReplaceDialog_FocusNextChild(KReplaceDialog* self);
void KReplaceDialog_OnFocusNextChild(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseFocusNextChild(KReplaceDialog* self);
bool KReplaceDialog_FocusPreviousChild(KReplaceDialog* self);
void KReplaceDialog_OnFocusPreviousChild(KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseFocusPreviousChild(KReplaceDialog* self);
QObject* KReplaceDialog_Sender(const KReplaceDialog* self);
void KReplaceDialog_OnSender(const KReplaceDialog* self, intptr_t slot);
QObject* KReplaceDialog_QBaseSender(const KReplaceDialog* self);
int KReplaceDialog_SenderSignalIndex(const KReplaceDialog* self);
void KReplaceDialog_OnSenderSignalIndex(const KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseSenderSignalIndex(const KReplaceDialog* self);
int KReplaceDialog_Receivers(const KReplaceDialog* self, const char* signal);
void KReplaceDialog_OnReceivers(const KReplaceDialog* self, intptr_t slot);
int KReplaceDialog_QBaseReceivers(const KReplaceDialog* self, const char* signal);
bool KReplaceDialog_IsSignalConnected(const KReplaceDialog* self, const QMetaMethod* signal);
void KReplaceDialog_OnIsSignalConnected(const KReplaceDialog* self, intptr_t slot);
bool KReplaceDialog_QBaseIsSignalConnected(const KReplaceDialog* self, const QMetaMethod* signal);
double KReplaceDialog_GetDecodedMetricF(const KReplaceDialog* self, int metricA, int metricB);
void KReplaceDialog_OnGetDecodedMetricF(const KReplaceDialog* self, intptr_t slot);
double KReplaceDialog_QBaseGetDecodedMetricF(const KReplaceDialog* self, int metricA, int metricB);
void KReplaceDialog_Delete(KReplaceDialog* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
