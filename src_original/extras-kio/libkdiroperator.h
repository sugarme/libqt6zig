#pragma once
#ifndef SRC_EXTRAS_KIOC_LIBKDIROPERATOR_H
#define SRC_EXTRAS_KIOC_LIBKDIROPERATOR_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_KIO__CopyJob)
typedef KIO::CopyJob KIO__CopyJob;
#endif
typedef KIO::DeleteJob KIO__DeleteJob;
#else
typedef struct KCompletion KCompletion;
typedef struct KConfigGroup KConfigGroup;
typedef struct KDirLister KDirLister;
typedef struct KDirOperator KDirOperator;
typedef struct KFileItem KFileItem;
typedef struct KFileItemList KFileItemList;
typedef struct KFilePreviewGenerator KFilePreviewGenerator;
typedef struct KIO__CopyJob KIO__CopyJob;
typedef struct KIO__DeleteJob KIO__DeleteJob;
typedef struct KPreviewWidgetBase KPreviewWidgetBase;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAction QAction;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QProgressBar QProgressBar;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KDirOperator* KDirOperator_new();
KDirOperator* KDirOperator_new2(const QUrl* urlName);
KDirOperator* KDirOperator_new3(const QUrl* urlName, QWidget* parent);
QMetaObject* KDirOperator_MetaObject(const KDirOperator* self);
void* KDirOperator_Metacast(KDirOperator* self, const char* param1);
int KDirOperator_Metacall(KDirOperator* self, int param1, int param2, void** param3);
libqt_string KDirOperator_Tr(const char* s);
void KDirOperator_SetShowHiddenFiles(KDirOperator* self, bool s);
bool KDirOperator_ShowHiddenFiles(const KDirOperator* self);
void KDirOperator_Close(KDirOperator* self);
void KDirOperator_SetNameFilter(KDirOperator* self, const libqt_string filter);
libqt_string KDirOperator_NameFilter(const KDirOperator* self);
void KDirOperator_SetMimeFilter(KDirOperator* self, const libqt_list /* of libqt_string */ mimetypes);
libqt_list /* of libqt_string */ KDirOperator_MimeFilter(const KDirOperator* self);
void KDirOperator_SetNewFileMenuSupportedMimeTypes(KDirOperator* self, const libqt_list /* of libqt_string */ mime);
libqt_list /* of libqt_string */ KDirOperator_NewFileMenuSupportedMimeTypes(const KDirOperator* self);
void KDirOperator_SetNewFileMenuSelectDirWhenAlreadyExist(KDirOperator* self, bool selectOnDirExists);
void KDirOperator_ClearFilter(KDirOperator* self);
QUrl* KDirOperator_Url(const KDirOperator* self);
void KDirOperator_SetUrl(KDirOperator* self, const QUrl* url, bool clearforward);
void KDirOperator_SetCurrentItem(KDirOperator* self, const QUrl* url);
void KDirOperator_SetCurrentItem2(KDirOperator* self, const KFileItem* item);
void KDirOperator_SetCurrentItems(KDirOperator* self, const libqt_list /* of QUrl* */ urls);
void KDirOperator_SetCurrentItems2(KDirOperator* self, const KFileItemList* items);
QAbstractItemView* KDirOperator_View(const KDirOperator* self);
void KDirOperator_SetViewMode(KDirOperator* self, int viewKind);
int KDirOperator_ViewMode(const KDirOperator* self);
void KDirOperator_SetSorting(KDirOperator* self, int sorting);
int KDirOperator_Sorting(const KDirOperator* self);
bool KDirOperator_IsRoot(const KDirOperator* self);
KDirLister* KDirOperator_DirLister(const KDirOperator* self);
QProgressBar* KDirOperator_ProgressBar(const KDirOperator* self);
void KDirOperator_SetMode(KDirOperator* self, int m);
int KDirOperator_Mode(const KDirOperator* self);
void KDirOperator_SetPreviewWidget(KDirOperator* self, KPreviewWidgetBase* w);
KFileItemList* KDirOperator_SelectedItems(const KDirOperator* self);
bool KDirOperator_IsSelected(const KDirOperator* self, const KFileItem* item);
int KDirOperator_NumDirs(const KDirOperator* self);
int KDirOperator_NumFiles(const KDirOperator* self);
KCompletion* KDirOperator_CompletionObject(const KDirOperator* self);
KCompletion* KDirOperator_DirCompletionObject(const KDirOperator* self);
QAction* KDirOperator_Action(const KDirOperator* self, int action);
libqt_list /* of QAction* */ KDirOperator_AllActions(const KDirOperator* self);
void KDirOperator_SetViewConfig(KDirOperator* self, KConfigGroup* configGroup);
KConfigGroup* KDirOperator_ViewConfigGroup(const KDirOperator* self);
void KDirOperator_ReadConfig(KDirOperator* self, const KConfigGroup* configGroup);
void KDirOperator_WriteConfig(KDirOperator* self, KConfigGroup* configGroup);
void KDirOperator_SetOnlyDoubleClickSelectsFiles(KDirOperator* self, bool enable);
bool KDirOperator_OnlyDoubleClickSelectsFiles(const KDirOperator* self);
void KDirOperator_SetFollowNewDirectories(KDirOperator* self, bool enable);
bool KDirOperator_FollowNewDirectories(const KDirOperator* self);
void KDirOperator_SetFollowSelectedDirectories(KDirOperator* self, bool enable);
bool KDirOperator_FollowSelectedDirectories(const KDirOperator* self);
KIO__DeleteJob* KDirOperator_Del(KDirOperator* self, const KFileItemList* items, QWidget* parent, bool ask, bool showProgress);
void KDirOperator_ClearHistory(KDirOperator* self);
void KDirOperator_SetEnableDirHighlighting(KDirOperator* self, bool enable);
bool KDirOperator_DirHighlighting(const KDirOperator* self);
bool KDirOperator_DirOnlyMode(const KDirOperator* self);
bool KDirOperator_DirOnlyMode2(unsigned int mode);
void KDirOperator_SetupMenu(KDirOperator* self, int whichActions);
void KDirOperator_SetAcceptDrops(KDirOperator* self, bool b);
void KDirOperator_SetDropOptions(KDirOperator* self, int options);
KIO__CopyJob* KDirOperator_Trash(KDirOperator* self, const KFileItemList* items, QWidget* parent, bool ask, bool showProgress);
KFilePreviewGenerator* KDirOperator_PreviewGenerator(const KDirOperator* self);
void KDirOperator_SetInlinePreviewShown(KDirOperator* self, bool show);
int KDirOperator_DecorationPosition(const KDirOperator* self);
void KDirOperator_SetDecorationPosition(KDirOperator* self, int position);
bool KDirOperator_IsInlinePreviewShown(const KDirOperator* self);
int KDirOperator_IconSize(const KDirOperator* self);
void KDirOperator_SetIsSaving(KDirOperator* self, bool isSaving);
bool KDirOperator_IsSaving(const KDirOperator* self);
libqt_list /* of libqt_string */ KDirOperator_SupportedSchemes(const KDirOperator* self);
void KDirOperator_ShowOpenWithActions(KDirOperator* self, bool enable);
bool KDirOperator_UsingKeyNavigation(KDirOperator* self);
QAbstractItemView* KDirOperator_CreateView(KDirOperator* self, QWidget* parent, int viewKind);
void KDirOperator_SetDirLister(KDirOperator* self, KDirLister* lister);
void KDirOperator_ResizeEvent(KDirOperator* self, QResizeEvent* event);
void KDirOperator_ActivatedMenu(KDirOperator* self, const KFileItem* item, const QPoint* pos);
void KDirOperator_ChangeEvent(KDirOperator* self, QEvent* event);
bool KDirOperator_EventFilter(KDirOperator* self, QObject* watched, QEvent* event);
void KDirOperator_Back(KDirOperator* self);
void KDirOperator_Forward(KDirOperator* self);
void KDirOperator_Home(KDirOperator* self);
void KDirOperator_CdUp(KDirOperator* self);
void KDirOperator_UpdateDir(KDirOperator* self);
void KDirOperator_RereadDir(KDirOperator* self);
void KDirOperator_Mkdir(KDirOperator* self);
void KDirOperator_DeleteSelected(KDirOperator* self);
void KDirOperator_UpdateSelectionDependentActions(KDirOperator* self);
libqt_string KDirOperator_MakeCompletion(KDirOperator* self, const libqt_string param1);
libqt_string KDirOperator_MakeDirCompletion(KDirOperator* self, const libqt_string param1);
void KDirOperator_RenameSelected(KDirOperator* self);
void KDirOperator_TrashSelected(KDirOperator* self);
void KDirOperator_SetIconSize(KDirOperator* self, int value);
void KDirOperator_SetSupportedSchemes(KDirOperator* self, const libqt_list /* of libqt_string */ schemes);
void KDirOperator_SelectDir(KDirOperator* self, const KFileItem* item);
void KDirOperator_UrlEntered(KDirOperator* self, const QUrl* param1);
void KDirOperator_Connect_UrlEntered(KDirOperator* self, intptr_t slot);
void KDirOperator_UpdateInformation(KDirOperator* self, int files, int dirs);
void KDirOperator_Connect_UpdateInformation(KDirOperator* self, intptr_t slot);
void KDirOperator_Completion(KDirOperator* self, const libqt_string param1);
void KDirOperator_Connect_Completion(KDirOperator* self, intptr_t slot);
void KDirOperator_FinishedLoading(KDirOperator* self);
void KDirOperator_Connect_FinishedLoading(KDirOperator* self, intptr_t slot);
void KDirOperator_ViewChanged(KDirOperator* self, QAbstractItemView* newView);
void KDirOperator_Connect_ViewChanged(KDirOperator* self, intptr_t slot);
void KDirOperator_FileHighlighted(KDirOperator* self, const KFileItem* item);
void KDirOperator_Connect_FileHighlighted(KDirOperator* self, intptr_t slot);
void KDirOperator_DirActivated(KDirOperator* self, const KFileItem* item);
void KDirOperator_Connect_DirActivated(KDirOperator* self, intptr_t slot);
void KDirOperator_FileSelected(KDirOperator* self, const KFileItem* item);
void KDirOperator_Connect_FileSelected(KDirOperator* self, intptr_t slot);
void KDirOperator_Dropped(KDirOperator* self, const KFileItem* item, QDropEvent* event, const libqt_list /* of QUrl* */ urls);
void KDirOperator_Connect_Dropped(KDirOperator* self, intptr_t slot);
void KDirOperator_ContextMenuAboutToShow(KDirOperator* self, const KFileItem* item, QMenu* menu);
void KDirOperator_Connect_ContextMenuAboutToShow(KDirOperator* self, intptr_t slot);
void KDirOperator_CurrentIconSizeChanged(KDirOperator* self, int size);
void KDirOperator_Connect_CurrentIconSizeChanged(KDirOperator* self, intptr_t slot);
void KDirOperator_KeyEnterReturnPressed(KDirOperator* self);
void KDirOperator_Connect_KeyEnterReturnPressed(KDirOperator* self, intptr_t slot);
void KDirOperator_RenamingFinished(KDirOperator* self, const libqt_list /* of QUrl* */ urls);
void KDirOperator_Connect_RenamingFinished(KDirOperator* self, intptr_t slot);
libqt_string KDirOperator_Tr2(const char* s, const char* c);
libqt_string KDirOperator_Tr3(const char* s, const char* c, int n);
void KDirOperator_OnMetacall(KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseMetacall(KDirOperator* self, int param1, int param2, void** param3);
void KDirOperator_OnSetShowHiddenFiles(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetShowHiddenFiles(KDirOperator* self, bool s);
void KDirOperator_OnSetUrl(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetUrl(KDirOperator* self, const QUrl* url, bool clearforward);
void KDirOperator_OnSetMode(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetMode(KDirOperator* self, int m);
void KDirOperator_OnSetPreviewWidget(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetPreviewWidget(KDirOperator* self, KPreviewWidgetBase* w);
void KDirOperator_OnSetViewConfig(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetViewConfig(KDirOperator* self, KConfigGroup* configGroup);
void KDirOperator_OnReadConfig(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseReadConfig(KDirOperator* self, const KConfigGroup* configGroup);
void KDirOperator_OnWriteConfig(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseWriteConfig(KDirOperator* self, KConfigGroup* configGroup);
void KDirOperator_OnDel(KDirOperator* self, intptr_t slot);
KIO__DeleteJob* KDirOperator_QBaseDel(KDirOperator* self, const KFileItemList* items, QWidget* parent, bool ask, bool showProgress);
void KDirOperator_OnSetEnableDirHighlighting(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetEnableDirHighlighting(KDirOperator* self, bool enable);
void KDirOperator_OnSetAcceptDrops(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetAcceptDrops(KDirOperator* self, bool b);
void KDirOperator_OnSetDropOptions(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetDropOptions(KDirOperator* self, int options);
void KDirOperator_OnTrash(KDirOperator* self, intptr_t slot);
KIO__CopyJob* KDirOperator_QBaseTrash(KDirOperator* self, const KFileItemList* items, QWidget* parent, bool ask, bool showProgress);
void KDirOperator_OnCreateView(KDirOperator* self, intptr_t slot);
QAbstractItemView* KDirOperator_QBaseCreateView(KDirOperator* self, QWidget* parent, int viewKind);
void KDirOperator_OnSetDirLister(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetDirLister(KDirOperator* self, KDirLister* lister);
void KDirOperator_OnResizeEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseResizeEvent(KDirOperator* self, QResizeEvent* event);
void KDirOperator_OnActivatedMenu(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseActivatedMenu(KDirOperator* self, const KFileItem* item, const QPoint* pos);
void KDirOperator_OnChangeEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseChangeEvent(KDirOperator* self, QEvent* event);
void KDirOperator_OnEventFilter(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseEventFilter(KDirOperator* self, QObject* watched, QEvent* event);
void KDirOperator_OnBack(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseBack(KDirOperator* self);
void KDirOperator_OnForward(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseForward(KDirOperator* self);
void KDirOperator_OnHome(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseHome(KDirOperator* self);
void KDirOperator_OnCdUp(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseCdUp(KDirOperator* self);
void KDirOperator_OnRereadDir(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseRereadDir(KDirOperator* self);
void KDirOperator_OnMkdir(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMkdir(KDirOperator* self);
void KDirOperator_OnDeleteSelected(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDeleteSelected(KDirOperator* self);
void KDirOperator_OnTrashSelected(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseTrashSelected(KDirOperator* self);
void KDirOperator_OnSelectDir(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSelectDir(KDirOperator* self, const KFileItem* item);
int KDirOperator_DevType(const KDirOperator* self);
void KDirOperator_OnDevType(const KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseDevType(const KDirOperator* self);
void KDirOperator_SetVisible(KDirOperator* self, bool visible);
void KDirOperator_OnSetVisible(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetVisible(KDirOperator* self, bool visible);
QSize* KDirOperator_SizeHint(const KDirOperator* self);
void KDirOperator_OnSizeHint(const KDirOperator* self, intptr_t slot);
QSize* KDirOperator_QBaseSizeHint(const KDirOperator* self);
QSize* KDirOperator_MinimumSizeHint(const KDirOperator* self);
void KDirOperator_OnMinimumSizeHint(const KDirOperator* self, intptr_t slot);
QSize* KDirOperator_QBaseMinimumSizeHint(const KDirOperator* self);
int KDirOperator_HeightForWidth(const KDirOperator* self, int param1);
void KDirOperator_OnHeightForWidth(const KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseHeightForWidth(const KDirOperator* self, int param1);
bool KDirOperator_HasHeightForWidth(const KDirOperator* self);
void KDirOperator_OnHasHeightForWidth(const KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseHasHeightForWidth(const KDirOperator* self);
QPaintEngine* KDirOperator_PaintEngine(const KDirOperator* self);
void KDirOperator_OnPaintEngine(const KDirOperator* self, intptr_t slot);
QPaintEngine* KDirOperator_QBasePaintEngine(const KDirOperator* self);
bool KDirOperator_Event(KDirOperator* self, QEvent* event);
void KDirOperator_OnEvent(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseEvent(KDirOperator* self, QEvent* event);
void KDirOperator_MousePressEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_OnMousePressEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMousePressEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_MouseReleaseEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_OnMouseReleaseEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMouseReleaseEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_MouseDoubleClickEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_OnMouseDoubleClickEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMouseDoubleClickEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_MouseMoveEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_OnMouseMoveEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMouseMoveEvent(KDirOperator* self, QMouseEvent* event);
void KDirOperator_WheelEvent(KDirOperator* self, QWheelEvent* event);
void KDirOperator_OnWheelEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseWheelEvent(KDirOperator* self, QWheelEvent* event);
void KDirOperator_KeyPressEvent(KDirOperator* self, QKeyEvent* event);
void KDirOperator_OnKeyPressEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseKeyPressEvent(KDirOperator* self, QKeyEvent* event);
void KDirOperator_KeyReleaseEvent(KDirOperator* self, QKeyEvent* event);
void KDirOperator_OnKeyReleaseEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseKeyReleaseEvent(KDirOperator* self, QKeyEvent* event);
void KDirOperator_FocusInEvent(KDirOperator* self, QFocusEvent* event);
void KDirOperator_OnFocusInEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseFocusInEvent(KDirOperator* self, QFocusEvent* event);
void KDirOperator_FocusOutEvent(KDirOperator* self, QFocusEvent* event);
void KDirOperator_OnFocusOutEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseFocusOutEvent(KDirOperator* self, QFocusEvent* event);
void KDirOperator_EnterEvent(KDirOperator* self, QEnterEvent* event);
void KDirOperator_OnEnterEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseEnterEvent(KDirOperator* self, QEnterEvent* event);
void KDirOperator_LeaveEvent(KDirOperator* self, QEvent* event);
void KDirOperator_OnLeaveEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseLeaveEvent(KDirOperator* self, QEvent* event);
void KDirOperator_PaintEvent(KDirOperator* self, QPaintEvent* event);
void KDirOperator_OnPaintEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBasePaintEvent(KDirOperator* self, QPaintEvent* event);
void KDirOperator_MoveEvent(KDirOperator* self, QMoveEvent* event);
void KDirOperator_OnMoveEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseMoveEvent(KDirOperator* self, QMoveEvent* event);
void KDirOperator_CloseEvent(KDirOperator* self, QCloseEvent* event);
void KDirOperator_OnCloseEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseCloseEvent(KDirOperator* self, QCloseEvent* event);
void KDirOperator_ContextMenuEvent(KDirOperator* self, QContextMenuEvent* event);
void KDirOperator_OnContextMenuEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseContextMenuEvent(KDirOperator* self, QContextMenuEvent* event);
void KDirOperator_TabletEvent(KDirOperator* self, QTabletEvent* event);
void KDirOperator_OnTabletEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseTabletEvent(KDirOperator* self, QTabletEvent* event);
void KDirOperator_ActionEvent(KDirOperator* self, QActionEvent* event);
void KDirOperator_OnActionEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseActionEvent(KDirOperator* self, QActionEvent* event);
void KDirOperator_DragEnterEvent(KDirOperator* self, QDragEnterEvent* event);
void KDirOperator_OnDragEnterEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDragEnterEvent(KDirOperator* self, QDragEnterEvent* event);
void KDirOperator_DragMoveEvent(KDirOperator* self, QDragMoveEvent* event);
void KDirOperator_OnDragMoveEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDragMoveEvent(KDirOperator* self, QDragMoveEvent* event);
void KDirOperator_DragLeaveEvent(KDirOperator* self, QDragLeaveEvent* event);
void KDirOperator_OnDragLeaveEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDragLeaveEvent(KDirOperator* self, QDragLeaveEvent* event);
void KDirOperator_DropEvent(KDirOperator* self, QDropEvent* event);
void KDirOperator_OnDropEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDropEvent(KDirOperator* self, QDropEvent* event);
void KDirOperator_ShowEvent(KDirOperator* self, QShowEvent* event);
void KDirOperator_OnShowEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseShowEvent(KDirOperator* self, QShowEvent* event);
void KDirOperator_HideEvent(KDirOperator* self, QHideEvent* event);
void KDirOperator_OnHideEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseHideEvent(KDirOperator* self, QHideEvent* event);
bool KDirOperator_NativeEvent(KDirOperator* self, const libqt_string eventType, void* message, intptr_t* result);
void KDirOperator_OnNativeEvent(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseNativeEvent(KDirOperator* self, const libqt_string eventType, void* message, intptr_t* result);
int KDirOperator_Metric(const KDirOperator* self, int param1);
void KDirOperator_OnMetric(const KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseMetric(const KDirOperator* self, int param1);
void KDirOperator_InitPainter(const KDirOperator* self, QPainter* painter);
void KDirOperator_OnInitPainter(const KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseInitPainter(const KDirOperator* self, QPainter* painter);
QPaintDevice* KDirOperator_Redirected(const KDirOperator* self, QPoint* offset);
void KDirOperator_OnRedirected(const KDirOperator* self, intptr_t slot);
QPaintDevice* KDirOperator_QBaseRedirected(const KDirOperator* self, QPoint* offset);
QPainter* KDirOperator_SharedPainter(const KDirOperator* self);
void KDirOperator_OnSharedPainter(const KDirOperator* self, intptr_t slot);
QPainter* KDirOperator_QBaseSharedPainter(const KDirOperator* self);
void KDirOperator_InputMethodEvent(KDirOperator* self, QInputMethodEvent* param1);
void KDirOperator_OnInputMethodEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseInputMethodEvent(KDirOperator* self, QInputMethodEvent* param1);
QVariant* KDirOperator_InputMethodQuery(const KDirOperator* self, int param1);
void KDirOperator_OnInputMethodQuery(const KDirOperator* self, intptr_t slot);
QVariant* KDirOperator_QBaseInputMethodQuery(const KDirOperator* self, int param1);
bool KDirOperator_FocusNextPrevChild(KDirOperator* self, bool next);
void KDirOperator_OnFocusNextPrevChild(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseFocusNextPrevChild(KDirOperator* self, bool next);
void KDirOperator_TimerEvent(KDirOperator* self, QTimerEvent* event);
void KDirOperator_OnTimerEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseTimerEvent(KDirOperator* self, QTimerEvent* event);
void KDirOperator_ChildEvent(KDirOperator* self, QChildEvent* event);
void KDirOperator_OnChildEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseChildEvent(KDirOperator* self, QChildEvent* event);
void KDirOperator_CustomEvent(KDirOperator* self, QEvent* event);
void KDirOperator_OnCustomEvent(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseCustomEvent(KDirOperator* self, QEvent* event);
void KDirOperator_ConnectNotify(KDirOperator* self, const QMetaMethod* signal);
void KDirOperator_OnConnectNotify(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseConnectNotify(KDirOperator* self, const QMetaMethod* signal);
void KDirOperator_DisconnectNotify(KDirOperator* self, const QMetaMethod* signal);
void KDirOperator_OnDisconnectNotify(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDisconnectNotify(KDirOperator* self, const QMetaMethod* signal);
void KDirOperator_SetupActions(KDirOperator* self);
void KDirOperator_OnSetupActions(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetupActions(KDirOperator* self);
void KDirOperator_UpdateSortActions(KDirOperator* self);
void KDirOperator_OnUpdateSortActions(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseUpdateSortActions(KDirOperator* self);
void KDirOperator_UpdateViewActions(KDirOperator* self);
void KDirOperator_OnUpdateViewActions(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseUpdateViewActions(KDirOperator* self);
void KDirOperator_SetupMenu2(KDirOperator* self);
void KDirOperator_OnSetupMenu2(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSetupMenu2(KDirOperator* self);
void KDirOperator_PrepareCompletionObjects(KDirOperator* self);
void KDirOperator_OnPrepareCompletionObjects(KDirOperator* self, intptr_t slot);
void KDirOperator_QBasePrepareCompletionObjects(KDirOperator* self);
bool KDirOperator_CheckPreviewSupport(KDirOperator* self);
void KDirOperator_OnCheckPreviewSupport(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseCheckPreviewSupport(KDirOperator* self);
void KDirOperator_ResetCursor(KDirOperator* self);
void KDirOperator_OnResetCursor(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseResetCursor(KDirOperator* self);
void KDirOperator_PathChanged(KDirOperator* self);
void KDirOperator_OnPathChanged(KDirOperator* self, intptr_t slot);
void KDirOperator_QBasePathChanged(KDirOperator* self);
void KDirOperator_SelectFile(KDirOperator* self, const KFileItem* item);
void KDirOperator_OnSelectFile(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSelectFile(KDirOperator* self, const KFileItem* item);
void KDirOperator_HighlightFile(KDirOperator* self, const KFileItem* item);
void KDirOperator_OnHighlightFile(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseHighlightFile(KDirOperator* self, const KFileItem* item);
void KDirOperator_SortByName(KDirOperator* self);
void KDirOperator_OnSortByName(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSortByName(KDirOperator* self);
void KDirOperator_SortBySize(KDirOperator* self);
void KDirOperator_OnSortBySize(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSortBySize(KDirOperator* self);
void KDirOperator_SortByDate(KDirOperator* self);
void KDirOperator_OnSortByDate(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSortByDate(KDirOperator* self);
void KDirOperator_SortByType(KDirOperator* self);
void KDirOperator_OnSortByType(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSortByType(KDirOperator* self);
void KDirOperator_SortReversed(KDirOperator* self);
void KDirOperator_OnSortReversed(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSortReversed(KDirOperator* self);
void KDirOperator_ToggleDirsFirst(KDirOperator* self);
void KDirOperator_OnToggleDirsFirst(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseToggleDirsFirst(KDirOperator* self);
void KDirOperator_ToggleIgnoreCase(KDirOperator* self);
void KDirOperator_OnToggleIgnoreCase(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseToggleIgnoreCase(KDirOperator* self);
void KDirOperator_SlotCompletionMatch(KDirOperator* self, const libqt_string match);
void KDirOperator_OnSlotCompletionMatch(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseSlotCompletionMatch(KDirOperator* self, const libqt_string match);
void KDirOperator_UpdateMicroFocus(KDirOperator* self);
void KDirOperator_OnUpdateMicroFocus(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseUpdateMicroFocus(KDirOperator* self);
void KDirOperator_Create(KDirOperator* self);
void KDirOperator_OnCreate(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseCreate(KDirOperator* self);
void KDirOperator_Destroy(KDirOperator* self);
void KDirOperator_OnDestroy(KDirOperator* self, intptr_t slot);
void KDirOperator_QBaseDestroy(KDirOperator* self);
bool KDirOperator_FocusNextChild(KDirOperator* self);
void KDirOperator_OnFocusNextChild(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseFocusNextChild(KDirOperator* self);
bool KDirOperator_FocusPreviousChild(KDirOperator* self);
void KDirOperator_OnFocusPreviousChild(KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseFocusPreviousChild(KDirOperator* self);
QObject* KDirOperator_Sender(const KDirOperator* self);
void KDirOperator_OnSender(const KDirOperator* self, intptr_t slot);
QObject* KDirOperator_QBaseSender(const KDirOperator* self);
int KDirOperator_SenderSignalIndex(const KDirOperator* self);
void KDirOperator_OnSenderSignalIndex(const KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseSenderSignalIndex(const KDirOperator* self);
int KDirOperator_Receivers(const KDirOperator* self, const char* signal);
void KDirOperator_OnReceivers(const KDirOperator* self, intptr_t slot);
int KDirOperator_QBaseReceivers(const KDirOperator* self, const char* signal);
bool KDirOperator_IsSignalConnected(const KDirOperator* self, const QMetaMethod* signal);
void KDirOperator_OnIsSignalConnected(const KDirOperator* self, intptr_t slot);
bool KDirOperator_QBaseIsSignalConnected(const KDirOperator* self, const QMetaMethod* signal);
double KDirOperator_GetDecodedMetricF(const KDirOperator* self, int metricA, int metricB);
void KDirOperator_OnGetDecodedMetricF(const KDirOperator* self, intptr_t slot);
double KDirOperator_QBaseGetDecodedMetricF(const KDirOperator* self, int metricA, int metricB);
void KDirOperator_Delete(KDirOperator* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
