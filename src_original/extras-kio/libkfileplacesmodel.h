#pragma once
#ifndef SRC_EXTRAS_KIOC_LIBKFILEPLACESMODEL_H
#define SRC_EXTRAS_KIOC_LIBKFILEPLACESMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_Solid__Device)
typedef Solid::Device Solid__Device;
#endif
#else
typedef struct KBookmark KBookmark;
typedef struct KFilePlacesModel KFilePlacesModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAction QAction;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QIcon QIcon;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct Solid__Device Solid__Device;
#endif

KFilePlacesModel* KFilePlacesModel_new();
KFilePlacesModel* KFilePlacesModel_new2(QObject* parent);
QMetaObject* KFilePlacesModel_MetaObject(const KFilePlacesModel* self);
void* KFilePlacesModel_Metacast(KFilePlacesModel* self, const char* param1);
int KFilePlacesModel_Metacall(KFilePlacesModel* self, int param1, int param2, void** param3);
libqt_string KFilePlacesModel_Tr(const char* s);
QUrl* KFilePlacesModel_Url(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_SetupNeeded(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsTeardownAllowed(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsEjectAllowed(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsTeardownOverlayRecommended(const KFilePlacesModel* self, const QModelIndex* index);
int KFilePlacesModel_DeviceAccessibility(const KFilePlacesModel* self, const QModelIndex* index);
QIcon* KFilePlacesModel_Icon(const KFilePlacesModel* self, const QModelIndex* index);
libqt_string KFilePlacesModel_Text(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsHidden(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsGroupHidden(const KFilePlacesModel* self, const int typeVal);
bool KFilePlacesModel_IsGroupHidden2(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_IsDevice(const KFilePlacesModel* self, const QModelIndex* index);
Solid__Device* KFilePlacesModel_DeviceForIndex(const KFilePlacesModel* self, const QModelIndex* index);
KBookmark* KFilePlacesModel_BookmarkForIndex(const KFilePlacesModel* self, const QModelIndex* index);
KBookmark* KFilePlacesModel_BookmarkForUrl(const KFilePlacesModel* self, const QUrl* searchUrl);
int KFilePlacesModel_GroupType(const KFilePlacesModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ KFilePlacesModel_GroupIndexes(const KFilePlacesModel* self, const int typeVal);
QAction* KFilePlacesModel_TeardownActionForIndex(const KFilePlacesModel* self, const QModelIndex* index);
QAction* KFilePlacesModel_EjectActionForIndex(const KFilePlacesModel* self, const QModelIndex* index);
QAction* KFilePlacesModel_PartitionActionForIndex(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_RequestTeardown(KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_RequestEject(KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_RequestSetup(KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_AddPlace(KFilePlacesModel* self, const libqt_string text, const QUrl* url);
void KFilePlacesModel_AddPlace2(KFilePlacesModel* self, const libqt_string text, const QUrl* url, const libqt_string iconName, const libqt_string appName, const QModelIndex* after);
void KFilePlacesModel_EditPlace(KFilePlacesModel* self, const QModelIndex* index, const libqt_string text, const QUrl* url);
void KFilePlacesModel_RemovePlace(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_SetPlaceHidden(KFilePlacesModel* self, const QModelIndex* index, bool hidden);
void KFilePlacesModel_SetGroupHidden(KFilePlacesModel* self, const int typeVal, bool hidden);
bool KFilePlacesModel_MovePlace(KFilePlacesModel* self, int itemRow, int row);
int KFilePlacesModel_HiddenCount(const KFilePlacesModel* self);
QVariant* KFilePlacesModel_Data(const KFilePlacesModel* self, const QModelIndex* index, int role);
QModelIndex* KFilePlacesModel_Index(const KFilePlacesModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* KFilePlacesModel_Parent(const KFilePlacesModel* self, const QModelIndex* child);
libqt_map /* of int to libqt_string */ KFilePlacesModel_RoleNames(const KFilePlacesModel* self);
int KFilePlacesModel_RowCount(const KFilePlacesModel* self, const QModelIndex* parent);
int KFilePlacesModel_ColumnCount(const KFilePlacesModel* self, const QModelIndex* parent);
QModelIndex* KFilePlacesModel_ClosestItem(const KFilePlacesModel* self, const QUrl* url);
int KFilePlacesModel_SupportedDropActions(const KFilePlacesModel* self);
int KFilePlacesModel_Flags(const KFilePlacesModel* self, const QModelIndex* index);
libqt_list /* of libqt_string */ KFilePlacesModel_MimeTypes(const KFilePlacesModel* self);
QMimeData* KFilePlacesModel_MimeData(const KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool KFilePlacesModel_DropMimeData(KFilePlacesModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KFilePlacesModel_Refresh(const KFilePlacesModel* self);
QUrl* KFilePlacesModel_ConvertedUrl(const QUrl* url);
void KFilePlacesModel_SetSupportedSchemes(KFilePlacesModel* self, const libqt_list /* of libqt_string */ schemes);
libqt_list /* of libqt_string */ KFilePlacesModel_SupportedSchemes(const KFilePlacesModel* self);
void KFilePlacesModel_ErrorMessage(KFilePlacesModel* self, const libqt_string message);
void KFilePlacesModel_Connect_ErrorMessage(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_SetupDone(KFilePlacesModel* self, const QModelIndex* index, bool success);
void KFilePlacesModel_Connect_SetupDone(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_TeardownDone(KFilePlacesModel* self, const QModelIndex* index, int errorVal, const QVariant* errorData);
void KFilePlacesModel_Connect_TeardownDone(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_GroupHiddenChanged(KFilePlacesModel* self, int group, bool hidden);
void KFilePlacesModel_Connect_GroupHiddenChanged(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_Reloaded(KFilePlacesModel* self);
void KFilePlacesModel_Connect_Reloaded(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_SupportedSchemesChanged(KFilePlacesModel* self);
void KFilePlacesModel_Connect_SupportedSchemesChanged(KFilePlacesModel* self, intptr_t slot);
libqt_string KFilePlacesModel_Tr2(const char* s, const char* c);
libqt_string KFilePlacesModel_Tr3(const char* s, const char* c, int n);
void KFilePlacesModel_AddPlace3(KFilePlacesModel* self, const libqt_string text, const QUrl* url, const libqt_string iconName);
void KFilePlacesModel_AddPlace4(KFilePlacesModel* self, const libqt_string text, const QUrl* url, const libqt_string iconName, const libqt_string appName);
void KFilePlacesModel_EditPlace4(KFilePlacesModel* self, const QModelIndex* index, const libqt_string text, const QUrl* url, const libqt_string iconName);
void KFilePlacesModel_EditPlace5(KFilePlacesModel* self, const QModelIndex* index, const libqt_string text, const QUrl* url, const libqt_string iconName, const libqt_string appName);
void KFilePlacesModel_OnMetacall(KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseMetacall(KFilePlacesModel* self, int param1, int param2, void** param3);
void KFilePlacesModel_OnData(const KFilePlacesModel* self, intptr_t slot);
QVariant* KFilePlacesModel_QBaseData(const KFilePlacesModel* self, const QModelIndex* index, int role);
void KFilePlacesModel_OnIndex(const KFilePlacesModel* self, intptr_t slot);
QModelIndex* KFilePlacesModel_QBaseIndex(const KFilePlacesModel* self, int row, int column, const QModelIndex* parent);
void KFilePlacesModel_OnParent(const KFilePlacesModel* self, intptr_t slot);
QModelIndex* KFilePlacesModel_QBaseParent(const KFilePlacesModel* self, const QModelIndex* child);
void KFilePlacesModel_OnRoleNames(const KFilePlacesModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KFilePlacesModel_QBaseRoleNames(const KFilePlacesModel* self);
void KFilePlacesModel_OnRowCount(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseRowCount(const KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_OnColumnCount(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseColumnCount(const KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_OnSupportedDropActions(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseSupportedDropActions(const KFilePlacesModel* self);
void KFilePlacesModel_OnFlags(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseFlags(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_OnMimeTypes(const KFilePlacesModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KFilePlacesModel_QBaseMimeTypes(const KFilePlacesModel* self);
void KFilePlacesModel_OnMimeData(const KFilePlacesModel* self, intptr_t slot);
QMimeData* KFilePlacesModel_QBaseMimeData(const KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KFilePlacesModel_OnDropMimeData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseDropMimeData(KFilePlacesModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
QModelIndex* KFilePlacesModel_Sibling(const KFilePlacesModel* self, int row, int column, const QModelIndex* idx);
void KFilePlacesModel_OnSibling(const KFilePlacesModel* self, intptr_t slot);
QModelIndex* KFilePlacesModel_QBaseSibling(const KFilePlacesModel* self, int row, int column, const QModelIndex* idx);
bool KFilePlacesModel_HasChildren(const KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_OnHasChildren(const KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseHasChildren(const KFilePlacesModel* self, const QModelIndex* parent);
bool KFilePlacesModel_SetData(KFilePlacesModel* self, const QModelIndex* index, const QVariant* value, int role);
void KFilePlacesModel_OnSetData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseSetData(KFilePlacesModel* self, const QModelIndex* index, const QVariant* value, int role);
QVariant* KFilePlacesModel_HeaderData(const KFilePlacesModel* self, int section, int orientation, int role);
void KFilePlacesModel_OnHeaderData(const KFilePlacesModel* self, intptr_t slot);
QVariant* KFilePlacesModel_QBaseHeaderData(const KFilePlacesModel* self, int section, int orientation, int role);
bool KFilePlacesModel_SetHeaderData(KFilePlacesModel* self, int section, int orientation, const QVariant* value, int role);
void KFilePlacesModel_OnSetHeaderData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseSetHeaderData(KFilePlacesModel* self, int section, int orientation, const QVariant* value, int role);
libqt_map /* of int to QVariant* */ KFilePlacesModel_ItemData(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_OnItemData(const KFilePlacesModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KFilePlacesModel_QBaseItemData(const KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_SetItemData(KFilePlacesModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KFilePlacesModel_OnSetItemData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseSetItemData(KFilePlacesModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KFilePlacesModel_ClearItemData(KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_OnClearItemData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseClearItemData(KFilePlacesModel* self, const QModelIndex* index);
bool KFilePlacesModel_CanDropMimeData(const KFilePlacesModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KFilePlacesModel_OnCanDropMimeData(const KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseCanDropMimeData(const KFilePlacesModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int KFilePlacesModel_SupportedDragActions(const KFilePlacesModel* self);
void KFilePlacesModel_OnSupportedDragActions(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseSupportedDragActions(const KFilePlacesModel* self);
bool KFilePlacesModel_InsertRows(KFilePlacesModel* self, int row, int count, const QModelIndex* parent);
void KFilePlacesModel_OnInsertRows(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseInsertRows(KFilePlacesModel* self, int row, int count, const QModelIndex* parent);
bool KFilePlacesModel_InsertColumns(KFilePlacesModel* self, int column, int count, const QModelIndex* parent);
void KFilePlacesModel_OnInsertColumns(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseInsertColumns(KFilePlacesModel* self, int column, int count, const QModelIndex* parent);
bool KFilePlacesModel_RemoveRows(KFilePlacesModel* self, int row, int count, const QModelIndex* parent);
void KFilePlacesModel_OnRemoveRows(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseRemoveRows(KFilePlacesModel* self, int row, int count, const QModelIndex* parent);
bool KFilePlacesModel_RemoveColumns(KFilePlacesModel* self, int column, int count, const QModelIndex* parent);
void KFilePlacesModel_OnRemoveColumns(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseRemoveColumns(KFilePlacesModel* self, int column, int count, const QModelIndex* parent);
bool KFilePlacesModel_MoveRows(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KFilePlacesModel_OnMoveRows(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseMoveRows(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KFilePlacesModel_MoveColumns(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KFilePlacesModel_OnMoveColumns(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseMoveColumns(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KFilePlacesModel_FetchMore(KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_OnFetchMore(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseFetchMore(KFilePlacesModel* self, const QModelIndex* parent);
bool KFilePlacesModel_CanFetchMore(const KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_OnCanFetchMore(const KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseCanFetchMore(const KFilePlacesModel* self, const QModelIndex* parent);
void KFilePlacesModel_Sort(KFilePlacesModel* self, int column, int order);
void KFilePlacesModel_OnSort(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseSort(KFilePlacesModel* self, int column, int order);
QModelIndex* KFilePlacesModel_Buddy(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_OnBuddy(const KFilePlacesModel* self, intptr_t slot);
QModelIndex* KFilePlacesModel_QBaseBuddy(const KFilePlacesModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ KFilePlacesModel_Match(const KFilePlacesModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KFilePlacesModel_OnMatch(const KFilePlacesModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KFilePlacesModel_QBaseMatch(const KFilePlacesModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* KFilePlacesModel_Span(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_OnSpan(const KFilePlacesModel* self, intptr_t slot);
QSize* KFilePlacesModel_QBaseSpan(const KFilePlacesModel* self, const QModelIndex* index);
void KFilePlacesModel_MultiData(const KFilePlacesModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KFilePlacesModel_OnMultiData(const KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseMultiData(const KFilePlacesModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
bool KFilePlacesModel_Submit(KFilePlacesModel* self);
void KFilePlacesModel_OnSubmit(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseSubmit(KFilePlacesModel* self);
void KFilePlacesModel_Revert(KFilePlacesModel* self);
void KFilePlacesModel_OnRevert(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseRevert(KFilePlacesModel* self);
void KFilePlacesModel_ResetInternalData(KFilePlacesModel* self);
void KFilePlacesModel_OnResetInternalData(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseResetInternalData(KFilePlacesModel* self);
bool KFilePlacesModel_Event(KFilePlacesModel* self, QEvent* event);
void KFilePlacesModel_OnEvent(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseEvent(KFilePlacesModel* self, QEvent* event);
bool KFilePlacesModel_EventFilter(KFilePlacesModel* self, QObject* watched, QEvent* event);
void KFilePlacesModel_OnEventFilter(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseEventFilter(KFilePlacesModel* self, QObject* watched, QEvent* event);
void KFilePlacesModel_TimerEvent(KFilePlacesModel* self, QTimerEvent* event);
void KFilePlacesModel_OnTimerEvent(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseTimerEvent(KFilePlacesModel* self, QTimerEvent* event);
void KFilePlacesModel_ChildEvent(KFilePlacesModel* self, QChildEvent* event);
void KFilePlacesModel_OnChildEvent(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseChildEvent(KFilePlacesModel* self, QChildEvent* event);
void KFilePlacesModel_CustomEvent(KFilePlacesModel* self, QEvent* event);
void KFilePlacesModel_OnCustomEvent(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseCustomEvent(KFilePlacesModel* self, QEvent* event);
void KFilePlacesModel_ConnectNotify(KFilePlacesModel* self, const QMetaMethod* signal);
void KFilePlacesModel_OnConnectNotify(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseConnectNotify(KFilePlacesModel* self, const QMetaMethod* signal);
void KFilePlacesModel_DisconnectNotify(KFilePlacesModel* self, const QMetaMethod* signal);
void KFilePlacesModel_OnDisconnectNotify(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseDisconnectNotify(KFilePlacesModel* self, const QMetaMethod* signal);
QModelIndex* KFilePlacesModel_CreateIndex(const KFilePlacesModel* self, int row, int column);
void KFilePlacesModel_OnCreateIndex(const KFilePlacesModel* self, intptr_t slot);
QModelIndex* KFilePlacesModel_QBaseCreateIndex(const KFilePlacesModel* self, int row, int column);
void KFilePlacesModel_EncodeData(const KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KFilePlacesModel_OnEncodeData(const KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEncodeData(const KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KFilePlacesModel_DecodeData(KFilePlacesModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KFilePlacesModel_OnDecodeData(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseDecodeData(KFilePlacesModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KFilePlacesModel_BeginInsertRows(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_OnBeginInsertRows(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseBeginInsertRows(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_EndInsertRows(KFilePlacesModel* self);
void KFilePlacesModel_OnEndInsertRows(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndInsertRows(KFilePlacesModel* self);
void KFilePlacesModel_BeginRemoveRows(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_OnBeginRemoveRows(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseBeginRemoveRows(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_EndRemoveRows(KFilePlacesModel* self);
void KFilePlacesModel_OnEndRemoveRows(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndRemoveRows(KFilePlacesModel* self);
bool KFilePlacesModel_BeginMoveRows(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KFilePlacesModel_OnBeginMoveRows(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseBeginMoveRows(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KFilePlacesModel_EndMoveRows(KFilePlacesModel* self);
void KFilePlacesModel_OnEndMoveRows(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndMoveRows(KFilePlacesModel* self);
void KFilePlacesModel_BeginInsertColumns(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_OnBeginInsertColumns(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseBeginInsertColumns(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_EndInsertColumns(KFilePlacesModel* self);
void KFilePlacesModel_OnEndInsertColumns(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndInsertColumns(KFilePlacesModel* self);
void KFilePlacesModel_BeginRemoveColumns(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_OnBeginRemoveColumns(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseBeginRemoveColumns(KFilePlacesModel* self, const QModelIndex* parent, int first, int last);
void KFilePlacesModel_EndRemoveColumns(KFilePlacesModel* self);
void KFilePlacesModel_OnEndRemoveColumns(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndRemoveColumns(KFilePlacesModel* self);
bool KFilePlacesModel_BeginMoveColumns(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KFilePlacesModel_OnBeginMoveColumns(KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseBeginMoveColumns(KFilePlacesModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KFilePlacesModel_EndMoveColumns(KFilePlacesModel* self);
void KFilePlacesModel_OnEndMoveColumns(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndMoveColumns(KFilePlacesModel* self);
void KFilePlacesModel_BeginResetModel(KFilePlacesModel* self);
void KFilePlacesModel_OnBeginResetModel(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseBeginResetModel(KFilePlacesModel* self);
void KFilePlacesModel_EndResetModel(KFilePlacesModel* self);
void KFilePlacesModel_OnEndResetModel(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseEndResetModel(KFilePlacesModel* self);
void KFilePlacesModel_ChangePersistentIndex(KFilePlacesModel* self, const QModelIndex* from, const QModelIndex* to);
void KFilePlacesModel_OnChangePersistentIndex(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseChangePersistentIndex(KFilePlacesModel* self, const QModelIndex* from, const QModelIndex* to);
void KFilePlacesModel_ChangePersistentIndexList(KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KFilePlacesModel_OnChangePersistentIndexList(KFilePlacesModel* self, intptr_t slot);
void KFilePlacesModel_QBaseChangePersistentIndexList(KFilePlacesModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KFilePlacesModel_PersistentIndexList(const KFilePlacesModel* self);
void KFilePlacesModel_OnPersistentIndexList(const KFilePlacesModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KFilePlacesModel_QBasePersistentIndexList(const KFilePlacesModel* self);
QObject* KFilePlacesModel_Sender(const KFilePlacesModel* self);
void KFilePlacesModel_OnSender(const KFilePlacesModel* self, intptr_t slot);
QObject* KFilePlacesModel_QBaseSender(const KFilePlacesModel* self);
int KFilePlacesModel_SenderSignalIndex(const KFilePlacesModel* self);
void KFilePlacesModel_OnSenderSignalIndex(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseSenderSignalIndex(const KFilePlacesModel* self);
int KFilePlacesModel_Receivers(const KFilePlacesModel* self, const char* signal);
void KFilePlacesModel_OnReceivers(const KFilePlacesModel* self, intptr_t slot);
int KFilePlacesModel_QBaseReceivers(const KFilePlacesModel* self, const char* signal);
bool KFilePlacesModel_IsSignalConnected(const KFilePlacesModel* self, const QMetaMethod* signal);
void KFilePlacesModel_OnIsSignalConnected(const KFilePlacesModel* self, intptr_t slot);
bool KFilePlacesModel_QBaseIsSignalConnected(const KFilePlacesModel* self, const QMetaMethod* signal);
void KFilePlacesModel_Delete(KFilePlacesModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
