#pragma once
#ifndef SRC_EXTRAS_KIOC_LIBKPROPERTIESDIALOG_H
#define SRC_EXTRAS_KIOC_LIBKPROPERTIESDIALOG_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KFileItem KFileItem;
typedef struct KFileItemList KFileItemList;
typedef struct KPageDialog KPageDialog;
typedef struct KPageWidget KPageWidget;
typedef struct KPropertiesDialog KPropertiesDialog;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDialog QDialog;
typedef struct QDialogButtonBox QDialogButtonBox;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KPropertiesDialog* KPropertiesDialog_new(const KFileItem* item);
KPropertiesDialog* KPropertiesDialog_new2(const KFileItemList* _items);
KPropertiesDialog* KPropertiesDialog_new3(const QUrl* url);
KPropertiesDialog* KPropertiesDialog_new4(const libqt_list /* of QUrl* */ urls);
KPropertiesDialog* KPropertiesDialog_new5(const QUrl* _tempUrl, const QUrl* _currentDir, const libqt_string _defaultName);
KPropertiesDialog* KPropertiesDialog_new6(const libqt_string title);
KPropertiesDialog* KPropertiesDialog_new7(const KFileItem* item, QWidget* parent);
KPropertiesDialog* KPropertiesDialog_new8(const KFileItemList* _items, QWidget* parent);
KPropertiesDialog* KPropertiesDialog_new9(const QUrl* url, QWidget* parent);
KPropertiesDialog* KPropertiesDialog_new10(const libqt_list /* of QUrl* */ urls, QWidget* parent);
KPropertiesDialog* KPropertiesDialog_new11(const QUrl* _tempUrl, const QUrl* _currentDir, const libqt_string _defaultName, QWidget* parent);
KPropertiesDialog* KPropertiesDialog_new12(const libqt_string title, QWidget* parent);
QMetaObject* KPropertiesDialog_MetaObject(const KPropertiesDialog* self);
void* KPropertiesDialog_Metacast(KPropertiesDialog* self, const char* param1);
int KPropertiesDialog_Metacall(KPropertiesDialog* self, int param1, int param2, void** param3);
libqt_string KPropertiesDialog_Tr(const char* s);
bool KPropertiesDialog_CanDisplay(const KFileItemList* _items);
bool KPropertiesDialog_ShowDialog(const KFileItem* item);
bool KPropertiesDialog_ShowDialog2(const QUrl* _url);
bool KPropertiesDialog_ShowDialog3(const KFileItemList* _items);
bool KPropertiesDialog_ShowDialog4(const libqt_list /* of QUrl* */ urls);
QUrl* KPropertiesDialog_Url(const KPropertiesDialog* self);
KFileItem* KPropertiesDialog_Item(KPropertiesDialog* self);
KFileItemList* KPropertiesDialog_Items(const KPropertiesDialog* self);
QUrl* KPropertiesDialog_CurrentDir(const KPropertiesDialog* self);
libqt_string KPropertiesDialog_DefaultName(const KPropertiesDialog* self);
void KPropertiesDialog_UpdateUrl(KPropertiesDialog* self, const QUrl* newUrl);
void KPropertiesDialog_Rename(KPropertiesDialog* self, const libqt_string _name);
void KPropertiesDialog_AbortApplying(KPropertiesDialog* self);
void KPropertiesDialog_ShowFileSharingPage(KPropertiesDialog* self);
void KPropertiesDialog_SetFileSharingPage(KPropertiesDialog* self, QWidget* page);
void KPropertiesDialog_SetFileNameReadOnly(KPropertiesDialog* self, bool ro);
void KPropertiesDialog_Accept(KPropertiesDialog* self);
void KPropertiesDialog_Reject(KPropertiesDialog* self);
void KPropertiesDialog_PropertiesClosed(KPropertiesDialog* self);
void KPropertiesDialog_Connect_PropertiesClosed(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_Applied(KPropertiesDialog* self);
void KPropertiesDialog_Connect_Applied(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_Canceled(KPropertiesDialog* self);
void KPropertiesDialog_Connect_Canceled(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_SaveAs(KPropertiesDialog* self, const QUrl* oldUrl, QUrl* newUrl);
void KPropertiesDialog_Connect_SaveAs(KPropertiesDialog* self, intptr_t slot);
libqt_string KPropertiesDialog_Tr2(const char* s, const char* c);
libqt_string KPropertiesDialog_Tr3(const char* s, const char* c, int n);
bool KPropertiesDialog_ShowDialog22(const KFileItem* item, QWidget* parent);
bool KPropertiesDialog_ShowDialog32(const KFileItem* item, QWidget* parent, bool modal);
bool KPropertiesDialog_ShowDialog23(const QUrl* _url, QWidget* parent);
bool KPropertiesDialog_ShowDialog33(const QUrl* _url, QWidget* parent, bool modal);
bool KPropertiesDialog_ShowDialog24(const KFileItemList* _items, QWidget* parent);
bool KPropertiesDialog_ShowDialog34(const KFileItemList* _items, QWidget* parent, bool modal);
bool KPropertiesDialog_ShowDialog25(const libqt_list /* of QUrl* */ urls, QWidget* parent);
bool KPropertiesDialog_ShowDialog35(const libqt_list /* of QUrl* */ urls, QWidget* parent, bool modal);
void KPropertiesDialog_OnMetacall(KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseMetacall(KPropertiesDialog* self, int param1, int param2, void** param3);
void KPropertiesDialog_OnAccept(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseAccept(KPropertiesDialog* self);
void KPropertiesDialog_OnReject(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseReject(KPropertiesDialog* self);
void KPropertiesDialog_SetVisible(KPropertiesDialog* self, bool visible);
void KPropertiesDialog_OnSetVisible(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseSetVisible(KPropertiesDialog* self, bool visible);
QSize* KPropertiesDialog_SizeHint(const KPropertiesDialog* self);
void KPropertiesDialog_OnSizeHint(const KPropertiesDialog* self, intptr_t slot);
QSize* KPropertiesDialog_QBaseSizeHint(const KPropertiesDialog* self);
QSize* KPropertiesDialog_MinimumSizeHint(const KPropertiesDialog* self);
void KPropertiesDialog_OnMinimumSizeHint(const KPropertiesDialog* self, intptr_t slot);
QSize* KPropertiesDialog_QBaseMinimumSizeHint(const KPropertiesDialog* self);
void KPropertiesDialog_Open(KPropertiesDialog* self);
void KPropertiesDialog_OnOpen(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseOpen(KPropertiesDialog* self);
int KPropertiesDialog_Exec(KPropertiesDialog* self);
void KPropertiesDialog_OnExec(KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseExec(KPropertiesDialog* self);
void KPropertiesDialog_Done(KPropertiesDialog* self, int param1);
void KPropertiesDialog_OnDone(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDone(KPropertiesDialog* self, int param1);
void KPropertiesDialog_KeyPressEvent(KPropertiesDialog* self, QKeyEvent* param1);
void KPropertiesDialog_OnKeyPressEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseKeyPressEvent(KPropertiesDialog* self, QKeyEvent* param1);
void KPropertiesDialog_CloseEvent(KPropertiesDialog* self, QCloseEvent* param1);
void KPropertiesDialog_OnCloseEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseCloseEvent(KPropertiesDialog* self, QCloseEvent* param1);
void KPropertiesDialog_ShowEvent(KPropertiesDialog* self, QShowEvent* param1);
void KPropertiesDialog_OnShowEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseShowEvent(KPropertiesDialog* self, QShowEvent* param1);
void KPropertiesDialog_ResizeEvent(KPropertiesDialog* self, QResizeEvent* param1);
void KPropertiesDialog_OnResizeEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseResizeEvent(KPropertiesDialog* self, QResizeEvent* param1);
void KPropertiesDialog_ContextMenuEvent(KPropertiesDialog* self, QContextMenuEvent* param1);
void KPropertiesDialog_OnContextMenuEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseContextMenuEvent(KPropertiesDialog* self, QContextMenuEvent* param1);
bool KPropertiesDialog_EventFilter(KPropertiesDialog* self, QObject* param1, QEvent* param2);
void KPropertiesDialog_OnEventFilter(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseEventFilter(KPropertiesDialog* self, QObject* param1, QEvent* param2);
int KPropertiesDialog_DevType(const KPropertiesDialog* self);
void KPropertiesDialog_OnDevType(const KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseDevType(const KPropertiesDialog* self);
int KPropertiesDialog_HeightForWidth(const KPropertiesDialog* self, int param1);
void KPropertiesDialog_OnHeightForWidth(const KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseHeightForWidth(const KPropertiesDialog* self, int param1);
bool KPropertiesDialog_HasHeightForWidth(const KPropertiesDialog* self);
void KPropertiesDialog_OnHasHeightForWidth(const KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseHasHeightForWidth(const KPropertiesDialog* self);
QPaintEngine* KPropertiesDialog_PaintEngine(const KPropertiesDialog* self);
void KPropertiesDialog_OnPaintEngine(const KPropertiesDialog* self, intptr_t slot);
QPaintEngine* KPropertiesDialog_QBasePaintEngine(const KPropertiesDialog* self);
bool KPropertiesDialog_Event(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_OnEvent(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseEvent(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_MousePressEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_OnMousePressEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseMousePressEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_MouseReleaseEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_OnMouseReleaseEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseMouseReleaseEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_MouseDoubleClickEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_OnMouseDoubleClickEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseMouseDoubleClickEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_MouseMoveEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_OnMouseMoveEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseMouseMoveEvent(KPropertiesDialog* self, QMouseEvent* event);
void KPropertiesDialog_WheelEvent(KPropertiesDialog* self, QWheelEvent* event);
void KPropertiesDialog_OnWheelEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseWheelEvent(KPropertiesDialog* self, QWheelEvent* event);
void KPropertiesDialog_KeyReleaseEvent(KPropertiesDialog* self, QKeyEvent* event);
void KPropertiesDialog_OnKeyReleaseEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseKeyReleaseEvent(KPropertiesDialog* self, QKeyEvent* event);
void KPropertiesDialog_FocusInEvent(KPropertiesDialog* self, QFocusEvent* event);
void KPropertiesDialog_OnFocusInEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseFocusInEvent(KPropertiesDialog* self, QFocusEvent* event);
void KPropertiesDialog_FocusOutEvent(KPropertiesDialog* self, QFocusEvent* event);
void KPropertiesDialog_OnFocusOutEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseFocusOutEvent(KPropertiesDialog* self, QFocusEvent* event);
void KPropertiesDialog_EnterEvent(KPropertiesDialog* self, QEnterEvent* event);
void KPropertiesDialog_OnEnterEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseEnterEvent(KPropertiesDialog* self, QEnterEvent* event);
void KPropertiesDialog_LeaveEvent(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_OnLeaveEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseLeaveEvent(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_PaintEvent(KPropertiesDialog* self, QPaintEvent* event);
void KPropertiesDialog_OnPaintEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBasePaintEvent(KPropertiesDialog* self, QPaintEvent* event);
void KPropertiesDialog_MoveEvent(KPropertiesDialog* self, QMoveEvent* event);
void KPropertiesDialog_OnMoveEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseMoveEvent(KPropertiesDialog* self, QMoveEvent* event);
void KPropertiesDialog_TabletEvent(KPropertiesDialog* self, QTabletEvent* event);
void KPropertiesDialog_OnTabletEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseTabletEvent(KPropertiesDialog* self, QTabletEvent* event);
void KPropertiesDialog_ActionEvent(KPropertiesDialog* self, QActionEvent* event);
void KPropertiesDialog_OnActionEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseActionEvent(KPropertiesDialog* self, QActionEvent* event);
void KPropertiesDialog_DragEnterEvent(KPropertiesDialog* self, QDragEnterEvent* event);
void KPropertiesDialog_OnDragEnterEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDragEnterEvent(KPropertiesDialog* self, QDragEnterEvent* event);
void KPropertiesDialog_DragMoveEvent(KPropertiesDialog* self, QDragMoveEvent* event);
void KPropertiesDialog_OnDragMoveEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDragMoveEvent(KPropertiesDialog* self, QDragMoveEvent* event);
void KPropertiesDialog_DragLeaveEvent(KPropertiesDialog* self, QDragLeaveEvent* event);
void KPropertiesDialog_OnDragLeaveEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDragLeaveEvent(KPropertiesDialog* self, QDragLeaveEvent* event);
void KPropertiesDialog_DropEvent(KPropertiesDialog* self, QDropEvent* event);
void KPropertiesDialog_OnDropEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDropEvent(KPropertiesDialog* self, QDropEvent* event);
void KPropertiesDialog_HideEvent(KPropertiesDialog* self, QHideEvent* event);
void KPropertiesDialog_OnHideEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseHideEvent(KPropertiesDialog* self, QHideEvent* event);
bool KPropertiesDialog_NativeEvent(KPropertiesDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KPropertiesDialog_OnNativeEvent(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseNativeEvent(KPropertiesDialog* self, const libqt_string eventType, void* message, intptr_t* result);
void KPropertiesDialog_ChangeEvent(KPropertiesDialog* self, QEvent* param1);
void KPropertiesDialog_OnChangeEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseChangeEvent(KPropertiesDialog* self, QEvent* param1);
int KPropertiesDialog_Metric(const KPropertiesDialog* self, int param1);
void KPropertiesDialog_OnMetric(const KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseMetric(const KPropertiesDialog* self, int param1);
void KPropertiesDialog_InitPainter(const KPropertiesDialog* self, QPainter* painter);
void KPropertiesDialog_OnInitPainter(const KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseInitPainter(const KPropertiesDialog* self, QPainter* painter);
QPaintDevice* KPropertiesDialog_Redirected(const KPropertiesDialog* self, QPoint* offset);
void KPropertiesDialog_OnRedirected(const KPropertiesDialog* self, intptr_t slot);
QPaintDevice* KPropertiesDialog_QBaseRedirected(const KPropertiesDialog* self, QPoint* offset);
QPainter* KPropertiesDialog_SharedPainter(const KPropertiesDialog* self);
void KPropertiesDialog_OnSharedPainter(const KPropertiesDialog* self, intptr_t slot);
QPainter* KPropertiesDialog_QBaseSharedPainter(const KPropertiesDialog* self);
void KPropertiesDialog_InputMethodEvent(KPropertiesDialog* self, QInputMethodEvent* param1);
void KPropertiesDialog_OnInputMethodEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseInputMethodEvent(KPropertiesDialog* self, QInputMethodEvent* param1);
QVariant* KPropertiesDialog_InputMethodQuery(const KPropertiesDialog* self, int param1);
void KPropertiesDialog_OnInputMethodQuery(const KPropertiesDialog* self, intptr_t slot);
QVariant* KPropertiesDialog_QBaseInputMethodQuery(const KPropertiesDialog* self, int param1);
bool KPropertiesDialog_FocusNextPrevChild(KPropertiesDialog* self, bool next);
void KPropertiesDialog_OnFocusNextPrevChild(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseFocusNextPrevChild(KPropertiesDialog* self, bool next);
void KPropertiesDialog_TimerEvent(KPropertiesDialog* self, QTimerEvent* event);
void KPropertiesDialog_OnTimerEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseTimerEvent(KPropertiesDialog* self, QTimerEvent* event);
void KPropertiesDialog_ChildEvent(KPropertiesDialog* self, QChildEvent* event);
void KPropertiesDialog_OnChildEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseChildEvent(KPropertiesDialog* self, QChildEvent* event);
void KPropertiesDialog_CustomEvent(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_OnCustomEvent(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseCustomEvent(KPropertiesDialog* self, QEvent* event);
void KPropertiesDialog_ConnectNotify(KPropertiesDialog* self, const QMetaMethod* signal);
void KPropertiesDialog_OnConnectNotify(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseConnectNotify(KPropertiesDialog* self, const QMetaMethod* signal);
void KPropertiesDialog_DisconnectNotify(KPropertiesDialog* self, const QMetaMethod* signal);
void KPropertiesDialog_OnDisconnectNotify(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDisconnectNotify(KPropertiesDialog* self, const QMetaMethod* signal);
KPageWidget* KPropertiesDialog_PageWidget(KPropertiesDialog* self);
void KPropertiesDialog_OnPageWidget(KPropertiesDialog* self, intptr_t slot);
KPageWidget* KPropertiesDialog_QBasePageWidget(KPropertiesDialog* self);
void KPropertiesDialog_SetPageWidget(KPropertiesDialog* self, KPageWidget* widget);
void KPropertiesDialog_OnSetPageWidget(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseSetPageWidget(KPropertiesDialog* self, KPageWidget* widget);
QDialogButtonBox* KPropertiesDialog_ButtonBox(KPropertiesDialog* self);
void KPropertiesDialog_OnButtonBox(KPropertiesDialog* self, intptr_t slot);
QDialogButtonBox* KPropertiesDialog_QBaseButtonBox(KPropertiesDialog* self);
void KPropertiesDialog_SetButtonBox(KPropertiesDialog* self, QDialogButtonBox* box);
void KPropertiesDialog_OnSetButtonBox(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseSetButtonBox(KPropertiesDialog* self, QDialogButtonBox* box);
void KPropertiesDialog_AdjustPosition(KPropertiesDialog* self, QWidget* param1);
void KPropertiesDialog_OnAdjustPosition(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseAdjustPosition(KPropertiesDialog* self, QWidget* param1);
void KPropertiesDialog_UpdateMicroFocus(KPropertiesDialog* self);
void KPropertiesDialog_OnUpdateMicroFocus(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseUpdateMicroFocus(KPropertiesDialog* self);
void KPropertiesDialog_Create(KPropertiesDialog* self);
void KPropertiesDialog_OnCreate(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseCreate(KPropertiesDialog* self);
void KPropertiesDialog_Destroy(KPropertiesDialog* self);
void KPropertiesDialog_OnDestroy(KPropertiesDialog* self, intptr_t slot);
void KPropertiesDialog_QBaseDestroy(KPropertiesDialog* self);
bool KPropertiesDialog_FocusNextChild(KPropertiesDialog* self);
void KPropertiesDialog_OnFocusNextChild(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseFocusNextChild(KPropertiesDialog* self);
bool KPropertiesDialog_FocusPreviousChild(KPropertiesDialog* self);
void KPropertiesDialog_OnFocusPreviousChild(KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseFocusPreviousChild(KPropertiesDialog* self);
QObject* KPropertiesDialog_Sender(const KPropertiesDialog* self);
void KPropertiesDialog_OnSender(const KPropertiesDialog* self, intptr_t slot);
QObject* KPropertiesDialog_QBaseSender(const KPropertiesDialog* self);
int KPropertiesDialog_SenderSignalIndex(const KPropertiesDialog* self);
void KPropertiesDialog_OnSenderSignalIndex(const KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseSenderSignalIndex(const KPropertiesDialog* self);
int KPropertiesDialog_Receivers(const KPropertiesDialog* self, const char* signal);
void KPropertiesDialog_OnReceivers(const KPropertiesDialog* self, intptr_t slot);
int KPropertiesDialog_QBaseReceivers(const KPropertiesDialog* self, const char* signal);
bool KPropertiesDialog_IsSignalConnected(const KPropertiesDialog* self, const QMetaMethod* signal);
void KPropertiesDialog_OnIsSignalConnected(const KPropertiesDialog* self, intptr_t slot);
bool KPropertiesDialog_QBaseIsSignalConnected(const KPropertiesDialog* self, const QMetaMethod* signal);
double KPropertiesDialog_GetDecodedMetricF(const KPropertiesDialog* self, int metricA, int metricB);
void KPropertiesDialog_OnGetDecodedMetricF(const KPropertiesDialog* self, intptr_t slot);
double KPropertiesDialog_QBaseGetDecodedMetricF(const KPropertiesDialog* self, int metricA, int metricB);
void KPropertiesDialog_Delete(KPropertiesDialog* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
