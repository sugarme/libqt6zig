#pragma once
#ifndef SRC_SQLC_LIBQSQLRELATIONALTABLEMODEL_H
#define SRC_SQLC_LIBQSQLRELATIONALTABLEMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractTableModel QAbstractTableModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QSqlDatabase QSqlDatabase;
typedef struct QSqlError QSqlError;
typedef struct QSqlIndex QSqlIndex;
typedef struct QSqlQueryModel QSqlQueryModel;
typedef struct QSqlRecord QSqlRecord;
typedef struct QSqlRelation QSqlRelation;
typedef struct QSqlRelationalTableModel QSqlRelationalTableModel;
typedef struct QSqlTableModel QSqlTableModel;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QSqlRelation* QSqlRelation_new();
QSqlRelation* QSqlRelation_new2(const libqt_string aTableName, const libqt_string indexCol, const libqt_string displayCol);
QSqlRelation* QSqlRelation_new3(const QSqlRelation* param1);
void QSqlRelation_Swap(QSqlRelation* self, QSqlRelation* other);
libqt_string QSqlRelation_TableName(const QSqlRelation* self);
libqt_string QSqlRelation_IndexColumn(const QSqlRelation* self);
libqt_string QSqlRelation_DisplayColumn(const QSqlRelation* self);
bool QSqlRelation_IsValid(const QSqlRelation* self);
void QSqlRelation_Delete(QSqlRelation* self);

QSqlRelationalTableModel* QSqlRelationalTableModel_new();
QSqlRelationalTableModel* QSqlRelationalTableModel_new2(QObject* parent);
QSqlRelationalTableModel* QSqlRelationalTableModel_new3(QObject* parent, const QSqlDatabase* db);
QMetaObject* QSqlRelationalTableModel_MetaObject(const QSqlRelationalTableModel* self);
void* QSqlRelationalTableModel_Metacast(QSqlRelationalTableModel* self, const char* param1);
int QSqlRelationalTableModel_Metacall(QSqlRelationalTableModel* self, int param1, int param2, void** param3);
libqt_string QSqlRelationalTableModel_Tr(const char* s);
QVariant* QSqlRelationalTableModel_Data(const QSqlRelationalTableModel* self, const QModelIndex* item, int role);
bool QSqlRelationalTableModel_SetData(QSqlRelationalTableModel* self, const QModelIndex* item, const QVariant* value, int role);
bool QSqlRelationalTableModel_RemoveColumns(QSqlRelationalTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_Clear(QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_Select(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_SetTable(QSqlRelationalTableModel* self, const libqt_string tableName);
void QSqlRelationalTableModel_SetRelation(QSqlRelationalTableModel* self, int column, const QSqlRelation* relation);
QSqlRelation* QSqlRelationalTableModel_Relation(const QSqlRelationalTableModel* self, int column);
QSqlTableModel* QSqlRelationalTableModel_RelationModel(const QSqlRelationalTableModel* self, int column);
void QSqlRelationalTableModel_SetJoinMode(QSqlRelationalTableModel* self, int joinMode);
void QSqlRelationalTableModel_RevertRow(QSqlRelationalTableModel* self, int row);
libqt_string QSqlRelationalTableModel_SelectStatement(const QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_UpdateRowInTable(QSqlRelationalTableModel* self, int row, const QSqlRecord* values);
bool QSqlRelationalTableModel_InsertRowIntoTable(QSqlRelationalTableModel* self, const QSqlRecord* values);
libqt_string QSqlRelationalTableModel_OrderByClause(const QSqlRelationalTableModel* self);
libqt_string QSqlRelationalTableModel_Tr2(const char* s, const char* c);
libqt_string QSqlRelationalTableModel_Tr3(const char* s, const char* c, int n);
void QSqlRelationalTableModel_OnMetacall(QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseMetacall(QSqlRelationalTableModel* self, int param1, int param2, void** param3);
void QSqlRelationalTableModel_OnData(const QSqlRelationalTableModel* self, intptr_t slot);
QVariant* QSqlRelationalTableModel_QBaseData(const QSqlRelationalTableModel* self, const QModelIndex* item, int role);
void QSqlRelationalTableModel_OnSetData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSetData(QSqlRelationalTableModel* self, const QModelIndex* item, const QVariant* value, int role);
void QSqlRelationalTableModel_OnRemoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseRemoveColumns(QSqlRelationalTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_OnClear(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseClear(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSelect(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSelect(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSetTable(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetTable(QSqlRelationalTableModel* self, const libqt_string tableName);
void QSqlRelationalTableModel_OnSetRelation(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetRelation(QSqlRelationalTableModel* self, int column, const QSqlRelation* relation);
void QSqlRelationalTableModel_OnRelationModel(const QSqlRelationalTableModel* self, intptr_t slot);
QSqlTableModel* QSqlRelationalTableModel_QBaseRelationModel(const QSqlRelationalTableModel* self, int column);
void QSqlRelationalTableModel_OnRevertRow(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseRevertRow(QSqlRelationalTableModel* self, int row);
void QSqlRelationalTableModel_OnSelectStatement(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_string QSqlRelationalTableModel_QBaseSelectStatement(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnUpdateRowInTable(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseUpdateRowInTable(QSqlRelationalTableModel* self, int row, const QSqlRecord* values);
void QSqlRelationalTableModel_OnInsertRowIntoTable(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseInsertRowIntoTable(QSqlRelationalTableModel* self, const QSqlRecord* values);
void QSqlRelationalTableModel_OnOrderByClause(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_string QSqlRelationalTableModel_QBaseOrderByClause(const QSqlRelationalTableModel* self);
int QSqlRelationalTableModel_Flags(const QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_OnFlags(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseFlags(const QSqlRelationalTableModel* self, const QModelIndex* index);
bool QSqlRelationalTableModel_ClearItemData(QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_OnClearItemData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseClearItemData(QSqlRelationalTableModel* self, const QModelIndex* index);
QVariant* QSqlRelationalTableModel_HeaderData(const QSqlRelationalTableModel* self, int section, int orientation, int role);
void QSqlRelationalTableModel_OnHeaderData(const QSqlRelationalTableModel* self, intptr_t slot);
QVariant* QSqlRelationalTableModel_QBaseHeaderData(const QSqlRelationalTableModel* self, int section, int orientation, int role);
void QSqlRelationalTableModel_SetEditStrategy(QSqlRelationalTableModel* self, int strategy);
void QSqlRelationalTableModel_OnSetEditStrategy(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetEditStrategy(QSqlRelationalTableModel* self, int strategy);
void QSqlRelationalTableModel_Sort(QSqlRelationalTableModel* self, int column, int order);
void QSqlRelationalTableModel_OnSort(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSort(QSqlRelationalTableModel* self, int column, int order);
void QSqlRelationalTableModel_SetSort(QSqlRelationalTableModel* self, int column, int order);
void QSqlRelationalTableModel_OnSetSort(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetSort(QSqlRelationalTableModel* self, int column, int order);
void QSqlRelationalTableModel_SetFilter(QSqlRelationalTableModel* self, const libqt_string filter);
void QSqlRelationalTableModel_OnSetFilter(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetFilter(QSqlRelationalTableModel* self, const libqt_string filter);
int QSqlRelationalTableModel_RowCount(const QSqlRelationalTableModel* self, const QModelIndex* parent);
void QSqlRelationalTableModel_OnRowCount(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseRowCount(const QSqlRelationalTableModel* self, const QModelIndex* parent);
bool QSqlRelationalTableModel_RemoveRows(QSqlRelationalTableModel* self, int row, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_OnRemoveRows(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseRemoveRows(QSqlRelationalTableModel* self, int row, int count, const QModelIndex* parent);
bool QSqlRelationalTableModel_InsertRows(QSqlRelationalTableModel* self, int row, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_OnInsertRows(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseInsertRows(QSqlRelationalTableModel* self, int row, int count, const QModelIndex* parent);
bool QSqlRelationalTableModel_SelectRow(QSqlRelationalTableModel* self, int row);
void QSqlRelationalTableModel_OnSelectRow(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSelectRow(QSqlRelationalTableModel* self, int row);
bool QSqlRelationalTableModel_Submit(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSubmit(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSubmit(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_Revert(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnRevert(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseRevert(QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_DeleteRowFromTable(QSqlRelationalTableModel* self, int row);
void QSqlRelationalTableModel_OnDeleteRowFromTable(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseDeleteRowFromTable(QSqlRelationalTableModel* self, int row);
QModelIndex* QSqlRelationalTableModel_IndexInQuery(const QSqlRelationalTableModel* self, const QModelIndex* item);
void QSqlRelationalTableModel_OnIndexInQuery(const QSqlRelationalTableModel* self, intptr_t slot);
QModelIndex* QSqlRelationalTableModel_QBaseIndexInQuery(const QSqlRelationalTableModel* self, const QModelIndex* item);
int QSqlRelationalTableModel_ColumnCount(const QSqlRelationalTableModel* self, const QModelIndex* parent);
void QSqlRelationalTableModel_OnColumnCount(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseColumnCount(const QSqlRelationalTableModel* self, const QModelIndex* parent);
bool QSqlRelationalTableModel_SetHeaderData(QSqlRelationalTableModel* self, int section, int orientation, const QVariant* value, int role);
void QSqlRelationalTableModel_OnSetHeaderData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSetHeaderData(QSqlRelationalTableModel* self, int section, int orientation, const QVariant* value, int role);
bool QSqlRelationalTableModel_InsertColumns(QSqlRelationalTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_OnInsertColumns(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseInsertColumns(QSqlRelationalTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlRelationalTableModel_FetchMore(QSqlRelationalTableModel* self, const QModelIndex* parent);
void QSqlRelationalTableModel_OnFetchMore(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseFetchMore(QSqlRelationalTableModel* self, const QModelIndex* parent);
bool QSqlRelationalTableModel_CanFetchMore(const QSqlRelationalTableModel* self, const QModelIndex* parent);
void QSqlRelationalTableModel_OnCanFetchMore(const QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseCanFetchMore(const QSqlRelationalTableModel* self, const QModelIndex* parent);
libqt_map /* of int to libqt_string */ QSqlRelationalTableModel_RoleNames(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnRoleNames(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QSqlRelationalTableModel_QBaseRoleNames(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_QueryChange(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnQueryChange(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseQueryChange(QSqlRelationalTableModel* self);
QModelIndex* QSqlRelationalTableModel_Index(const QSqlRelationalTableModel* self, int row, int column, const QModelIndex* parent);
void QSqlRelationalTableModel_OnIndex(const QSqlRelationalTableModel* self, intptr_t slot);
QModelIndex* QSqlRelationalTableModel_QBaseIndex(const QSqlRelationalTableModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* QSqlRelationalTableModel_Sibling(const QSqlRelationalTableModel* self, int row, int column, const QModelIndex* idx);
void QSqlRelationalTableModel_OnSibling(const QSqlRelationalTableModel* self, intptr_t slot);
QModelIndex* QSqlRelationalTableModel_QBaseSibling(const QSqlRelationalTableModel* self, int row, int column, const QModelIndex* idx);
bool QSqlRelationalTableModel_DropMimeData(QSqlRelationalTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QSqlRelationalTableModel_OnDropMimeData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseDropMimeData(QSqlRelationalTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
libqt_map /* of int to QVariant* */ QSqlRelationalTableModel_ItemData(const QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_OnItemData(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QSqlRelationalTableModel_QBaseItemData(const QSqlRelationalTableModel* self, const QModelIndex* index);
bool QSqlRelationalTableModel_SetItemData(QSqlRelationalTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void QSqlRelationalTableModel_OnSetItemData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseSetItemData(QSqlRelationalTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
libqt_list /* of libqt_string */ QSqlRelationalTableModel_MimeTypes(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnMimeTypes(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QSqlRelationalTableModel_QBaseMimeTypes(const QSqlRelationalTableModel* self);
QMimeData* QSqlRelationalTableModel_MimeData(const QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
void QSqlRelationalTableModel_OnMimeData(const QSqlRelationalTableModel* self, intptr_t slot);
QMimeData* QSqlRelationalTableModel_QBaseMimeData(const QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool QSqlRelationalTableModel_CanDropMimeData(const QSqlRelationalTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QSqlRelationalTableModel_OnCanDropMimeData(const QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseCanDropMimeData(const QSqlRelationalTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QSqlRelationalTableModel_SupportedDropActions(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSupportedDropActions(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseSupportedDropActions(const QSqlRelationalTableModel* self);
int QSqlRelationalTableModel_SupportedDragActions(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSupportedDragActions(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseSupportedDragActions(const QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_MoveRows(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void QSqlRelationalTableModel_OnMoveRows(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseMoveRows(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool QSqlRelationalTableModel_MoveColumns(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QSqlRelationalTableModel_OnMoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseMoveColumns(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
QModelIndex* QSqlRelationalTableModel_Buddy(const QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_OnBuddy(const QSqlRelationalTableModel* self, intptr_t slot);
QModelIndex* QSqlRelationalTableModel_QBaseBuddy(const QSqlRelationalTableModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ QSqlRelationalTableModel_Match(const QSqlRelationalTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void QSqlRelationalTableModel_OnMatch(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSqlRelationalTableModel_QBaseMatch(const QSqlRelationalTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* QSqlRelationalTableModel_Span(const QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_OnSpan(const QSqlRelationalTableModel* self, intptr_t slot);
QSize* QSqlRelationalTableModel_QBaseSpan(const QSqlRelationalTableModel* self, const QModelIndex* index);
void QSqlRelationalTableModel_MultiData(const QSqlRelationalTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSqlRelationalTableModel_OnMultiData(const QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseMultiData(const QSqlRelationalTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSqlRelationalTableModel_ResetInternalData(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnResetInternalData(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseResetInternalData(QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_Event(QSqlRelationalTableModel* self, QEvent* event);
void QSqlRelationalTableModel_OnEvent(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseEvent(QSqlRelationalTableModel* self, QEvent* event);
bool QSqlRelationalTableModel_EventFilter(QSqlRelationalTableModel* self, QObject* watched, QEvent* event);
void QSqlRelationalTableModel_OnEventFilter(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseEventFilter(QSqlRelationalTableModel* self, QObject* watched, QEvent* event);
void QSqlRelationalTableModel_TimerEvent(QSqlRelationalTableModel* self, QTimerEvent* event);
void QSqlRelationalTableModel_OnTimerEvent(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseTimerEvent(QSqlRelationalTableModel* self, QTimerEvent* event);
void QSqlRelationalTableModel_ChildEvent(QSqlRelationalTableModel* self, QChildEvent* event);
void QSqlRelationalTableModel_OnChildEvent(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseChildEvent(QSqlRelationalTableModel* self, QChildEvent* event);
void QSqlRelationalTableModel_CustomEvent(QSqlRelationalTableModel* self, QEvent* event);
void QSqlRelationalTableModel_OnCustomEvent(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseCustomEvent(QSqlRelationalTableModel* self, QEvent* event);
void QSqlRelationalTableModel_ConnectNotify(QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_OnConnectNotify(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseConnectNotify(QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_DisconnectNotify(QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_OnDisconnectNotify(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseDisconnectNotify(QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_SetPrimaryKey(QSqlRelationalTableModel* self, const QSqlIndex* key);
void QSqlRelationalTableModel_OnSetPrimaryKey(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetPrimaryKey(QSqlRelationalTableModel* self, const QSqlIndex* key);
QSqlRecord* QSqlRelationalTableModel_PrimaryValues(const QSqlRelationalTableModel* self, int row);
void QSqlRelationalTableModel_OnPrimaryValues(const QSqlRelationalTableModel* self, intptr_t slot);
QSqlRecord* QSqlRelationalTableModel_QBasePrimaryValues(const QSqlRelationalTableModel* self, int row);
void QSqlRelationalTableModel_BeginInsertRows(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_OnBeginInsertRows(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseBeginInsertRows(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_EndInsertRows(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndInsertRows(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndInsertRows(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_BeginRemoveRows(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_OnBeginRemoveRows(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseBeginRemoveRows(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_EndRemoveRows(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndRemoveRows(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndRemoveRows(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_BeginInsertColumns(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_OnBeginInsertColumns(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseBeginInsertColumns(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_EndInsertColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndInsertColumns(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndInsertColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_BeginRemoveColumns(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_OnBeginRemoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseBeginRemoveColumns(QSqlRelationalTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlRelationalTableModel_EndRemoveColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndRemoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndRemoveColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_BeginResetModel(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnBeginResetModel(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseBeginResetModel(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_EndResetModel(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndResetModel(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndResetModel(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_SetLastError(QSqlRelationalTableModel* self, const QSqlError* errorVal);
void QSqlRelationalTableModel_OnSetLastError(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseSetLastError(QSqlRelationalTableModel* self, const QSqlError* errorVal);
QModelIndex* QSqlRelationalTableModel_CreateIndex(const QSqlRelationalTableModel* self, int row, int column);
void QSqlRelationalTableModel_OnCreateIndex(const QSqlRelationalTableModel* self, intptr_t slot);
QModelIndex* QSqlRelationalTableModel_QBaseCreateIndex(const QSqlRelationalTableModel* self, int row, int column);
void QSqlRelationalTableModel_EncodeData(const QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QSqlRelationalTableModel_OnEncodeData(const QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEncodeData(const QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QSqlRelationalTableModel_DecodeData(QSqlRelationalTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QSqlRelationalTableModel_OnDecodeData(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseDecodeData(QSqlRelationalTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
bool QSqlRelationalTableModel_BeginMoveRows(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QSqlRelationalTableModel_OnBeginMoveRows(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseBeginMoveRows(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QSqlRelationalTableModel_EndMoveRows(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndMoveRows(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndMoveRows(QSqlRelationalTableModel* self);
bool QSqlRelationalTableModel_BeginMoveColumns(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QSqlRelationalTableModel_OnBeginMoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseBeginMoveColumns(QSqlRelationalTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QSqlRelationalTableModel_EndMoveColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnEndMoveColumns(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseEndMoveColumns(QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_ChangePersistentIndex(QSqlRelationalTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QSqlRelationalTableModel_OnChangePersistentIndex(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseChangePersistentIndex(QSqlRelationalTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QSqlRelationalTableModel_ChangePersistentIndexList(QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void QSqlRelationalTableModel_OnChangePersistentIndexList(QSqlRelationalTableModel* self, intptr_t slot);
void QSqlRelationalTableModel_QBaseChangePersistentIndexList(QSqlRelationalTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QSqlRelationalTableModel_PersistentIndexList(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnPersistentIndexList(const QSqlRelationalTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSqlRelationalTableModel_QBasePersistentIndexList(const QSqlRelationalTableModel* self);
QObject* QSqlRelationalTableModel_Sender(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSender(const QSqlRelationalTableModel* self, intptr_t slot);
QObject* QSqlRelationalTableModel_QBaseSender(const QSqlRelationalTableModel* self);
int QSqlRelationalTableModel_SenderSignalIndex(const QSqlRelationalTableModel* self);
void QSqlRelationalTableModel_OnSenderSignalIndex(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseSenderSignalIndex(const QSqlRelationalTableModel* self);
int QSqlRelationalTableModel_Receivers(const QSqlRelationalTableModel* self, const char* signal);
void QSqlRelationalTableModel_OnReceivers(const QSqlRelationalTableModel* self, intptr_t slot);
int QSqlRelationalTableModel_QBaseReceivers(const QSqlRelationalTableModel* self, const char* signal);
bool QSqlRelationalTableModel_IsSignalConnected(const QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_OnIsSignalConnected(const QSqlRelationalTableModel* self, intptr_t slot);
bool QSqlRelationalTableModel_QBaseIsSignalConnected(const QSqlRelationalTableModel* self, const QMetaMethod* signal);
void QSqlRelationalTableModel_Delete(QSqlRelationalTableModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
