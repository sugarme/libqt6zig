#pragma once
#ifndef SRC_SQLC_LIBQSQLTABLEMODEL_H
#define SRC_SQLC_LIBQSQLTABLEMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractTableModel QAbstractTableModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QSqlDatabase QSqlDatabase;
typedef struct QSqlError QSqlError;
typedef struct QSqlIndex QSqlIndex;
typedef struct QSqlQueryModel QSqlQueryModel;
typedef struct QSqlRecord QSqlRecord;
typedef struct QSqlTableModel QSqlTableModel;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QSqlTableModel* QSqlTableModel_new();
QSqlTableModel* QSqlTableModel_new2(QObject* parent);
QSqlTableModel* QSqlTableModel_new3(QObject* parent, const QSqlDatabase* db);
QMetaObject* QSqlTableModel_MetaObject(const QSqlTableModel* self);
void* QSqlTableModel_Metacast(QSqlTableModel* self, const char* param1);
int QSqlTableModel_Metacall(QSqlTableModel* self, int param1, int param2, void** param3);
libqt_string QSqlTableModel_Tr(const char* s);
void QSqlTableModel_SetTable(QSqlTableModel* self, const libqt_string tableName);
libqt_string QSqlTableModel_TableName(const QSqlTableModel* self);
int QSqlTableModel_Flags(const QSqlTableModel* self, const QModelIndex* index);
QSqlRecord* QSqlTableModel_Record(const QSqlTableModel* self);
QSqlRecord* QSqlTableModel_Record2(const QSqlTableModel* self, int row);
QVariant* QSqlTableModel_Data(const QSqlTableModel* self, const QModelIndex* idx, int role);
bool QSqlTableModel_SetData(QSqlTableModel* self, const QModelIndex* index, const QVariant* value, int role);
bool QSqlTableModel_ClearItemData(QSqlTableModel* self, const QModelIndex* index);
QVariant* QSqlTableModel_HeaderData(const QSqlTableModel* self, int section, int orientation, int role);
bool QSqlTableModel_IsDirty(const QSqlTableModel* self);
bool QSqlTableModel_IsDirty2(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_Clear(QSqlTableModel* self);
void QSqlTableModel_SetEditStrategy(QSqlTableModel* self, int strategy);
int QSqlTableModel_EditStrategy(const QSqlTableModel* self);
QSqlIndex* QSqlTableModel_PrimaryKey(const QSqlTableModel* self);
QSqlDatabase* QSqlTableModel_Database(const QSqlTableModel* self);
int QSqlTableModel_FieldIndex(const QSqlTableModel* self, const libqt_string fieldName);
void QSqlTableModel_Sort(QSqlTableModel* self, int column, int order);
void QSqlTableModel_SetSort(QSqlTableModel* self, int column, int order);
libqt_string QSqlTableModel_Filter(const QSqlTableModel* self);
void QSqlTableModel_SetFilter(QSqlTableModel* self, const libqt_string filter);
int QSqlTableModel_RowCount(const QSqlTableModel* self, const QModelIndex* parent);
bool QSqlTableModel_RemoveColumns(QSqlTableModel* self, int column, int count, const QModelIndex* parent);
bool QSqlTableModel_RemoveRows(QSqlTableModel* self, int row, int count, const QModelIndex* parent);
bool QSqlTableModel_InsertRows(QSqlTableModel* self, int row, int count, const QModelIndex* parent);
bool QSqlTableModel_InsertRecord(QSqlTableModel* self, int row, const QSqlRecord* record);
bool QSqlTableModel_SetRecord(QSqlTableModel* self, int row, const QSqlRecord* record);
void QSqlTableModel_RevertRow(QSqlTableModel* self, int row);
bool QSqlTableModel_Select(QSqlTableModel* self);
bool QSqlTableModel_SelectRow(QSqlTableModel* self, int row);
bool QSqlTableModel_Submit(QSqlTableModel* self);
void QSqlTableModel_Revert(QSqlTableModel* self);
bool QSqlTableModel_SubmitAll(QSqlTableModel* self);
void QSqlTableModel_RevertAll(QSqlTableModel* self);
void QSqlTableModel_PrimeInsert(QSqlTableModel* self, int row, QSqlRecord* record);
void QSqlTableModel_Connect_PrimeInsert(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_BeforeInsert(QSqlTableModel* self, QSqlRecord* record);
void QSqlTableModel_Connect_BeforeInsert(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_BeforeUpdate(QSqlTableModel* self, int row, QSqlRecord* record);
void QSqlTableModel_Connect_BeforeUpdate(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_BeforeDelete(QSqlTableModel* self, int row);
void QSqlTableModel_Connect_BeforeDelete(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_UpdateRowInTable(QSqlTableModel* self, int row, const QSqlRecord* values);
bool QSqlTableModel_InsertRowIntoTable(QSqlTableModel* self, const QSqlRecord* values);
bool QSqlTableModel_DeleteRowFromTable(QSqlTableModel* self, int row);
libqt_string QSqlTableModel_OrderByClause(const QSqlTableModel* self);
libqt_string QSqlTableModel_SelectStatement(const QSqlTableModel* self);
QModelIndex* QSqlTableModel_IndexInQuery(const QSqlTableModel* self, const QModelIndex* item);
libqt_string QSqlTableModel_Tr2(const char* s, const char* c);
libqt_string QSqlTableModel_Tr3(const char* s, const char* c, int n);
void QSqlTableModel_OnMetacall(QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseMetacall(QSqlTableModel* self, int param1, int param2, void** param3);
void QSqlTableModel_OnSetTable(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetTable(QSqlTableModel* self, const libqt_string tableName);
void QSqlTableModel_OnFlags(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseFlags(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_OnData(const QSqlTableModel* self, intptr_t slot);
QVariant* QSqlTableModel_QBaseData(const QSqlTableModel* self, const QModelIndex* idx, int role);
void QSqlTableModel_OnSetData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSetData(QSqlTableModel* self, const QModelIndex* index, const QVariant* value, int role);
void QSqlTableModel_OnClearItemData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseClearItemData(QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_OnHeaderData(const QSqlTableModel* self, intptr_t slot);
QVariant* QSqlTableModel_QBaseHeaderData(const QSqlTableModel* self, int section, int orientation, int role);
void QSqlTableModel_OnClear(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseClear(QSqlTableModel* self);
void QSqlTableModel_OnSetEditStrategy(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetEditStrategy(QSqlTableModel* self, int strategy);
void QSqlTableModel_OnSort(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSort(QSqlTableModel* self, int column, int order);
void QSqlTableModel_OnSetSort(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetSort(QSqlTableModel* self, int column, int order);
void QSqlTableModel_OnSetFilter(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetFilter(QSqlTableModel* self, const libqt_string filter);
void QSqlTableModel_OnRowCount(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseRowCount(const QSqlTableModel* self, const QModelIndex* parent);
void QSqlTableModel_OnRemoveColumns(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseRemoveColumns(QSqlTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlTableModel_OnRemoveRows(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseRemoveRows(QSqlTableModel* self, int row, int count, const QModelIndex* parent);
void QSqlTableModel_OnInsertRows(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseInsertRows(QSqlTableModel* self, int row, int count, const QModelIndex* parent);
void QSqlTableModel_OnRevertRow(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseRevertRow(QSqlTableModel* self, int row);
void QSqlTableModel_OnSelect(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSelect(QSqlTableModel* self);
void QSqlTableModel_OnSelectRow(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSelectRow(QSqlTableModel* self, int row);
void QSqlTableModel_OnSubmit(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSubmit(QSqlTableModel* self);
void QSqlTableModel_OnRevert(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseRevert(QSqlTableModel* self);
void QSqlTableModel_OnUpdateRowInTable(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseUpdateRowInTable(QSqlTableModel* self, int row, const QSqlRecord* values);
void QSqlTableModel_OnInsertRowIntoTable(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseInsertRowIntoTable(QSqlTableModel* self, const QSqlRecord* values);
void QSqlTableModel_OnDeleteRowFromTable(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseDeleteRowFromTable(QSqlTableModel* self, int row);
void QSqlTableModel_OnOrderByClause(const QSqlTableModel* self, intptr_t slot);
libqt_string QSqlTableModel_QBaseOrderByClause(const QSqlTableModel* self);
void QSqlTableModel_OnSelectStatement(const QSqlTableModel* self, intptr_t slot);
libqt_string QSqlTableModel_QBaseSelectStatement(const QSqlTableModel* self);
void QSqlTableModel_OnIndexInQuery(const QSqlTableModel* self, intptr_t slot);
QModelIndex* QSqlTableModel_QBaseIndexInQuery(const QSqlTableModel* self, const QModelIndex* item);
int QSqlTableModel_ColumnCount(const QSqlTableModel* self, const QModelIndex* parent);
void QSqlTableModel_OnColumnCount(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseColumnCount(const QSqlTableModel* self, const QModelIndex* parent);
bool QSqlTableModel_SetHeaderData(QSqlTableModel* self, int section, int orientation, const QVariant* value, int role);
void QSqlTableModel_OnSetHeaderData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSetHeaderData(QSqlTableModel* self, int section, int orientation, const QVariant* value, int role);
bool QSqlTableModel_InsertColumns(QSqlTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlTableModel_OnInsertColumns(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseInsertColumns(QSqlTableModel* self, int column, int count, const QModelIndex* parent);
void QSqlTableModel_FetchMore(QSqlTableModel* self, const QModelIndex* parent);
void QSqlTableModel_OnFetchMore(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseFetchMore(QSqlTableModel* self, const QModelIndex* parent);
bool QSqlTableModel_CanFetchMore(const QSqlTableModel* self, const QModelIndex* parent);
void QSqlTableModel_OnCanFetchMore(const QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseCanFetchMore(const QSqlTableModel* self, const QModelIndex* parent);
libqt_map /* of int to libqt_string */ QSqlTableModel_RoleNames(const QSqlTableModel* self);
void QSqlTableModel_OnRoleNames(const QSqlTableModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ QSqlTableModel_QBaseRoleNames(const QSqlTableModel* self);
void QSqlTableModel_QueryChange(QSqlTableModel* self);
void QSqlTableModel_OnQueryChange(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseQueryChange(QSqlTableModel* self);
QModelIndex* QSqlTableModel_Index(const QSqlTableModel* self, int row, int column, const QModelIndex* parent);
void QSqlTableModel_OnIndex(const QSqlTableModel* self, intptr_t slot);
QModelIndex* QSqlTableModel_QBaseIndex(const QSqlTableModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* QSqlTableModel_Sibling(const QSqlTableModel* self, int row, int column, const QModelIndex* idx);
void QSqlTableModel_OnSibling(const QSqlTableModel* self, intptr_t slot);
QModelIndex* QSqlTableModel_QBaseSibling(const QSqlTableModel* self, int row, int column, const QModelIndex* idx);
bool QSqlTableModel_DropMimeData(QSqlTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QSqlTableModel_OnDropMimeData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseDropMimeData(QSqlTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
libqt_map /* of int to QVariant* */ QSqlTableModel_ItemData(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_OnItemData(const QSqlTableModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ QSqlTableModel_QBaseItemData(const QSqlTableModel* self, const QModelIndex* index);
bool QSqlTableModel_SetItemData(QSqlTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void QSqlTableModel_OnSetItemData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseSetItemData(QSqlTableModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
libqt_list /* of libqt_string */ QSqlTableModel_MimeTypes(const QSqlTableModel* self);
void QSqlTableModel_OnMimeTypes(const QSqlTableModel* self, intptr_t slot);
libqt_list /* of libqt_string */ QSqlTableModel_QBaseMimeTypes(const QSqlTableModel* self);
QMimeData* QSqlTableModel_MimeData(const QSqlTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
void QSqlTableModel_OnMimeData(const QSqlTableModel* self, intptr_t slot);
QMimeData* QSqlTableModel_QBaseMimeData(const QSqlTableModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool QSqlTableModel_CanDropMimeData(const QSqlTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void QSqlTableModel_OnCanDropMimeData(const QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseCanDropMimeData(const QSqlTableModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int QSqlTableModel_SupportedDropActions(const QSqlTableModel* self);
void QSqlTableModel_OnSupportedDropActions(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseSupportedDropActions(const QSqlTableModel* self);
int QSqlTableModel_SupportedDragActions(const QSqlTableModel* self);
void QSqlTableModel_OnSupportedDragActions(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseSupportedDragActions(const QSqlTableModel* self);
bool QSqlTableModel_MoveRows(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void QSqlTableModel_OnMoveRows(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseMoveRows(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool QSqlTableModel_MoveColumns(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void QSqlTableModel_OnMoveColumns(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseMoveColumns(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
QModelIndex* QSqlTableModel_Buddy(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_OnBuddy(const QSqlTableModel* self, intptr_t slot);
QModelIndex* QSqlTableModel_QBaseBuddy(const QSqlTableModel* self, const QModelIndex* index);
libqt_list /* of QModelIndex* */ QSqlTableModel_Match(const QSqlTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void QSqlTableModel_OnMatch(const QSqlTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSqlTableModel_QBaseMatch(const QSqlTableModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
QSize* QSqlTableModel_Span(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_OnSpan(const QSqlTableModel* self, intptr_t slot);
QSize* QSqlTableModel_QBaseSpan(const QSqlTableModel* self, const QModelIndex* index);
void QSqlTableModel_MultiData(const QSqlTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSqlTableModel_OnMultiData(const QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseMultiData(const QSqlTableModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void QSqlTableModel_ResetInternalData(QSqlTableModel* self);
void QSqlTableModel_OnResetInternalData(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseResetInternalData(QSqlTableModel* self);
bool QSqlTableModel_Event(QSqlTableModel* self, QEvent* event);
void QSqlTableModel_OnEvent(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseEvent(QSqlTableModel* self, QEvent* event);
bool QSqlTableModel_EventFilter(QSqlTableModel* self, QObject* watched, QEvent* event);
void QSqlTableModel_OnEventFilter(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseEventFilter(QSqlTableModel* self, QObject* watched, QEvent* event);
void QSqlTableModel_TimerEvent(QSqlTableModel* self, QTimerEvent* event);
void QSqlTableModel_OnTimerEvent(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseTimerEvent(QSqlTableModel* self, QTimerEvent* event);
void QSqlTableModel_ChildEvent(QSqlTableModel* self, QChildEvent* event);
void QSqlTableModel_OnChildEvent(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseChildEvent(QSqlTableModel* self, QChildEvent* event);
void QSqlTableModel_CustomEvent(QSqlTableModel* self, QEvent* event);
void QSqlTableModel_OnCustomEvent(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseCustomEvent(QSqlTableModel* self, QEvent* event);
void QSqlTableModel_ConnectNotify(QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_OnConnectNotify(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseConnectNotify(QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_DisconnectNotify(QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_OnDisconnectNotify(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseDisconnectNotify(QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_SetPrimaryKey(QSqlTableModel* self, const QSqlIndex* key);
void QSqlTableModel_OnSetPrimaryKey(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetPrimaryKey(QSqlTableModel* self, const QSqlIndex* key);
QSqlRecord* QSqlTableModel_PrimaryValues(const QSqlTableModel* self, int row);
void QSqlTableModel_OnPrimaryValues(const QSqlTableModel* self, intptr_t slot);
QSqlRecord* QSqlTableModel_QBasePrimaryValues(const QSqlTableModel* self, int row);
void QSqlTableModel_BeginInsertRows(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_OnBeginInsertRows(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseBeginInsertRows(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_EndInsertRows(QSqlTableModel* self);
void QSqlTableModel_OnEndInsertRows(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndInsertRows(QSqlTableModel* self);
void QSqlTableModel_BeginRemoveRows(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_OnBeginRemoveRows(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseBeginRemoveRows(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_EndRemoveRows(QSqlTableModel* self);
void QSqlTableModel_OnEndRemoveRows(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndRemoveRows(QSqlTableModel* self);
void QSqlTableModel_BeginInsertColumns(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_OnBeginInsertColumns(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseBeginInsertColumns(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_EndInsertColumns(QSqlTableModel* self);
void QSqlTableModel_OnEndInsertColumns(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndInsertColumns(QSqlTableModel* self);
void QSqlTableModel_BeginRemoveColumns(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_OnBeginRemoveColumns(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseBeginRemoveColumns(QSqlTableModel* self, const QModelIndex* parent, int first, int last);
void QSqlTableModel_EndRemoveColumns(QSqlTableModel* self);
void QSqlTableModel_OnEndRemoveColumns(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndRemoveColumns(QSqlTableModel* self);
void QSqlTableModel_BeginResetModel(QSqlTableModel* self);
void QSqlTableModel_OnBeginResetModel(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseBeginResetModel(QSqlTableModel* self);
void QSqlTableModel_EndResetModel(QSqlTableModel* self);
void QSqlTableModel_OnEndResetModel(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndResetModel(QSqlTableModel* self);
void QSqlTableModel_SetLastError(QSqlTableModel* self, const QSqlError* errorVal);
void QSqlTableModel_OnSetLastError(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseSetLastError(QSqlTableModel* self, const QSqlError* errorVal);
QModelIndex* QSqlTableModel_CreateIndex(const QSqlTableModel* self, int row, int column);
void QSqlTableModel_OnCreateIndex(const QSqlTableModel* self, intptr_t slot);
QModelIndex* QSqlTableModel_QBaseCreateIndex(const QSqlTableModel* self, int row, int column);
void QSqlTableModel_EncodeData(const QSqlTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void QSqlTableModel_OnEncodeData(const QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEncodeData(const QSqlTableModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool QSqlTableModel_DecodeData(QSqlTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void QSqlTableModel_OnDecodeData(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseDecodeData(QSqlTableModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
bool QSqlTableModel_BeginMoveRows(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QSqlTableModel_OnBeginMoveRows(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseBeginMoveRows(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void QSqlTableModel_EndMoveRows(QSqlTableModel* self);
void QSqlTableModel_OnEndMoveRows(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndMoveRows(QSqlTableModel* self);
bool QSqlTableModel_BeginMoveColumns(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QSqlTableModel_OnBeginMoveColumns(QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseBeginMoveColumns(QSqlTableModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void QSqlTableModel_EndMoveColumns(QSqlTableModel* self);
void QSqlTableModel_OnEndMoveColumns(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseEndMoveColumns(QSqlTableModel* self);
void QSqlTableModel_ChangePersistentIndex(QSqlTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QSqlTableModel_OnChangePersistentIndex(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseChangePersistentIndex(QSqlTableModel* self, const QModelIndex* from, const QModelIndex* to);
void QSqlTableModel_ChangePersistentIndexList(QSqlTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void QSqlTableModel_OnChangePersistentIndexList(QSqlTableModel* self, intptr_t slot);
void QSqlTableModel_QBaseChangePersistentIndexList(QSqlTableModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ QSqlTableModel_PersistentIndexList(const QSqlTableModel* self);
void QSqlTableModel_OnPersistentIndexList(const QSqlTableModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ QSqlTableModel_QBasePersistentIndexList(const QSqlTableModel* self);
QObject* QSqlTableModel_Sender(const QSqlTableModel* self);
void QSqlTableModel_OnSender(const QSqlTableModel* self, intptr_t slot);
QObject* QSqlTableModel_QBaseSender(const QSqlTableModel* self);
int QSqlTableModel_SenderSignalIndex(const QSqlTableModel* self);
void QSqlTableModel_OnSenderSignalIndex(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseSenderSignalIndex(const QSqlTableModel* self);
int QSqlTableModel_Receivers(const QSqlTableModel* self, const char* signal);
void QSqlTableModel_OnReceivers(const QSqlTableModel* self, intptr_t slot);
int QSqlTableModel_QBaseReceivers(const QSqlTableModel* self, const char* signal);
bool QSqlTableModel_IsSignalConnected(const QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_OnIsSignalConnected(const QSqlTableModel* self, intptr_t slot);
bool QSqlTableModel_QBaseIsSignalConnected(const QSqlTableModel* self, const QMetaMethod* signal);
void QSqlTableModel_Delete(QSqlTableModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
