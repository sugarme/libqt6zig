#pragma once
#ifndef SRC_EXTRAS_KWIDGETSADDONSC_LIBKDATETIMEEDIT_H
#define SRC_EXTRAS_KWIDGETSADDONSC_LIBKDATETIMEEDIT_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KDateTimeEdit KDateTimeEdit;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDate QDate;
typedef struct QDateTime QDateTime;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QLocale QLocale;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTime QTime;
typedef struct QTimeZone QTimeZone;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KDateTimeEdit* KDateTimeEdit_new(QWidget* parent);
KDateTimeEdit* KDateTimeEdit_new2();
QMetaObject* KDateTimeEdit_MetaObject(const KDateTimeEdit* self);
void* KDateTimeEdit_Metacast(KDateTimeEdit* self, const char* param1);
int KDateTimeEdit_Metacall(KDateTimeEdit* self, int param1, int param2, void** param3);
libqt_string KDateTimeEdit_Tr(const char* s);
int KDateTimeEdit_Options(const KDateTimeEdit* self);
QDateTime* KDateTimeEdit_DateTime(const KDateTimeEdit* self);
QDate* KDateTimeEdit_Date(const KDateTimeEdit* self);
QTime* KDateTimeEdit_Time(const KDateTimeEdit* self);
QTimeZone* KDateTimeEdit_TimeZone(const KDateTimeEdit* self);
libqt_list /* of QLocale* */ KDateTimeEdit_CalendarLocalesList(const KDateTimeEdit* self);
QDateTime* KDateTimeEdit_MinimumDateTime(const KDateTimeEdit* self);
QDateTime* KDateTimeEdit_MaximumDateTime(const KDateTimeEdit* self);
int KDateTimeEdit_DateDisplayFormat(const KDateTimeEdit* self);
libqt_map /* of QDate* to libqt_string */ KDateTimeEdit_DateMap(const KDateTimeEdit* self);
int KDateTimeEdit_TimeDisplayFormat(const KDateTimeEdit* self);
int KDateTimeEdit_TimeListInterval(const KDateTimeEdit* self);
libqt_list /* of QTime* */ KDateTimeEdit_TimeList(const KDateTimeEdit* self);
libqt_list /* of QTimeZone* */ KDateTimeEdit_TimeZones(const KDateTimeEdit* self);
bool KDateTimeEdit_IsValid(const KDateTimeEdit* self);
bool KDateTimeEdit_IsNull(const KDateTimeEdit* self);
bool KDateTimeEdit_IsValidDate(const KDateTimeEdit* self);
bool KDateTimeEdit_IsNullDate(const KDateTimeEdit* self);
bool KDateTimeEdit_IsValidTime(const KDateTimeEdit* self);
bool KDateTimeEdit_IsNullTime(const KDateTimeEdit* self);
void KDateTimeEdit_DateTimeEntered(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_Connect_DateTimeEntered(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_DateTimeChanged(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_Connect_DateTimeChanged(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_DateTimeEdited(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_Connect_DateTimeEdited(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_CalendarEntered(KDateTimeEdit* self, const QLocale* calendarLocale);
void KDateTimeEdit_Connect_CalendarEntered(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_CalendarChanged(KDateTimeEdit* self, const QLocale* calendarLocale);
void KDateTimeEdit_Connect_CalendarChanged(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_DateEntered(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_Connect_DateEntered(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_DateChanged(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_Connect_DateChanged(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_DateEdited(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_Connect_DateEdited(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_TimeEntered(KDateTimeEdit* self, const QTime* time);
void KDateTimeEdit_Connect_TimeEntered(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_TimeChanged(KDateTimeEdit* self, const QTime* time);
void KDateTimeEdit_Connect_TimeChanged(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_TimeEdited(KDateTimeEdit* self, const QTime* time);
void KDateTimeEdit_Connect_TimeEdited(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_TimeZoneEntered(KDateTimeEdit* self, const QTimeZone* zone);
void KDateTimeEdit_Connect_TimeZoneEntered(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_TimeZoneChanged(KDateTimeEdit* self, const QTimeZone* zone);
void KDateTimeEdit_Connect_TimeZoneChanged(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_SetOptions(KDateTimeEdit* self, int options);
void KDateTimeEdit_SetDateTime(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_SetDate(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_SetTime(KDateTimeEdit* self, const QTime* time);
void KDateTimeEdit_SetTimeZone(KDateTimeEdit* self, const QTimeZone* zone);
void KDateTimeEdit_SetDateTimeRange(KDateTimeEdit* self, const QDateTime* minDateTime, const QDateTime* maxDateTime);
void KDateTimeEdit_ResetDateTimeRange(KDateTimeEdit* self);
void KDateTimeEdit_SetMinimumDateTime(KDateTimeEdit* self, const QDateTime* minDateTime);
void KDateTimeEdit_ResetMinimumDateTime(KDateTimeEdit* self);
void KDateTimeEdit_SetMaximumDateTime(KDateTimeEdit* self, const QDateTime* maxDateTime);
void KDateTimeEdit_ResetMaximumDateTime(KDateTimeEdit* self);
void KDateTimeEdit_SetDateDisplayFormat(KDateTimeEdit* self, int format);
void KDateTimeEdit_SetCalendarLocalesList(KDateTimeEdit* self, const libqt_list /* of QLocale* */ calendarLocales);
void KDateTimeEdit_SetDateMap(KDateTimeEdit* self, libqt_map /* of QDate* to libqt_string */ dateMap);
void KDateTimeEdit_SetTimeDisplayFormat(KDateTimeEdit* self, int format);
void KDateTimeEdit_SetTimeListInterval(KDateTimeEdit* self, int minutes);
void KDateTimeEdit_SetTimeList(KDateTimeEdit* self, libqt_list /* of QTime* */ timeList);
void KDateTimeEdit_SetTimeZones(KDateTimeEdit* self, const libqt_list /* of QTimeZone* */ zones);
bool KDateTimeEdit_EventFilter(KDateTimeEdit* self, QObject* object, QEvent* event);
void KDateTimeEdit_FocusInEvent(KDateTimeEdit* self, QFocusEvent* event);
void KDateTimeEdit_FocusOutEvent(KDateTimeEdit* self, QFocusEvent* event);
void KDateTimeEdit_ResizeEvent(KDateTimeEdit* self, QResizeEvent* event);
void KDateTimeEdit_AssignDateTime(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_AssignDate(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_AssignTime(KDateTimeEdit* self, const QTime* time);
libqt_string KDateTimeEdit_Tr2(const char* s, const char* c);
libqt_string KDateTimeEdit_Tr3(const char* s, const char* c, int n);
void KDateTimeEdit_SetDateTimeRange3(KDateTimeEdit* self, const QDateTime* minDateTime, const QDateTime* maxDateTime, const libqt_string minWarnMsg);
void KDateTimeEdit_SetDateTimeRange4(KDateTimeEdit* self, const QDateTime* minDateTime, const QDateTime* maxDateTime, const libqt_string minWarnMsg, const libqt_string maxWarnMsg);
void KDateTimeEdit_SetMinimumDateTime2(KDateTimeEdit* self, const QDateTime* minDateTime, const libqt_string minWarnMsg);
void KDateTimeEdit_SetMaximumDateTime2(KDateTimeEdit* self, const QDateTime* maxDateTime, const libqt_string maxWarnMsg);
void KDateTimeEdit_SetTimeList2(KDateTimeEdit* self, libqt_list /* of QTime* */ timeList, const libqt_string minWarnMsg);
void KDateTimeEdit_SetTimeList3(KDateTimeEdit* self, libqt_list /* of QTime* */ timeList, const libqt_string minWarnMsg, const libqt_string maxWarnMsg);
void KDateTimeEdit_OnMetacall(KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseMetacall(KDateTimeEdit* self, int param1, int param2, void** param3);
void KDateTimeEdit_OnEventFilter(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseEventFilter(KDateTimeEdit* self, QObject* object, QEvent* event);
void KDateTimeEdit_OnFocusInEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseFocusInEvent(KDateTimeEdit* self, QFocusEvent* event);
void KDateTimeEdit_OnFocusOutEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseFocusOutEvent(KDateTimeEdit* self, QFocusEvent* event);
void KDateTimeEdit_OnResizeEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseResizeEvent(KDateTimeEdit* self, QResizeEvent* event);
void KDateTimeEdit_OnAssignDateTime(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseAssignDateTime(KDateTimeEdit* self, const QDateTime* dateTime);
void KDateTimeEdit_OnAssignDate(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseAssignDate(KDateTimeEdit* self, const QDate* date);
void KDateTimeEdit_OnAssignTime(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseAssignTime(KDateTimeEdit* self, const QTime* time);
int KDateTimeEdit_DevType(const KDateTimeEdit* self);
void KDateTimeEdit_OnDevType(const KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseDevType(const KDateTimeEdit* self);
void KDateTimeEdit_SetVisible(KDateTimeEdit* self, bool visible);
void KDateTimeEdit_OnSetVisible(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseSetVisible(KDateTimeEdit* self, bool visible);
QSize* KDateTimeEdit_SizeHint(const KDateTimeEdit* self);
void KDateTimeEdit_OnSizeHint(const KDateTimeEdit* self, intptr_t slot);
QSize* KDateTimeEdit_QBaseSizeHint(const KDateTimeEdit* self);
QSize* KDateTimeEdit_MinimumSizeHint(const KDateTimeEdit* self);
void KDateTimeEdit_OnMinimumSizeHint(const KDateTimeEdit* self, intptr_t slot);
QSize* KDateTimeEdit_QBaseMinimumSizeHint(const KDateTimeEdit* self);
int KDateTimeEdit_HeightForWidth(const KDateTimeEdit* self, int param1);
void KDateTimeEdit_OnHeightForWidth(const KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseHeightForWidth(const KDateTimeEdit* self, int param1);
bool KDateTimeEdit_HasHeightForWidth(const KDateTimeEdit* self);
void KDateTimeEdit_OnHasHeightForWidth(const KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseHasHeightForWidth(const KDateTimeEdit* self);
QPaintEngine* KDateTimeEdit_PaintEngine(const KDateTimeEdit* self);
void KDateTimeEdit_OnPaintEngine(const KDateTimeEdit* self, intptr_t slot);
QPaintEngine* KDateTimeEdit_QBasePaintEngine(const KDateTimeEdit* self);
bool KDateTimeEdit_Event(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_OnEvent(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseEvent(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_MousePressEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_OnMousePressEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseMousePressEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_MouseReleaseEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_OnMouseReleaseEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseMouseReleaseEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_MouseDoubleClickEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_OnMouseDoubleClickEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseMouseDoubleClickEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_MouseMoveEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_OnMouseMoveEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseMouseMoveEvent(KDateTimeEdit* self, QMouseEvent* event);
void KDateTimeEdit_WheelEvent(KDateTimeEdit* self, QWheelEvent* event);
void KDateTimeEdit_OnWheelEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseWheelEvent(KDateTimeEdit* self, QWheelEvent* event);
void KDateTimeEdit_KeyPressEvent(KDateTimeEdit* self, QKeyEvent* event);
void KDateTimeEdit_OnKeyPressEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseKeyPressEvent(KDateTimeEdit* self, QKeyEvent* event);
void KDateTimeEdit_KeyReleaseEvent(KDateTimeEdit* self, QKeyEvent* event);
void KDateTimeEdit_OnKeyReleaseEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseKeyReleaseEvent(KDateTimeEdit* self, QKeyEvent* event);
void KDateTimeEdit_EnterEvent(KDateTimeEdit* self, QEnterEvent* event);
void KDateTimeEdit_OnEnterEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseEnterEvent(KDateTimeEdit* self, QEnterEvent* event);
void KDateTimeEdit_LeaveEvent(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_OnLeaveEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseLeaveEvent(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_PaintEvent(KDateTimeEdit* self, QPaintEvent* event);
void KDateTimeEdit_OnPaintEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBasePaintEvent(KDateTimeEdit* self, QPaintEvent* event);
void KDateTimeEdit_MoveEvent(KDateTimeEdit* self, QMoveEvent* event);
void KDateTimeEdit_OnMoveEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseMoveEvent(KDateTimeEdit* self, QMoveEvent* event);
void KDateTimeEdit_CloseEvent(KDateTimeEdit* self, QCloseEvent* event);
void KDateTimeEdit_OnCloseEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseCloseEvent(KDateTimeEdit* self, QCloseEvent* event);
void KDateTimeEdit_ContextMenuEvent(KDateTimeEdit* self, QContextMenuEvent* event);
void KDateTimeEdit_OnContextMenuEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseContextMenuEvent(KDateTimeEdit* self, QContextMenuEvent* event);
void KDateTimeEdit_TabletEvent(KDateTimeEdit* self, QTabletEvent* event);
void KDateTimeEdit_OnTabletEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseTabletEvent(KDateTimeEdit* self, QTabletEvent* event);
void KDateTimeEdit_ActionEvent(KDateTimeEdit* self, QActionEvent* event);
void KDateTimeEdit_OnActionEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseActionEvent(KDateTimeEdit* self, QActionEvent* event);
void KDateTimeEdit_DragEnterEvent(KDateTimeEdit* self, QDragEnterEvent* event);
void KDateTimeEdit_OnDragEnterEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDragEnterEvent(KDateTimeEdit* self, QDragEnterEvent* event);
void KDateTimeEdit_DragMoveEvent(KDateTimeEdit* self, QDragMoveEvent* event);
void KDateTimeEdit_OnDragMoveEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDragMoveEvent(KDateTimeEdit* self, QDragMoveEvent* event);
void KDateTimeEdit_DragLeaveEvent(KDateTimeEdit* self, QDragLeaveEvent* event);
void KDateTimeEdit_OnDragLeaveEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDragLeaveEvent(KDateTimeEdit* self, QDragLeaveEvent* event);
void KDateTimeEdit_DropEvent(KDateTimeEdit* self, QDropEvent* event);
void KDateTimeEdit_OnDropEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDropEvent(KDateTimeEdit* self, QDropEvent* event);
void KDateTimeEdit_ShowEvent(KDateTimeEdit* self, QShowEvent* event);
void KDateTimeEdit_OnShowEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseShowEvent(KDateTimeEdit* self, QShowEvent* event);
void KDateTimeEdit_HideEvent(KDateTimeEdit* self, QHideEvent* event);
void KDateTimeEdit_OnHideEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseHideEvent(KDateTimeEdit* self, QHideEvent* event);
bool KDateTimeEdit_NativeEvent(KDateTimeEdit* self, const libqt_string eventType, void* message, intptr_t* result);
void KDateTimeEdit_OnNativeEvent(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseNativeEvent(KDateTimeEdit* self, const libqt_string eventType, void* message, intptr_t* result);
void KDateTimeEdit_ChangeEvent(KDateTimeEdit* self, QEvent* param1);
void KDateTimeEdit_OnChangeEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseChangeEvent(KDateTimeEdit* self, QEvent* param1);
int KDateTimeEdit_Metric(const KDateTimeEdit* self, int param1);
void KDateTimeEdit_OnMetric(const KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseMetric(const KDateTimeEdit* self, int param1);
void KDateTimeEdit_InitPainter(const KDateTimeEdit* self, QPainter* painter);
void KDateTimeEdit_OnInitPainter(const KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseInitPainter(const KDateTimeEdit* self, QPainter* painter);
QPaintDevice* KDateTimeEdit_Redirected(const KDateTimeEdit* self, QPoint* offset);
void KDateTimeEdit_OnRedirected(const KDateTimeEdit* self, intptr_t slot);
QPaintDevice* KDateTimeEdit_QBaseRedirected(const KDateTimeEdit* self, QPoint* offset);
QPainter* KDateTimeEdit_SharedPainter(const KDateTimeEdit* self);
void KDateTimeEdit_OnSharedPainter(const KDateTimeEdit* self, intptr_t slot);
QPainter* KDateTimeEdit_QBaseSharedPainter(const KDateTimeEdit* self);
void KDateTimeEdit_InputMethodEvent(KDateTimeEdit* self, QInputMethodEvent* param1);
void KDateTimeEdit_OnInputMethodEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseInputMethodEvent(KDateTimeEdit* self, QInputMethodEvent* param1);
QVariant* KDateTimeEdit_InputMethodQuery(const KDateTimeEdit* self, int param1);
void KDateTimeEdit_OnInputMethodQuery(const KDateTimeEdit* self, intptr_t slot);
QVariant* KDateTimeEdit_QBaseInputMethodQuery(const KDateTimeEdit* self, int param1);
bool KDateTimeEdit_FocusNextPrevChild(KDateTimeEdit* self, bool next);
void KDateTimeEdit_OnFocusNextPrevChild(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseFocusNextPrevChild(KDateTimeEdit* self, bool next);
void KDateTimeEdit_TimerEvent(KDateTimeEdit* self, QTimerEvent* event);
void KDateTimeEdit_OnTimerEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseTimerEvent(KDateTimeEdit* self, QTimerEvent* event);
void KDateTimeEdit_ChildEvent(KDateTimeEdit* self, QChildEvent* event);
void KDateTimeEdit_OnChildEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseChildEvent(KDateTimeEdit* self, QChildEvent* event);
void KDateTimeEdit_CustomEvent(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_OnCustomEvent(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseCustomEvent(KDateTimeEdit* self, QEvent* event);
void KDateTimeEdit_ConnectNotify(KDateTimeEdit* self, const QMetaMethod* signal);
void KDateTimeEdit_OnConnectNotify(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseConnectNotify(KDateTimeEdit* self, const QMetaMethod* signal);
void KDateTimeEdit_DisconnectNotify(KDateTimeEdit* self, const QMetaMethod* signal);
void KDateTimeEdit_OnDisconnectNotify(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDisconnectNotify(KDateTimeEdit* self, const QMetaMethod* signal);
void KDateTimeEdit_AssignTimeZone(KDateTimeEdit* self, const QTimeZone* zone);
void KDateTimeEdit_OnAssignTimeZone(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseAssignTimeZone(KDateTimeEdit* self, const QTimeZone* zone);
void KDateTimeEdit_UpdateMicroFocus(KDateTimeEdit* self);
void KDateTimeEdit_OnUpdateMicroFocus(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseUpdateMicroFocus(KDateTimeEdit* self);
void KDateTimeEdit_Create(KDateTimeEdit* self);
void KDateTimeEdit_OnCreate(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseCreate(KDateTimeEdit* self);
void KDateTimeEdit_Destroy(KDateTimeEdit* self);
void KDateTimeEdit_OnDestroy(KDateTimeEdit* self, intptr_t slot);
void KDateTimeEdit_QBaseDestroy(KDateTimeEdit* self);
bool KDateTimeEdit_FocusNextChild(KDateTimeEdit* self);
void KDateTimeEdit_OnFocusNextChild(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseFocusNextChild(KDateTimeEdit* self);
bool KDateTimeEdit_FocusPreviousChild(KDateTimeEdit* self);
void KDateTimeEdit_OnFocusPreviousChild(KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseFocusPreviousChild(KDateTimeEdit* self);
QObject* KDateTimeEdit_Sender(const KDateTimeEdit* self);
void KDateTimeEdit_OnSender(const KDateTimeEdit* self, intptr_t slot);
QObject* KDateTimeEdit_QBaseSender(const KDateTimeEdit* self);
int KDateTimeEdit_SenderSignalIndex(const KDateTimeEdit* self);
void KDateTimeEdit_OnSenderSignalIndex(const KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseSenderSignalIndex(const KDateTimeEdit* self);
int KDateTimeEdit_Receivers(const KDateTimeEdit* self, const char* signal);
void KDateTimeEdit_OnReceivers(const KDateTimeEdit* self, intptr_t slot);
int KDateTimeEdit_QBaseReceivers(const KDateTimeEdit* self, const char* signal);
bool KDateTimeEdit_IsSignalConnected(const KDateTimeEdit* self, const QMetaMethod* signal);
void KDateTimeEdit_OnIsSignalConnected(const KDateTimeEdit* self, intptr_t slot);
bool KDateTimeEdit_QBaseIsSignalConnected(const KDateTimeEdit* self, const QMetaMethod* signal);
double KDateTimeEdit_GetDecodedMetricF(const KDateTimeEdit* self, int metricA, int metricB);
void KDateTimeEdit_OnGetDecodedMetricF(const KDateTimeEdit* self, intptr_t slot);
double KDateTimeEdit_QBaseGetDecodedMetricF(const KDateTimeEdit* self, int metricA, int metricB);
void KDateTimeEdit_Delete(KDateTimeEdit* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
