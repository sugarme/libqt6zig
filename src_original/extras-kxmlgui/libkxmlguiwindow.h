#pragma once
#ifndef SRC_EXTRAS_KXMLGUIC_LIBKXMLGUIWINDOW_H
#define SRC_EXTRAS_KXMLGUIC_LIBKXMLGUIWINDOW_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KActionCollection KActionCollection;
typedef struct KConfig KConfig;
typedef struct KConfigGroup KConfigGroup;
typedef struct KMainWindow KMainWindow;
typedef struct KXMLGUIBuilder KXMLGUIBuilder;
typedef struct KXMLGUIClient KXMLGUIClient;
typedef struct KXMLGUIFactory KXMLGUIFactory;
typedef struct KXmlGuiWindow KXmlGuiWindow;
typedef struct QAction QAction;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDomDocument QDomDocument;
typedef struct QDomElement QDomElement;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMainWindow QMainWindow;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KXmlGuiWindow* KXmlGuiWindow_new(QWidget* parent);
KXmlGuiWindow* KXmlGuiWindow_new2();
KXmlGuiWindow* KXmlGuiWindow_new3(QWidget* parent, int flags);
QMetaObject* KXmlGuiWindow_MetaObject(const KXmlGuiWindow* self);
void* KXmlGuiWindow_Metacast(KXmlGuiWindow* self, const char* param1);
int KXmlGuiWindow_Metacall(KXmlGuiWindow* self, int param1, int param2, void** param3);
libqt_string KXmlGuiWindow_Tr(const char* s);
void KXmlGuiWindow_SetHelpMenuEnabled(KXmlGuiWindow* self);
bool KXmlGuiWindow_IsHelpMenuEnabled(const KXmlGuiWindow* self);
KXMLGUIFactory* KXmlGuiWindow_GuiFactory(KXmlGuiWindow* self);
void KXmlGuiWindow_CreateGUI(KXmlGuiWindow* self);
void KXmlGuiWindow_SetStandardToolBarMenuEnabled(KXmlGuiWindow* self, bool showToolBarMenu);
bool KXmlGuiWindow_IsStandardToolBarMenuEnabled(const KXmlGuiWindow* self);
void KXmlGuiWindow_CreateStandardStatusBarAction(KXmlGuiWindow* self);
void KXmlGuiWindow_SetupGUI(KXmlGuiWindow* self);
void KXmlGuiWindow_SetupGUI2(KXmlGuiWindow* self, const QSize* defaultSize);
QAction* KXmlGuiWindow_ToolBarMenuAction(KXmlGuiWindow* self);
void KXmlGuiWindow_SetupToolbarMenuActions(KXmlGuiWindow* self);
libqt_list /* of libqt_string */ KXmlGuiWindow_ToolBarNames(const KXmlGuiWindow* self);
void KXmlGuiWindow_FinalizeGUI(KXmlGuiWindow* self, bool force);
void KXmlGuiWindow_ApplyMainWindowSettings(KXmlGuiWindow* self, const KConfigGroup* config);
void KXmlGuiWindow_SetCommandBarEnabled(KXmlGuiWindow* self, bool showCommandBar);
bool KXmlGuiWindow_IsCommandBarEnabled(const KXmlGuiWindow* self);
void KXmlGuiWindow_ConfigureToolbars(KXmlGuiWindow* self);
void KXmlGuiWindow_SlotStateChanged(KXmlGuiWindow* self, const libqt_string newstate);
void KXmlGuiWindow_SlotStateChanged2(KXmlGuiWindow* self, const libqt_string newstate, bool reverse);
bool KXmlGuiWindow_IsToolBarVisible(KXmlGuiWindow* self, const libqt_string name);
void KXmlGuiWindow_SetToolBarVisible(KXmlGuiWindow* self, const libqt_string name, bool visible);
bool KXmlGuiWindow_Event(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_SaveNewToolbarConfig(KXmlGuiWindow* self);
libqt_string KXmlGuiWindow_Tr2(const char* s, const char* c);
libqt_string KXmlGuiWindow_Tr3(const char* s, const char* c, int n);
void KXmlGuiWindow_SetHelpMenuEnabled1(KXmlGuiWindow* self, bool showHelpMenu);
void KXmlGuiWindow_CreateGUI1(KXmlGuiWindow* self, const libqt_string xmlfile);
void KXmlGuiWindow_SetupGUI1(KXmlGuiWindow* self, int options);
void KXmlGuiWindow_SetupGUI22(KXmlGuiWindow* self, int options, const libqt_string xmlfile);
void KXmlGuiWindow_SetupGUI23(KXmlGuiWindow* self, const QSize* defaultSize, int options);
void KXmlGuiWindow_SetupGUI3(KXmlGuiWindow* self, const QSize* defaultSize, int options, const libqt_string xmlfile);
void KXmlGuiWindow_OnMetacall(KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseMetacall(KXmlGuiWindow* self, int param1, int param2, void** param3);
void KXmlGuiWindow_OnGuiFactory(KXmlGuiWindow* self, intptr_t slot);
KXMLGUIFactory* KXmlGuiWindow_QBaseGuiFactory(KXmlGuiWindow* self);
void KXmlGuiWindow_OnApplyMainWindowSettings(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseApplyMainWindowSettings(KXmlGuiWindow* self, const KConfigGroup* config);
void KXmlGuiWindow_OnConfigureToolbars(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseConfigureToolbars(KXmlGuiWindow* self);
void KXmlGuiWindow_OnSlotStateChanged(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSlotStateChanged(KXmlGuiWindow* self, const libqt_string newstate);
void KXmlGuiWindow_OnEvent(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseEvent(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_OnSaveNewToolbarConfig(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSaveNewToolbarConfig(KXmlGuiWindow* self);
void KXmlGuiWindow_SetCaption(KXmlGuiWindow* self, const libqt_string caption);
void KXmlGuiWindow_OnSetCaption(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetCaption(KXmlGuiWindow* self, const libqt_string caption);
void KXmlGuiWindow_SetPlainCaption(KXmlGuiWindow* self, const libqt_string caption);
void KXmlGuiWindow_OnSetPlainCaption(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetPlainCaption(KXmlGuiWindow* self, const libqt_string caption);
void KXmlGuiWindow_KeyPressEvent(KXmlGuiWindow* self, QKeyEvent* keyEvent);
void KXmlGuiWindow_OnKeyPressEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseKeyPressEvent(KXmlGuiWindow* self, QKeyEvent* keyEvent);
void KXmlGuiWindow_CloseEvent(KXmlGuiWindow* self, QCloseEvent* param1);
void KXmlGuiWindow_OnCloseEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseCloseEvent(KXmlGuiWindow* self, QCloseEvent* param1);
bool KXmlGuiWindow_QueryClose(KXmlGuiWindow* self);
void KXmlGuiWindow_OnQueryClose(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseQueryClose(KXmlGuiWindow* self);
void KXmlGuiWindow_SaveProperties(KXmlGuiWindow* self, KConfigGroup* param1);
void KXmlGuiWindow_OnSaveProperties(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSaveProperties(KXmlGuiWindow* self, KConfigGroup* param1);
void KXmlGuiWindow_ReadProperties(KXmlGuiWindow* self, const KConfigGroup* param1);
void KXmlGuiWindow_OnReadProperties(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseReadProperties(KXmlGuiWindow* self, const KConfigGroup* param1);
void KXmlGuiWindow_SaveGlobalProperties(KXmlGuiWindow* self, KConfig* sessionConfig);
void KXmlGuiWindow_OnSaveGlobalProperties(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSaveGlobalProperties(KXmlGuiWindow* self, KConfig* sessionConfig);
void KXmlGuiWindow_ReadGlobalProperties(KXmlGuiWindow* self, KConfig* sessionConfig);
void KXmlGuiWindow_OnReadGlobalProperties(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseReadGlobalProperties(KXmlGuiWindow* self, KConfig* sessionConfig);
QMenu* KXmlGuiWindow_CreatePopupMenu(KXmlGuiWindow* self);
void KXmlGuiWindow_OnCreatePopupMenu(KXmlGuiWindow* self, intptr_t slot);
QMenu* KXmlGuiWindow_QBaseCreatePopupMenu(KXmlGuiWindow* self);
void KXmlGuiWindow_ContextMenuEvent(KXmlGuiWindow* self, QContextMenuEvent* event);
void KXmlGuiWindow_OnContextMenuEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseContextMenuEvent(KXmlGuiWindow* self, QContextMenuEvent* event);
int KXmlGuiWindow_DevType(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnDevType(const KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseDevType(const KXmlGuiWindow* self);
void KXmlGuiWindow_SetVisible(KXmlGuiWindow* self, bool visible);
void KXmlGuiWindow_OnSetVisible(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetVisible(KXmlGuiWindow* self, bool visible);
QSize* KXmlGuiWindow_SizeHint(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnSizeHint(const KXmlGuiWindow* self, intptr_t slot);
QSize* KXmlGuiWindow_QBaseSizeHint(const KXmlGuiWindow* self);
QSize* KXmlGuiWindow_MinimumSizeHint(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnMinimumSizeHint(const KXmlGuiWindow* self, intptr_t slot);
QSize* KXmlGuiWindow_QBaseMinimumSizeHint(const KXmlGuiWindow* self);
int KXmlGuiWindow_HeightForWidth(const KXmlGuiWindow* self, int param1);
void KXmlGuiWindow_OnHeightForWidth(const KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseHeightForWidth(const KXmlGuiWindow* self, int param1);
bool KXmlGuiWindow_HasHeightForWidth(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnHasHeightForWidth(const KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseHasHeightForWidth(const KXmlGuiWindow* self);
QPaintEngine* KXmlGuiWindow_PaintEngine(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnPaintEngine(const KXmlGuiWindow* self, intptr_t slot);
QPaintEngine* KXmlGuiWindow_QBasePaintEngine(const KXmlGuiWindow* self);
void KXmlGuiWindow_MousePressEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_OnMousePressEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseMousePressEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_MouseReleaseEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_OnMouseReleaseEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseMouseReleaseEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_MouseDoubleClickEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_OnMouseDoubleClickEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseMouseDoubleClickEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_MouseMoveEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_OnMouseMoveEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseMouseMoveEvent(KXmlGuiWindow* self, QMouseEvent* event);
void KXmlGuiWindow_WheelEvent(KXmlGuiWindow* self, QWheelEvent* event);
void KXmlGuiWindow_OnWheelEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseWheelEvent(KXmlGuiWindow* self, QWheelEvent* event);
void KXmlGuiWindow_KeyReleaseEvent(KXmlGuiWindow* self, QKeyEvent* event);
void KXmlGuiWindow_OnKeyReleaseEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseKeyReleaseEvent(KXmlGuiWindow* self, QKeyEvent* event);
void KXmlGuiWindow_FocusInEvent(KXmlGuiWindow* self, QFocusEvent* event);
void KXmlGuiWindow_OnFocusInEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseFocusInEvent(KXmlGuiWindow* self, QFocusEvent* event);
void KXmlGuiWindow_FocusOutEvent(KXmlGuiWindow* self, QFocusEvent* event);
void KXmlGuiWindow_OnFocusOutEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseFocusOutEvent(KXmlGuiWindow* self, QFocusEvent* event);
void KXmlGuiWindow_EnterEvent(KXmlGuiWindow* self, QEnterEvent* event);
void KXmlGuiWindow_OnEnterEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseEnterEvent(KXmlGuiWindow* self, QEnterEvent* event);
void KXmlGuiWindow_LeaveEvent(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_OnLeaveEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseLeaveEvent(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_PaintEvent(KXmlGuiWindow* self, QPaintEvent* event);
void KXmlGuiWindow_OnPaintEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBasePaintEvent(KXmlGuiWindow* self, QPaintEvent* event);
void KXmlGuiWindow_MoveEvent(KXmlGuiWindow* self, QMoveEvent* event);
void KXmlGuiWindow_OnMoveEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseMoveEvent(KXmlGuiWindow* self, QMoveEvent* event);
void KXmlGuiWindow_ResizeEvent(KXmlGuiWindow* self, QResizeEvent* event);
void KXmlGuiWindow_OnResizeEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseResizeEvent(KXmlGuiWindow* self, QResizeEvent* event);
void KXmlGuiWindow_TabletEvent(KXmlGuiWindow* self, QTabletEvent* event);
void KXmlGuiWindow_OnTabletEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseTabletEvent(KXmlGuiWindow* self, QTabletEvent* event);
void KXmlGuiWindow_ActionEvent(KXmlGuiWindow* self, QActionEvent* event);
void KXmlGuiWindow_OnActionEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseActionEvent(KXmlGuiWindow* self, QActionEvent* event);
void KXmlGuiWindow_DragEnterEvent(KXmlGuiWindow* self, QDragEnterEvent* event);
void KXmlGuiWindow_OnDragEnterEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDragEnterEvent(KXmlGuiWindow* self, QDragEnterEvent* event);
void KXmlGuiWindow_DragMoveEvent(KXmlGuiWindow* self, QDragMoveEvent* event);
void KXmlGuiWindow_OnDragMoveEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDragMoveEvent(KXmlGuiWindow* self, QDragMoveEvent* event);
void KXmlGuiWindow_DragLeaveEvent(KXmlGuiWindow* self, QDragLeaveEvent* event);
void KXmlGuiWindow_OnDragLeaveEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDragLeaveEvent(KXmlGuiWindow* self, QDragLeaveEvent* event);
void KXmlGuiWindow_DropEvent(KXmlGuiWindow* self, QDropEvent* event);
void KXmlGuiWindow_OnDropEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDropEvent(KXmlGuiWindow* self, QDropEvent* event);
void KXmlGuiWindow_ShowEvent(KXmlGuiWindow* self, QShowEvent* event);
void KXmlGuiWindow_OnShowEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseShowEvent(KXmlGuiWindow* self, QShowEvent* event);
void KXmlGuiWindow_HideEvent(KXmlGuiWindow* self, QHideEvent* event);
void KXmlGuiWindow_OnHideEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseHideEvent(KXmlGuiWindow* self, QHideEvent* event);
bool KXmlGuiWindow_NativeEvent(KXmlGuiWindow* self, const libqt_string eventType, void* message, intptr_t* result);
void KXmlGuiWindow_OnNativeEvent(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseNativeEvent(KXmlGuiWindow* self, const libqt_string eventType, void* message, intptr_t* result);
void KXmlGuiWindow_ChangeEvent(KXmlGuiWindow* self, QEvent* param1);
void KXmlGuiWindow_OnChangeEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseChangeEvent(KXmlGuiWindow* self, QEvent* param1);
int KXmlGuiWindow_Metric(const KXmlGuiWindow* self, int param1);
void KXmlGuiWindow_OnMetric(const KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseMetric(const KXmlGuiWindow* self, int param1);
void KXmlGuiWindow_InitPainter(const KXmlGuiWindow* self, QPainter* painter);
void KXmlGuiWindow_OnInitPainter(const KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseInitPainter(const KXmlGuiWindow* self, QPainter* painter);
QPaintDevice* KXmlGuiWindow_Redirected(const KXmlGuiWindow* self, QPoint* offset);
void KXmlGuiWindow_OnRedirected(const KXmlGuiWindow* self, intptr_t slot);
QPaintDevice* KXmlGuiWindow_QBaseRedirected(const KXmlGuiWindow* self, QPoint* offset);
QPainter* KXmlGuiWindow_SharedPainter(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnSharedPainter(const KXmlGuiWindow* self, intptr_t slot);
QPainter* KXmlGuiWindow_QBaseSharedPainter(const KXmlGuiWindow* self);
void KXmlGuiWindow_InputMethodEvent(KXmlGuiWindow* self, QInputMethodEvent* param1);
void KXmlGuiWindow_OnInputMethodEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseInputMethodEvent(KXmlGuiWindow* self, QInputMethodEvent* param1);
QVariant* KXmlGuiWindow_InputMethodQuery(const KXmlGuiWindow* self, int param1);
void KXmlGuiWindow_OnInputMethodQuery(const KXmlGuiWindow* self, intptr_t slot);
QVariant* KXmlGuiWindow_QBaseInputMethodQuery(const KXmlGuiWindow* self, int param1);
bool KXmlGuiWindow_FocusNextPrevChild(KXmlGuiWindow* self, bool next);
void KXmlGuiWindow_OnFocusNextPrevChild(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseFocusNextPrevChild(KXmlGuiWindow* self, bool next);
bool KXmlGuiWindow_EventFilter(KXmlGuiWindow* self, QObject* watched, QEvent* event);
void KXmlGuiWindow_OnEventFilter(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseEventFilter(KXmlGuiWindow* self, QObject* watched, QEvent* event);
void KXmlGuiWindow_TimerEvent(KXmlGuiWindow* self, QTimerEvent* event);
void KXmlGuiWindow_OnTimerEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseTimerEvent(KXmlGuiWindow* self, QTimerEvent* event);
void KXmlGuiWindow_ChildEvent(KXmlGuiWindow* self, QChildEvent* event);
void KXmlGuiWindow_OnChildEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseChildEvent(KXmlGuiWindow* self, QChildEvent* event);
void KXmlGuiWindow_CustomEvent(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_OnCustomEvent(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseCustomEvent(KXmlGuiWindow* self, QEvent* event);
void KXmlGuiWindow_ConnectNotify(KXmlGuiWindow* self, const QMetaMethod* signal);
void KXmlGuiWindow_OnConnectNotify(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseConnectNotify(KXmlGuiWindow* self, const QMetaMethod* signal);
void KXmlGuiWindow_DisconnectNotify(KXmlGuiWindow* self, const QMetaMethod* signal);
void KXmlGuiWindow_OnDisconnectNotify(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDisconnectNotify(KXmlGuiWindow* self, const QMetaMethod* signal);
libqt_list /* of libqt_string */ KXmlGuiWindow_ContainerTags(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnContainerTags(const KXmlGuiWindow* self, intptr_t slot);
libqt_list /* of libqt_string */ KXmlGuiWindow_QBaseContainerTags(const KXmlGuiWindow* self);
QWidget* KXmlGuiWindow_CreateContainer(KXmlGuiWindow* self, QWidget* parent, int index, const QDomElement* element, QAction** containerAction);
void KXmlGuiWindow_OnCreateContainer(KXmlGuiWindow* self, intptr_t slot);
QWidget* KXmlGuiWindow_QBaseCreateContainer(KXmlGuiWindow* self, QWidget* parent, int index, const QDomElement* element, QAction** containerAction);
void KXmlGuiWindow_RemoveContainer(KXmlGuiWindow* self, QWidget* container, QWidget* parent, QDomElement* element, QAction* containerAction);
void KXmlGuiWindow_OnRemoveContainer(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseRemoveContainer(KXmlGuiWindow* self, QWidget* container, QWidget* parent, QDomElement* element, QAction* containerAction);
libqt_list /* of libqt_string */ KXmlGuiWindow_CustomTags(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnCustomTags(const KXmlGuiWindow* self, intptr_t slot);
libqt_list /* of libqt_string */ KXmlGuiWindow_QBaseCustomTags(const KXmlGuiWindow* self);
QAction* KXmlGuiWindow_CreateCustomElement(KXmlGuiWindow* self, QWidget* parent, int index, const QDomElement* element);
void KXmlGuiWindow_OnCreateCustomElement(KXmlGuiWindow* self, intptr_t slot);
QAction* KXmlGuiWindow_QBaseCreateCustomElement(KXmlGuiWindow* self, QWidget* parent, int index, const QDomElement* element);
QAction* KXmlGuiWindow_Action2(const KXmlGuiWindow* self, const QDomElement* element);
void KXmlGuiWindow_OnAction2(const KXmlGuiWindow* self, intptr_t slot);
QAction* KXmlGuiWindow_QBaseAction2(const KXmlGuiWindow* self, const QDomElement* element);
KActionCollection* KXmlGuiWindow_ActionCollection(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnActionCollection(const KXmlGuiWindow* self, intptr_t slot);
KActionCollection* KXmlGuiWindow_QBaseActionCollection(const KXmlGuiWindow* self);
libqt_string KXmlGuiWindow_ComponentName(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnComponentName(const KXmlGuiWindow* self, intptr_t slot);
libqt_string KXmlGuiWindow_QBaseComponentName(const KXmlGuiWindow* self);
QDomDocument* KXmlGuiWindow_DomDocument(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnDomDocument(const KXmlGuiWindow* self, intptr_t slot);
QDomDocument* KXmlGuiWindow_QBaseDomDocument(const KXmlGuiWindow* self);
libqt_string KXmlGuiWindow_XmlFile(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnXmlFile(const KXmlGuiWindow* self, intptr_t slot);
libqt_string KXmlGuiWindow_QBaseXmlFile(const KXmlGuiWindow* self);
libqt_string KXmlGuiWindow_LocalXMLFile(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnLocalXMLFile(const KXmlGuiWindow* self, intptr_t slot);
libqt_string KXmlGuiWindow_QBaseLocalXMLFile(const KXmlGuiWindow* self);
void KXmlGuiWindow_SetComponentName(KXmlGuiWindow* self, const libqt_string componentName, const libqt_string componentDisplayName);
void KXmlGuiWindow_OnSetComponentName(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetComponentName(KXmlGuiWindow* self, const libqt_string componentName, const libqt_string componentDisplayName);
void KXmlGuiWindow_SetXMLFile(KXmlGuiWindow* self, const libqt_string file, bool merge, bool setXMLDoc);
void KXmlGuiWindow_OnSetXMLFile(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetXMLFile(KXmlGuiWindow* self, const libqt_string file, bool merge, bool setXMLDoc);
void KXmlGuiWindow_SetLocalXMLFile(KXmlGuiWindow* self, const libqt_string file);
void KXmlGuiWindow_OnSetLocalXMLFile(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetLocalXMLFile(KXmlGuiWindow* self, const libqt_string file);
void KXmlGuiWindow_SetXML(KXmlGuiWindow* self, const libqt_string document, bool merge);
void KXmlGuiWindow_OnSetXML(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetXML(KXmlGuiWindow* self, const libqt_string document, bool merge);
void KXmlGuiWindow_SetDOMDocument(KXmlGuiWindow* self, const QDomDocument* document, bool merge);
void KXmlGuiWindow_OnSetDOMDocument(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSetDOMDocument(KXmlGuiWindow* self, const QDomDocument* document, bool merge);
void KXmlGuiWindow_StateChanged(KXmlGuiWindow* self, const libqt_string newstate, int reverse);
void KXmlGuiWindow_OnStateChanged(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseStateChanged(KXmlGuiWindow* self, const libqt_string newstate, int reverse);
void KXmlGuiWindow_CheckAmbiguousShortcuts(KXmlGuiWindow* self);
void KXmlGuiWindow_OnCheckAmbiguousShortcuts(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseCheckAmbiguousShortcuts(KXmlGuiWindow* self);
void KXmlGuiWindow_SavePropertiesInternal(KXmlGuiWindow* self, KConfig* param1, int param2);
void KXmlGuiWindow_OnSavePropertiesInternal(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSavePropertiesInternal(KXmlGuiWindow* self, KConfig* param1, int param2);
bool KXmlGuiWindow_ReadPropertiesInternal(KXmlGuiWindow* self, KConfig* param1, int param2);
void KXmlGuiWindow_OnReadPropertiesInternal(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseReadPropertiesInternal(KXmlGuiWindow* self, KConfig* param1, int param2);
bool KXmlGuiWindow_SettingsDirty(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnSettingsDirty(const KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseSettingsDirty(const KXmlGuiWindow* self);
void KXmlGuiWindow_SaveAutoSaveSettings(KXmlGuiWindow* self);
void KXmlGuiWindow_OnSaveAutoSaveSettings(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseSaveAutoSaveSettings(KXmlGuiWindow* self);
void KXmlGuiWindow_UpdateMicroFocus(KXmlGuiWindow* self);
void KXmlGuiWindow_OnUpdateMicroFocus(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseUpdateMicroFocus(KXmlGuiWindow* self);
void KXmlGuiWindow_Create(KXmlGuiWindow* self);
void KXmlGuiWindow_OnCreate(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseCreate(KXmlGuiWindow* self);
void KXmlGuiWindow_Destroy(KXmlGuiWindow* self);
void KXmlGuiWindow_OnDestroy(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseDestroy(KXmlGuiWindow* self);
bool KXmlGuiWindow_FocusNextChild(KXmlGuiWindow* self);
void KXmlGuiWindow_OnFocusNextChild(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseFocusNextChild(KXmlGuiWindow* self);
bool KXmlGuiWindow_FocusPreviousChild(KXmlGuiWindow* self);
void KXmlGuiWindow_OnFocusPreviousChild(KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseFocusPreviousChild(KXmlGuiWindow* self);
QObject* KXmlGuiWindow_Sender(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnSender(const KXmlGuiWindow* self, intptr_t slot);
QObject* KXmlGuiWindow_QBaseSender(const KXmlGuiWindow* self);
int KXmlGuiWindow_SenderSignalIndex(const KXmlGuiWindow* self);
void KXmlGuiWindow_OnSenderSignalIndex(const KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseSenderSignalIndex(const KXmlGuiWindow* self);
int KXmlGuiWindow_Receivers(const KXmlGuiWindow* self, const char* signal);
void KXmlGuiWindow_OnReceivers(const KXmlGuiWindow* self, intptr_t slot);
int KXmlGuiWindow_QBaseReceivers(const KXmlGuiWindow* self, const char* signal);
bool KXmlGuiWindow_IsSignalConnected(const KXmlGuiWindow* self, const QMetaMethod* signal);
void KXmlGuiWindow_OnIsSignalConnected(const KXmlGuiWindow* self, intptr_t slot);
bool KXmlGuiWindow_QBaseIsSignalConnected(const KXmlGuiWindow* self, const QMetaMethod* signal);
double KXmlGuiWindow_GetDecodedMetricF(const KXmlGuiWindow* self, int metricA, int metricB);
void KXmlGuiWindow_OnGetDecodedMetricF(const KXmlGuiWindow* self, intptr_t slot);
double KXmlGuiWindow_QBaseGetDecodedMetricF(const KXmlGuiWindow* self, int metricA, int metricB);
libqt_string KXmlGuiWindow_StandardsXmlFileLocation(KXmlGuiWindow* self);
void KXmlGuiWindow_OnStandardsXmlFileLocation(KXmlGuiWindow* self, intptr_t slot);
libqt_string KXmlGuiWindow_QBaseStandardsXmlFileLocation(KXmlGuiWindow* self);
void KXmlGuiWindow_LoadStandardsXmlFile(KXmlGuiWindow* self);
void KXmlGuiWindow_OnLoadStandardsXmlFile(KXmlGuiWindow* self, intptr_t slot);
void KXmlGuiWindow_QBaseLoadStandardsXmlFile(KXmlGuiWindow* self);
void KXmlGuiWindow_Delete(KXmlGuiWindow* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
