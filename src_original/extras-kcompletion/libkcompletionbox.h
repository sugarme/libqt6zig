#pragma once
#ifndef SRC_EXTRAS_KCOMPLETIONC_LIBKCOMPLETIONBOX_H
#define SRC_EXTRAS_KCOMPLETIONC_LIBKCOMPLETIONBOX_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KCompletionBox KCompletionBox;
typedef struct QAbstractItemDelegate QAbstractItemDelegate;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QListView QListView;
typedef struct QListWidget QListWidget;
typedef struct QListWidgetItem QListWidgetItem;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KCompletionBox* KCompletionBox_new(QWidget* parent);
KCompletionBox* KCompletionBox_new2();
QMetaObject* KCompletionBox_MetaObject(const KCompletionBox* self);
void* KCompletionBox_Metacast(KCompletionBox* self, const char* param1);
int KCompletionBox_Metacall(KCompletionBox* self, int param1, int param2, void** param3);
libqt_string KCompletionBox_Tr(const char* s);
QSize* KCompletionBox_SizeHint(const KCompletionBox* self);
bool KCompletionBox_ActivateOnSelect(const KCompletionBox* self);
libqt_list /* of libqt_string */ KCompletionBox_Items(const KCompletionBox* self);
bool KCompletionBox_IsTabHandling(const KCompletionBox* self);
libqt_string KCompletionBox_CancelledText(const KCompletionBox* self);
void KCompletionBox_InsertItems(KCompletionBox* self, const libqt_list /* of libqt_string */ items);
void KCompletionBox_SetItems(KCompletionBox* self, const libqt_list /* of libqt_string */ items);
void KCompletionBox_Popup(KCompletionBox* self);
void KCompletionBox_SetTabHandling(KCompletionBox* self, bool enable);
void KCompletionBox_SetCancelledText(KCompletionBox* self, const libqt_string text);
void KCompletionBox_SetActivateOnSelect(KCompletionBox* self, bool doEmit);
void KCompletionBox_Down(KCompletionBox* self);
void KCompletionBox_Up(KCompletionBox* self);
void KCompletionBox_PageDown(KCompletionBox* self);
void KCompletionBox_PageUp(KCompletionBox* self);
void KCompletionBox_Home(KCompletionBox* self);
void KCompletionBox_End(KCompletionBox* self);
void KCompletionBox_SetVisible(KCompletionBox* self, bool visible);
void KCompletionBox_TextActivated(KCompletionBox* self, const libqt_string text);
void KCompletionBox_Connect_TextActivated(KCompletionBox* self, intptr_t slot);
void KCompletionBox_UserCancelled(KCompletionBox* self, const libqt_string param1);
void KCompletionBox_Connect_UserCancelled(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_EventFilter(KCompletionBox* self, QObject* param1, QEvent* param2);
QPoint* KCompletionBox_GlobalPositionHint(const KCompletionBox* self);
void KCompletionBox_SlotActivated(KCompletionBox* self, QListWidgetItem* param1);
libqt_string KCompletionBox_Tr2(const char* s, const char* c);
libqt_string KCompletionBox_Tr3(const char* s, const char* c, int n);
void KCompletionBox_InsertItems2(KCompletionBox* self, const libqt_list /* of libqt_string */ items, int index);
void KCompletionBox_OnMetacall(KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseMetacall(KCompletionBox* self, int param1, int param2, void** param3);
void KCompletionBox_OnSizeHint(const KCompletionBox* self, intptr_t slot);
QSize* KCompletionBox_QBaseSizeHint(const KCompletionBox* self);
void KCompletionBox_OnPopup(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBasePopup(KCompletionBox* self);
void KCompletionBox_OnSetVisible(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetVisible(KCompletionBox* self, bool visible);
void KCompletionBox_OnEventFilter(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseEventFilter(KCompletionBox* self, QObject* param1, QEvent* param2);
void KCompletionBox_OnGlobalPositionHint(const KCompletionBox* self, intptr_t slot);
QPoint* KCompletionBox_QBaseGlobalPositionHint(const KCompletionBox* self);
void KCompletionBox_OnSlotActivated(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSlotActivated(KCompletionBox* self, QListWidgetItem* param1);
void KCompletionBox_SetSelectionModel(KCompletionBox* self, QItemSelectionModel* selectionModel);
void KCompletionBox_OnSetSelectionModel(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetSelectionModel(KCompletionBox* self, QItemSelectionModel* selectionModel);
void KCompletionBox_DropEvent(KCompletionBox* self, QDropEvent* event);
void KCompletionBox_OnDropEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDropEvent(KCompletionBox* self, QDropEvent* event);
bool KCompletionBox_Event(KCompletionBox* self, QEvent* e);
void KCompletionBox_OnEvent(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseEvent(KCompletionBox* self, QEvent* e);
libqt_list /* of libqt_string */ KCompletionBox_MimeTypes(const KCompletionBox* self);
void KCompletionBox_OnMimeTypes(const KCompletionBox* self, intptr_t slot);
libqt_list /* of libqt_string */ KCompletionBox_QBaseMimeTypes(const KCompletionBox* self);
QMimeData* KCompletionBox_MimeData(const KCompletionBox* self, const libqt_list /* of QListWidgetItem* */ items);
void KCompletionBox_OnMimeData(const KCompletionBox* self, intptr_t slot);
QMimeData* KCompletionBox_QBaseMimeData(const KCompletionBox* self, const libqt_list /* of QListWidgetItem* */ items);
bool KCompletionBox_DropMimeData(KCompletionBox* self, int index, const QMimeData* data, int action);
void KCompletionBox_OnDropMimeData(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseDropMimeData(KCompletionBox* self, int index, const QMimeData* data, int action);
int KCompletionBox_SupportedDropActions(const KCompletionBox* self);
void KCompletionBox_OnSupportedDropActions(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseSupportedDropActions(const KCompletionBox* self);
QRect* KCompletionBox_VisualRect(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_OnVisualRect(const KCompletionBox* self, intptr_t slot);
QRect* KCompletionBox_QBaseVisualRect(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_ScrollTo(KCompletionBox* self, const QModelIndex* index, int hint);
void KCompletionBox_OnScrollTo(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseScrollTo(KCompletionBox* self, const QModelIndex* index, int hint);
QModelIndex* KCompletionBox_IndexAt(const KCompletionBox* self, const QPoint* p);
void KCompletionBox_OnIndexAt(const KCompletionBox* self, intptr_t slot);
QModelIndex* KCompletionBox_QBaseIndexAt(const KCompletionBox* self, const QPoint* p);
void KCompletionBox_DoItemsLayout(KCompletionBox* self);
void KCompletionBox_OnDoItemsLayout(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDoItemsLayout(KCompletionBox* self);
void KCompletionBox_Reset(KCompletionBox* self);
void KCompletionBox_OnReset(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseReset(KCompletionBox* self);
void KCompletionBox_SetRootIndex(KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_OnSetRootIndex(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetRootIndex(KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_ScrollContentsBy(KCompletionBox* self, int dx, int dy);
void KCompletionBox_OnScrollContentsBy(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseScrollContentsBy(KCompletionBox* self, int dx, int dy);
void KCompletionBox_DataChanged(KCompletionBox* self, const QModelIndex* topLeft, const QModelIndex* bottomRight, const libqt_list /* of int */ roles);
void KCompletionBox_OnDataChanged(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDataChanged(KCompletionBox* self, const QModelIndex* topLeft, const QModelIndex* bottomRight, const libqt_list /* of int */ roles);
void KCompletionBox_RowsInserted(KCompletionBox* self, const QModelIndex* parent, int start, int end);
void KCompletionBox_OnRowsInserted(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseRowsInserted(KCompletionBox* self, const QModelIndex* parent, int start, int end);
void KCompletionBox_RowsAboutToBeRemoved(KCompletionBox* self, const QModelIndex* parent, int start, int end);
void KCompletionBox_OnRowsAboutToBeRemoved(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseRowsAboutToBeRemoved(KCompletionBox* self, const QModelIndex* parent, int start, int end);
void KCompletionBox_MouseMoveEvent(KCompletionBox* self, QMouseEvent* e);
void KCompletionBox_OnMouseMoveEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseMouseMoveEvent(KCompletionBox* self, QMouseEvent* e);
void KCompletionBox_MouseReleaseEvent(KCompletionBox* self, QMouseEvent* e);
void KCompletionBox_OnMouseReleaseEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseMouseReleaseEvent(KCompletionBox* self, QMouseEvent* e);
void KCompletionBox_WheelEvent(KCompletionBox* self, QWheelEvent* e);
void KCompletionBox_OnWheelEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseWheelEvent(KCompletionBox* self, QWheelEvent* e);
void KCompletionBox_TimerEvent(KCompletionBox* self, QTimerEvent* e);
void KCompletionBox_OnTimerEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseTimerEvent(KCompletionBox* self, QTimerEvent* e);
void KCompletionBox_ResizeEvent(KCompletionBox* self, QResizeEvent* e);
void KCompletionBox_OnResizeEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseResizeEvent(KCompletionBox* self, QResizeEvent* e);
void KCompletionBox_DragMoveEvent(KCompletionBox* self, QDragMoveEvent* e);
void KCompletionBox_OnDragMoveEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDragMoveEvent(KCompletionBox* self, QDragMoveEvent* e);
void KCompletionBox_DragLeaveEvent(KCompletionBox* self, QDragLeaveEvent* e);
void KCompletionBox_OnDragLeaveEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDragLeaveEvent(KCompletionBox* self, QDragLeaveEvent* e);
void KCompletionBox_StartDrag(KCompletionBox* self, int supportedActions);
void KCompletionBox_OnStartDrag(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseStartDrag(KCompletionBox* self, int supportedActions);
void KCompletionBox_InitViewItemOption(const KCompletionBox* self, QStyleOptionViewItem* option);
void KCompletionBox_OnInitViewItemOption(const KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseInitViewItemOption(const KCompletionBox* self, QStyleOptionViewItem* option);
void KCompletionBox_PaintEvent(KCompletionBox* self, QPaintEvent* e);
void KCompletionBox_OnPaintEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBasePaintEvent(KCompletionBox* self, QPaintEvent* e);
int KCompletionBox_HorizontalOffset(const KCompletionBox* self);
void KCompletionBox_OnHorizontalOffset(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseHorizontalOffset(const KCompletionBox* self);
int KCompletionBox_VerticalOffset(const KCompletionBox* self);
void KCompletionBox_OnVerticalOffset(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseVerticalOffset(const KCompletionBox* self);
QModelIndex* KCompletionBox_MoveCursor(KCompletionBox* self, int cursorAction, int modifiers);
void KCompletionBox_OnMoveCursor(KCompletionBox* self, intptr_t slot);
QModelIndex* KCompletionBox_QBaseMoveCursor(KCompletionBox* self, int cursorAction, int modifiers);
void KCompletionBox_SetSelection(KCompletionBox* self, const QRect* rect, int command);
void KCompletionBox_OnSetSelection(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetSelection(KCompletionBox* self, const QRect* rect, int command);
QRegion* KCompletionBox_VisualRegionForSelection(const KCompletionBox* self, const QItemSelection* selection);
void KCompletionBox_OnVisualRegionForSelection(const KCompletionBox* self, intptr_t slot);
QRegion* KCompletionBox_QBaseVisualRegionForSelection(const KCompletionBox* self, const QItemSelection* selection);
libqt_list /* of QModelIndex* */ KCompletionBox_SelectedIndexes(const KCompletionBox* self);
void KCompletionBox_OnSelectedIndexes(const KCompletionBox* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KCompletionBox_QBaseSelectedIndexes(const KCompletionBox* self);
void KCompletionBox_UpdateGeometries(KCompletionBox* self);
void KCompletionBox_OnUpdateGeometries(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseUpdateGeometries(KCompletionBox* self);
bool KCompletionBox_IsIndexHidden(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_OnIsIndexHidden(const KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseIsIndexHidden(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_SelectionChanged(KCompletionBox* self, const QItemSelection* selected, const QItemSelection* deselected);
void KCompletionBox_OnSelectionChanged(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSelectionChanged(KCompletionBox* self, const QItemSelection* selected, const QItemSelection* deselected);
void KCompletionBox_CurrentChanged(KCompletionBox* self, const QModelIndex* current, const QModelIndex* previous);
void KCompletionBox_OnCurrentChanged(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCurrentChanged(KCompletionBox* self, const QModelIndex* current, const QModelIndex* previous);
QSize* KCompletionBox_ViewportSizeHint(const KCompletionBox* self);
void KCompletionBox_OnViewportSizeHint(const KCompletionBox* self, intptr_t slot);
QSize* KCompletionBox_QBaseViewportSizeHint(const KCompletionBox* self);
void KCompletionBox_KeyboardSearch(KCompletionBox* self, const libqt_string search);
void KCompletionBox_OnKeyboardSearch(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseKeyboardSearch(KCompletionBox* self, const libqt_string search);
int KCompletionBox_SizeHintForRow(const KCompletionBox* self, int row);
void KCompletionBox_OnSizeHintForRow(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseSizeHintForRow(const KCompletionBox* self, int row);
int KCompletionBox_SizeHintForColumn(const KCompletionBox* self, int column);
void KCompletionBox_OnSizeHintForColumn(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseSizeHintForColumn(const KCompletionBox* self, int column);
QAbstractItemDelegate* KCompletionBox_ItemDelegateForIndex(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_OnItemDelegateForIndex(const KCompletionBox* self, intptr_t slot);
QAbstractItemDelegate* KCompletionBox_QBaseItemDelegateForIndex(const KCompletionBox* self, const QModelIndex* index);
QVariant* KCompletionBox_InputMethodQuery(const KCompletionBox* self, int query);
void KCompletionBox_OnInputMethodQuery(const KCompletionBox* self, intptr_t slot);
QVariant* KCompletionBox_QBaseInputMethodQuery(const KCompletionBox* self, int query);
void KCompletionBox_SelectAll(KCompletionBox* self);
void KCompletionBox_OnSelectAll(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSelectAll(KCompletionBox* self);
void KCompletionBox_UpdateEditorData(KCompletionBox* self);
void KCompletionBox_OnUpdateEditorData(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseUpdateEditorData(KCompletionBox* self);
void KCompletionBox_UpdateEditorGeometries(KCompletionBox* self);
void KCompletionBox_OnUpdateEditorGeometries(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseUpdateEditorGeometries(KCompletionBox* self);
void KCompletionBox_VerticalScrollbarAction(KCompletionBox* self, int action);
void KCompletionBox_OnVerticalScrollbarAction(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseVerticalScrollbarAction(KCompletionBox* self, int action);
void KCompletionBox_HorizontalScrollbarAction(KCompletionBox* self, int action);
void KCompletionBox_OnHorizontalScrollbarAction(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseHorizontalScrollbarAction(KCompletionBox* self, int action);
void KCompletionBox_VerticalScrollbarValueChanged(KCompletionBox* self, int value);
void KCompletionBox_OnVerticalScrollbarValueChanged(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseVerticalScrollbarValueChanged(KCompletionBox* self, int value);
void KCompletionBox_HorizontalScrollbarValueChanged(KCompletionBox* self, int value);
void KCompletionBox_OnHorizontalScrollbarValueChanged(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseHorizontalScrollbarValueChanged(KCompletionBox* self, int value);
void KCompletionBox_CloseEditor(KCompletionBox* self, QWidget* editor, int hint);
void KCompletionBox_OnCloseEditor(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCloseEditor(KCompletionBox* self, QWidget* editor, int hint);
void KCompletionBox_CommitData(KCompletionBox* self, QWidget* editor);
void KCompletionBox_OnCommitData(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCommitData(KCompletionBox* self, QWidget* editor);
void KCompletionBox_EditorDestroyed(KCompletionBox* self, QObject* editor);
void KCompletionBox_OnEditorDestroyed(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseEditorDestroyed(KCompletionBox* self, QObject* editor);
bool KCompletionBox_Edit2(KCompletionBox* self, const QModelIndex* index, int trigger, QEvent* event);
void KCompletionBox_OnEdit2(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseEdit2(KCompletionBox* self, const QModelIndex* index, int trigger, QEvent* event);
int KCompletionBox_SelectionCommand(const KCompletionBox* self, const QModelIndex* index, const QEvent* event);
void KCompletionBox_OnSelectionCommand(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseSelectionCommand(const KCompletionBox* self, const QModelIndex* index, const QEvent* event);
bool KCompletionBox_FocusNextPrevChild(KCompletionBox* self, bool next);
void KCompletionBox_OnFocusNextPrevChild(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseFocusNextPrevChild(KCompletionBox* self, bool next);
bool KCompletionBox_ViewportEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_OnViewportEvent(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseViewportEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_MousePressEvent(KCompletionBox* self, QMouseEvent* event);
void KCompletionBox_OnMousePressEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseMousePressEvent(KCompletionBox* self, QMouseEvent* event);
void KCompletionBox_MouseDoubleClickEvent(KCompletionBox* self, QMouseEvent* event);
void KCompletionBox_OnMouseDoubleClickEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseMouseDoubleClickEvent(KCompletionBox* self, QMouseEvent* event);
void KCompletionBox_DragEnterEvent(KCompletionBox* self, QDragEnterEvent* event);
void KCompletionBox_OnDragEnterEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDragEnterEvent(KCompletionBox* self, QDragEnterEvent* event);
void KCompletionBox_FocusInEvent(KCompletionBox* self, QFocusEvent* event);
void KCompletionBox_OnFocusInEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseFocusInEvent(KCompletionBox* self, QFocusEvent* event);
void KCompletionBox_FocusOutEvent(KCompletionBox* self, QFocusEvent* event);
void KCompletionBox_OnFocusOutEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseFocusOutEvent(KCompletionBox* self, QFocusEvent* event);
void KCompletionBox_KeyPressEvent(KCompletionBox* self, QKeyEvent* event);
void KCompletionBox_OnKeyPressEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseKeyPressEvent(KCompletionBox* self, QKeyEvent* event);
void KCompletionBox_InputMethodEvent(KCompletionBox* self, QInputMethodEvent* event);
void KCompletionBox_OnInputMethodEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseInputMethodEvent(KCompletionBox* self, QInputMethodEvent* event);
QSize* KCompletionBox_MinimumSizeHint(const KCompletionBox* self);
void KCompletionBox_OnMinimumSizeHint(const KCompletionBox* self, intptr_t slot);
QSize* KCompletionBox_QBaseMinimumSizeHint(const KCompletionBox* self);
void KCompletionBox_SetupViewport(KCompletionBox* self, QWidget* viewport);
void KCompletionBox_OnSetupViewport(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetupViewport(KCompletionBox* self, QWidget* viewport);
void KCompletionBox_ContextMenuEvent(KCompletionBox* self, QContextMenuEvent* param1);
void KCompletionBox_OnContextMenuEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseContextMenuEvent(KCompletionBox* self, QContextMenuEvent* param1);
void KCompletionBox_ChangeEvent(KCompletionBox* self, QEvent* param1);
void KCompletionBox_OnChangeEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseChangeEvent(KCompletionBox* self, QEvent* param1);
void KCompletionBox_InitStyleOption(const KCompletionBox* self, QStyleOptionFrame* option);
void KCompletionBox_OnInitStyleOption(const KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseInitStyleOption(const KCompletionBox* self, QStyleOptionFrame* option);
int KCompletionBox_DevType(const KCompletionBox* self);
void KCompletionBox_OnDevType(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseDevType(const KCompletionBox* self);
int KCompletionBox_HeightForWidth(const KCompletionBox* self, int param1);
void KCompletionBox_OnHeightForWidth(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseHeightForWidth(const KCompletionBox* self, int param1);
bool KCompletionBox_HasHeightForWidth(const KCompletionBox* self);
void KCompletionBox_OnHasHeightForWidth(const KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseHasHeightForWidth(const KCompletionBox* self);
QPaintEngine* KCompletionBox_PaintEngine(const KCompletionBox* self);
void KCompletionBox_OnPaintEngine(const KCompletionBox* self, intptr_t slot);
QPaintEngine* KCompletionBox_QBasePaintEngine(const KCompletionBox* self);
void KCompletionBox_KeyReleaseEvent(KCompletionBox* self, QKeyEvent* event);
void KCompletionBox_OnKeyReleaseEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseKeyReleaseEvent(KCompletionBox* self, QKeyEvent* event);
void KCompletionBox_EnterEvent(KCompletionBox* self, QEnterEvent* event);
void KCompletionBox_OnEnterEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseEnterEvent(KCompletionBox* self, QEnterEvent* event);
void KCompletionBox_LeaveEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_OnLeaveEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseLeaveEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_MoveEvent(KCompletionBox* self, QMoveEvent* event);
void KCompletionBox_OnMoveEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseMoveEvent(KCompletionBox* self, QMoveEvent* event);
void KCompletionBox_CloseEvent(KCompletionBox* self, QCloseEvent* event);
void KCompletionBox_OnCloseEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCloseEvent(KCompletionBox* self, QCloseEvent* event);
void KCompletionBox_TabletEvent(KCompletionBox* self, QTabletEvent* event);
void KCompletionBox_OnTabletEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseTabletEvent(KCompletionBox* self, QTabletEvent* event);
void KCompletionBox_ActionEvent(KCompletionBox* self, QActionEvent* event);
void KCompletionBox_OnActionEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseActionEvent(KCompletionBox* self, QActionEvent* event);
void KCompletionBox_ShowEvent(KCompletionBox* self, QShowEvent* event);
void KCompletionBox_OnShowEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseShowEvent(KCompletionBox* self, QShowEvent* event);
void KCompletionBox_HideEvent(KCompletionBox* self, QHideEvent* event);
void KCompletionBox_OnHideEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseHideEvent(KCompletionBox* self, QHideEvent* event);
bool KCompletionBox_NativeEvent(KCompletionBox* self, const libqt_string eventType, void* message, intptr_t* result);
void KCompletionBox_OnNativeEvent(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseNativeEvent(KCompletionBox* self, const libqt_string eventType, void* message, intptr_t* result);
int KCompletionBox_Metric(const KCompletionBox* self, int param1);
void KCompletionBox_OnMetric(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseMetric(const KCompletionBox* self, int param1);
void KCompletionBox_InitPainter(const KCompletionBox* self, QPainter* painter);
void KCompletionBox_OnInitPainter(const KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseInitPainter(const KCompletionBox* self, QPainter* painter);
QPaintDevice* KCompletionBox_Redirected(const KCompletionBox* self, QPoint* offset);
void KCompletionBox_OnRedirected(const KCompletionBox* self, intptr_t slot);
QPaintDevice* KCompletionBox_QBaseRedirected(const KCompletionBox* self, QPoint* offset);
QPainter* KCompletionBox_SharedPainter(const KCompletionBox* self);
void KCompletionBox_OnSharedPainter(const KCompletionBox* self, intptr_t slot);
QPainter* KCompletionBox_QBaseSharedPainter(const KCompletionBox* self);
void KCompletionBox_ChildEvent(KCompletionBox* self, QChildEvent* event);
void KCompletionBox_OnChildEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseChildEvent(KCompletionBox* self, QChildEvent* event);
void KCompletionBox_CustomEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_OnCustomEvent(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCustomEvent(KCompletionBox* self, QEvent* event);
void KCompletionBox_ConnectNotify(KCompletionBox* self, const QMetaMethod* signal);
void KCompletionBox_OnConnectNotify(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseConnectNotify(KCompletionBox* self, const QMetaMethod* signal);
void KCompletionBox_DisconnectNotify(KCompletionBox* self, const QMetaMethod* signal);
void KCompletionBox_OnDisconnectNotify(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDisconnectNotify(KCompletionBox* self, const QMetaMethod* signal);
QRect* KCompletionBox_CalculateGeometry(const KCompletionBox* self);
void KCompletionBox_OnCalculateGeometry(const KCompletionBox* self, intptr_t slot);
QRect* KCompletionBox_QBaseCalculateGeometry(const KCompletionBox* self);
void KCompletionBox_ResizeAndReposition(KCompletionBox* self);
void KCompletionBox_OnResizeAndReposition(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseResizeAndReposition(KCompletionBox* self);
void KCompletionBox_ResizeContents(KCompletionBox* self, int width, int height);
void KCompletionBox_OnResizeContents(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseResizeContents(KCompletionBox* self, int width, int height);
QSize* KCompletionBox_ContentsSize(const KCompletionBox* self);
void KCompletionBox_OnContentsSize(const KCompletionBox* self, intptr_t slot);
QSize* KCompletionBox_QBaseContentsSize(const KCompletionBox* self);
QRect* KCompletionBox_RectForIndex(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_OnRectForIndex(const KCompletionBox* self, intptr_t slot);
QRect* KCompletionBox_QBaseRectForIndex(const KCompletionBox* self, const QModelIndex* index);
void KCompletionBox_SetPositionForIndex(KCompletionBox* self, const QPoint* position, const QModelIndex* index);
void KCompletionBox_OnSetPositionForIndex(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetPositionForIndex(KCompletionBox* self, const QPoint* position, const QModelIndex* index);
int KCompletionBox_State(const KCompletionBox* self);
void KCompletionBox_OnState(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseState(const KCompletionBox* self);
void KCompletionBox_SetState(KCompletionBox* self, int state);
void KCompletionBox_OnSetState(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetState(KCompletionBox* self, int state);
void KCompletionBox_ScheduleDelayedItemsLayout(KCompletionBox* self);
void KCompletionBox_OnScheduleDelayedItemsLayout(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseScheduleDelayedItemsLayout(KCompletionBox* self);
void KCompletionBox_ExecuteDelayedItemsLayout(KCompletionBox* self);
void KCompletionBox_OnExecuteDelayedItemsLayout(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseExecuteDelayedItemsLayout(KCompletionBox* self);
void KCompletionBox_SetDirtyRegion(KCompletionBox* self, const QRegion* region);
void KCompletionBox_OnSetDirtyRegion(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetDirtyRegion(KCompletionBox* self, const QRegion* region);
void KCompletionBox_ScrollDirtyRegion(KCompletionBox* self, int dx, int dy);
void KCompletionBox_OnScrollDirtyRegion(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseScrollDirtyRegion(KCompletionBox* self, int dx, int dy);
QPoint* KCompletionBox_DirtyRegionOffset(const KCompletionBox* self);
void KCompletionBox_OnDirtyRegionOffset(const KCompletionBox* self, intptr_t slot);
QPoint* KCompletionBox_QBaseDirtyRegionOffset(const KCompletionBox* self);
void KCompletionBox_StartAutoScroll(KCompletionBox* self);
void KCompletionBox_OnStartAutoScroll(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseStartAutoScroll(KCompletionBox* self);
void KCompletionBox_StopAutoScroll(KCompletionBox* self);
void KCompletionBox_OnStopAutoScroll(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseStopAutoScroll(KCompletionBox* self);
void KCompletionBox_DoAutoScroll(KCompletionBox* self);
void KCompletionBox_OnDoAutoScroll(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDoAutoScroll(KCompletionBox* self);
int KCompletionBox_DropIndicatorPosition(const KCompletionBox* self);
void KCompletionBox_OnDropIndicatorPosition(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseDropIndicatorPosition(const KCompletionBox* self);
void KCompletionBox_SetViewportMargins(KCompletionBox* self, int left, int top, int right, int bottom);
void KCompletionBox_OnSetViewportMargins(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseSetViewportMargins(KCompletionBox* self, int left, int top, int right, int bottom);
QMargins* KCompletionBox_ViewportMargins(const KCompletionBox* self);
void KCompletionBox_OnViewportMargins(const KCompletionBox* self, intptr_t slot);
QMargins* KCompletionBox_QBaseViewportMargins(const KCompletionBox* self);
void KCompletionBox_DrawFrame(KCompletionBox* self, QPainter* param1);
void KCompletionBox_OnDrawFrame(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDrawFrame(KCompletionBox* self, QPainter* param1);
void KCompletionBox_UpdateMicroFocus(KCompletionBox* self);
void KCompletionBox_OnUpdateMicroFocus(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseUpdateMicroFocus(KCompletionBox* self);
void KCompletionBox_Create(KCompletionBox* self);
void KCompletionBox_OnCreate(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseCreate(KCompletionBox* self);
void KCompletionBox_Destroy(KCompletionBox* self);
void KCompletionBox_OnDestroy(KCompletionBox* self, intptr_t slot);
void KCompletionBox_QBaseDestroy(KCompletionBox* self);
bool KCompletionBox_FocusNextChild(KCompletionBox* self);
void KCompletionBox_OnFocusNextChild(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseFocusNextChild(KCompletionBox* self);
bool KCompletionBox_FocusPreviousChild(KCompletionBox* self);
void KCompletionBox_OnFocusPreviousChild(KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseFocusPreviousChild(KCompletionBox* self);
QObject* KCompletionBox_Sender(const KCompletionBox* self);
void KCompletionBox_OnSender(const KCompletionBox* self, intptr_t slot);
QObject* KCompletionBox_QBaseSender(const KCompletionBox* self);
int KCompletionBox_SenderSignalIndex(const KCompletionBox* self);
void KCompletionBox_OnSenderSignalIndex(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseSenderSignalIndex(const KCompletionBox* self);
int KCompletionBox_Receivers(const KCompletionBox* self, const char* signal);
void KCompletionBox_OnReceivers(const KCompletionBox* self, intptr_t slot);
int KCompletionBox_QBaseReceivers(const KCompletionBox* self, const char* signal);
bool KCompletionBox_IsSignalConnected(const KCompletionBox* self, const QMetaMethod* signal);
void KCompletionBox_OnIsSignalConnected(const KCompletionBox* self, intptr_t slot);
bool KCompletionBox_QBaseIsSignalConnected(const KCompletionBox* self, const QMetaMethod* signal);
double KCompletionBox_GetDecodedMetricF(const KCompletionBox* self, int metricA, int metricB);
void KCompletionBox_OnGetDecodedMetricF(const KCompletionBox* self, intptr_t slot);
double KCompletionBox_QBaseGetDecodedMetricF(const KCompletionBox* self, int metricA, int metricB);
void KCompletionBox_Delete(KCompletionBox* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
