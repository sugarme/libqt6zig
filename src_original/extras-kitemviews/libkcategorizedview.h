#pragma once
#ifndef SRC_EXTRAS_KITEMVIEWSC_LIBKCATEGORIZEDVIEW_H
#define SRC_EXTRAS_KITEMVIEWSC_LIBKCATEGORIZEDVIEW_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KCategorizedView KCategorizedView;
typedef struct KCategoryDrawer KCategoryDrawer;
typedef struct QAbstractItemDelegate QAbstractItemDelegate;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QListView QListView;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

KCategorizedView* KCategorizedView_new(QWidget* parent);
KCategorizedView* KCategorizedView_new2();
QMetaObject* KCategorizedView_MetaObject(const KCategorizedView* self);
void* KCategorizedView_Metacast(KCategorizedView* self, const char* param1);
int KCategorizedView_Metacall(KCategorizedView* self, int param1, int param2, void** param3);
libqt_string KCategorizedView_Tr(const char* s);
void KCategorizedView_SetModel(KCategorizedView* self, QAbstractItemModel* model);
void KCategorizedView_SetGridSize(KCategorizedView* self, const QSize* size);
void KCategorizedView_SetGridSizeOwn(KCategorizedView* self, const QSize* size);
QRect* KCategorizedView_VisualRect(const KCategorizedView* self, const QModelIndex* index);
KCategoryDrawer* KCategorizedView_CategoryDrawer(const KCategorizedView* self);
void KCategorizedView_SetCategoryDrawer(KCategorizedView* self, KCategoryDrawer* categoryDrawer);
int KCategorizedView_CategorySpacing(const KCategorizedView* self);
void KCategorizedView_SetCategorySpacing(KCategorizedView* self, int categorySpacing);
bool KCategorizedView_AlternatingBlockColors(const KCategorizedView* self);
void KCategorizedView_SetAlternatingBlockColors(KCategorizedView* self, bool enable);
bool KCategorizedView_CollapsibleBlocks(const KCategorizedView* self);
void KCategorizedView_SetCollapsibleBlocks(KCategorizedView* self, bool enable);
libqt_list /* of QModelIndex* */ KCategorizedView_Block(KCategorizedView* self, const libqt_string category);
libqt_list /* of QModelIndex* */ KCategorizedView_Block2(KCategorizedView* self, const QModelIndex* representative);
QModelIndex* KCategorizedView_IndexAt(const KCategorizedView* self, const QPoint* point);
void KCategorizedView_Reset(KCategorizedView* self);
void KCategorizedView_CategorySpacingChanged(KCategorizedView* self, int spacing);
void KCategorizedView_Connect_CategorySpacingChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_AlternatingBlockColorsChanged(KCategorizedView* self, bool enable);
void KCategorizedView_Connect_AlternatingBlockColorsChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_CollapsibleBlocksChanged(KCategorizedView* self, bool enable);
void KCategorizedView_Connect_CollapsibleBlocksChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_PaintEvent(KCategorizedView* self, QPaintEvent* event);
void KCategorizedView_ResizeEvent(KCategorizedView* self, QResizeEvent* event);
void KCategorizedView_SetSelection(KCategorizedView* self, const QRect* rect, int flags);
void KCategorizedView_MouseMoveEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_MousePressEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_MouseReleaseEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_LeaveEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_StartDrag(KCategorizedView* self, int supportedActions);
void KCategorizedView_DragMoveEvent(KCategorizedView* self, QDragMoveEvent* event);
void KCategorizedView_DragEnterEvent(KCategorizedView* self, QDragEnterEvent* event);
void KCategorizedView_DragLeaveEvent(KCategorizedView* self, QDragLeaveEvent* event);
void KCategorizedView_DropEvent(KCategorizedView* self, QDropEvent* event);
QModelIndex* KCategorizedView_MoveCursor(KCategorizedView* self, int cursorAction, int modifiers);
void KCategorizedView_RowsAboutToBeRemoved(KCategorizedView* self, const QModelIndex* parent, int start, int end);
void KCategorizedView_UpdateGeometries(KCategorizedView* self);
void KCategorizedView_CurrentChanged(KCategorizedView* self, const QModelIndex* current, const QModelIndex* previous);
void KCategorizedView_DataChanged(KCategorizedView* self, const QModelIndex* topLeft, const QModelIndex* bottomRight, const libqt_list /* of int */ roles);
void KCategorizedView_RowsInserted(KCategorizedView* self, const QModelIndex* parent, int start, int end);
void KCategorizedView_SlotLayoutChanged(KCategorizedView* self);
libqt_string KCategorizedView_Tr2(const char* s, const char* c);
libqt_string KCategorizedView_Tr3(const char* s, const char* c, int n);
void KCategorizedView_OnMetacall(KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseMetacall(KCategorizedView* self, int param1, int param2, void** param3);
void KCategorizedView_OnSetModel(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetModel(KCategorizedView* self, QAbstractItemModel* model);
void KCategorizedView_OnVisualRect(const KCategorizedView* self, intptr_t slot);
QRect* KCategorizedView_QBaseVisualRect(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_OnIndexAt(const KCategorizedView* self, intptr_t slot);
QModelIndex* KCategorizedView_QBaseIndexAt(const KCategorizedView* self, const QPoint* point);
void KCategorizedView_OnReset(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseReset(KCategorizedView* self);
void KCategorizedView_OnPaintEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBasePaintEvent(KCategorizedView* self, QPaintEvent* event);
void KCategorizedView_OnResizeEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseResizeEvent(KCategorizedView* self, QResizeEvent* event);
void KCategorizedView_OnSetSelection(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetSelection(KCategorizedView* self, const QRect* rect, int flags);
void KCategorizedView_OnMouseMoveEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseMouseMoveEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_OnMousePressEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseMousePressEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_OnMouseReleaseEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseMouseReleaseEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_OnLeaveEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseLeaveEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_OnStartDrag(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseStartDrag(KCategorizedView* self, int supportedActions);
void KCategorizedView_OnDragMoveEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDragMoveEvent(KCategorizedView* self, QDragMoveEvent* event);
void KCategorizedView_OnDragEnterEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDragEnterEvent(KCategorizedView* self, QDragEnterEvent* event);
void KCategorizedView_OnDragLeaveEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDragLeaveEvent(KCategorizedView* self, QDragLeaveEvent* event);
void KCategorizedView_OnDropEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDropEvent(KCategorizedView* self, QDropEvent* event);
void KCategorizedView_OnMoveCursor(KCategorizedView* self, intptr_t slot);
QModelIndex* KCategorizedView_QBaseMoveCursor(KCategorizedView* self, int cursorAction, int modifiers);
void KCategorizedView_OnRowsAboutToBeRemoved(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseRowsAboutToBeRemoved(KCategorizedView* self, const QModelIndex* parent, int start, int end);
void KCategorizedView_OnUpdateGeometries(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseUpdateGeometries(KCategorizedView* self);
void KCategorizedView_OnCurrentChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCurrentChanged(KCategorizedView* self, const QModelIndex* current, const QModelIndex* previous);
void KCategorizedView_OnDataChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDataChanged(KCategorizedView* self, const QModelIndex* topLeft, const QModelIndex* bottomRight, const libqt_list /* of int */ roles);
void KCategorizedView_OnRowsInserted(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseRowsInserted(KCategorizedView* self, const QModelIndex* parent, int start, int end);
void KCategorizedView_OnSlotLayoutChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSlotLayoutChanged(KCategorizedView* self);
void KCategorizedView_ScrollTo(KCategorizedView* self, const QModelIndex* index, int hint);
void KCategorizedView_OnScrollTo(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseScrollTo(KCategorizedView* self, const QModelIndex* index, int hint);
void KCategorizedView_DoItemsLayout(KCategorizedView* self);
void KCategorizedView_OnDoItemsLayout(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDoItemsLayout(KCategorizedView* self);
void KCategorizedView_SetRootIndex(KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_OnSetRootIndex(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetRootIndex(KCategorizedView* self, const QModelIndex* index);
bool KCategorizedView_Event(KCategorizedView* self, QEvent* e);
void KCategorizedView_OnEvent(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseEvent(KCategorizedView* self, QEvent* e);
void KCategorizedView_ScrollContentsBy(KCategorizedView* self, int dx, int dy);
void KCategorizedView_OnScrollContentsBy(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseScrollContentsBy(KCategorizedView* self, int dx, int dy);
void KCategorizedView_WheelEvent(KCategorizedView* self, QWheelEvent* e);
void KCategorizedView_OnWheelEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseWheelEvent(KCategorizedView* self, QWheelEvent* e);
void KCategorizedView_TimerEvent(KCategorizedView* self, QTimerEvent* e);
void KCategorizedView_OnTimerEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseTimerEvent(KCategorizedView* self, QTimerEvent* e);
void KCategorizedView_InitViewItemOption(const KCategorizedView* self, QStyleOptionViewItem* option);
void KCategorizedView_OnInitViewItemOption(const KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseInitViewItemOption(const KCategorizedView* self, QStyleOptionViewItem* option);
int KCategorizedView_HorizontalOffset(const KCategorizedView* self);
void KCategorizedView_OnHorizontalOffset(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseHorizontalOffset(const KCategorizedView* self);
int KCategorizedView_VerticalOffset(const KCategorizedView* self);
void KCategorizedView_OnVerticalOffset(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseVerticalOffset(const KCategorizedView* self);
QRegion* KCategorizedView_VisualRegionForSelection(const KCategorizedView* self, const QItemSelection* selection);
void KCategorizedView_OnVisualRegionForSelection(const KCategorizedView* self, intptr_t slot);
QRegion* KCategorizedView_QBaseVisualRegionForSelection(const KCategorizedView* self, const QItemSelection* selection);
libqt_list /* of QModelIndex* */ KCategorizedView_SelectedIndexes(const KCategorizedView* self);
void KCategorizedView_OnSelectedIndexes(const KCategorizedView* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KCategorizedView_QBaseSelectedIndexes(const KCategorizedView* self);
bool KCategorizedView_IsIndexHidden(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_OnIsIndexHidden(const KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseIsIndexHidden(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_SelectionChanged(KCategorizedView* self, const QItemSelection* selected, const QItemSelection* deselected);
void KCategorizedView_OnSelectionChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSelectionChanged(KCategorizedView* self, const QItemSelection* selected, const QItemSelection* deselected);
QSize* KCategorizedView_ViewportSizeHint(const KCategorizedView* self);
void KCategorizedView_OnViewportSizeHint(const KCategorizedView* self, intptr_t slot);
QSize* KCategorizedView_QBaseViewportSizeHint(const KCategorizedView* self);
void KCategorizedView_SetSelectionModel(KCategorizedView* self, QItemSelectionModel* selectionModel);
void KCategorizedView_OnSetSelectionModel(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetSelectionModel(KCategorizedView* self, QItemSelectionModel* selectionModel);
void KCategorizedView_KeyboardSearch(KCategorizedView* self, const libqt_string search);
void KCategorizedView_OnKeyboardSearch(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseKeyboardSearch(KCategorizedView* self, const libqt_string search);
int KCategorizedView_SizeHintForRow(const KCategorizedView* self, int row);
void KCategorizedView_OnSizeHintForRow(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseSizeHintForRow(const KCategorizedView* self, int row);
int KCategorizedView_SizeHintForColumn(const KCategorizedView* self, int column);
void KCategorizedView_OnSizeHintForColumn(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseSizeHintForColumn(const KCategorizedView* self, int column);
QAbstractItemDelegate* KCategorizedView_ItemDelegateForIndex(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_OnItemDelegateForIndex(const KCategorizedView* self, intptr_t slot);
QAbstractItemDelegate* KCategorizedView_QBaseItemDelegateForIndex(const KCategorizedView* self, const QModelIndex* index);
QVariant* KCategorizedView_InputMethodQuery(const KCategorizedView* self, int query);
void KCategorizedView_OnInputMethodQuery(const KCategorizedView* self, intptr_t slot);
QVariant* KCategorizedView_QBaseInputMethodQuery(const KCategorizedView* self, int query);
void KCategorizedView_SelectAll(KCategorizedView* self);
void KCategorizedView_OnSelectAll(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSelectAll(KCategorizedView* self);
void KCategorizedView_UpdateEditorData(KCategorizedView* self);
void KCategorizedView_OnUpdateEditorData(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseUpdateEditorData(KCategorizedView* self);
void KCategorizedView_UpdateEditorGeometries(KCategorizedView* self);
void KCategorizedView_OnUpdateEditorGeometries(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseUpdateEditorGeometries(KCategorizedView* self);
void KCategorizedView_VerticalScrollbarAction(KCategorizedView* self, int action);
void KCategorizedView_OnVerticalScrollbarAction(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseVerticalScrollbarAction(KCategorizedView* self, int action);
void KCategorizedView_HorizontalScrollbarAction(KCategorizedView* self, int action);
void KCategorizedView_OnHorizontalScrollbarAction(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseHorizontalScrollbarAction(KCategorizedView* self, int action);
void KCategorizedView_VerticalScrollbarValueChanged(KCategorizedView* self, int value);
void KCategorizedView_OnVerticalScrollbarValueChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseVerticalScrollbarValueChanged(KCategorizedView* self, int value);
void KCategorizedView_HorizontalScrollbarValueChanged(KCategorizedView* self, int value);
void KCategorizedView_OnHorizontalScrollbarValueChanged(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseHorizontalScrollbarValueChanged(KCategorizedView* self, int value);
void KCategorizedView_CloseEditor(KCategorizedView* self, QWidget* editor, int hint);
void KCategorizedView_OnCloseEditor(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCloseEditor(KCategorizedView* self, QWidget* editor, int hint);
void KCategorizedView_CommitData(KCategorizedView* self, QWidget* editor);
void KCategorizedView_OnCommitData(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCommitData(KCategorizedView* self, QWidget* editor);
void KCategorizedView_EditorDestroyed(KCategorizedView* self, QObject* editor);
void KCategorizedView_OnEditorDestroyed(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseEditorDestroyed(KCategorizedView* self, QObject* editor);
bool KCategorizedView_Edit2(KCategorizedView* self, const QModelIndex* index, int trigger, QEvent* event);
void KCategorizedView_OnEdit2(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseEdit2(KCategorizedView* self, const QModelIndex* index, int trigger, QEvent* event);
int KCategorizedView_SelectionCommand(const KCategorizedView* self, const QModelIndex* index, const QEvent* event);
void KCategorizedView_OnSelectionCommand(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseSelectionCommand(const KCategorizedView* self, const QModelIndex* index, const QEvent* event);
bool KCategorizedView_FocusNextPrevChild(KCategorizedView* self, bool next);
void KCategorizedView_OnFocusNextPrevChild(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseFocusNextPrevChild(KCategorizedView* self, bool next);
bool KCategorizedView_ViewportEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_OnViewportEvent(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseViewportEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_MouseDoubleClickEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_OnMouseDoubleClickEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseMouseDoubleClickEvent(KCategorizedView* self, QMouseEvent* event);
void KCategorizedView_FocusInEvent(KCategorizedView* self, QFocusEvent* event);
void KCategorizedView_OnFocusInEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseFocusInEvent(KCategorizedView* self, QFocusEvent* event);
void KCategorizedView_FocusOutEvent(KCategorizedView* self, QFocusEvent* event);
void KCategorizedView_OnFocusOutEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseFocusOutEvent(KCategorizedView* self, QFocusEvent* event);
void KCategorizedView_KeyPressEvent(KCategorizedView* self, QKeyEvent* event);
void KCategorizedView_OnKeyPressEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseKeyPressEvent(KCategorizedView* self, QKeyEvent* event);
void KCategorizedView_InputMethodEvent(KCategorizedView* self, QInputMethodEvent* event);
void KCategorizedView_OnInputMethodEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseInputMethodEvent(KCategorizedView* self, QInputMethodEvent* event);
bool KCategorizedView_EventFilter(KCategorizedView* self, QObject* object, QEvent* event);
void KCategorizedView_OnEventFilter(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseEventFilter(KCategorizedView* self, QObject* object, QEvent* event);
QSize* KCategorizedView_MinimumSizeHint(const KCategorizedView* self);
void KCategorizedView_OnMinimumSizeHint(const KCategorizedView* self, intptr_t slot);
QSize* KCategorizedView_QBaseMinimumSizeHint(const KCategorizedView* self);
QSize* KCategorizedView_SizeHint(const KCategorizedView* self);
void KCategorizedView_OnSizeHint(const KCategorizedView* self, intptr_t slot);
QSize* KCategorizedView_QBaseSizeHint(const KCategorizedView* self);
void KCategorizedView_SetupViewport(KCategorizedView* self, QWidget* viewport);
void KCategorizedView_OnSetupViewport(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetupViewport(KCategorizedView* self, QWidget* viewport);
void KCategorizedView_ContextMenuEvent(KCategorizedView* self, QContextMenuEvent* param1);
void KCategorizedView_OnContextMenuEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseContextMenuEvent(KCategorizedView* self, QContextMenuEvent* param1);
void KCategorizedView_ChangeEvent(KCategorizedView* self, QEvent* param1);
void KCategorizedView_OnChangeEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseChangeEvent(KCategorizedView* self, QEvent* param1);
void KCategorizedView_InitStyleOption(const KCategorizedView* self, QStyleOptionFrame* option);
void KCategorizedView_OnInitStyleOption(const KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseInitStyleOption(const KCategorizedView* self, QStyleOptionFrame* option);
int KCategorizedView_DevType(const KCategorizedView* self);
void KCategorizedView_OnDevType(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseDevType(const KCategorizedView* self);
void KCategorizedView_SetVisible(KCategorizedView* self, bool visible);
void KCategorizedView_OnSetVisible(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetVisible(KCategorizedView* self, bool visible);
int KCategorizedView_HeightForWidth(const KCategorizedView* self, int param1);
void KCategorizedView_OnHeightForWidth(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseHeightForWidth(const KCategorizedView* self, int param1);
bool KCategorizedView_HasHeightForWidth(const KCategorizedView* self);
void KCategorizedView_OnHasHeightForWidth(const KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseHasHeightForWidth(const KCategorizedView* self);
QPaintEngine* KCategorizedView_PaintEngine(const KCategorizedView* self);
void KCategorizedView_OnPaintEngine(const KCategorizedView* self, intptr_t slot);
QPaintEngine* KCategorizedView_QBasePaintEngine(const KCategorizedView* self);
void KCategorizedView_KeyReleaseEvent(KCategorizedView* self, QKeyEvent* event);
void KCategorizedView_OnKeyReleaseEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseKeyReleaseEvent(KCategorizedView* self, QKeyEvent* event);
void KCategorizedView_EnterEvent(KCategorizedView* self, QEnterEvent* event);
void KCategorizedView_OnEnterEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseEnterEvent(KCategorizedView* self, QEnterEvent* event);
void KCategorizedView_MoveEvent(KCategorizedView* self, QMoveEvent* event);
void KCategorizedView_OnMoveEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseMoveEvent(KCategorizedView* self, QMoveEvent* event);
void KCategorizedView_CloseEvent(KCategorizedView* self, QCloseEvent* event);
void KCategorizedView_OnCloseEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCloseEvent(KCategorizedView* self, QCloseEvent* event);
void KCategorizedView_TabletEvent(KCategorizedView* self, QTabletEvent* event);
void KCategorizedView_OnTabletEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseTabletEvent(KCategorizedView* self, QTabletEvent* event);
void KCategorizedView_ActionEvent(KCategorizedView* self, QActionEvent* event);
void KCategorizedView_OnActionEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseActionEvent(KCategorizedView* self, QActionEvent* event);
void KCategorizedView_ShowEvent(KCategorizedView* self, QShowEvent* event);
void KCategorizedView_OnShowEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseShowEvent(KCategorizedView* self, QShowEvent* event);
void KCategorizedView_HideEvent(KCategorizedView* self, QHideEvent* event);
void KCategorizedView_OnHideEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseHideEvent(KCategorizedView* self, QHideEvent* event);
bool KCategorizedView_NativeEvent(KCategorizedView* self, const libqt_string eventType, void* message, intptr_t* result);
void KCategorizedView_OnNativeEvent(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseNativeEvent(KCategorizedView* self, const libqt_string eventType, void* message, intptr_t* result);
int KCategorizedView_Metric(const KCategorizedView* self, int param1);
void KCategorizedView_OnMetric(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseMetric(const KCategorizedView* self, int param1);
void KCategorizedView_InitPainter(const KCategorizedView* self, QPainter* painter);
void KCategorizedView_OnInitPainter(const KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseInitPainter(const KCategorizedView* self, QPainter* painter);
QPaintDevice* KCategorizedView_Redirected(const KCategorizedView* self, QPoint* offset);
void KCategorizedView_OnRedirected(const KCategorizedView* self, intptr_t slot);
QPaintDevice* KCategorizedView_QBaseRedirected(const KCategorizedView* self, QPoint* offset);
QPainter* KCategorizedView_SharedPainter(const KCategorizedView* self);
void KCategorizedView_OnSharedPainter(const KCategorizedView* self, intptr_t slot);
QPainter* KCategorizedView_QBaseSharedPainter(const KCategorizedView* self);
void KCategorizedView_ChildEvent(KCategorizedView* self, QChildEvent* event);
void KCategorizedView_OnChildEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseChildEvent(KCategorizedView* self, QChildEvent* event);
void KCategorizedView_CustomEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_OnCustomEvent(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCustomEvent(KCategorizedView* self, QEvent* event);
void KCategorizedView_ConnectNotify(KCategorizedView* self, const QMetaMethod* signal);
void KCategorizedView_OnConnectNotify(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseConnectNotify(KCategorizedView* self, const QMetaMethod* signal);
void KCategorizedView_DisconnectNotify(KCategorizedView* self, const QMetaMethod* signal);
void KCategorizedView_OnDisconnectNotify(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDisconnectNotify(KCategorizedView* self, const QMetaMethod* signal);
void KCategorizedView_ResizeContents(KCategorizedView* self, int width, int height);
void KCategorizedView_OnResizeContents(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseResizeContents(KCategorizedView* self, int width, int height);
QSize* KCategorizedView_ContentsSize(const KCategorizedView* self);
void KCategorizedView_OnContentsSize(const KCategorizedView* self, intptr_t slot);
QSize* KCategorizedView_QBaseContentsSize(const KCategorizedView* self);
QRect* KCategorizedView_RectForIndex(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_OnRectForIndex(const KCategorizedView* self, intptr_t slot);
QRect* KCategorizedView_QBaseRectForIndex(const KCategorizedView* self, const QModelIndex* index);
void KCategorizedView_SetPositionForIndex(KCategorizedView* self, const QPoint* position, const QModelIndex* index);
void KCategorizedView_OnSetPositionForIndex(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetPositionForIndex(KCategorizedView* self, const QPoint* position, const QModelIndex* index);
int KCategorizedView_State(const KCategorizedView* self);
void KCategorizedView_OnState(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseState(const KCategorizedView* self);
void KCategorizedView_SetState(KCategorizedView* self, int state);
void KCategorizedView_OnSetState(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetState(KCategorizedView* self, int state);
void KCategorizedView_ScheduleDelayedItemsLayout(KCategorizedView* self);
void KCategorizedView_OnScheduleDelayedItemsLayout(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseScheduleDelayedItemsLayout(KCategorizedView* self);
void KCategorizedView_ExecuteDelayedItemsLayout(KCategorizedView* self);
void KCategorizedView_OnExecuteDelayedItemsLayout(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseExecuteDelayedItemsLayout(KCategorizedView* self);
void KCategorizedView_SetDirtyRegion(KCategorizedView* self, const QRegion* region);
void KCategorizedView_OnSetDirtyRegion(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetDirtyRegion(KCategorizedView* self, const QRegion* region);
void KCategorizedView_ScrollDirtyRegion(KCategorizedView* self, int dx, int dy);
void KCategorizedView_OnScrollDirtyRegion(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseScrollDirtyRegion(KCategorizedView* self, int dx, int dy);
QPoint* KCategorizedView_DirtyRegionOffset(const KCategorizedView* self);
void KCategorizedView_OnDirtyRegionOffset(const KCategorizedView* self, intptr_t slot);
QPoint* KCategorizedView_QBaseDirtyRegionOffset(const KCategorizedView* self);
void KCategorizedView_StartAutoScroll(KCategorizedView* self);
void KCategorizedView_OnStartAutoScroll(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseStartAutoScroll(KCategorizedView* self);
void KCategorizedView_StopAutoScroll(KCategorizedView* self);
void KCategorizedView_OnStopAutoScroll(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseStopAutoScroll(KCategorizedView* self);
void KCategorizedView_DoAutoScroll(KCategorizedView* self);
void KCategorizedView_OnDoAutoScroll(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDoAutoScroll(KCategorizedView* self);
int KCategorizedView_DropIndicatorPosition(const KCategorizedView* self);
void KCategorizedView_OnDropIndicatorPosition(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseDropIndicatorPosition(const KCategorizedView* self);
void KCategorizedView_SetViewportMargins(KCategorizedView* self, int left, int top, int right, int bottom);
void KCategorizedView_OnSetViewportMargins(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseSetViewportMargins(KCategorizedView* self, int left, int top, int right, int bottom);
QMargins* KCategorizedView_ViewportMargins(const KCategorizedView* self);
void KCategorizedView_OnViewportMargins(const KCategorizedView* self, intptr_t slot);
QMargins* KCategorizedView_QBaseViewportMargins(const KCategorizedView* self);
void KCategorizedView_DrawFrame(KCategorizedView* self, QPainter* param1);
void KCategorizedView_OnDrawFrame(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDrawFrame(KCategorizedView* self, QPainter* param1);
void KCategorizedView_UpdateMicroFocus(KCategorizedView* self);
void KCategorizedView_OnUpdateMicroFocus(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseUpdateMicroFocus(KCategorizedView* self);
void KCategorizedView_Create(KCategorizedView* self);
void KCategorizedView_OnCreate(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseCreate(KCategorizedView* self);
void KCategorizedView_Destroy(KCategorizedView* self);
void KCategorizedView_OnDestroy(KCategorizedView* self, intptr_t slot);
void KCategorizedView_QBaseDestroy(KCategorizedView* self);
bool KCategorizedView_FocusNextChild(KCategorizedView* self);
void KCategorizedView_OnFocusNextChild(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseFocusNextChild(KCategorizedView* self);
bool KCategorizedView_FocusPreviousChild(KCategorizedView* self);
void KCategorizedView_OnFocusPreviousChild(KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseFocusPreviousChild(KCategorizedView* self);
QObject* KCategorizedView_Sender(const KCategorizedView* self);
void KCategorizedView_OnSender(const KCategorizedView* self, intptr_t slot);
QObject* KCategorizedView_QBaseSender(const KCategorizedView* self);
int KCategorizedView_SenderSignalIndex(const KCategorizedView* self);
void KCategorizedView_OnSenderSignalIndex(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseSenderSignalIndex(const KCategorizedView* self);
int KCategorizedView_Receivers(const KCategorizedView* self, const char* signal);
void KCategorizedView_OnReceivers(const KCategorizedView* self, intptr_t slot);
int KCategorizedView_QBaseReceivers(const KCategorizedView* self, const char* signal);
bool KCategorizedView_IsSignalConnected(const KCategorizedView* self, const QMetaMethod* signal);
void KCategorizedView_OnIsSignalConnected(const KCategorizedView* self, intptr_t slot);
bool KCategorizedView_QBaseIsSignalConnected(const KCategorizedView* self, const QMetaMethod* signal);
double KCategorizedView_GetDecodedMetricF(const KCategorizedView* self, int metricA, int metricB);
void KCategorizedView_OnGetDecodedMetricF(const KCategorizedView* self, intptr_t slot);
double KCategorizedView_QBaseGetDecodedMetricF(const KCategorizedView* self, int metricA, int metricB);
void KCategorizedView_Delete(KCategorizedView* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
