#pragma once
#ifndef SRC_EXTRAS_KTEXTWIDGETSC_LIBKTEXTEDIT_H
#define SRC_EXTRAS_KTEXTWIDGETSC_LIBKTEXTEDIT_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_Sonnet__Highlighter)
typedef Sonnet::Highlighter Sonnet__Highlighter;
#endif
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_Sonnet__SpellCheckDecorator)
typedef Sonnet::SpellCheckDecorator Sonnet__SpellCheckDecorator;
#endif
#else
typedef struct KTextEdit KTextEdit;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMargins QMargins;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTextCursor QTextCursor;
typedef struct QTextEdit QTextEdit;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
typedef struct Sonnet__Highlighter Sonnet__Highlighter;
typedef struct Sonnet__SpellCheckDecorator Sonnet__SpellCheckDecorator;
#endif

KTextEdit* KTextEdit_new(QWidget* parent);
KTextEdit* KTextEdit_new2(const libqt_string text);
KTextEdit* KTextEdit_new3();
KTextEdit* KTextEdit_new4(const libqt_string text, QWidget* parent);
QMetaObject* KTextEdit_MetaObject(const KTextEdit* self);
void* KTextEdit_Metacast(KTextEdit* self, const char* param1);
int KTextEdit_Metacall(KTextEdit* self, int param1, int param2, void** param3);
libqt_string KTextEdit_Tr(const char* s);
void KTextEdit_SetReadOnly(KTextEdit* self, bool readOnly);
void KTextEdit_SetCheckSpellingEnabled(KTextEdit* self, bool check);
bool KTextEdit_CheckSpellingEnabled(const KTextEdit* self);
bool KTextEdit_ShouldBlockBeSpellChecked(const KTextEdit* self, const libqt_string block);
void KTextEdit_HighlightWord(KTextEdit* self, int length, int pos);
void KTextEdit_CreateHighlighter(KTextEdit* self);
Sonnet__Highlighter* KTextEdit_Highlighter(const KTextEdit* self);
void KTextEdit_SetHighlighter(KTextEdit* self, Sonnet__Highlighter* _highLighter);
QMenu* KTextEdit_MousePopupMenu(KTextEdit* self);
void KTextEdit_EnableFindReplace(KTextEdit* self, bool enabled);
libqt_string KTextEdit_SpellCheckingLanguage(const KTextEdit* self);
void KTextEdit_ShowTabAction(KTextEdit* self, bool show);
void KTextEdit_ShowAutoCorrectButton(KTextEdit* self, bool show);
void KTextEdit_ForceSpellChecking(KTextEdit* self);
void KTextEdit_CheckSpellingChanged(KTextEdit* self, bool param1);
void KTextEdit_Connect_CheckSpellingChanged(KTextEdit* self, intptr_t slot);
void KTextEdit_SpellCheckStatus(KTextEdit* self, const libqt_string param1);
void KTextEdit_Connect_SpellCheckStatus(KTextEdit* self, intptr_t slot);
void KTextEdit_LanguageChanged(KTextEdit* self, const libqt_string language);
void KTextEdit_Connect_LanguageChanged(KTextEdit* self, intptr_t slot);
void KTextEdit_AboutToShowContextMenu(KTextEdit* self, QMenu* menu);
void KTextEdit_Connect_AboutToShowContextMenu(KTextEdit* self, intptr_t slot);
void KTextEdit_SpellCheckerAutoCorrect(KTextEdit* self, const libqt_string currentWord, const libqt_string autoCorrectWord);
void KTextEdit_Connect_SpellCheckerAutoCorrect(KTextEdit* self, intptr_t slot);
void KTextEdit_SpellCheckingFinished(KTextEdit* self);
void KTextEdit_Connect_SpellCheckingFinished(KTextEdit* self, intptr_t slot);
void KTextEdit_SpellCheckingCanceled(KTextEdit* self);
void KTextEdit_Connect_SpellCheckingCanceled(KTextEdit* self, intptr_t slot);
void KTextEdit_SetSpellCheckingLanguage(KTextEdit* self, const libqt_string language);
void KTextEdit_CheckSpelling(KTextEdit* self);
void KTextEdit_ShowSpellConfigDialog(KTextEdit* self);
void KTextEdit_Replace(KTextEdit* self);
void KTextEdit_AddTextDecorator(KTextEdit* self, Sonnet__SpellCheckDecorator* decorator);
void KTextEdit_ClearDecorator(KTextEdit* self);
bool KTextEdit_Event(KTextEdit* self, QEvent* param1);
void KTextEdit_KeyPressEvent(KTextEdit* self, QKeyEvent* param1);
void KTextEdit_FocusInEvent(KTextEdit* self, QFocusEvent* param1);
void KTextEdit_DeleteWordBack(KTextEdit* self);
void KTextEdit_DeleteWordForward(KTextEdit* self);
void KTextEdit_ContextMenuEvent(KTextEdit* self, QContextMenuEvent* param1);
libqt_string KTextEdit_Tr2(const char* s, const char* c);
libqt_string KTextEdit_Tr3(const char* s, const char* c, int n);
void KTextEdit_ShowSpellConfigDialog1(KTextEdit* self, const libqt_string windowIcon);
void KTextEdit_OnMetacall(KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseMetacall(KTextEdit* self, int param1, int param2, void** param3);
void KTextEdit_OnSetReadOnly(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSetReadOnly(KTextEdit* self, bool readOnly);
void KTextEdit_OnSetCheckSpellingEnabled(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSetCheckSpellingEnabled(KTextEdit* self, bool check);
void KTextEdit_OnCheckSpellingEnabled(const KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseCheckSpellingEnabled(const KTextEdit* self);
void KTextEdit_OnShouldBlockBeSpellChecked(const KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseShouldBlockBeSpellChecked(const KTextEdit* self, const libqt_string block);
void KTextEdit_OnCreateHighlighter(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseCreateHighlighter(KTextEdit* self);
void KTextEdit_OnMousePopupMenu(KTextEdit* self, intptr_t slot);
QMenu* KTextEdit_QBaseMousePopupMenu(KTextEdit* self);
void KTextEdit_OnEvent(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseEvent(KTextEdit* self, QEvent* param1);
void KTextEdit_OnKeyPressEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseKeyPressEvent(KTextEdit* self, QKeyEvent* param1);
void KTextEdit_OnFocusInEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseFocusInEvent(KTextEdit* self, QFocusEvent* param1);
void KTextEdit_OnDeleteWordBack(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDeleteWordBack(KTextEdit* self);
void KTextEdit_OnDeleteWordForward(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDeleteWordForward(KTextEdit* self);
void KTextEdit_OnContextMenuEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseContextMenuEvent(KTextEdit* self, QContextMenuEvent* param1);
QVariant* KTextEdit_LoadResource(KTextEdit* self, int typeVal, const QUrl* name);
void KTextEdit_OnLoadResource(KTextEdit* self, intptr_t slot);
QVariant* KTextEdit_QBaseLoadResource(KTextEdit* self, int typeVal, const QUrl* name);
QVariant* KTextEdit_InputMethodQuery(const KTextEdit* self, int property);
void KTextEdit_OnInputMethodQuery(const KTextEdit* self, intptr_t slot);
QVariant* KTextEdit_QBaseInputMethodQuery(const KTextEdit* self, int property);
void KTextEdit_TimerEvent(KTextEdit* self, QTimerEvent* e);
void KTextEdit_OnTimerEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseTimerEvent(KTextEdit* self, QTimerEvent* e);
void KTextEdit_KeyReleaseEvent(KTextEdit* self, QKeyEvent* e);
void KTextEdit_OnKeyReleaseEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseKeyReleaseEvent(KTextEdit* self, QKeyEvent* e);
void KTextEdit_ResizeEvent(KTextEdit* self, QResizeEvent* e);
void KTextEdit_OnResizeEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseResizeEvent(KTextEdit* self, QResizeEvent* e);
void KTextEdit_PaintEvent(KTextEdit* self, QPaintEvent* e);
void KTextEdit_OnPaintEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBasePaintEvent(KTextEdit* self, QPaintEvent* e);
void KTextEdit_MousePressEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_OnMousePressEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseMousePressEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_MouseMoveEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_OnMouseMoveEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseMouseMoveEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_MouseReleaseEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_OnMouseReleaseEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseMouseReleaseEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_MouseDoubleClickEvent(KTextEdit* self, QMouseEvent* e);
void KTextEdit_OnMouseDoubleClickEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseMouseDoubleClickEvent(KTextEdit* self, QMouseEvent* e);
bool KTextEdit_FocusNextPrevChild(KTextEdit* self, bool next);
void KTextEdit_OnFocusNextPrevChild(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseFocusNextPrevChild(KTextEdit* self, bool next);
void KTextEdit_DragEnterEvent(KTextEdit* self, QDragEnterEvent* e);
void KTextEdit_OnDragEnterEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDragEnterEvent(KTextEdit* self, QDragEnterEvent* e);
void KTextEdit_DragLeaveEvent(KTextEdit* self, QDragLeaveEvent* e);
void KTextEdit_OnDragLeaveEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDragLeaveEvent(KTextEdit* self, QDragLeaveEvent* e);
void KTextEdit_DragMoveEvent(KTextEdit* self, QDragMoveEvent* e);
void KTextEdit_OnDragMoveEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDragMoveEvent(KTextEdit* self, QDragMoveEvent* e);
void KTextEdit_DropEvent(KTextEdit* self, QDropEvent* e);
void KTextEdit_OnDropEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDropEvent(KTextEdit* self, QDropEvent* e);
void KTextEdit_FocusOutEvent(KTextEdit* self, QFocusEvent* e);
void KTextEdit_OnFocusOutEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseFocusOutEvent(KTextEdit* self, QFocusEvent* e);
void KTextEdit_ShowEvent(KTextEdit* self, QShowEvent* param1);
void KTextEdit_OnShowEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseShowEvent(KTextEdit* self, QShowEvent* param1);
void KTextEdit_ChangeEvent(KTextEdit* self, QEvent* e);
void KTextEdit_OnChangeEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseChangeEvent(KTextEdit* self, QEvent* e);
void KTextEdit_WheelEvent(KTextEdit* self, QWheelEvent* e);
void KTextEdit_OnWheelEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseWheelEvent(KTextEdit* self, QWheelEvent* e);
QMimeData* KTextEdit_CreateMimeDataFromSelection(const KTextEdit* self);
void KTextEdit_OnCreateMimeDataFromSelection(const KTextEdit* self, intptr_t slot);
QMimeData* KTextEdit_QBaseCreateMimeDataFromSelection(const KTextEdit* self);
bool KTextEdit_CanInsertFromMimeData(const KTextEdit* self, const QMimeData* source);
void KTextEdit_OnCanInsertFromMimeData(const KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseCanInsertFromMimeData(const KTextEdit* self, const QMimeData* source);
void KTextEdit_InsertFromMimeData(KTextEdit* self, const QMimeData* source);
void KTextEdit_OnInsertFromMimeData(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseInsertFromMimeData(KTextEdit* self, const QMimeData* source);
void KTextEdit_InputMethodEvent(KTextEdit* self, QInputMethodEvent* param1);
void KTextEdit_OnInputMethodEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseInputMethodEvent(KTextEdit* self, QInputMethodEvent* param1);
void KTextEdit_ScrollContentsBy(KTextEdit* self, int dx, int dy);
void KTextEdit_OnScrollContentsBy(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseScrollContentsBy(KTextEdit* self, int dx, int dy);
void KTextEdit_DoSetTextCursor(KTextEdit* self, const QTextCursor* cursor);
void KTextEdit_OnDoSetTextCursor(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDoSetTextCursor(KTextEdit* self, const QTextCursor* cursor);
QSize* KTextEdit_MinimumSizeHint(const KTextEdit* self);
void KTextEdit_OnMinimumSizeHint(const KTextEdit* self, intptr_t slot);
QSize* KTextEdit_QBaseMinimumSizeHint(const KTextEdit* self);
QSize* KTextEdit_SizeHint(const KTextEdit* self);
void KTextEdit_OnSizeHint(const KTextEdit* self, intptr_t slot);
QSize* KTextEdit_QBaseSizeHint(const KTextEdit* self);
void KTextEdit_SetupViewport(KTextEdit* self, QWidget* viewport);
void KTextEdit_OnSetupViewport(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSetupViewport(KTextEdit* self, QWidget* viewport);
bool KTextEdit_EventFilter(KTextEdit* self, QObject* param1, QEvent* param2);
void KTextEdit_OnEventFilter(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseEventFilter(KTextEdit* self, QObject* param1, QEvent* param2);
bool KTextEdit_ViewportEvent(KTextEdit* self, QEvent* param1);
void KTextEdit_OnViewportEvent(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseViewportEvent(KTextEdit* self, QEvent* param1);
QSize* KTextEdit_ViewportSizeHint(const KTextEdit* self);
void KTextEdit_OnViewportSizeHint(const KTextEdit* self, intptr_t slot);
QSize* KTextEdit_QBaseViewportSizeHint(const KTextEdit* self);
void KTextEdit_InitStyleOption(const KTextEdit* self, QStyleOptionFrame* option);
void KTextEdit_OnInitStyleOption(const KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseInitStyleOption(const KTextEdit* self, QStyleOptionFrame* option);
int KTextEdit_DevType(const KTextEdit* self);
void KTextEdit_OnDevType(const KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseDevType(const KTextEdit* self);
void KTextEdit_SetVisible(KTextEdit* self, bool visible);
void KTextEdit_OnSetVisible(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSetVisible(KTextEdit* self, bool visible);
int KTextEdit_HeightForWidth(const KTextEdit* self, int param1);
void KTextEdit_OnHeightForWidth(const KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseHeightForWidth(const KTextEdit* self, int param1);
bool KTextEdit_HasHeightForWidth(const KTextEdit* self);
void KTextEdit_OnHasHeightForWidth(const KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseHasHeightForWidth(const KTextEdit* self);
QPaintEngine* KTextEdit_PaintEngine(const KTextEdit* self);
void KTextEdit_OnPaintEngine(const KTextEdit* self, intptr_t slot);
QPaintEngine* KTextEdit_QBasePaintEngine(const KTextEdit* self);
void KTextEdit_EnterEvent(KTextEdit* self, QEnterEvent* event);
void KTextEdit_OnEnterEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseEnterEvent(KTextEdit* self, QEnterEvent* event);
void KTextEdit_LeaveEvent(KTextEdit* self, QEvent* event);
void KTextEdit_OnLeaveEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseLeaveEvent(KTextEdit* self, QEvent* event);
void KTextEdit_MoveEvent(KTextEdit* self, QMoveEvent* event);
void KTextEdit_OnMoveEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseMoveEvent(KTextEdit* self, QMoveEvent* event);
void KTextEdit_CloseEvent(KTextEdit* self, QCloseEvent* event);
void KTextEdit_OnCloseEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseCloseEvent(KTextEdit* self, QCloseEvent* event);
void KTextEdit_TabletEvent(KTextEdit* self, QTabletEvent* event);
void KTextEdit_OnTabletEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseTabletEvent(KTextEdit* self, QTabletEvent* event);
void KTextEdit_ActionEvent(KTextEdit* self, QActionEvent* event);
void KTextEdit_OnActionEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseActionEvent(KTextEdit* self, QActionEvent* event);
void KTextEdit_HideEvent(KTextEdit* self, QHideEvent* event);
void KTextEdit_OnHideEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseHideEvent(KTextEdit* self, QHideEvent* event);
bool KTextEdit_NativeEvent(KTextEdit* self, const libqt_string eventType, void* message, intptr_t* result);
void KTextEdit_OnNativeEvent(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseNativeEvent(KTextEdit* self, const libqt_string eventType, void* message, intptr_t* result);
int KTextEdit_Metric(const KTextEdit* self, int param1);
void KTextEdit_OnMetric(const KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseMetric(const KTextEdit* self, int param1);
void KTextEdit_InitPainter(const KTextEdit* self, QPainter* painter);
void KTextEdit_OnInitPainter(const KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseInitPainter(const KTextEdit* self, QPainter* painter);
QPaintDevice* KTextEdit_Redirected(const KTextEdit* self, QPoint* offset);
void KTextEdit_OnRedirected(const KTextEdit* self, intptr_t slot);
QPaintDevice* KTextEdit_QBaseRedirected(const KTextEdit* self, QPoint* offset);
QPainter* KTextEdit_SharedPainter(const KTextEdit* self);
void KTextEdit_OnSharedPainter(const KTextEdit* self, intptr_t slot);
QPainter* KTextEdit_QBaseSharedPainter(const KTextEdit* self);
void KTextEdit_ChildEvent(KTextEdit* self, QChildEvent* event);
void KTextEdit_OnChildEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseChildEvent(KTextEdit* self, QChildEvent* event);
void KTextEdit_CustomEvent(KTextEdit* self, QEvent* event);
void KTextEdit_OnCustomEvent(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseCustomEvent(KTextEdit* self, QEvent* event);
void KTextEdit_ConnectNotify(KTextEdit* self, const QMetaMethod* signal);
void KTextEdit_OnConnectNotify(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseConnectNotify(KTextEdit* self, const QMetaMethod* signal);
void KTextEdit_DisconnectNotify(KTextEdit* self, const QMetaMethod* signal);
void KTextEdit_OnDisconnectNotify(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDisconnectNotify(KTextEdit* self, const QMetaMethod* signal);
void KTextEdit_SlotDoReplace(KTextEdit* self);
void KTextEdit_OnSlotDoReplace(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotDoReplace(KTextEdit* self);
void KTextEdit_SlotReplaceNext(KTextEdit* self);
void KTextEdit_OnSlotReplaceNext(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotReplaceNext(KTextEdit* self);
void KTextEdit_SlotDoFind(KTextEdit* self);
void KTextEdit_OnSlotDoFind(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotDoFind(KTextEdit* self);
void KTextEdit_SlotFind(KTextEdit* self);
void KTextEdit_OnSlotFind(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotFind(KTextEdit* self);
void KTextEdit_SlotFindNext(KTextEdit* self);
void KTextEdit_OnSlotFindNext(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotFindNext(KTextEdit* self);
void KTextEdit_SlotFindPrevious(KTextEdit* self);
void KTextEdit_OnSlotFindPrevious(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotFindPrevious(KTextEdit* self);
void KTextEdit_SlotReplace(KTextEdit* self);
void KTextEdit_OnSlotReplace(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotReplace(KTextEdit* self);
void KTextEdit_SlotSpeakText(KTextEdit* self);
void KTextEdit_OnSlotSpeakText(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSlotSpeakText(KTextEdit* self);
void KTextEdit_ZoomInF(KTextEdit* self, float range);
void KTextEdit_OnZoomInF(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseZoomInF(KTextEdit* self, float range);
void KTextEdit_SetViewportMargins(KTextEdit* self, int left, int top, int right, int bottom);
void KTextEdit_OnSetViewportMargins(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseSetViewportMargins(KTextEdit* self, int left, int top, int right, int bottom);
QMargins* KTextEdit_ViewportMargins(const KTextEdit* self);
void KTextEdit_OnViewportMargins(const KTextEdit* self, intptr_t slot);
QMargins* KTextEdit_QBaseViewportMargins(const KTextEdit* self);
void KTextEdit_DrawFrame(KTextEdit* self, QPainter* param1);
void KTextEdit_OnDrawFrame(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDrawFrame(KTextEdit* self, QPainter* param1);
void KTextEdit_UpdateMicroFocus(KTextEdit* self);
void KTextEdit_OnUpdateMicroFocus(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseUpdateMicroFocus(KTextEdit* self);
void KTextEdit_Create(KTextEdit* self);
void KTextEdit_OnCreate(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseCreate(KTextEdit* self);
void KTextEdit_Destroy(KTextEdit* self);
void KTextEdit_OnDestroy(KTextEdit* self, intptr_t slot);
void KTextEdit_QBaseDestroy(KTextEdit* self);
bool KTextEdit_FocusNextChild(KTextEdit* self);
void KTextEdit_OnFocusNextChild(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseFocusNextChild(KTextEdit* self);
bool KTextEdit_FocusPreviousChild(KTextEdit* self);
void KTextEdit_OnFocusPreviousChild(KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseFocusPreviousChild(KTextEdit* self);
QObject* KTextEdit_Sender(const KTextEdit* self);
void KTextEdit_OnSender(const KTextEdit* self, intptr_t slot);
QObject* KTextEdit_QBaseSender(const KTextEdit* self);
int KTextEdit_SenderSignalIndex(const KTextEdit* self);
void KTextEdit_OnSenderSignalIndex(const KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseSenderSignalIndex(const KTextEdit* self);
int KTextEdit_Receivers(const KTextEdit* self, const char* signal);
void KTextEdit_OnReceivers(const KTextEdit* self, intptr_t slot);
int KTextEdit_QBaseReceivers(const KTextEdit* self, const char* signal);
bool KTextEdit_IsSignalConnected(const KTextEdit* self, const QMetaMethod* signal);
void KTextEdit_OnIsSignalConnected(const KTextEdit* self, intptr_t slot);
bool KTextEdit_QBaseIsSignalConnected(const KTextEdit* self, const QMetaMethod* signal);
double KTextEdit_GetDecodedMetricF(const KTextEdit* self, int metricA, int metricB);
void KTextEdit_OnGetDecodedMetricF(const KTextEdit* self, intptr_t slot);
double KTextEdit_QBaseGetDecodedMetricF(const KTextEdit* self, int metricA, int metricB);
void KTextEdit_Delete(KTextEdit* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
