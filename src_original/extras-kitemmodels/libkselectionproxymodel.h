#pragma once
#ifndef SRC_EXTRAS_KITEMMODELSC_LIBKSELECTIONPROXYMODEL_H
#define SRC_EXTRAS_KITEMMODELSC_LIBKSELECTIONPROXYMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KSelectionProxyModel KSelectionProxyModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractProxyModel QAbstractProxyModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

KSelectionProxyModel* KSelectionProxyModel_new(QItemSelectionModel* selectionModel);
KSelectionProxyModel* KSelectionProxyModel_new2();
KSelectionProxyModel* KSelectionProxyModel_new3(QItemSelectionModel* selectionModel, QObject* parent);
QMetaObject* KSelectionProxyModel_MetaObject(const KSelectionProxyModel* self);
void* KSelectionProxyModel_Metacast(KSelectionProxyModel* self, const char* param1);
int KSelectionProxyModel_Metacall(KSelectionProxyModel* self, int param1, int param2, void** param3);
libqt_string KSelectionProxyModel_Tr(const char* s);
void KSelectionProxyModel_SetSourceModel(KSelectionProxyModel* self, QAbstractItemModel* sourceModel);
QItemSelectionModel* KSelectionProxyModel_SelectionModel(const KSelectionProxyModel* self);
void KSelectionProxyModel_SetSelectionModel(KSelectionProxyModel* self, QItemSelectionModel* selectionModel);
void KSelectionProxyModel_SetFilterBehavior(KSelectionProxyModel* self, int behavior);
int KSelectionProxyModel_FilterBehavior(const KSelectionProxyModel* self);
QModelIndex* KSelectionProxyModel_MapFromSource(const KSelectionProxyModel* self, const QModelIndex* sourceIndex);
QModelIndex* KSelectionProxyModel_MapToSource(const KSelectionProxyModel* self, const QModelIndex* proxyIndex);
QItemSelection* KSelectionProxyModel_MapSelectionFromSource(const KSelectionProxyModel* self, const QItemSelection* selection);
QItemSelection* KSelectionProxyModel_MapSelectionToSource(const KSelectionProxyModel* self, const QItemSelection* selection);
int KSelectionProxyModel_Flags(const KSelectionProxyModel* self, const QModelIndex* index);
QVariant* KSelectionProxyModel_Data(const KSelectionProxyModel* self, const QModelIndex* index, int role);
int KSelectionProxyModel_RowCount(const KSelectionProxyModel* self, const QModelIndex* parent);
QVariant* KSelectionProxyModel_HeaderData(const KSelectionProxyModel* self, int section, int orientation, int role);
QMimeData* KSelectionProxyModel_MimeData(const KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
libqt_list /* of libqt_string */ KSelectionProxyModel_MimeTypes(const KSelectionProxyModel* self);
int KSelectionProxyModel_SupportedDropActions(const KSelectionProxyModel* self);
bool KSelectionProxyModel_DropMimeData(KSelectionProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
bool KSelectionProxyModel_HasChildren(const KSelectionProxyModel* self, const QModelIndex* parent);
QModelIndex* KSelectionProxyModel_Index(const KSelectionProxyModel* self, int param1, int param2, const QModelIndex* param3);
QModelIndex* KSelectionProxyModel_Parent(const KSelectionProxyModel* self, const QModelIndex* param1);
int KSelectionProxyModel_ColumnCount(const KSelectionProxyModel* self, const QModelIndex* param1);
libqt_list /* of QModelIndex* */ KSelectionProxyModel_Match(const KSelectionProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
libqt_string KSelectionProxyModel_Tr2(const char* s, const char* c);
libqt_string KSelectionProxyModel_Tr3(const char* s, const char* c, int n);
void KSelectionProxyModel_OnMetacall(KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseMetacall(KSelectionProxyModel* self, int param1, int param2, void** param3);
void KSelectionProxyModel_OnSetSourceModel(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseSetSourceModel(KSelectionProxyModel* self, QAbstractItemModel* sourceModel);
void KSelectionProxyModel_OnMapFromSource(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseMapFromSource(const KSelectionProxyModel* self, const QModelIndex* sourceIndex);
void KSelectionProxyModel_OnMapToSource(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseMapToSource(const KSelectionProxyModel* self, const QModelIndex* proxyIndex);
void KSelectionProxyModel_OnMapSelectionFromSource(const KSelectionProxyModel* self, intptr_t slot);
QItemSelection* KSelectionProxyModel_QBaseMapSelectionFromSource(const KSelectionProxyModel* self, const QItemSelection* selection);
void KSelectionProxyModel_OnMapSelectionToSource(const KSelectionProxyModel* self, intptr_t slot);
QItemSelection* KSelectionProxyModel_QBaseMapSelectionToSource(const KSelectionProxyModel* self, const QItemSelection* selection);
void KSelectionProxyModel_OnFlags(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseFlags(const KSelectionProxyModel* self, const QModelIndex* index);
void KSelectionProxyModel_OnData(const KSelectionProxyModel* self, intptr_t slot);
QVariant* KSelectionProxyModel_QBaseData(const KSelectionProxyModel* self, const QModelIndex* index, int role);
void KSelectionProxyModel_OnRowCount(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseRowCount(const KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_OnHeaderData(const KSelectionProxyModel* self, intptr_t slot);
QVariant* KSelectionProxyModel_QBaseHeaderData(const KSelectionProxyModel* self, int section, int orientation, int role);
void KSelectionProxyModel_OnMimeData(const KSelectionProxyModel* self, intptr_t slot);
QMimeData* KSelectionProxyModel_QBaseMimeData(const KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KSelectionProxyModel_OnMimeTypes(const KSelectionProxyModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KSelectionProxyModel_QBaseMimeTypes(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnSupportedDropActions(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseSupportedDropActions(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnDropMimeData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseDropMimeData(KSelectionProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KSelectionProxyModel_OnHasChildren(const KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseHasChildren(const KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_OnIndex(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseIndex(const KSelectionProxyModel* self, int param1, int param2, const QModelIndex* param3);
void KSelectionProxyModel_OnParent(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseParent(const KSelectionProxyModel* self, const QModelIndex* param1);
void KSelectionProxyModel_OnColumnCount(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseColumnCount(const KSelectionProxyModel* self, const QModelIndex* param1);
void KSelectionProxyModel_OnMatch(const KSelectionProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KSelectionProxyModel_QBaseMatch(const KSelectionProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
bool KSelectionProxyModel_Submit(KSelectionProxyModel* self);
void KSelectionProxyModel_OnSubmit(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseSubmit(KSelectionProxyModel* self);
void KSelectionProxyModel_Revert(KSelectionProxyModel* self);
void KSelectionProxyModel_OnRevert(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseRevert(KSelectionProxyModel* self);
libqt_map /* of int to QVariant* */ KSelectionProxyModel_ItemData(const KSelectionProxyModel* self, const QModelIndex* index);
void KSelectionProxyModel_OnItemData(const KSelectionProxyModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KSelectionProxyModel_QBaseItemData(const KSelectionProxyModel* self, const QModelIndex* index);
bool KSelectionProxyModel_SetData(KSelectionProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
void KSelectionProxyModel_OnSetData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseSetData(KSelectionProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
bool KSelectionProxyModel_SetItemData(KSelectionProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KSelectionProxyModel_OnSetItemData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseSetItemData(KSelectionProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KSelectionProxyModel_SetHeaderData(KSelectionProxyModel* self, int section, int orientation, const QVariant* value, int role);
void KSelectionProxyModel_OnSetHeaderData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseSetHeaderData(KSelectionProxyModel* self, int section, int orientation, const QVariant* value, int role);
bool KSelectionProxyModel_ClearItemData(KSelectionProxyModel* self, const QModelIndex* index);
void KSelectionProxyModel_OnClearItemData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseClearItemData(KSelectionProxyModel* self, const QModelIndex* index);
QModelIndex* KSelectionProxyModel_Buddy(const KSelectionProxyModel* self, const QModelIndex* index);
void KSelectionProxyModel_OnBuddy(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseBuddy(const KSelectionProxyModel* self, const QModelIndex* index);
bool KSelectionProxyModel_CanFetchMore(const KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_OnCanFetchMore(const KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseCanFetchMore(const KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_FetchMore(KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_OnFetchMore(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseFetchMore(KSelectionProxyModel* self, const QModelIndex* parent);
void KSelectionProxyModel_Sort(KSelectionProxyModel* self, int column, int order);
void KSelectionProxyModel_OnSort(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseSort(KSelectionProxyModel* self, int column, int order);
QSize* KSelectionProxyModel_Span(const KSelectionProxyModel* self, const QModelIndex* index);
void KSelectionProxyModel_OnSpan(const KSelectionProxyModel* self, intptr_t slot);
QSize* KSelectionProxyModel_QBaseSpan(const KSelectionProxyModel* self, const QModelIndex* index);
QModelIndex* KSelectionProxyModel_Sibling(const KSelectionProxyModel* self, int row, int column, const QModelIndex* idx);
void KSelectionProxyModel_OnSibling(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseSibling(const KSelectionProxyModel* self, int row, int column, const QModelIndex* idx);
bool KSelectionProxyModel_CanDropMimeData(const KSelectionProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KSelectionProxyModel_OnCanDropMimeData(const KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseCanDropMimeData(const KSelectionProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
int KSelectionProxyModel_SupportedDragActions(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnSupportedDragActions(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseSupportedDragActions(const KSelectionProxyModel* self);
libqt_map /* of int to libqt_string */ KSelectionProxyModel_RoleNames(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnRoleNames(const KSelectionProxyModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KSelectionProxyModel_QBaseRoleNames(const KSelectionProxyModel* self);
bool KSelectionProxyModel_InsertRows(KSelectionProxyModel* self, int row, int count, const QModelIndex* parent);
void KSelectionProxyModel_OnInsertRows(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseInsertRows(KSelectionProxyModel* self, int row, int count, const QModelIndex* parent);
bool KSelectionProxyModel_InsertColumns(KSelectionProxyModel* self, int column, int count, const QModelIndex* parent);
void KSelectionProxyModel_OnInsertColumns(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseInsertColumns(KSelectionProxyModel* self, int column, int count, const QModelIndex* parent);
bool KSelectionProxyModel_RemoveRows(KSelectionProxyModel* self, int row, int count, const QModelIndex* parent);
void KSelectionProxyModel_OnRemoveRows(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseRemoveRows(KSelectionProxyModel* self, int row, int count, const QModelIndex* parent);
bool KSelectionProxyModel_RemoveColumns(KSelectionProxyModel* self, int column, int count, const QModelIndex* parent);
void KSelectionProxyModel_OnRemoveColumns(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseRemoveColumns(KSelectionProxyModel* self, int column, int count, const QModelIndex* parent);
bool KSelectionProxyModel_MoveRows(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KSelectionProxyModel_OnMoveRows(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseMoveRows(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KSelectionProxyModel_MoveColumns(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KSelectionProxyModel_OnMoveColumns(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseMoveColumns(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KSelectionProxyModel_MultiData(const KSelectionProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KSelectionProxyModel_OnMultiData(const KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseMultiData(const KSelectionProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KSelectionProxyModel_ResetInternalData(KSelectionProxyModel* self);
void KSelectionProxyModel_OnResetInternalData(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseResetInternalData(KSelectionProxyModel* self);
bool KSelectionProxyModel_Event(KSelectionProxyModel* self, QEvent* event);
void KSelectionProxyModel_OnEvent(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseEvent(KSelectionProxyModel* self, QEvent* event);
bool KSelectionProxyModel_EventFilter(KSelectionProxyModel* self, QObject* watched, QEvent* event);
void KSelectionProxyModel_OnEventFilter(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseEventFilter(KSelectionProxyModel* self, QObject* watched, QEvent* event);
void KSelectionProxyModel_TimerEvent(KSelectionProxyModel* self, QTimerEvent* event);
void KSelectionProxyModel_OnTimerEvent(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseTimerEvent(KSelectionProxyModel* self, QTimerEvent* event);
void KSelectionProxyModel_ChildEvent(KSelectionProxyModel* self, QChildEvent* event);
void KSelectionProxyModel_OnChildEvent(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseChildEvent(KSelectionProxyModel* self, QChildEvent* event);
void KSelectionProxyModel_CustomEvent(KSelectionProxyModel* self, QEvent* event);
void KSelectionProxyModel_OnCustomEvent(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseCustomEvent(KSelectionProxyModel* self, QEvent* event);
void KSelectionProxyModel_ConnectNotify(KSelectionProxyModel* self, const QMetaMethod* signal);
void KSelectionProxyModel_OnConnectNotify(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseConnectNotify(KSelectionProxyModel* self, const QMetaMethod* signal);
void KSelectionProxyModel_DisconnectNotify(KSelectionProxyModel* self, const QMetaMethod* signal);
void KSelectionProxyModel_OnDisconnectNotify(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseDisconnectNotify(KSelectionProxyModel* self, const QMetaMethod* signal);
libqt_list /* of QPersistentModelIndex* */ KSelectionProxyModel_SourceRootIndexes(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnSourceRootIndexes(const KSelectionProxyModel* self, intptr_t slot);
libqt_list /* of QPersistentModelIndex* */ KSelectionProxyModel_QBaseSourceRootIndexes(const KSelectionProxyModel* self);
QModelIndex* KSelectionProxyModel_CreateSourceIndex(const KSelectionProxyModel* self, int row, int col, void* internalPtr);
void KSelectionProxyModel_OnCreateSourceIndex(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseCreateSourceIndex(const KSelectionProxyModel* self, int row, int col, void* internalPtr);
QModelIndex* KSelectionProxyModel_CreateIndex(const KSelectionProxyModel* self, int row, int column);
void KSelectionProxyModel_OnCreateIndex(const KSelectionProxyModel* self, intptr_t slot);
QModelIndex* KSelectionProxyModel_QBaseCreateIndex(const KSelectionProxyModel* self, int row, int column);
void KSelectionProxyModel_EncodeData(const KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KSelectionProxyModel_OnEncodeData(const KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEncodeData(const KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KSelectionProxyModel_DecodeData(KSelectionProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KSelectionProxyModel_OnDecodeData(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseDecodeData(KSelectionProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KSelectionProxyModel_BeginInsertRows(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_OnBeginInsertRows(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseBeginInsertRows(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_EndInsertRows(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndInsertRows(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndInsertRows(KSelectionProxyModel* self);
void KSelectionProxyModel_BeginRemoveRows(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_OnBeginRemoveRows(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseBeginRemoveRows(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_EndRemoveRows(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndRemoveRows(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndRemoveRows(KSelectionProxyModel* self);
bool KSelectionProxyModel_BeginMoveRows(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KSelectionProxyModel_OnBeginMoveRows(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseBeginMoveRows(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KSelectionProxyModel_EndMoveRows(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndMoveRows(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndMoveRows(KSelectionProxyModel* self);
void KSelectionProxyModel_BeginInsertColumns(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_OnBeginInsertColumns(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseBeginInsertColumns(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_EndInsertColumns(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndInsertColumns(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndInsertColumns(KSelectionProxyModel* self);
void KSelectionProxyModel_BeginRemoveColumns(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_OnBeginRemoveColumns(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseBeginRemoveColumns(KSelectionProxyModel* self, const QModelIndex* parent, int first, int last);
void KSelectionProxyModel_EndRemoveColumns(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndRemoveColumns(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndRemoveColumns(KSelectionProxyModel* self);
bool KSelectionProxyModel_BeginMoveColumns(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KSelectionProxyModel_OnBeginMoveColumns(KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseBeginMoveColumns(KSelectionProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KSelectionProxyModel_EndMoveColumns(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndMoveColumns(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndMoveColumns(KSelectionProxyModel* self);
void KSelectionProxyModel_BeginResetModel(KSelectionProxyModel* self);
void KSelectionProxyModel_OnBeginResetModel(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseBeginResetModel(KSelectionProxyModel* self);
void KSelectionProxyModel_EndResetModel(KSelectionProxyModel* self);
void KSelectionProxyModel_OnEndResetModel(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseEndResetModel(KSelectionProxyModel* self);
void KSelectionProxyModel_ChangePersistentIndex(KSelectionProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KSelectionProxyModel_OnChangePersistentIndex(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseChangePersistentIndex(KSelectionProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KSelectionProxyModel_ChangePersistentIndexList(KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KSelectionProxyModel_OnChangePersistentIndexList(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_QBaseChangePersistentIndexList(KSelectionProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KSelectionProxyModel_PersistentIndexList(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnPersistentIndexList(const KSelectionProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KSelectionProxyModel_QBasePersistentIndexList(const KSelectionProxyModel* self);
QObject* KSelectionProxyModel_Sender(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnSender(const KSelectionProxyModel* self, intptr_t slot);
QObject* KSelectionProxyModel_QBaseSender(const KSelectionProxyModel* self);
int KSelectionProxyModel_SenderSignalIndex(const KSelectionProxyModel* self);
void KSelectionProxyModel_OnSenderSignalIndex(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseSenderSignalIndex(const KSelectionProxyModel* self);
int KSelectionProxyModel_Receivers(const KSelectionProxyModel* self, const char* signal);
void KSelectionProxyModel_OnReceivers(const KSelectionProxyModel* self, intptr_t slot);
int KSelectionProxyModel_QBaseReceivers(const KSelectionProxyModel* self, const char* signal);
bool KSelectionProxyModel_IsSignalConnected(const KSelectionProxyModel* self, const QMetaMethod* signal);
void KSelectionProxyModel_OnIsSignalConnected(const KSelectionProxyModel* self, intptr_t slot);
bool KSelectionProxyModel_QBaseIsSignalConnected(const KSelectionProxyModel* self, const QMetaMethod* signal);
void KSelectionProxyModel_Connect_RootIndexAboutToBeRemoved(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Connect_RootIndexAdded(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Connect_RootSelectionAboutToBeRemoved(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Connect_RootSelectionAdded(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Connect_SelectionModelChanged(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Connect_FilterBehaviorChanged(KSelectionProxyModel* self, intptr_t slot);
void KSelectionProxyModel_Delete(KSelectionProxyModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
