#pragma once
#ifndef SRC_EXTRAS_KITEMMODELSC_LIBKEXTRACOLUMNSPROXYMODEL_H
#define SRC_EXTRAS_KITEMMODELSC_LIBKEXTRACOLUMNSPROXYMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KExtraColumnsProxyModel KExtraColumnsProxyModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractProxyModel QAbstractProxyModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QIdentityProxyModel QIdentityProxyModel;
typedef struct QItemSelection QItemSelection;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

KExtraColumnsProxyModel* KExtraColumnsProxyModel_new();
KExtraColumnsProxyModel* KExtraColumnsProxyModel_new2(QObject* parent);
QMetaObject* KExtraColumnsProxyModel_MetaObject(const KExtraColumnsProxyModel* self);
void* KExtraColumnsProxyModel_Metacast(KExtraColumnsProxyModel* self, const char* param1);
int KExtraColumnsProxyModel_Metacall(KExtraColumnsProxyModel* self, int param1, int param2, void** param3);
libqt_string KExtraColumnsProxyModel_Tr(const char* s);
void KExtraColumnsProxyModel_AppendColumn(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_RemoveExtraColumn(KExtraColumnsProxyModel* self, int idx);
QVariant* KExtraColumnsProxyModel_ExtraColumnData(const KExtraColumnsProxyModel* self, const QModelIndex* parent, int row, int extraColumn, int role);
bool KExtraColumnsProxyModel_SetExtraColumnData(KExtraColumnsProxyModel* self, const QModelIndex* parent, int row, int extraColumn, const QVariant* data, int role);
void KExtraColumnsProxyModel_ExtraColumnDataChanged(KExtraColumnsProxyModel* self, const QModelIndex* parent, int row, int extraColumn, const libqt_list /* of int */ roles);
int KExtraColumnsProxyModel_ExtraColumnForProxyColumn(const KExtraColumnsProxyModel* self, int proxyColumn);
int KExtraColumnsProxyModel_ProxyColumnForExtraColumn(const KExtraColumnsProxyModel* self, int extraColumn);
void KExtraColumnsProxyModel_SetSourceModel(KExtraColumnsProxyModel* self, QAbstractItemModel* model);
QModelIndex* KExtraColumnsProxyModel_MapToSource(const KExtraColumnsProxyModel* self, const QModelIndex* proxyIndex);
QItemSelection* KExtraColumnsProxyModel_MapSelectionToSource(const KExtraColumnsProxyModel* self, const QItemSelection* selection);
int KExtraColumnsProxyModel_ColumnCount(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
QVariant* KExtraColumnsProxyModel_Data(const KExtraColumnsProxyModel* self, const QModelIndex* index, int role);
bool KExtraColumnsProxyModel_SetData(KExtraColumnsProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
QModelIndex* KExtraColumnsProxyModel_Sibling(const KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* idx);
QModelIndex* KExtraColumnsProxyModel_Buddy(const KExtraColumnsProxyModel* self, const QModelIndex* index);
int KExtraColumnsProxyModel_Flags(const KExtraColumnsProxyModel* self, const QModelIndex* index);
bool KExtraColumnsProxyModel_HasChildren(const KExtraColumnsProxyModel* self, const QModelIndex* index);
QVariant* KExtraColumnsProxyModel_HeaderData(const KExtraColumnsProxyModel* self, int section, int orientation, int role);
QModelIndex* KExtraColumnsProxyModel_Index(const KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* KExtraColumnsProxyModel_Parent(const KExtraColumnsProxyModel* self, const QModelIndex* child);
libqt_string KExtraColumnsProxyModel_Tr2(const char* s, const char* c);
libqt_string KExtraColumnsProxyModel_Tr3(const char* s, const char* c, int n);
void KExtraColumnsProxyModel_AppendColumn1(KExtraColumnsProxyModel* self, const libqt_string header);
void KExtraColumnsProxyModel_OnMetacall(KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseMetacall(KExtraColumnsProxyModel* self, int param1, int param2, void** param3);
void KExtraColumnsProxyModel_OnExtraColumnData(const KExtraColumnsProxyModel* self, intptr_t slot);
QVariant* KExtraColumnsProxyModel_QBaseExtraColumnData(const KExtraColumnsProxyModel* self, const QModelIndex* parent, int row, int extraColumn, int role);
void KExtraColumnsProxyModel_OnSetExtraColumnData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseSetExtraColumnData(KExtraColumnsProxyModel* self, const QModelIndex* parent, int row, int extraColumn, const QVariant* data, int role);
void KExtraColumnsProxyModel_OnSetSourceModel(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseSetSourceModel(KExtraColumnsProxyModel* self, QAbstractItemModel* model);
void KExtraColumnsProxyModel_OnMapToSource(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseMapToSource(const KExtraColumnsProxyModel* self, const QModelIndex* proxyIndex);
void KExtraColumnsProxyModel_OnMapSelectionToSource(const KExtraColumnsProxyModel* self, intptr_t slot);
QItemSelection* KExtraColumnsProxyModel_QBaseMapSelectionToSource(const KExtraColumnsProxyModel* self, const QItemSelection* selection);
void KExtraColumnsProxyModel_OnColumnCount(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseColumnCount(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnData(const KExtraColumnsProxyModel* self, intptr_t slot);
QVariant* KExtraColumnsProxyModel_QBaseData(const KExtraColumnsProxyModel* self, const QModelIndex* index, int role);
void KExtraColumnsProxyModel_OnSetData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseSetData(KExtraColumnsProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
void KExtraColumnsProxyModel_OnSibling(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseSibling(const KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* idx);
void KExtraColumnsProxyModel_OnBuddy(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseBuddy(const KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnFlags(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseFlags(const KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnHasChildren(const KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseHasChildren(const KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnHeaderData(const KExtraColumnsProxyModel* self, intptr_t slot);
QVariant* KExtraColumnsProxyModel_QBaseHeaderData(const KExtraColumnsProxyModel* self, int section, int orientation, int role);
void KExtraColumnsProxyModel_OnIndex(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseIndex(const KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnParent(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseParent(const KExtraColumnsProxyModel* self, const QModelIndex* child);
QModelIndex* KExtraColumnsProxyModel_MapFromSource(const KExtraColumnsProxyModel* self, const QModelIndex* sourceIndex);
void KExtraColumnsProxyModel_OnMapFromSource(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseMapFromSource(const KExtraColumnsProxyModel* self, const QModelIndex* sourceIndex);
int KExtraColumnsProxyModel_RowCount(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnRowCount(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseRowCount(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
bool KExtraColumnsProxyModel_DropMimeData(KExtraColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnDropMimeData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseDropMimeData(KExtraColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
QItemSelection* KExtraColumnsProxyModel_MapSelectionFromSource(const KExtraColumnsProxyModel* self, const QItemSelection* selection);
void KExtraColumnsProxyModel_OnMapSelectionFromSource(const KExtraColumnsProxyModel* self, intptr_t slot);
QItemSelection* KExtraColumnsProxyModel_QBaseMapSelectionFromSource(const KExtraColumnsProxyModel* self, const QItemSelection* selection);
libqt_list /* of QModelIndex* */ KExtraColumnsProxyModel_Match(const KExtraColumnsProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KExtraColumnsProxyModel_OnMatch(const KExtraColumnsProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KExtraColumnsProxyModel_QBaseMatch(const KExtraColumnsProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
bool KExtraColumnsProxyModel_InsertColumns(KExtraColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnInsertColumns(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseInsertColumns(KExtraColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
bool KExtraColumnsProxyModel_InsertRows(KExtraColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnInsertRows(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseInsertRows(KExtraColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
bool KExtraColumnsProxyModel_RemoveColumns(KExtraColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnRemoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseRemoveColumns(KExtraColumnsProxyModel* self, int column, int count, const QModelIndex* parent);
bool KExtraColumnsProxyModel_RemoveRows(KExtraColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnRemoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseRemoveRows(KExtraColumnsProxyModel* self, int row, int count, const QModelIndex* parent);
bool KExtraColumnsProxyModel_MoveRows(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KExtraColumnsProxyModel_OnMoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseMoveRows(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KExtraColumnsProxyModel_MoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KExtraColumnsProxyModel_OnMoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseMoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
bool KExtraColumnsProxyModel_Submit(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnSubmit(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseSubmit(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_Revert(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnRevert(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseRevert(KExtraColumnsProxyModel* self);
libqt_map /* of int to QVariant* */ KExtraColumnsProxyModel_ItemData(const KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnItemData(const KExtraColumnsProxyModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KExtraColumnsProxyModel_QBaseItemData(const KExtraColumnsProxyModel* self, const QModelIndex* index);
bool KExtraColumnsProxyModel_SetItemData(KExtraColumnsProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KExtraColumnsProxyModel_OnSetItemData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseSetItemData(KExtraColumnsProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KExtraColumnsProxyModel_SetHeaderData(KExtraColumnsProxyModel* self, int section, int orientation, const QVariant* value, int role);
void KExtraColumnsProxyModel_OnSetHeaderData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseSetHeaderData(KExtraColumnsProxyModel* self, int section, int orientation, const QVariant* value, int role);
bool KExtraColumnsProxyModel_ClearItemData(KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnClearItemData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseClearItemData(KExtraColumnsProxyModel* self, const QModelIndex* index);
bool KExtraColumnsProxyModel_CanFetchMore(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnCanFetchMore(const KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseCanFetchMore(const KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_FetchMore(KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnFetchMore(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseFetchMore(KExtraColumnsProxyModel* self, const QModelIndex* parent);
void KExtraColumnsProxyModel_Sort(KExtraColumnsProxyModel* self, int column, int order);
void KExtraColumnsProxyModel_OnSort(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseSort(KExtraColumnsProxyModel* self, int column, int order);
QSize* KExtraColumnsProxyModel_Span(const KExtraColumnsProxyModel* self, const QModelIndex* index);
void KExtraColumnsProxyModel_OnSpan(const KExtraColumnsProxyModel* self, intptr_t slot);
QSize* KExtraColumnsProxyModel_QBaseSpan(const KExtraColumnsProxyModel* self, const QModelIndex* index);
QMimeData* KExtraColumnsProxyModel_MimeData(const KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KExtraColumnsProxyModel_OnMimeData(const KExtraColumnsProxyModel* self, intptr_t slot);
QMimeData* KExtraColumnsProxyModel_QBaseMimeData(const KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool KExtraColumnsProxyModel_CanDropMimeData(const KExtraColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KExtraColumnsProxyModel_OnCanDropMimeData(const KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseCanDropMimeData(const KExtraColumnsProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
libqt_list /* of libqt_string */ KExtraColumnsProxyModel_MimeTypes(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnMimeTypes(const KExtraColumnsProxyModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KExtraColumnsProxyModel_QBaseMimeTypes(const KExtraColumnsProxyModel* self);
int KExtraColumnsProxyModel_SupportedDragActions(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnSupportedDragActions(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseSupportedDragActions(const KExtraColumnsProxyModel* self);
int KExtraColumnsProxyModel_SupportedDropActions(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnSupportedDropActions(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseSupportedDropActions(const KExtraColumnsProxyModel* self);
libqt_map /* of int to libqt_string */ KExtraColumnsProxyModel_RoleNames(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnRoleNames(const KExtraColumnsProxyModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KExtraColumnsProxyModel_QBaseRoleNames(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_MultiData(const KExtraColumnsProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KExtraColumnsProxyModel_OnMultiData(const KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseMultiData(const KExtraColumnsProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KExtraColumnsProxyModel_ResetInternalData(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnResetInternalData(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseResetInternalData(KExtraColumnsProxyModel* self);
bool KExtraColumnsProxyModel_Event(KExtraColumnsProxyModel* self, QEvent* event);
void KExtraColumnsProxyModel_OnEvent(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseEvent(KExtraColumnsProxyModel* self, QEvent* event);
bool KExtraColumnsProxyModel_EventFilter(KExtraColumnsProxyModel* self, QObject* watched, QEvent* event);
void KExtraColumnsProxyModel_OnEventFilter(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseEventFilter(KExtraColumnsProxyModel* self, QObject* watched, QEvent* event);
void KExtraColumnsProxyModel_TimerEvent(KExtraColumnsProxyModel* self, QTimerEvent* event);
void KExtraColumnsProxyModel_OnTimerEvent(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseTimerEvent(KExtraColumnsProxyModel* self, QTimerEvent* event);
void KExtraColumnsProxyModel_ChildEvent(KExtraColumnsProxyModel* self, QChildEvent* event);
void KExtraColumnsProxyModel_OnChildEvent(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseChildEvent(KExtraColumnsProxyModel* self, QChildEvent* event);
void KExtraColumnsProxyModel_CustomEvent(KExtraColumnsProxyModel* self, QEvent* event);
void KExtraColumnsProxyModel_OnCustomEvent(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseCustomEvent(KExtraColumnsProxyModel* self, QEvent* event);
void KExtraColumnsProxyModel_ConnectNotify(KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_OnConnectNotify(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseConnectNotify(KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_DisconnectNotify(KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_OnDisconnectNotify(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseDisconnectNotify(KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_SetHandleSourceLayoutChanges(KExtraColumnsProxyModel* self, bool handleSourceLayoutChanges);
void KExtraColumnsProxyModel_OnSetHandleSourceLayoutChanges(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseSetHandleSourceLayoutChanges(KExtraColumnsProxyModel* self, bool handleSourceLayoutChanges);
void KExtraColumnsProxyModel_SetHandleSourceDataChanges(KExtraColumnsProxyModel* self, bool handleSourceDataChanges);
void KExtraColumnsProxyModel_OnSetHandleSourceDataChanges(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseSetHandleSourceDataChanges(KExtraColumnsProxyModel* self, bool handleSourceDataChanges);
QModelIndex* KExtraColumnsProxyModel_CreateSourceIndex(const KExtraColumnsProxyModel* self, int row, int col, void* internalPtr);
void KExtraColumnsProxyModel_OnCreateSourceIndex(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseCreateSourceIndex(const KExtraColumnsProxyModel* self, int row, int col, void* internalPtr);
QModelIndex* KExtraColumnsProxyModel_CreateIndex(const KExtraColumnsProxyModel* self, int row, int column);
void KExtraColumnsProxyModel_OnCreateIndex(const KExtraColumnsProxyModel* self, intptr_t slot);
QModelIndex* KExtraColumnsProxyModel_QBaseCreateIndex(const KExtraColumnsProxyModel* self, int row, int column);
void KExtraColumnsProxyModel_EncodeData(const KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KExtraColumnsProxyModel_OnEncodeData(const KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEncodeData(const KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KExtraColumnsProxyModel_DecodeData(KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KExtraColumnsProxyModel_OnDecodeData(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseDecodeData(KExtraColumnsProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KExtraColumnsProxyModel_BeginInsertRows(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_OnBeginInsertRows(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseBeginInsertRows(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_EndInsertRows(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndInsertRows(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndInsertRows(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_BeginRemoveRows(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_OnBeginRemoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseBeginRemoveRows(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_EndRemoveRows(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndRemoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndRemoveRows(KExtraColumnsProxyModel* self);
bool KExtraColumnsProxyModel_BeginMoveRows(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KExtraColumnsProxyModel_OnBeginMoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseBeginMoveRows(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KExtraColumnsProxyModel_EndMoveRows(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndMoveRows(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndMoveRows(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_BeginInsertColumns(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_OnBeginInsertColumns(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseBeginInsertColumns(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_EndInsertColumns(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndInsertColumns(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndInsertColumns(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_BeginRemoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_OnBeginRemoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseBeginRemoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* parent, int first, int last);
void KExtraColumnsProxyModel_EndRemoveColumns(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndRemoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndRemoveColumns(KExtraColumnsProxyModel* self);
bool KExtraColumnsProxyModel_BeginMoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KExtraColumnsProxyModel_OnBeginMoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseBeginMoveColumns(KExtraColumnsProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KExtraColumnsProxyModel_EndMoveColumns(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndMoveColumns(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndMoveColumns(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_BeginResetModel(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnBeginResetModel(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseBeginResetModel(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_EndResetModel(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnEndResetModel(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseEndResetModel(KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_ChangePersistentIndex(KExtraColumnsProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KExtraColumnsProxyModel_OnChangePersistentIndex(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseChangePersistentIndex(KExtraColumnsProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KExtraColumnsProxyModel_ChangePersistentIndexList(KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KExtraColumnsProxyModel_OnChangePersistentIndexList(KExtraColumnsProxyModel* self, intptr_t slot);
void KExtraColumnsProxyModel_QBaseChangePersistentIndexList(KExtraColumnsProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KExtraColumnsProxyModel_PersistentIndexList(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnPersistentIndexList(const KExtraColumnsProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KExtraColumnsProxyModel_QBasePersistentIndexList(const KExtraColumnsProxyModel* self);
QObject* KExtraColumnsProxyModel_Sender(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnSender(const KExtraColumnsProxyModel* self, intptr_t slot);
QObject* KExtraColumnsProxyModel_QBaseSender(const KExtraColumnsProxyModel* self);
int KExtraColumnsProxyModel_SenderSignalIndex(const KExtraColumnsProxyModel* self);
void KExtraColumnsProxyModel_OnSenderSignalIndex(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseSenderSignalIndex(const KExtraColumnsProxyModel* self);
int KExtraColumnsProxyModel_Receivers(const KExtraColumnsProxyModel* self, const char* signal);
void KExtraColumnsProxyModel_OnReceivers(const KExtraColumnsProxyModel* self, intptr_t slot);
int KExtraColumnsProxyModel_QBaseReceivers(const KExtraColumnsProxyModel* self, const char* signal);
bool KExtraColumnsProxyModel_IsSignalConnected(const KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_OnIsSignalConnected(const KExtraColumnsProxyModel* self, intptr_t slot);
bool KExtraColumnsProxyModel_QBaseIsSignalConnected(const KExtraColumnsProxyModel* self, const QMetaMethod* signal);
void KExtraColumnsProxyModel_Delete(KExtraColumnsProxyModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
