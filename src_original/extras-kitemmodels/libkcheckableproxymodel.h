#pragma once
#ifndef SRC_EXTRAS_KITEMMODELSC_LIBKCHECKABLEPROXYMODEL_H
#define SRC_EXTRAS_KITEMMODELSC_LIBKCHECKABLEPROXYMODEL_H

#include <stdbool.h>
#include <stddef.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../qtlibc.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
#else
typedef struct KCheckableProxyModel KCheckableProxyModel;
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractProxyModel QAbstractProxyModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QIdentityProxyModel QIdentityProxyModel;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QModelRoleDataSpan QModelRoleDataSpan;
typedef struct QObject QObject;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

KCheckableProxyModel* KCheckableProxyModel_new();
KCheckableProxyModel* KCheckableProxyModel_new2(QObject* parent);
QMetaObject* KCheckableProxyModel_MetaObject(const KCheckableProxyModel* self);
void* KCheckableProxyModel_Metacast(KCheckableProxyModel* self, const char* param1);
int KCheckableProxyModel_Metacall(KCheckableProxyModel* self, int param1, int param2, void** param3);
libqt_string KCheckableProxyModel_Tr(const char* s);
void KCheckableProxyModel_SetSelectionModel(KCheckableProxyModel* self, QItemSelectionModel* itemSelectionModel);
QItemSelectionModel* KCheckableProxyModel_SelectionModel(const KCheckableProxyModel* self);
int KCheckableProxyModel_Flags(const KCheckableProxyModel* self, const QModelIndex* index);
QVariant* KCheckableProxyModel_Data(const KCheckableProxyModel* self, const QModelIndex* index, int role);
bool KCheckableProxyModel_SetData(KCheckableProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
void KCheckableProxyModel_SetSourceModel(KCheckableProxyModel* self, QAbstractItemModel* sourceModel);
libqt_map /* of int to libqt_string */ KCheckableProxyModel_RoleNames(const KCheckableProxyModel* self);
bool KCheckableProxyModel_Select(KCheckableProxyModel* self, const QItemSelection* selection, int command);
libqt_string KCheckableProxyModel_Tr2(const char* s, const char* c);
libqt_string KCheckableProxyModel_Tr3(const char* s, const char* c, int n);
void KCheckableProxyModel_OnMetacall(KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseMetacall(KCheckableProxyModel* self, int param1, int param2, void** param3);
void KCheckableProxyModel_OnFlags(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseFlags(const KCheckableProxyModel* self, const QModelIndex* index);
void KCheckableProxyModel_OnData(const KCheckableProxyModel* self, intptr_t slot);
QVariant* KCheckableProxyModel_QBaseData(const KCheckableProxyModel* self, const QModelIndex* index, int role);
void KCheckableProxyModel_OnSetData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseSetData(KCheckableProxyModel* self, const QModelIndex* index, const QVariant* value, int role);
void KCheckableProxyModel_OnSetSourceModel(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseSetSourceModel(KCheckableProxyModel* self, QAbstractItemModel* sourceModel);
void KCheckableProxyModel_OnRoleNames(const KCheckableProxyModel* self, intptr_t slot);
libqt_map /* of int to libqt_string */ KCheckableProxyModel_QBaseRoleNames(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnSelect(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseSelect(KCheckableProxyModel* self, const QItemSelection* selection, int command);
int KCheckableProxyModel_ColumnCount(const KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_OnColumnCount(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseColumnCount(const KCheckableProxyModel* self, const QModelIndex* parent);
QModelIndex* KCheckableProxyModel_Index(const KCheckableProxyModel* self, int row, int column, const QModelIndex* parent);
void KCheckableProxyModel_OnIndex(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseIndex(const KCheckableProxyModel* self, int row, int column, const QModelIndex* parent);
QModelIndex* KCheckableProxyModel_MapFromSource(const KCheckableProxyModel* self, const QModelIndex* sourceIndex);
void KCheckableProxyModel_OnMapFromSource(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseMapFromSource(const KCheckableProxyModel* self, const QModelIndex* sourceIndex);
QModelIndex* KCheckableProxyModel_MapToSource(const KCheckableProxyModel* self, const QModelIndex* proxyIndex);
void KCheckableProxyModel_OnMapToSource(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseMapToSource(const KCheckableProxyModel* self, const QModelIndex* proxyIndex);
QModelIndex* KCheckableProxyModel_Parent(const KCheckableProxyModel* self, const QModelIndex* child);
void KCheckableProxyModel_OnParent(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseParent(const KCheckableProxyModel* self, const QModelIndex* child);
int KCheckableProxyModel_RowCount(const KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_OnRowCount(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseRowCount(const KCheckableProxyModel* self, const QModelIndex* parent);
QVariant* KCheckableProxyModel_HeaderData(const KCheckableProxyModel* self, int section, int orientation, int role);
void KCheckableProxyModel_OnHeaderData(const KCheckableProxyModel* self, intptr_t slot);
QVariant* KCheckableProxyModel_QBaseHeaderData(const KCheckableProxyModel* self, int section, int orientation, int role);
bool KCheckableProxyModel_DropMimeData(KCheckableProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KCheckableProxyModel_OnDropMimeData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseDropMimeData(KCheckableProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
QModelIndex* KCheckableProxyModel_Sibling(const KCheckableProxyModel* self, int row, int column, const QModelIndex* idx);
void KCheckableProxyModel_OnSibling(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseSibling(const KCheckableProxyModel* self, int row, int column, const QModelIndex* idx);
QItemSelection* KCheckableProxyModel_MapSelectionFromSource(const KCheckableProxyModel* self, const QItemSelection* selection);
void KCheckableProxyModel_OnMapSelectionFromSource(const KCheckableProxyModel* self, intptr_t slot);
QItemSelection* KCheckableProxyModel_QBaseMapSelectionFromSource(const KCheckableProxyModel* self, const QItemSelection* selection);
QItemSelection* KCheckableProxyModel_MapSelectionToSource(const KCheckableProxyModel* self, const QItemSelection* selection);
void KCheckableProxyModel_OnMapSelectionToSource(const KCheckableProxyModel* self, intptr_t slot);
QItemSelection* KCheckableProxyModel_QBaseMapSelectionToSource(const KCheckableProxyModel* self, const QItemSelection* selection);
libqt_list /* of QModelIndex* */ KCheckableProxyModel_Match(const KCheckableProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
void KCheckableProxyModel_OnMatch(const KCheckableProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KCheckableProxyModel_QBaseMatch(const KCheckableProxyModel* self, const QModelIndex* start, int role, const QVariant* value, int hits, int flags);
bool KCheckableProxyModel_InsertColumns(KCheckableProxyModel* self, int column, int count, const QModelIndex* parent);
void KCheckableProxyModel_OnInsertColumns(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseInsertColumns(KCheckableProxyModel* self, int column, int count, const QModelIndex* parent);
bool KCheckableProxyModel_InsertRows(KCheckableProxyModel* self, int row, int count, const QModelIndex* parent);
void KCheckableProxyModel_OnInsertRows(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseInsertRows(KCheckableProxyModel* self, int row, int count, const QModelIndex* parent);
bool KCheckableProxyModel_RemoveColumns(KCheckableProxyModel* self, int column, int count, const QModelIndex* parent);
void KCheckableProxyModel_OnRemoveColumns(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseRemoveColumns(KCheckableProxyModel* self, int column, int count, const QModelIndex* parent);
bool KCheckableProxyModel_RemoveRows(KCheckableProxyModel* self, int row, int count, const QModelIndex* parent);
void KCheckableProxyModel_OnRemoveRows(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseRemoveRows(KCheckableProxyModel* self, int row, int count, const QModelIndex* parent);
bool KCheckableProxyModel_MoveRows(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
void KCheckableProxyModel_OnMoveRows(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseMoveRows(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceRow, int count, const QModelIndex* destinationParent, int destinationChild);
bool KCheckableProxyModel_MoveColumns(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
void KCheckableProxyModel_OnMoveColumns(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseMoveColumns(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceColumn, int count, const QModelIndex* destinationParent, int destinationChild);
bool KCheckableProxyModel_Submit(KCheckableProxyModel* self);
void KCheckableProxyModel_OnSubmit(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseSubmit(KCheckableProxyModel* self);
void KCheckableProxyModel_Revert(KCheckableProxyModel* self);
void KCheckableProxyModel_OnRevert(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseRevert(KCheckableProxyModel* self);
libqt_map /* of int to QVariant* */ KCheckableProxyModel_ItemData(const KCheckableProxyModel* self, const QModelIndex* index);
void KCheckableProxyModel_OnItemData(const KCheckableProxyModel* self, intptr_t slot);
libqt_map /* of int to QVariant* */ KCheckableProxyModel_QBaseItemData(const KCheckableProxyModel* self, const QModelIndex* index);
bool KCheckableProxyModel_SetItemData(KCheckableProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
void KCheckableProxyModel_OnSetItemData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseSetItemData(KCheckableProxyModel* self, const QModelIndex* index, const libqt_map /* of int to QVariant* */ roles);
bool KCheckableProxyModel_SetHeaderData(KCheckableProxyModel* self, int section, int orientation, const QVariant* value, int role);
void KCheckableProxyModel_OnSetHeaderData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseSetHeaderData(KCheckableProxyModel* self, int section, int orientation, const QVariant* value, int role);
bool KCheckableProxyModel_ClearItemData(KCheckableProxyModel* self, const QModelIndex* index);
void KCheckableProxyModel_OnClearItemData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseClearItemData(KCheckableProxyModel* self, const QModelIndex* index);
QModelIndex* KCheckableProxyModel_Buddy(const KCheckableProxyModel* self, const QModelIndex* index);
void KCheckableProxyModel_OnBuddy(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseBuddy(const KCheckableProxyModel* self, const QModelIndex* index);
bool KCheckableProxyModel_CanFetchMore(const KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_OnCanFetchMore(const KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseCanFetchMore(const KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_FetchMore(KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_OnFetchMore(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseFetchMore(KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_Sort(KCheckableProxyModel* self, int column, int order);
void KCheckableProxyModel_OnSort(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseSort(KCheckableProxyModel* self, int column, int order);
QSize* KCheckableProxyModel_Span(const KCheckableProxyModel* self, const QModelIndex* index);
void KCheckableProxyModel_OnSpan(const KCheckableProxyModel* self, intptr_t slot);
QSize* KCheckableProxyModel_QBaseSpan(const KCheckableProxyModel* self, const QModelIndex* index);
bool KCheckableProxyModel_HasChildren(const KCheckableProxyModel* self, const QModelIndex* parent);
void KCheckableProxyModel_OnHasChildren(const KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseHasChildren(const KCheckableProxyModel* self, const QModelIndex* parent);
QMimeData* KCheckableProxyModel_MimeData(const KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
void KCheckableProxyModel_OnMimeData(const KCheckableProxyModel* self, intptr_t slot);
QMimeData* KCheckableProxyModel_QBaseMimeData(const KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ indexes);
bool KCheckableProxyModel_CanDropMimeData(const KCheckableProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
void KCheckableProxyModel_OnCanDropMimeData(const KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseCanDropMimeData(const KCheckableProxyModel* self, const QMimeData* data, int action, int row, int column, const QModelIndex* parent);
libqt_list /* of libqt_string */ KCheckableProxyModel_MimeTypes(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnMimeTypes(const KCheckableProxyModel* self, intptr_t slot);
libqt_list /* of libqt_string */ KCheckableProxyModel_QBaseMimeTypes(const KCheckableProxyModel* self);
int KCheckableProxyModel_SupportedDragActions(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnSupportedDragActions(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseSupportedDragActions(const KCheckableProxyModel* self);
int KCheckableProxyModel_SupportedDropActions(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnSupportedDropActions(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseSupportedDropActions(const KCheckableProxyModel* self);
void KCheckableProxyModel_MultiData(const KCheckableProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KCheckableProxyModel_OnMultiData(const KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseMultiData(const KCheckableProxyModel* self, const QModelIndex* index, QModelRoleDataSpan* roleDataSpan);
void KCheckableProxyModel_ResetInternalData(KCheckableProxyModel* self);
void KCheckableProxyModel_OnResetInternalData(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseResetInternalData(KCheckableProxyModel* self);
bool KCheckableProxyModel_Event(KCheckableProxyModel* self, QEvent* event);
void KCheckableProxyModel_OnEvent(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseEvent(KCheckableProxyModel* self, QEvent* event);
bool KCheckableProxyModel_EventFilter(KCheckableProxyModel* self, QObject* watched, QEvent* event);
void KCheckableProxyModel_OnEventFilter(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseEventFilter(KCheckableProxyModel* self, QObject* watched, QEvent* event);
void KCheckableProxyModel_TimerEvent(KCheckableProxyModel* self, QTimerEvent* event);
void KCheckableProxyModel_OnTimerEvent(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseTimerEvent(KCheckableProxyModel* self, QTimerEvent* event);
void KCheckableProxyModel_ChildEvent(KCheckableProxyModel* self, QChildEvent* event);
void KCheckableProxyModel_OnChildEvent(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseChildEvent(KCheckableProxyModel* self, QChildEvent* event);
void KCheckableProxyModel_CustomEvent(KCheckableProxyModel* self, QEvent* event);
void KCheckableProxyModel_OnCustomEvent(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseCustomEvent(KCheckableProxyModel* self, QEvent* event);
void KCheckableProxyModel_ConnectNotify(KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_OnConnectNotify(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseConnectNotify(KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_DisconnectNotify(KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_OnDisconnectNotify(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseDisconnectNotify(KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_SetHandleSourceLayoutChanges(KCheckableProxyModel* self, bool handleSourceLayoutChanges);
void KCheckableProxyModel_OnSetHandleSourceLayoutChanges(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseSetHandleSourceLayoutChanges(KCheckableProxyModel* self, bool handleSourceLayoutChanges);
void KCheckableProxyModel_SetHandleSourceDataChanges(KCheckableProxyModel* self, bool handleSourceDataChanges);
void KCheckableProxyModel_OnSetHandleSourceDataChanges(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseSetHandleSourceDataChanges(KCheckableProxyModel* self, bool handleSourceDataChanges);
QModelIndex* KCheckableProxyModel_CreateSourceIndex(const KCheckableProxyModel* self, int row, int col, void* internalPtr);
void KCheckableProxyModel_OnCreateSourceIndex(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseCreateSourceIndex(const KCheckableProxyModel* self, int row, int col, void* internalPtr);
QModelIndex* KCheckableProxyModel_CreateIndex(const KCheckableProxyModel* self, int row, int column);
void KCheckableProxyModel_OnCreateIndex(const KCheckableProxyModel* self, intptr_t slot);
QModelIndex* KCheckableProxyModel_QBaseCreateIndex(const KCheckableProxyModel* self, int row, int column);
void KCheckableProxyModel_EncodeData(const KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
void KCheckableProxyModel_OnEncodeData(const KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEncodeData(const KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ indexes, QDataStream* stream);
bool KCheckableProxyModel_DecodeData(KCheckableProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KCheckableProxyModel_OnDecodeData(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseDecodeData(KCheckableProxyModel* self, int row, int column, const QModelIndex* parent, QDataStream* stream);
void KCheckableProxyModel_BeginInsertRows(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_OnBeginInsertRows(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseBeginInsertRows(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_EndInsertRows(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndInsertRows(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndInsertRows(KCheckableProxyModel* self);
void KCheckableProxyModel_BeginRemoveRows(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_OnBeginRemoveRows(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseBeginRemoveRows(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_EndRemoveRows(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndRemoveRows(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndRemoveRows(KCheckableProxyModel* self);
bool KCheckableProxyModel_BeginMoveRows(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KCheckableProxyModel_OnBeginMoveRows(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseBeginMoveRows(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationRow);
void KCheckableProxyModel_EndMoveRows(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndMoveRows(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndMoveRows(KCheckableProxyModel* self);
void KCheckableProxyModel_BeginInsertColumns(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_OnBeginInsertColumns(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseBeginInsertColumns(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_EndInsertColumns(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndInsertColumns(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndInsertColumns(KCheckableProxyModel* self);
void KCheckableProxyModel_BeginRemoveColumns(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_OnBeginRemoveColumns(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseBeginRemoveColumns(KCheckableProxyModel* self, const QModelIndex* parent, int first, int last);
void KCheckableProxyModel_EndRemoveColumns(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndRemoveColumns(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndRemoveColumns(KCheckableProxyModel* self);
bool KCheckableProxyModel_BeginMoveColumns(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KCheckableProxyModel_OnBeginMoveColumns(KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseBeginMoveColumns(KCheckableProxyModel* self, const QModelIndex* sourceParent, int sourceFirst, int sourceLast, const QModelIndex* destinationParent, int destinationColumn);
void KCheckableProxyModel_EndMoveColumns(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndMoveColumns(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndMoveColumns(KCheckableProxyModel* self);
void KCheckableProxyModel_BeginResetModel(KCheckableProxyModel* self);
void KCheckableProxyModel_OnBeginResetModel(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseBeginResetModel(KCheckableProxyModel* self);
void KCheckableProxyModel_EndResetModel(KCheckableProxyModel* self);
void KCheckableProxyModel_OnEndResetModel(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseEndResetModel(KCheckableProxyModel* self);
void KCheckableProxyModel_ChangePersistentIndex(KCheckableProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KCheckableProxyModel_OnChangePersistentIndex(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseChangePersistentIndex(KCheckableProxyModel* self, const QModelIndex* from, const QModelIndex* to);
void KCheckableProxyModel_ChangePersistentIndexList(KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
void KCheckableProxyModel_OnChangePersistentIndexList(KCheckableProxyModel* self, intptr_t slot);
void KCheckableProxyModel_QBaseChangePersistentIndexList(KCheckableProxyModel* self, const libqt_list /* of QModelIndex* */ from, const libqt_list /* of QModelIndex* */ to);
libqt_list /* of QModelIndex* */ KCheckableProxyModel_PersistentIndexList(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnPersistentIndexList(const KCheckableProxyModel* self, intptr_t slot);
libqt_list /* of QModelIndex* */ KCheckableProxyModel_QBasePersistentIndexList(const KCheckableProxyModel* self);
QObject* KCheckableProxyModel_Sender(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnSender(const KCheckableProxyModel* self, intptr_t slot);
QObject* KCheckableProxyModel_QBaseSender(const KCheckableProxyModel* self);
int KCheckableProxyModel_SenderSignalIndex(const KCheckableProxyModel* self);
void KCheckableProxyModel_OnSenderSignalIndex(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseSenderSignalIndex(const KCheckableProxyModel* self);
int KCheckableProxyModel_Receivers(const KCheckableProxyModel* self, const char* signal);
void KCheckableProxyModel_OnReceivers(const KCheckableProxyModel* self, intptr_t slot);
int KCheckableProxyModel_QBaseReceivers(const KCheckableProxyModel* self, const char* signal);
bool KCheckableProxyModel_IsSignalConnected(const KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_OnIsSignalConnected(const KCheckableProxyModel* self, intptr_t slot);
bool KCheckableProxyModel_QBaseIsSignalConnected(const KCheckableProxyModel* self, const QMetaMethod* signal);
void KCheckableProxyModel_Delete(KCheckableProxyModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
